
Robot_MCU_Down.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ff0  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001174  08001174  00011174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001184  08001184  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001184  08001184  00011184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800118c  0800118c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800118c  0800118c  0001118c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001190  08001190  00011190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080011a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080011a0  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003100  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000c30  00000000  00000000  00023135  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000398  00000000  00000000  00023d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000320  00000000  00000000  00024100  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d7e9  00000000  00000000  00024420  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000351d  00000000  00000000  00041c09  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b3710  00000000  00000000  00045126  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f8836  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000cf0  00000000  00000000  000f88b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	0800115c 	.word	0x0800115c

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000010 	.word	0x20000010
 80001c0:	0800115c 	.word	0x0800115c

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001d8:	f000 b974 	b.w	80004c4 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	468c      	mov	ip, r1
 80001fa:	4604      	mov	r4, r0
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d14b      	bne.n	800029a <__udivmoddi4+0xa6>
 8000202:	428a      	cmp	r2, r1
 8000204:	4615      	mov	r5, r2
 8000206:	d967      	bls.n	80002d8 <__udivmoddi4+0xe4>
 8000208:	fab2 f282 	clz	r2, r2
 800020c:	b14a      	cbz	r2, 8000222 <__udivmoddi4+0x2e>
 800020e:	f1c2 0720 	rsb	r7, r2, #32
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	fa20 f707 	lsr.w	r7, r0, r7
 800021a:	4095      	lsls	r5, r2
 800021c:	ea47 0c03 	orr.w	ip, r7, r3
 8000220:	4094      	lsls	r4, r2
 8000222:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000226:	fbbc f7fe 	udiv	r7, ip, lr
 800022a:	fa1f f885 	uxth.w	r8, r5
 800022e:	fb0e c317 	mls	r3, lr, r7, ip
 8000232:	fb07 f908 	mul.w	r9, r7, r8
 8000236:	0c21      	lsrs	r1, r4, #16
 8000238:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023c:	4599      	cmp	r9, r3
 800023e:	d909      	bls.n	8000254 <__udivmoddi4+0x60>
 8000240:	18eb      	adds	r3, r5, r3
 8000242:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8000246:	f080 811c 	bcs.w	8000482 <__udivmoddi4+0x28e>
 800024a:	4599      	cmp	r9, r3
 800024c:	f240 8119 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000250:	3f02      	subs	r7, #2
 8000252:	442b      	add	r3, r5
 8000254:	eba3 0309 	sub.w	r3, r3, r9
 8000258:	fbb3 f0fe 	udiv	r0, r3, lr
 800025c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000260:	fb00 f108 	mul.w	r1, r0, r8
 8000264:	b2a4      	uxth	r4, r4
 8000266:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026a:	42a1      	cmp	r1, r4
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x8e>
 800026e:	192c      	adds	r4, r5, r4
 8000270:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000274:	f080 8107 	bcs.w	8000486 <__udivmoddi4+0x292>
 8000278:	42a1      	cmp	r1, r4
 800027a:	f240 8104 	bls.w	8000486 <__udivmoddi4+0x292>
 800027e:	3802      	subs	r0, #2
 8000280:	442c      	add	r4, r5
 8000282:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000286:	2700      	movs	r7, #0
 8000288:	1a64      	subs	r4, r4, r1
 800028a:	b11e      	cbz	r6, 8000294 <__udivmoddi4+0xa0>
 800028c:	2300      	movs	r3, #0
 800028e:	40d4      	lsrs	r4, r2
 8000290:	e9c6 4300 	strd	r4, r3, [r6]
 8000294:	4639      	mov	r1, r7
 8000296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029a:	428b      	cmp	r3, r1
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0xbe>
 800029e:	2e00      	cmp	r6, #0
 80002a0:	f000 80ec 	beq.w	800047c <__udivmoddi4+0x288>
 80002a4:	2700      	movs	r7, #0
 80002a6:	e9c6 0100 	strd	r0, r1, [r6]
 80002aa:	4638      	mov	r0, r7
 80002ac:	4639      	mov	r1, r7
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	fab3 f783 	clz	r7, r3
 80002b6:	2f00      	cmp	r7, #0
 80002b8:	d148      	bne.n	800034c <__udivmoddi4+0x158>
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xd0>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 80fb 	bhi.w	80004ba <__udivmoddi4+0x2c6>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	469c      	mov	ip, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d0e0      	beq.n	8000294 <__udivmoddi4+0xa0>
 80002d2:	e9c6 4c00 	strd	r4, ip, [r6]
 80002d6:	e7dd      	b.n	8000294 <__udivmoddi4+0xa0>
 80002d8:	b902      	cbnz	r2, 80002dc <__udivmoddi4+0xe8>
 80002da:	deff      	udf	#255	; 0xff
 80002dc:	fab2 f282 	clz	r2, r2
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f040 808f 	bne.w	8000404 <__udivmoddi4+0x210>
 80002e6:	2701      	movs	r7, #1
 80002e8:	1b49      	subs	r1, r1, r5
 80002ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002ee:	fa1f f985 	uxth.w	r9, r5
 80002f2:	fbb1 fef8 	udiv	lr, r1, r8
 80002f6:	fb08 111e 	mls	r1, r8, lr, r1
 80002fa:	fb09 f00e 	mul.w	r0, r9, lr
 80002fe:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000302:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000306:	4298      	cmp	r0, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x126>
 800030a:	18eb      	adds	r3, r5, r3
 800030c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x124>
 8000312:	4298      	cmp	r0, r3
 8000314:	f200 80cd 	bhi.w	80004b2 <__udivmoddi4+0x2be>
 8000318:	468e      	mov	lr, r1
 800031a:	1a1b      	subs	r3, r3, r0
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	fb09 f900 	mul.w	r9, r9, r0
 8000328:	b2a4      	uxth	r4, r4
 800032a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800032e:	45a1      	cmp	r9, r4
 8000330:	d907      	bls.n	8000342 <__udivmoddi4+0x14e>
 8000332:	192c      	adds	r4, r5, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000338:	d202      	bcs.n	8000340 <__udivmoddi4+0x14c>
 800033a:	45a1      	cmp	r9, r4
 800033c:	f200 80b6 	bhi.w	80004ac <__udivmoddi4+0x2b8>
 8000340:	4618      	mov	r0, r3
 8000342:	eba4 0409 	sub.w	r4, r4, r9
 8000346:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800034a:	e79e      	b.n	800028a <__udivmoddi4+0x96>
 800034c:	f1c7 0520 	rsb	r5, r7, #32
 8000350:	40bb      	lsls	r3, r7
 8000352:	fa22 fc05 	lsr.w	ip, r2, r5
 8000356:	ea4c 0c03 	orr.w	ip, ip, r3
 800035a:	fa21 f405 	lsr.w	r4, r1, r5
 800035e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000362:	fbb4 f9fe 	udiv	r9, r4, lr
 8000366:	fa1f f88c 	uxth.w	r8, ip
 800036a:	fb0e 4419 	mls	r4, lr, r9, r4
 800036e:	fa20 f305 	lsr.w	r3, r0, r5
 8000372:	40b9      	lsls	r1, r7
 8000374:	fb09 fa08 	mul.w	sl, r9, r8
 8000378:	4319      	orrs	r1, r3
 800037a:	0c0b      	lsrs	r3, r1, #16
 800037c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000380:	45a2      	cmp	sl, r4
 8000382:	fa02 f207 	lsl.w	r2, r2, r7
 8000386:	fa00 f307 	lsl.w	r3, r0, r7
 800038a:	d90b      	bls.n	80003a4 <__udivmoddi4+0x1b0>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000394:	f080 8088 	bcs.w	80004a8 <__udivmoddi4+0x2b4>
 8000398:	45a2      	cmp	sl, r4
 800039a:	f240 8085 	bls.w	80004a8 <__udivmoddi4+0x2b4>
 800039e:	f1a9 0902 	sub.w	r9, r9, #2
 80003a2:	4464      	add	r4, ip
 80003a4:	eba4 040a 	sub.w	r4, r4, sl
 80003a8:	fbb4 f0fe 	udiv	r0, r4, lr
 80003ac:	fb0e 4410 	mls	r4, lr, r0, r4
 80003b0:	fb00 fa08 	mul.w	sl, r0, r8
 80003b4:	b289      	uxth	r1, r1
 80003b6:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003ba:	45a2      	cmp	sl, r4
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x1dc>
 80003be:	eb1c 0404 	adds.w	r4, ip, r4
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003c6:	d26b      	bcs.n	80004a0 <__udivmoddi4+0x2ac>
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d969      	bls.n	80004a0 <__udivmoddi4+0x2ac>
 80003cc:	3802      	subs	r0, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d4:	fba0 8902 	umull	r8, r9, r0, r2
 80003d8:	eba4 040a 	sub.w	r4, r4, sl
 80003dc:	454c      	cmp	r4, r9
 80003de:	4641      	mov	r1, r8
 80003e0:	46ce      	mov	lr, r9
 80003e2:	d354      	bcc.n	800048e <__udivmoddi4+0x29a>
 80003e4:	d051      	beq.n	800048a <__udivmoddi4+0x296>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d069      	beq.n	80004be <__udivmoddi4+0x2ca>
 80003ea:	1a5a      	subs	r2, r3, r1
 80003ec:	eb64 040e 	sbc.w	r4, r4, lr
 80003f0:	fa04 f505 	lsl.w	r5, r4, r5
 80003f4:	fa22 f307 	lsr.w	r3, r2, r7
 80003f8:	40fc      	lsrs	r4, r7
 80003fa:	431d      	orrs	r5, r3
 80003fc:	e9c6 5400 	strd	r5, r4, [r6]
 8000400:	2700      	movs	r7, #0
 8000402:	e747      	b.n	8000294 <__udivmoddi4+0xa0>
 8000404:	4095      	lsls	r5, r2
 8000406:	f1c2 0320 	rsb	r3, r2, #32
 800040a:	fa21 f003 	lsr.w	r0, r1, r3
 800040e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000412:	fbb0 f7f8 	udiv	r7, r0, r8
 8000416:	fa1f f985 	uxth.w	r9, r5
 800041a:	fb08 0017 	mls	r0, r8, r7, r0
 800041e:	fa24 f303 	lsr.w	r3, r4, r3
 8000422:	4091      	lsls	r1, r2
 8000424:	fb07 fc09 	mul.w	ip, r7, r9
 8000428:	430b      	orrs	r3, r1
 800042a:	0c19      	lsrs	r1, r3, #16
 800042c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000430:	458c      	cmp	ip, r1
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x254>
 8000438:	1869      	adds	r1, r5, r1
 800043a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800043e:	d231      	bcs.n	80004a4 <__udivmoddi4+0x2b0>
 8000440:	458c      	cmp	ip, r1
 8000442:	d92f      	bls.n	80004a4 <__udivmoddi4+0x2b0>
 8000444:	3f02      	subs	r7, #2
 8000446:	4429      	add	r1, r5
 8000448:	eba1 010c 	sub.w	r1, r1, ip
 800044c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000450:	fb08 1c10 	mls	ip, r8, r0, r1
 8000454:	fb00 fe09 	mul.w	lr, r0, r9
 8000458:	b299      	uxth	r1, r3
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	458e      	cmp	lr, r1
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x27e>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000468:	d218      	bcs.n	800049c <__udivmoddi4+0x2a8>
 800046a:	458e      	cmp	lr, r1
 800046c:	d916      	bls.n	800049c <__udivmoddi4+0x2a8>
 800046e:	3802      	subs	r0, #2
 8000470:	4429      	add	r1, r5
 8000472:	eba1 010e 	sub.w	r1, r1, lr
 8000476:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047a:	e73a      	b.n	80002f2 <__udivmoddi4+0xfe>
 800047c:	4637      	mov	r7, r6
 800047e:	4630      	mov	r0, r6
 8000480:	e708      	b.n	8000294 <__udivmoddi4+0xa0>
 8000482:	460f      	mov	r7, r1
 8000484:	e6e6      	b.n	8000254 <__udivmoddi4+0x60>
 8000486:	4618      	mov	r0, r3
 8000488:	e6fb      	b.n	8000282 <__udivmoddi4+0x8e>
 800048a:	4543      	cmp	r3, r8
 800048c:	d2ab      	bcs.n	80003e6 <__udivmoddi4+0x1f2>
 800048e:	ebb8 0102 	subs.w	r1, r8, r2
 8000492:	eb69 020c 	sbc.w	r2, r9, ip
 8000496:	3801      	subs	r0, #1
 8000498:	4696      	mov	lr, r2
 800049a:	e7a4      	b.n	80003e6 <__udivmoddi4+0x1f2>
 800049c:	4618      	mov	r0, r3
 800049e:	e7e8      	b.n	8000472 <__udivmoddi4+0x27e>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e795      	b.n	80003d0 <__udivmoddi4+0x1dc>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e7cf      	b.n	8000448 <__udivmoddi4+0x254>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e77b      	b.n	80003a4 <__udivmoddi4+0x1b0>
 80004ac:	3802      	subs	r0, #2
 80004ae:	442c      	add	r4, r5
 80004b0:	e747      	b.n	8000342 <__udivmoddi4+0x14e>
 80004b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b6:	442b      	add	r3, r5
 80004b8:	e72f      	b.n	800031a <__udivmoddi4+0x126>
 80004ba:	4638      	mov	r0, r7
 80004bc:	e707      	b.n	80002ce <__udivmoddi4+0xda>
 80004be:	4637      	mov	r7, r6
 80004c0:	e6e8      	b.n	8000294 <__udivmoddi4+0xa0>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 f8da 	bl	8000684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f803 	bl	80004da <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f83c 	bl	8000550 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <main+0x10>

080004da <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	b092      	sub	sp, #72	; 0x48
 80004de:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e0:	f107 0318 	add.w	r3, r7, #24
 80004e4:	2230      	movs	r2, #48	; 0x30
 80004e6:	2100      	movs	r1, #0
 80004e8:	4618      	mov	r0, r3
 80004ea:	f000 fe2f 	bl	800114c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004fc:	2302      	movs	r3, #2
 80004fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000500:	2301      	movs	r3, #1
 8000502:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000504:	2310      	movs	r3, #16
 8000506:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000508:	2300      	movs	r3, #0
 800050a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050c:	f107 0318 	add.w	r3, r7, #24
 8000510:	4618      	mov	r0, r3
 8000512:	f000 fa09 	bl	8000928 <HAL_RCC_OscConfig>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800051c:	f000 f830 	bl	8000580 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000520:	230f      	movs	r3, #15
 8000522:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800052c:	2300      	movs	r3, #0
 800052e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	2100      	movs	r1, #0
 8000538:	4618      	mov	r0, r3
 800053a:	f000 fc45 	bl	8000dc8 <HAL_RCC_ClockConfig>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000544:	f000 f81c 	bl	8000580 <Error_Handler>
  }
}
 8000548:	bf00      	nop
 800054a:	3748      	adds	r7, #72	; 0x48
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	4b08      	ldr	r3, [pc, #32]	; (800057c <MX_GPIO_Init+0x2c>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a07      	ldr	r2, [pc, #28]	; (800057c <MX_GPIO_Init+0x2c>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b05      	ldr	r3, [pc, #20]	; (800057c <MX_GPIO_Init+0x2c>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	40023800 	.word	0x40023800

08000580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000584:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000586:	e7fe      	b.n	8000586 <Error_Handler+0x6>

08000588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <HAL_MspInit+0x48>)
 8000594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000596:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <HAL_MspInit+0x48>)
 8000598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059c:	6453      	str	r3, [r2, #68]	; 0x44
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <HAL_MspInit+0x48>)
 80005a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_MspInit+0x48>)
 80005b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b2:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_MspInit+0x48>)
 80005b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b8:	6413      	str	r3, [r2, #64]	; 0x40
 80005ba:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <HAL_MspInit+0x48>)
 80005bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr
 80005d0:	40023800 	.word	0x40023800

080005d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <NMI_Handler+0x4>

080005da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005de:	e7fe      	b.n	80005de <HardFault_Handler+0x4>

080005e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <MemManage_Handler+0x4>

080005e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005e6:	b480      	push	{r7}
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ea:	e7fe      	b.n	80005ea <BusFault_Handler+0x4>

080005ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <UsageFault_Handler+0x4>

080005f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005f6:	bf00      	nop
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bc80      	pop	{r7}
 80005fc:	4770      	bx	lr

080005fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr

0800060a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr

08000616 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800061a:	f000 f885 	bl	8000728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}

08000622 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr
	...

08000630 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000630:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000668 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000634:	480d      	ldr	r0, [pc, #52]	; (800066c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000636:	490e      	ldr	r1, [pc, #56]	; (8000670 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000638:	4a0e      	ldr	r2, [pc, #56]	; (8000674 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800063c:	e002      	b.n	8000644 <LoopCopyDataInit>

0800063e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000642:	3304      	adds	r3, #4

08000644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000648:	d3f9      	bcc.n	800063e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064a:	4a0b      	ldr	r2, [pc, #44]	; (8000678 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800064c:	4c0b      	ldr	r4, [pc, #44]	; (800067c <LoopFillZerobss+0x26>)
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000650:	e001      	b.n	8000656 <LoopFillZerobss>

08000652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000654:	3204      	adds	r2, #4

08000656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000658:	d3fb      	bcc.n	8000652 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800065a:	f7ff ffe2 	bl	8000622 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800065e:	f000 fd51 	bl	8001104 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000662:	f7ff ff31 	bl	80004c8 <main>
  bx  lr
 8000666:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000668:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800066c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000670:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000674:	08001194 	.word	0x08001194
  ldr r2, =_sbss
 8000678:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800067c:	2000002c 	.word	0x2000002c

08000680 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000680:	e7fe      	b.n	8000680 <ADC_IRQHandler>
	...

08000684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <HAL_Init+0x40>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a0d      	ldr	r2, [pc, #52]	; (80006c4 <HAL_Init+0x40>)
 800068e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000692:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000694:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <HAL_Init+0x40>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <HAL_Init+0x40>)
 800069a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800069e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <HAL_Init+0x40>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a07      	ldr	r2, [pc, #28]	; (80006c4 <HAL_Init+0x40>)
 80006a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ac:	2003      	movs	r0, #3
 80006ae:	f000 f907 	bl	80008c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006b2:	2000      	movs	r0, #0
 80006b4:	f000 f808 	bl	80006c8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80006b8:	f7ff ff66 	bl	8000588 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023c00 	.word	0x40023c00

080006c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <HAL_InitTick+0x54>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <HAL_InitTick+0x58>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	4619      	mov	r1, r3
 80006da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006de:	fbb3 f3f1 	udiv	r3, r3, r1
 80006e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 f911 	bl	800090e <HAL_SYSTICK_Config>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006f2:	2301      	movs	r3, #1
 80006f4:	e00e      	b.n	8000714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2b0f      	cmp	r3, #15
 80006fa:	d80a      	bhi.n	8000712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006fc:	2200      	movs	r2, #0
 80006fe:	6879      	ldr	r1, [r7, #4]
 8000700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000704:	f000 f8e7 	bl	80008d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000708:	4a06      	ldr	r2, [pc, #24]	; (8000724 <HAL_InitTick+0x5c>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800070e:	2300      	movs	r3, #0
 8000710:	e000      	b.n	8000714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000712:	2301      	movs	r3, #1
}
 8000714:	4618      	mov	r0, r3
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000000 	.word	0x20000000
 8000720:	20000008 	.word	0x20000008
 8000724:	20000004 	.word	0x20000004

08000728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <HAL_IncTick+0x1c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <HAL_IncTick+0x20>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4413      	add	r3, r2
 8000738:	4a03      	ldr	r2, [pc, #12]	; (8000748 <HAL_IncTick+0x20>)
 800073a:	6013      	str	r3, [r2, #0]
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr
 8000744:	20000008 	.word	0x20000008
 8000748:	20000028 	.word	0x20000028

0800074c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  return uwTick;
 8000750:	4b02      	ldr	r3, [pc, #8]	; (800075c <HAL_GetTick+0x10>)
 8000752:	681b      	ldr	r3, [r3, #0]
}
 8000754:	4618      	mov	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	20000028 	.word	0x20000028

08000760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f003 0307 	and.w	r3, r3, #7
 800076e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800077c:	4013      	ands	r3, r2
 800077e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800078c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000792:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	60d3      	str	r3, [r2, #12]
}
 8000798:	bf00      	nop
 800079a:	3714      	adds	r7, #20
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007ac:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <__NVIC_GetPriorityGrouping+0x18>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	0a1b      	lsrs	r3, r3, #8
 80007b2:	f003 0307 	and.w	r3, r3, #7
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	6039      	str	r1, [r7, #0]
 80007ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	db0a      	blt.n	80007ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	490c      	ldr	r1, [pc, #48]	; (8000810 <__NVIC_SetPriority+0x4c>)
 80007de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e2:	0112      	lsls	r2, r2, #4
 80007e4:	b2d2      	uxtb	r2, r2
 80007e6:	440b      	add	r3, r1
 80007e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007ec:	e00a      	b.n	8000804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4908      	ldr	r1, [pc, #32]	; (8000814 <__NVIC_SetPriority+0x50>)
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	f003 030f 	and.w	r3, r3, #15
 80007fa:	3b04      	subs	r3, #4
 80007fc:	0112      	lsls	r2, r2, #4
 80007fe:	b2d2      	uxtb	r2, r2
 8000800:	440b      	add	r3, r1
 8000802:	761a      	strb	r2, [r3, #24]
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000e100 	.word	0xe000e100
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000818:	b480      	push	{r7}
 800081a:	b089      	sub	sp, #36	; 0x24
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f003 0307 	and.w	r3, r3, #7
 800082a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	f1c3 0307 	rsb	r3, r3, #7
 8000832:	2b04      	cmp	r3, #4
 8000834:	bf28      	it	cs
 8000836:	2304      	movcs	r3, #4
 8000838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	3304      	adds	r3, #4
 800083e:	2b06      	cmp	r3, #6
 8000840:	d902      	bls.n	8000848 <NVIC_EncodePriority+0x30>
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	3b03      	subs	r3, #3
 8000846:	e000      	b.n	800084a <NVIC_EncodePriority+0x32>
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800084c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
 8000856:	43da      	mvns	r2, r3
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	401a      	ands	r2, r3
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000860:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	fa01 f303 	lsl.w	r3, r1, r3
 800086a:	43d9      	mvns	r1, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000870:	4313      	orrs	r3, r2
         );
}
 8000872:	4618      	mov	r0, r3
 8000874:	3724      	adds	r7, #36	; 0x24
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3b01      	subs	r3, #1
 8000888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800088c:	d301      	bcc.n	8000892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800088e:	2301      	movs	r3, #1
 8000890:	e00f      	b.n	80008b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <SysTick_Config+0x40>)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3b01      	subs	r3, #1
 8000898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800089a:	210f      	movs	r1, #15
 800089c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008a0:	f7ff ff90 	bl	80007c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <SysTick_Config+0x40>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008aa:	4b04      	ldr	r3, [pc, #16]	; (80008bc <SysTick_Config+0x40>)
 80008ac:	2207      	movs	r2, #7
 80008ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	e000e010 	.word	0xe000e010

080008c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff ff49 	bl	8000760 <__NVIC_SetPriorityGrouping>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b086      	sub	sp, #24
 80008da:	af00      	add	r7, sp, #0
 80008dc:	4603      	mov	r3, r0
 80008de:	60b9      	str	r1, [r7, #8]
 80008e0:	607a      	str	r2, [r7, #4]
 80008e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008e8:	f7ff ff5e 	bl	80007a8 <__NVIC_GetPriorityGrouping>
 80008ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	68b9      	ldr	r1, [r7, #8]
 80008f2:	6978      	ldr	r0, [r7, #20]
 80008f4:	f7ff ff90 	bl	8000818 <NVIC_EncodePriority>
 80008f8:	4602      	mov	r2, r0
 80008fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008fe:	4611      	mov	r1, r2
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ff5f 	bl	80007c4 <__NVIC_SetPriority>
}
 8000906:	bf00      	nop
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff ffb0 	bl	800087c <SysTick_Config>
 800091c:	4603      	mov	r3, r0
}
 800091e:	4618      	mov	r0, r3
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d101      	bne.n	800093a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	e237      	b.n	8000daa <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	2b00      	cmp	r3, #0
 8000944:	d050      	beq.n	80009e8 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000946:	4ba3      	ldr	r3, [pc, #652]	; (8000bd4 <HAL_RCC_OscConfig+0x2ac>)
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	f003 030c 	and.w	r3, r3, #12
 800094e:	2b04      	cmp	r3, #4
 8000950:	d00c      	beq.n	800096c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000952:	4ba0      	ldr	r3, [pc, #640]	; (8000bd4 <HAL_RCC_OscConfig+0x2ac>)
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800095a:	2b08      	cmp	r3, #8
 800095c:	d112      	bne.n	8000984 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800095e:	4b9d      	ldr	r3, [pc, #628]	; (8000bd4 <HAL_RCC_OscConfig+0x2ac>)
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000966:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800096a:	d10b      	bne.n	8000984 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800096c:	4b99      	ldr	r3, [pc, #612]	; (8000bd4 <HAL_RCC_OscConfig+0x2ac>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000974:	2b00      	cmp	r3, #0
 8000976:	d036      	beq.n	80009e6 <HAL_RCC_OscConfig+0xbe>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d132      	bne.n	80009e6 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8000980:	2301      	movs	r3, #1
 8000982:	e212      	b.n	8000daa <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	685a      	ldr	r2, [r3, #4]
 8000988:	4b93      	ldr	r3, [pc, #588]	; (8000bd8 <HAL_RCC_OscConfig+0x2b0>)
 800098a:	b2d2      	uxtb	r2, r2
 800098c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d013      	beq.n	80009be <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000996:	f7ff fed9 	bl	800074c <HAL_GetTick>
 800099a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800099c:	e008      	b.n	80009b0 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800099e:	f7ff fed5 	bl	800074c <HAL_GetTick>
 80009a2:	4602      	mov	r2, r0
 80009a4:	6a3b      	ldr	r3, [r7, #32]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	2b64      	cmp	r3, #100	; 0x64
 80009aa:	d901      	bls.n	80009b0 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80009ac:	2303      	movs	r3, #3
 80009ae:	e1fc      	b.n	8000daa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009b0:	4b88      	ldr	r3, [pc, #544]	; (8000bd4 <HAL_RCC_OscConfig+0x2ac>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d0f0      	beq.n	800099e <HAL_RCC_OscConfig+0x76>
 80009bc:	e014      	b.n	80009e8 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009be:	f7ff fec5 	bl	800074c <HAL_GetTick>
 80009c2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009c4:	e008      	b.n	80009d8 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009c6:	f7ff fec1 	bl	800074c <HAL_GetTick>
 80009ca:	4602      	mov	r2, r0
 80009cc:	6a3b      	ldr	r3, [r7, #32]
 80009ce:	1ad3      	subs	r3, r2, r3
 80009d0:	2b64      	cmp	r3, #100	; 0x64
 80009d2:	d901      	bls.n	80009d8 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80009d4:	2303      	movs	r3, #3
 80009d6:	e1e8      	b.n	8000daa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009d8:	4b7e      	ldr	r3, [pc, #504]	; (8000bd4 <HAL_RCC_OscConfig+0x2ac>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d1f0      	bne.n	80009c6 <HAL_RCC_OscConfig+0x9e>
 80009e4:	e000      	b.n	80009e8 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f003 0302 	and.w	r3, r3, #2
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d077      	beq.n	8000ae4 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009f4:	4b77      	ldr	r3, [pc, #476]	; (8000bd4 <HAL_RCC_OscConfig+0x2ac>)
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	f003 030c 	and.w	r3, r3, #12
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d00b      	beq.n	8000a18 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a00:	4b74      	ldr	r3, [pc, #464]	; (8000bd4 <HAL_RCC_OscConfig+0x2ac>)
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a08:	2b08      	cmp	r3, #8
 8000a0a:	d126      	bne.n	8000a5a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a0c:	4b71      	ldr	r3, [pc, #452]	; (8000bd4 <HAL_RCC_OscConfig+0x2ac>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d120      	bne.n	8000a5a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a18:	4b6e      	ldr	r3, [pc, #440]	; (8000bd4 <HAL_RCC_OscConfig+0x2ac>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f003 0302 	and.w	r3, r3, #2
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d005      	beq.n	8000a30 <HAL_RCC_OscConfig+0x108>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d001      	beq.n	8000a30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e1bc      	b.n	8000daa <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a30:	4b68      	ldr	r3, [pc, #416]	; (8000bd4 <HAL_RCC_OscConfig+0x2ac>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	691b      	ldr	r3, [r3, #16]
 8000a3c:	21f8      	movs	r1, #248	; 0xf8
 8000a3e:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a40:	69b9      	ldr	r1, [r7, #24]
 8000a42:	fa91 f1a1 	rbit	r1, r1
 8000a46:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a48:	6979      	ldr	r1, [r7, #20]
 8000a4a:	fab1 f181 	clz	r1, r1
 8000a4e:	b2c9      	uxtb	r1, r1
 8000a50:	408b      	lsls	r3, r1
 8000a52:	4960      	ldr	r1, [pc, #384]	; (8000bd4 <HAL_RCC_OscConfig+0x2ac>)
 8000a54:	4313      	orrs	r3, r2
 8000a56:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a58:	e044      	b.n	8000ae4 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	68db      	ldr	r3, [r3, #12]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d02a      	beq.n	8000ab8 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a62:	4b5e      	ldr	r3, [pc, #376]	; (8000bdc <HAL_RCC_OscConfig+0x2b4>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a68:	f7ff fe70 	bl	800074c <HAL_GetTick>
 8000a6c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a6e:	e008      	b.n	8000a82 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a70:	f7ff fe6c 	bl	800074c <HAL_GetTick>
 8000a74:	4602      	mov	r2, r0
 8000a76:	6a3b      	ldr	r3, [r7, #32]
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	d901      	bls.n	8000a82 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	e193      	b.n	8000daa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a82:	4b54      	ldr	r3, [pc, #336]	; (8000bd4 <HAL_RCC_OscConfig+0x2ac>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d0f0      	beq.n	8000a70 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a8e:	4b51      	ldr	r3, [pc, #324]	; (8000bd4 <HAL_RCC_OscConfig+0x2ac>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	691b      	ldr	r3, [r3, #16]
 8000a9a:	21f8      	movs	r1, #248	; 0xf8
 8000a9c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a9e:	6939      	ldr	r1, [r7, #16]
 8000aa0:	fa91 f1a1 	rbit	r1, r1
 8000aa4:	60f9      	str	r1, [r7, #12]
  return result;
 8000aa6:	68f9      	ldr	r1, [r7, #12]
 8000aa8:	fab1 f181 	clz	r1, r1
 8000aac:	b2c9      	uxtb	r1, r1
 8000aae:	408b      	lsls	r3, r1
 8000ab0:	4948      	ldr	r1, [pc, #288]	; (8000bd4 <HAL_RCC_OscConfig+0x2ac>)
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	600b      	str	r3, [r1, #0]
 8000ab6:	e015      	b.n	8000ae4 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ab8:	4b48      	ldr	r3, [pc, #288]	; (8000bdc <HAL_RCC_OscConfig+0x2b4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000abe:	f7ff fe45 	bl	800074c <HAL_GetTick>
 8000ac2:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ac4:	e008      	b.n	8000ad8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ac6:	f7ff fe41 	bl	800074c <HAL_GetTick>
 8000aca:	4602      	mov	r2, r0
 8000acc:	6a3b      	ldr	r3, [r7, #32]
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d901      	bls.n	8000ad8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	e168      	b.n	8000daa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ad8:	4b3e      	ldr	r3, [pc, #248]	; (8000bd4 <HAL_RCC_OscConfig+0x2ac>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f003 0302 	and.w	r3, r3, #2
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d1f0      	bne.n	8000ac6 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f003 0308 	and.w	r3, r3, #8
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d030      	beq.n	8000b52 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	695b      	ldr	r3, [r3, #20]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d016      	beq.n	8000b26 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000af8:	4b39      	ldr	r3, [pc, #228]	; (8000be0 <HAL_RCC_OscConfig+0x2b8>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000afe:	f7ff fe25 	bl	800074c <HAL_GetTick>
 8000b02:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b04:	e008      	b.n	8000b18 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b06:	f7ff fe21 	bl	800074c <HAL_GetTick>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	6a3b      	ldr	r3, [r7, #32]
 8000b0e:	1ad3      	subs	r3, r2, r3
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d901      	bls.n	8000b18 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8000b14:	2303      	movs	r3, #3
 8000b16:	e148      	b.n	8000daa <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b18:	4b2e      	ldr	r3, [pc, #184]	; (8000bd4 <HAL_RCC_OscConfig+0x2ac>)
 8000b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000b1c:	f003 0302 	and.w	r3, r3, #2
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d0f0      	beq.n	8000b06 <HAL_RCC_OscConfig+0x1de>
 8000b24:	e015      	b.n	8000b52 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000b26:	4b2e      	ldr	r3, [pc, #184]	; (8000be0 <HAL_RCC_OscConfig+0x2b8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b2c:	f7ff fe0e 	bl	800074c <HAL_GetTick>
 8000b30:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b32:	e008      	b.n	8000b46 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b34:	f7ff fe0a 	bl	800074c <HAL_GetTick>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	6a3b      	ldr	r3, [r7, #32]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d901      	bls.n	8000b46 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8000b42:	2303      	movs	r3, #3
 8000b44:	e131      	b.n	8000daa <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b46:	4b23      	ldr	r3, [pc, #140]	; (8000bd4 <HAL_RCC_OscConfig+0x2ac>)
 8000b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d1f0      	bne.n	8000b34 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f000 8088 	beq.w	8000c70 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b66:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <HAL_RCC_OscConfig+0x2ac>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d110      	bne.n	8000b94 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <HAL_RCC_OscConfig+0x2ac>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	4a16      	ldr	r2, [pc, #88]	; (8000bd4 <HAL_RCC_OscConfig+0x2ac>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	6413      	str	r3, [r2, #64]	; 0x40
 8000b82:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <HAL_RCC_OscConfig+0x2ac>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <HAL_RCC_OscConfig+0x2bc>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <HAL_RCC_OscConfig+0x2bc>)
 8000b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b9e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ba0:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <HAL_RCC_OscConfig+0x2bc>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d123      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000bac:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <HAL_RCC_OscConfig+0x2bc>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0c      	ldr	r2, [pc, #48]	; (8000be4 <HAL_RCC_OscConfig+0x2bc>)
 8000bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000bb8:	f7ff fdc8 	bl	800074c <HAL_GetTick>
 8000bbc:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bbe:	e013      	b.n	8000be8 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000bc0:	f7ff fdc4 	bl	800074c <HAL_GetTick>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	6a3b      	ldr	r3, [r7, #32]
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d90c      	bls.n	8000be8 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	e0eb      	b.n	8000daa <HAL_RCC_OscConfig+0x482>
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40023802 	.word	0x40023802
 8000bdc:	42470000 	.word	0x42470000
 8000be0:	42470e80 	.word	0x42470e80
 8000be4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000be8:	4b72      	ldr	r3, [pc, #456]	; (8000db4 <HAL_RCC_OscConfig+0x48c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d0e5      	beq.n	8000bc0 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	689a      	ldr	r2, [r3, #8]
 8000bf8:	4b6f      	ldr	r3, [pc, #444]	; (8000db8 <HAL_RCC_OscConfig+0x490>)
 8000bfa:	b2d2      	uxtb	r2, r2
 8000bfc:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d015      	beq.n	8000c32 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c06:	f7ff fda1 	bl	800074c <HAL_GetTick>
 8000c0a:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c0c:	e00a      	b.n	8000c24 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c0e:	f7ff fd9d 	bl	800074c <HAL_GetTick>
 8000c12:	4602      	mov	r2, r0
 8000c14:	6a3b      	ldr	r3, [r7, #32]
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d901      	bls.n	8000c24 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8000c20:	2303      	movs	r3, #3
 8000c22:	e0c2      	b.n	8000daa <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c24:	4b65      	ldr	r3, [pc, #404]	; (8000dbc <HAL_RCC_OscConfig+0x494>)
 8000c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c28:	f003 0302 	and.w	r3, r3, #2
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d0ee      	beq.n	8000c0e <HAL_RCC_OscConfig+0x2e6>
 8000c30:	e014      	b.n	8000c5c <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c32:	f7ff fd8b 	bl	800074c <HAL_GetTick>
 8000c36:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c38:	e00a      	b.n	8000c50 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c3a:	f7ff fd87 	bl	800074c <HAL_GetTick>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	6a3b      	ldr	r3, [r7, #32]
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d901      	bls.n	8000c50 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	e0ac      	b.n	8000daa <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c50:	4b5a      	ldr	r3, [pc, #360]	; (8000dbc <HAL_RCC_OscConfig+0x494>)
 8000c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c54:	f003 0302 	and.w	r3, r3, #2
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d1ee      	bne.n	8000c3a <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d105      	bne.n	8000c70 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c64:	4b55      	ldr	r3, [pc, #340]	; (8000dbc <HAL_RCC_OscConfig+0x494>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	4a54      	ldr	r2, [pc, #336]	; (8000dbc <HAL_RCC_OscConfig+0x494>)
 8000c6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	f000 8097 	beq.w	8000da8 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000c7a:	4b50      	ldr	r3, [pc, #320]	; (8000dbc <HAL_RCC_OscConfig+0x494>)
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	f003 030c 	and.w	r3, r3, #12
 8000c82:	2b08      	cmp	r3, #8
 8000c84:	d061      	beq.n	8000d4a <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d146      	bne.n	8000d1c <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c8e:	4b4c      	ldr	r3, [pc, #304]	; (8000dc0 <HAL_RCC_OscConfig+0x498>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c94:	f7ff fd5a 	bl	800074c <HAL_GetTick>
 8000c98:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c9a:	e008      	b.n	8000cae <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c9c:	f7ff fd56 	bl	800074c <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	6a3b      	ldr	r3, [r7, #32]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b64      	cmp	r3, #100	; 0x64
 8000ca8:	d901      	bls.n	8000cae <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e07d      	b.n	8000daa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000cae:	4b43      	ldr	r3, [pc, #268]	; (8000dbc <HAL_RCC_OscConfig+0x494>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1f0      	bne.n	8000c9c <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cba:	4b40      	ldr	r3, [pc, #256]	; (8000dbc <HAL_RCC_OscConfig+0x494>)
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	4b41      	ldr	r3, [pc, #260]	; (8000dc4 <HAL_RCC_OscConfig+0x49c>)
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	69d1      	ldr	r1, [r2, #28]
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	6a12      	ldr	r2, [r2, #32]
 8000cca:	4311      	orrs	r1, r2
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000cd0:	0192      	lsls	r2, r2, #6
 8000cd2:	4311      	orrs	r1, r2
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000cd8:	0612      	lsls	r2, r2, #24
 8000cda:	4311      	orrs	r1, r2
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000ce0:	0852      	lsrs	r2, r2, #1
 8000ce2:	3a01      	subs	r2, #1
 8000ce4:	0412      	lsls	r2, r2, #16
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	4934      	ldr	r1, [pc, #208]	; (8000dbc <HAL_RCC_OscConfig+0x494>)
 8000cea:	4313      	orrs	r3, r2
 8000cec:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000cee:	4b34      	ldr	r3, [pc, #208]	; (8000dc0 <HAL_RCC_OscConfig+0x498>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf4:	f7ff fd2a 	bl	800074c <HAL_GetTick>
 8000cf8:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cfa:	e008      	b.n	8000d0e <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cfc:	f7ff fd26 	bl	800074c <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	6a3b      	ldr	r3, [r7, #32]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	2b64      	cmp	r3, #100	; 0x64
 8000d08:	d901      	bls.n	8000d0e <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	e04d      	b.n	8000daa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d0e:	4b2b      	ldr	r3, [pc, #172]	; (8000dbc <HAL_RCC_OscConfig+0x494>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d0f0      	beq.n	8000cfc <HAL_RCC_OscConfig+0x3d4>
 8000d1a:	e045      	b.n	8000da8 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d1c:	4b28      	ldr	r3, [pc, #160]	; (8000dc0 <HAL_RCC_OscConfig+0x498>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d22:	f7ff fd13 	bl	800074c <HAL_GetTick>
 8000d26:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d28:	e008      	b.n	8000d3c <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d2a:	f7ff fd0f 	bl	800074c <HAL_GetTick>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	6a3b      	ldr	r3, [r7, #32]
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	2b64      	cmp	r3, #100	; 0x64
 8000d36:	d901      	bls.n	8000d3c <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	e036      	b.n	8000daa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <HAL_RCC_OscConfig+0x494>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d1f0      	bne.n	8000d2a <HAL_RCC_OscConfig+0x402>
 8000d48:	e02e      	b.n	8000da8 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d101      	bne.n	8000d56 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e029      	b.n	8000daa <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <HAL_RCC_OscConfig+0x494>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d11c      	bne.n	8000da4 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d115      	bne.n	8000da4 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	099b      	lsrs	r3, r3, #6
 8000d7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d10d      	bne.n	8000da4 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d106      	bne.n	8000da4 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d001      	beq.n	8000da8 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e000      	b.n	8000daa <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3728      	adds	r7, #40	; 0x28
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40007000 	.word	0x40007000
 8000db8:	40023870 	.word	0x40023870
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	42470060 	.word	0x42470060
 8000dc4:	f0bc8000 	.word	0xf0bc8000

08000dc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d101      	bne.n	8000ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e0d2      	b.n	8000f82 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ddc:	4b6b      	ldr	r3, [pc, #428]	; (8000f8c <HAL_RCC_ClockConfig+0x1c4>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f003 030f 	and.w	r3, r3, #15
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d90c      	bls.n	8000e04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dea:	4b68      	ldr	r3, [pc, #416]	; (8000f8c <HAL_RCC_ClockConfig+0x1c4>)
 8000dec:	683a      	ldr	r2, [r7, #0]
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000df2:	4b66      	ldr	r3, [pc, #408]	; (8000f8c <HAL_RCC_ClockConfig+0x1c4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	683a      	ldr	r2, [r7, #0]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d001      	beq.n	8000e04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e0be      	b.n	8000f82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 0302 	and.w	r3, r3, #2
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d020      	beq.n	8000e52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f003 0304 	and.w	r3, r3, #4
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d005      	beq.n	8000e28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e1c:	4b5c      	ldr	r3, [pc, #368]	; (8000f90 <HAL_RCC_ClockConfig+0x1c8>)
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	4a5b      	ldr	r2, [pc, #364]	; (8000f90 <HAL_RCC_ClockConfig+0x1c8>)
 8000e22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000e26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f003 0308 	and.w	r3, r3, #8
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d005      	beq.n	8000e40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8000e34:	4b56      	ldr	r3, [pc, #344]	; (8000f90 <HAL_RCC_ClockConfig+0x1c8>)
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	4a55      	ldr	r2, [pc, #340]	; (8000f90 <HAL_RCC_ClockConfig+0x1c8>)
 8000e3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000e3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e40:	4b53      	ldr	r3, [pc, #332]	; (8000f90 <HAL_RCC_ClockConfig+0x1c8>)
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	4950      	ldr	r1, [pc, #320]	; (8000f90 <HAL_RCC_ClockConfig+0x1c8>)
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d040      	beq.n	8000ee0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d107      	bne.n	8000e76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e66:	4b4a      	ldr	r3, [pc, #296]	; (8000f90 <HAL_RCC_ClockConfig+0x1c8>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d115      	bne.n	8000e9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e085      	b.n	8000f82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d107      	bne.n	8000e8e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e7e:	4b44      	ldr	r3, [pc, #272]	; (8000f90 <HAL_RCC_ClockConfig+0x1c8>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d109      	bne.n	8000e9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e079      	b.n	8000f82 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e8e:	4b40      	ldr	r3, [pc, #256]	; (8000f90 <HAL_RCC_ClockConfig+0x1c8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e071      	b.n	8000f82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e9e:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <HAL_RCC_ClockConfig+0x1c8>)
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	f023 0203 	bic.w	r2, r3, #3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	4939      	ldr	r1, [pc, #228]	; (8000f90 <HAL_RCC_ClockConfig+0x1c8>)
 8000eac:	4313      	orrs	r3, r2
 8000eae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000eb0:	f7ff fc4c 	bl	800074c <HAL_GetTick>
 8000eb4:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000eb6:	e00a      	b.n	8000ece <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000eb8:	f7ff fc48 	bl	800074c <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d901      	bls.n	8000ece <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e059      	b.n	8000f82 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ece:	4b30      	ldr	r3, [pc, #192]	; (8000f90 <HAL_RCC_ClockConfig+0x1c8>)
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	f003 020c 	and.w	r2, r3, #12
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d1eb      	bne.n	8000eb8 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000ee0:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <HAL_RCC_ClockConfig+0x1c4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f003 030f 	and.w	r3, r3, #15
 8000ee8:	683a      	ldr	r2, [r7, #0]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d20c      	bcs.n	8000f08 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eee:	4b27      	ldr	r3, [pc, #156]	; (8000f8c <HAL_RCC_ClockConfig+0x1c4>)
 8000ef0:	683a      	ldr	r2, [r7, #0]
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ef6:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <HAL_RCC_ClockConfig+0x1c4>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	683a      	ldr	r2, [r7, #0]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d001      	beq.n	8000f08 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e03c      	b.n	8000f82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d008      	beq.n	8000f26 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f14:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <HAL_RCC_ClockConfig+0x1c8>)
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	491b      	ldr	r1, [pc, #108]	; (8000f90 <HAL_RCC_ClockConfig+0x1c8>)
 8000f22:	4313      	orrs	r3, r2
 8000f24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0308 	and.w	r3, r3, #8
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d009      	beq.n	8000f46 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f32:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <HAL_RCC_ClockConfig+0x1c8>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	4913      	ldr	r1, [pc, #76]	; (8000f90 <HAL_RCC_ClockConfig+0x1c8>)
 8000f42:	4313      	orrs	r3, r2
 8000f44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000f46:	f000 f82b 	bl	8000fa0 <HAL_RCC_GetSysClockFreq>
 8000f4a:	4601      	mov	r1, r0
 8000f4c:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <HAL_RCC_ClockConfig+0x1c8>)
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f54:	22f0      	movs	r2, #240	; 0xf0
 8000f56:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	fa92 f2a2 	rbit	r2, r2
 8000f5e:	60fa      	str	r2, [r7, #12]
  return result;
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	fab2 f282 	clz	r2, r2
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	40d3      	lsrs	r3, r2
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <HAL_RCC_ClockConfig+0x1cc>)
 8000f6c:	5cd3      	ldrb	r3, [r2, r3]
 8000f6e:	fa21 f303 	lsr.w	r3, r1, r3
 8000f72:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <HAL_RCC_ClockConfig+0x1d0>)
 8000f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <HAL_RCC_ClockConfig+0x1d4>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fba4 	bl	80006c8 <HAL_InitTick>

  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40023c00 	.word	0x40023c00
 8000f90:	40023800 	.word	0x40023800
 8000f94:	08001174 	.word	0x08001174
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	20000004 	.word	0x20000004

08000fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	2300      	movs	r3, #0
 8000fb0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fb6:	4b50      	ldr	r3, [pc, #320]	; (80010f8 <HAL_RCC_GetSysClockFreq+0x158>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 030c 	and.w	r3, r3, #12
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	d007      	beq.n	8000fd2 <HAL_RCC_GetSysClockFreq+0x32>
 8000fc2:	2b08      	cmp	r3, #8
 8000fc4:	d008      	beq.n	8000fd8 <HAL_RCC_GetSysClockFreq+0x38>
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f040 808d 	bne.w	80010e6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000fcc:	4b4b      	ldr	r3, [pc, #300]	; (80010fc <HAL_RCC_GetSysClockFreq+0x15c>)
 8000fce:	60bb      	str	r3, [r7, #8]
       break;
 8000fd0:	e08c      	b.n	80010ec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000fd2:	4b4b      	ldr	r3, [pc, #300]	; (8001100 <HAL_RCC_GetSysClockFreq+0x160>)
 8000fd4:	60bb      	str	r3, [r7, #8]
      break;
 8000fd6:	e089      	b.n	80010ec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fd8:	4b47      	ldr	r3, [pc, #284]	; (80010f8 <HAL_RCC_GetSysClockFreq+0x158>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fe0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fe2:	4b45      	ldr	r3, [pc, #276]	; (80010f8 <HAL_RCC_GetSysClockFreq+0x158>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d023      	beq.n	8001036 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fee:	4b42      	ldr	r3, [pc, #264]	; (80010f8 <HAL_RCC_GetSysClockFreq+0x158>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	099b      	lsrs	r3, r3, #6
 8000ff4:	f04f 0400 	mov.w	r4, #0
 8000ff8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000ffc:	f04f 0200 	mov.w	r2, #0
 8001000:	ea03 0501 	and.w	r5, r3, r1
 8001004:	ea04 0602 	and.w	r6, r4, r2
 8001008:	4a3d      	ldr	r2, [pc, #244]	; (8001100 <HAL_RCC_GetSysClockFreq+0x160>)
 800100a:	fb02 f106 	mul.w	r1, r2, r6
 800100e:	2200      	movs	r2, #0
 8001010:	fb02 f205 	mul.w	r2, r2, r5
 8001014:	440a      	add	r2, r1
 8001016:	493a      	ldr	r1, [pc, #232]	; (8001100 <HAL_RCC_GetSysClockFreq+0x160>)
 8001018:	fba5 0101 	umull	r0, r1, r5, r1
 800101c:	1853      	adds	r3, r2, r1
 800101e:	4619      	mov	r1, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f04f 0400 	mov.w	r4, #0
 8001026:	461a      	mov	r2, r3
 8001028:	4623      	mov	r3, r4
 800102a:	f7ff f8cb 	bl	80001c4 <__aeabi_uldivmod>
 800102e:	4603      	mov	r3, r0
 8001030:	460c      	mov	r4, r1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	e049      	b.n	80010ca <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001036:	4b30      	ldr	r3, [pc, #192]	; (80010f8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	099b      	lsrs	r3, r3, #6
 800103c:	f04f 0400 	mov.w	r4, #0
 8001040:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	ea03 0501 	and.w	r5, r3, r1
 800104c:	ea04 0602 	and.w	r6, r4, r2
 8001050:	4629      	mov	r1, r5
 8001052:	4632      	mov	r2, r6
 8001054:	f04f 0300 	mov.w	r3, #0
 8001058:	f04f 0400 	mov.w	r4, #0
 800105c:	0154      	lsls	r4, r2, #5
 800105e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001062:	014b      	lsls	r3, r1, #5
 8001064:	4619      	mov	r1, r3
 8001066:	4622      	mov	r2, r4
 8001068:	1b49      	subs	r1, r1, r5
 800106a:	eb62 0206 	sbc.w	r2, r2, r6
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	f04f 0400 	mov.w	r4, #0
 8001076:	0194      	lsls	r4, r2, #6
 8001078:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800107c:	018b      	lsls	r3, r1, #6
 800107e:	1a5b      	subs	r3, r3, r1
 8001080:	eb64 0402 	sbc.w	r4, r4, r2
 8001084:	f04f 0100 	mov.w	r1, #0
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	00e2      	lsls	r2, r4, #3
 800108e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001092:	00d9      	lsls	r1, r3, #3
 8001094:	460b      	mov	r3, r1
 8001096:	4614      	mov	r4, r2
 8001098:	195b      	adds	r3, r3, r5
 800109a:	eb44 0406 	adc.w	r4, r4, r6
 800109e:	f04f 0100 	mov.w	r1, #0
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	02a2      	lsls	r2, r4, #10
 80010a8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80010ac:	0299      	lsls	r1, r3, #10
 80010ae:	460b      	mov	r3, r1
 80010b0:	4614      	mov	r4, r2
 80010b2:	4618      	mov	r0, r3
 80010b4:	4621      	mov	r1, r4
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f04f 0400 	mov.w	r4, #0
 80010bc:	461a      	mov	r2, r3
 80010be:	4623      	mov	r3, r4
 80010c0:	f7ff f880 	bl	80001c4 <__aeabi_uldivmod>
 80010c4:	4603      	mov	r3, r0
 80010c6:	460c      	mov	r4, r1
 80010c8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <HAL_RCC_GetSysClockFreq+0x158>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	0c1b      	lsrs	r3, r3, #16
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	3301      	adds	r3, #1
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e2:	60bb      	str	r3, [r7, #8]
      break;
 80010e4:	e002      	b.n	80010ec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80010e6:	4b05      	ldr	r3, [pc, #20]	; (80010fc <HAL_RCC_GetSysClockFreq+0x15c>)
 80010e8:	60bb      	str	r3, [r7, #8]
      break;
 80010ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80010ec:	68bb      	ldr	r3, [r7, #8]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800
 80010fc:	00f42400 	.word	0x00f42400
 8001100:	017d7840 	.word	0x017d7840

08001104 <__libc_init_array>:
 8001104:	b570      	push	{r4, r5, r6, lr}
 8001106:	2500      	movs	r5, #0
 8001108:	4e0c      	ldr	r6, [pc, #48]	; (800113c <__libc_init_array+0x38>)
 800110a:	4c0d      	ldr	r4, [pc, #52]	; (8001140 <__libc_init_array+0x3c>)
 800110c:	1ba4      	subs	r4, r4, r6
 800110e:	10a4      	asrs	r4, r4, #2
 8001110:	42a5      	cmp	r5, r4
 8001112:	d109      	bne.n	8001128 <__libc_init_array+0x24>
 8001114:	f000 f822 	bl	800115c <_init>
 8001118:	2500      	movs	r5, #0
 800111a:	4e0a      	ldr	r6, [pc, #40]	; (8001144 <__libc_init_array+0x40>)
 800111c:	4c0a      	ldr	r4, [pc, #40]	; (8001148 <__libc_init_array+0x44>)
 800111e:	1ba4      	subs	r4, r4, r6
 8001120:	10a4      	asrs	r4, r4, #2
 8001122:	42a5      	cmp	r5, r4
 8001124:	d105      	bne.n	8001132 <__libc_init_array+0x2e>
 8001126:	bd70      	pop	{r4, r5, r6, pc}
 8001128:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800112c:	4798      	blx	r3
 800112e:	3501      	adds	r5, #1
 8001130:	e7ee      	b.n	8001110 <__libc_init_array+0xc>
 8001132:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001136:	4798      	blx	r3
 8001138:	3501      	adds	r5, #1
 800113a:	e7f2      	b.n	8001122 <__libc_init_array+0x1e>
 800113c:	0800118c 	.word	0x0800118c
 8001140:	0800118c 	.word	0x0800118c
 8001144:	0800118c 	.word	0x0800118c
 8001148:	08001190 	.word	0x08001190

0800114c <memset>:
 800114c:	4603      	mov	r3, r0
 800114e:	4402      	add	r2, r0
 8001150:	4293      	cmp	r3, r2
 8001152:	d100      	bne.n	8001156 <memset+0xa>
 8001154:	4770      	bx	lr
 8001156:	f803 1b01 	strb.w	r1, [r3], #1
 800115a:	e7f9      	b.n	8001150 <memset+0x4>

0800115c <_init>:
 800115c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800115e:	bf00      	nop
 8001160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001162:	bc08      	pop	{r3}
 8001164:	469e      	mov	lr, r3
 8001166:	4770      	bx	lr

08001168 <_fini>:
 8001168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800116a:	bf00      	nop
 800116c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800116e:	bc08      	pop	{r3}
 8001170:	469e      	mov	lr, r3
 8001172:	4770      	bx	lr
