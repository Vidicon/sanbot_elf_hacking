
Robot_MCU_Down.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bdc  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08007d60  08007d60  00017d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007df4  08007df4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007df4  08007df4  00017df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007dfc  08007dfc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dfc  08007dfc  00017dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e00  08007e00  00017e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021f8  200001e0  08007fe4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200023d8  08007fe4  000223d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b55  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036d3  00000000  00000000  00038d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011b0  00000000  00000000  0003c438  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001018  00000000  00000000  0003d5e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023205  00000000  00000000  0003e600  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000112aa  00000000  00000000  00061805  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4d52  00000000  00000000  00072aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00137801  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049fc  00000000  00000000  0013787c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	200001e0 	.word	0x200001e0
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08007d48 	.word	0x08007d48

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	200001e4 	.word	0x200001e4
 80001c0:	08007d48 	.word	0x08007d48

080001c4 <strlen>:
 80001c4:	4603      	mov	r3, r0
 80001c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ca:	2a00      	cmp	r2, #0
 80001cc:	d1fb      	bne.n	80001c6 <strlen+0x2>
 80001ce:	1a18      	subs	r0, r3, r0
 80001d0:	3801      	subs	r0, #1
 80001d2:	4770      	bx	lr

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	4604      	mov	r4, r0
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0c03 	orr.w	ip, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	fbbc f7fe 	udiv	r7, ip, lr
 800023a:	fa1f f885 	uxth.w	r8, r5
 800023e:	fb0e c317 	mls	r3, lr, r7, ip
 8000242:	fb07 f908 	mul.w	r9, r7, r8
 8000246:	0c21      	lsrs	r1, r4, #16
 8000248:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024c:	4599      	cmp	r9, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8000256:	f080 811c 	bcs.w	8000492 <__udivmoddi4+0x28e>
 800025a:	4599      	cmp	r9, r3
 800025c:	f240 8119 	bls.w	8000492 <__udivmoddi4+0x28e>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	eba3 0309 	sub.w	r3, r3, r9
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	fb00 f108 	mul.w	r1, r0, r8
 8000274:	b2a4      	uxth	r4, r4
 8000276:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027a:	42a1      	cmp	r1, r4
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	192c      	adds	r4, r5, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 8107 	bcs.w	8000496 <__udivmoddi4+0x292>
 8000288:	42a1      	cmp	r1, r4
 800028a:	f240 8104 	bls.w	8000496 <__udivmoddi4+0x292>
 800028e:	3802      	subs	r0, #2
 8000290:	442c      	add	r4, r5
 8000292:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000296:	2700      	movs	r7, #0
 8000298:	1a64      	subs	r4, r4, r1
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	2300      	movs	r3, #0
 800029e:	40d4      	lsrs	r4, r2
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ec 	beq.w	800048c <__udivmoddi4+0x288>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d148      	bne.n	800035c <__udivmoddi4+0x158>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fb 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469c      	mov	ip, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4c00 	strd	r4, ip, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	2701      	movs	r7, #1
 80002f8:	1b49      	subs	r1, r1, r5
 80002fa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002fe:	fa1f f985 	uxth.w	r9, r5
 8000302:	fbb1 fef8 	udiv	lr, r1, r8
 8000306:	fb08 111e 	mls	r1, r8, lr, r1
 800030a:	fb09 f00e 	mul.w	r0, r9, lr
 800030e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000312:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000316:	4298      	cmp	r0, r3
 8000318:	d907      	bls.n	800032a <__udivmoddi4+0x126>
 800031a:	18eb      	adds	r3, r5, r3
 800031c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x124>
 8000322:	4298      	cmp	r0, r3
 8000324:	f200 80cd 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 8000328:	468e      	mov	lr, r1
 800032a:	1a1b      	subs	r3, r3, r0
 800032c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000330:	fb08 3310 	mls	r3, r8, r0, r3
 8000334:	fb09 f900 	mul.w	r9, r9, r0
 8000338:	b2a4      	uxth	r4, r4
 800033a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800033e:	45a1      	cmp	r9, r4
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000342:	192c      	adds	r4, r5, r4
 8000344:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a1      	cmp	r9, r4
 800034c:	f200 80b6 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000350:	4618      	mov	r0, r3
 8000352:	eba4 0409 	sub.w	r4, r4, r9
 8000356:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800035a:	e79e      	b.n	800029a <__udivmoddi4+0x96>
 800035c:	f1c7 0520 	rsb	r5, r7, #32
 8000360:	40bb      	lsls	r3, r7
 8000362:	fa22 fc05 	lsr.w	ip, r2, r5
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa21 f405 	lsr.w	r4, r1, r5
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fbb4 f9fe 	udiv	r9, r4, lr
 8000376:	fa1f f88c 	uxth.w	r8, ip
 800037a:	fb0e 4419 	mls	r4, lr, r9, r4
 800037e:	fa20 f305 	lsr.w	r3, r0, r5
 8000382:	40b9      	lsls	r1, r7
 8000384:	fb09 fa08 	mul.w	sl, r9, r8
 8000388:	4319      	orrs	r1, r3
 800038a:	0c0b      	lsrs	r3, r1, #16
 800038c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000390:	45a2      	cmp	sl, r4
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f307 	lsl.w	r3, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	45a2      	cmp	sl, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	eba4 040a 	sub.w	r4, r4, sl
 80003b8:	fbb4 f0fe 	udiv	r0, r4, lr
 80003bc:	fb0e 4410 	mls	r4, lr, r0, r4
 80003c0:	fb00 fa08 	mul.w	sl, r0, r8
 80003c4:	b289      	uxth	r1, r1
 80003c6:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x1dc>
 80003ce:	eb1c 0404 	adds.w	r4, ip, r4
 80003d2:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003d6:	d26b      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d8:	45a2      	cmp	sl, r4
 80003da:	d969      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003dc:	3802      	subs	r0, #2
 80003de:	4464      	add	r4, ip
 80003e0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e4:	fba0 8902 	umull	r8, r9, r0, r2
 80003e8:	eba4 040a 	sub.w	r4, r4, sl
 80003ec:	454c      	cmp	r4, r9
 80003ee:	4641      	mov	r1, r8
 80003f0:	46ce      	mov	lr, r9
 80003f2:	d354      	bcc.n	800049e <__udivmoddi4+0x29a>
 80003f4:	d051      	beq.n	800049a <__udivmoddi4+0x296>
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d069      	beq.n	80004ce <__udivmoddi4+0x2ca>
 80003fa:	1a5a      	subs	r2, r3, r1
 80003fc:	eb64 040e 	sbc.w	r4, r4, lr
 8000400:	fa04 f505 	lsl.w	r5, r4, r5
 8000404:	fa22 f307 	lsr.w	r3, r2, r7
 8000408:	40fc      	lsrs	r4, r7
 800040a:	431d      	orrs	r5, r3
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	4095      	lsls	r5, r2
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	fa21 f003 	lsr.w	r0, r1, r3
 800041e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000422:	fbb0 f7f8 	udiv	r7, r0, r8
 8000426:	fa1f f985 	uxth.w	r9, r5
 800042a:	fb08 0017 	mls	r0, r8, r7, r0
 800042e:	fa24 f303 	lsr.w	r3, r4, r3
 8000432:	4091      	lsls	r1, r2
 8000434:	fb07 fc09 	mul.w	ip, r7, r9
 8000438:	430b      	orrs	r3, r1
 800043a:	0c19      	lsrs	r1, r3, #16
 800043c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000440:	458c      	cmp	ip, r1
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x254>
 8000448:	1869      	adds	r1, r5, r1
 800044a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800044e:	d231      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000450:	458c      	cmp	ip, r1
 8000452:	d92f      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	3f02      	subs	r7, #2
 8000456:	4429      	add	r1, r5
 8000458:	eba1 010c 	sub.w	r1, r1, ip
 800045c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000460:	fb08 1c10 	mls	ip, r8, r0, r1
 8000464:	fb00 fe09 	mul.w	lr, r0, r9
 8000468:	b299      	uxth	r1, r3
 800046a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000478:	d218      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047a:	458e      	cmp	lr, r1
 800047c:	d916      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	eba1 010e 	sub.w	r1, r1, lr
 8000486:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048a:	e73a      	b.n	8000302 <__udivmoddi4+0xfe>
 800048c:	4637      	mov	r7, r6
 800048e:	4630      	mov	r0, r6
 8000490:	e708      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000492:	460f      	mov	r7, r1
 8000494:	e6e6      	b.n	8000264 <__udivmoddi4+0x60>
 8000496:	4618      	mov	r0, r3
 8000498:	e6fb      	b.n	8000292 <__udivmoddi4+0x8e>
 800049a:	4543      	cmp	r3, r8
 800049c:	d2ab      	bcs.n	80003f6 <__udivmoddi4+0x1f2>
 800049e:	ebb8 0102 	subs.w	r1, r8, r2
 80004a2:	eb69 020c 	sbc.w	r2, r9, ip
 80004a6:	3801      	subs	r0, #1
 80004a8:	4696      	mov	lr, r2
 80004aa:	e7a4      	b.n	80003f6 <__udivmoddi4+0x1f2>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e7e8      	b.n	8000482 <__udivmoddi4+0x27e>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e795      	b.n	80003e0 <__udivmoddi4+0x1dc>
 80004b4:	4607      	mov	r7, r0
 80004b6:	e7cf      	b.n	8000458 <__udivmoddi4+0x254>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	442c      	add	r4, r5
 80004c0:	e747      	b.n	8000352 <__udivmoddi4+0x14e>
 80004c2:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c6:	442b      	add	r3, r5
 80004c8:	e72f      	b.n	800032a <__udivmoddi4+0x126>
 80004ca:	4638      	mov	r0, r7
 80004cc:	e707      	b.n	80002de <__udivmoddi4+0xda>
 80004ce:	4637      	mov	r7, r6
 80004d0:	e6e8      	b.n	80002a4 <__udivmoddi4+0xa0>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <LeftArm_Init>:

//----------------------------------------------------------------
//
//----------------------------------------------------------------
void LeftArm_Init(TIM_HandleTypeDef *htim)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	LeftArm_State.Angle = 0;
 80004e0:	4b11      	ldr	r3, [pc, #68]	; (8000528 <LeftArm_Init+0x50>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	605a      	str	r2, [r3, #4]
	LeftArm_State.Direction = Arm_Up;
 80004e6:	4b10      	ldr	r3, [pc, #64]	; (8000528 <LeftArm_Init+0x50>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	709a      	strb	r2, [r3, #2]
	LeftArm_State.Homed = NotHomed;
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <LeftArm_Init+0x50>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	701a      	strb	r2, [r3, #0]
	LeftArm_State.MotionState = Motion_Disabled;
 80004f2:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <LeftArm_Init+0x50>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	705a      	strb	r2, [r3, #1]
	LeftArm_State.Timer = 0;
 80004f8:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <LeftArm_Init+0x50>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
	LeftArm_State.SelTestRunning = 0;
 80004fe:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <LeftArm_Init+0x50>)
 8000500:	2200      	movs	r2, #0
 8000502:	60da      	str	r2, [r3, #12]
	LeftArm_State.TIM = htim;
 8000504:	4a08      	ldr	r2, [pc, #32]	; (8000528 <LeftArm_Init+0x50>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	6153      	str	r3, [r2, #20]
	LeftArm_State.Speed = 0;
 800050a:	4b07      	ldr	r3, [pc, #28]	; (8000528 <LeftArm_Init+0x50>)
 800050c:	2200      	movs	r2, #0
 800050e:	611a      	str	r2, [r3, #16]
//
//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);

	HAL_TIM_Base_Start(htim);
 8000510:	6878      	ldr	r0, [r7, #4]
 8000512:	f003 f8bd 	bl	8003690 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 8000516:	2100      	movs	r1, #0
 8000518:	6878      	ldr	r0, [r7, #4]
 800051a:	f003 f9dd 	bl	80038d8 <HAL_TIM_PWM_Start>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000218 	.word	0x20000218

0800052c <LeftArm_SelfTest>:

void LeftArm_SelfTest()
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	// Force a home sequence
	LeftArm_State.SelTestRunning = 1;
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <LeftArm_SelfTest+0x20>)
 8000532:	2201      	movs	r2, #1
 8000534:	60da      	str	r2, [r3, #12]
	LeftArm_State.MotionState = Motion_MovingUp;
 8000536:	4b05      	ldr	r3, [pc, #20]	; (800054c <LeftArm_SelfTest+0x20>)
 8000538:	2203      	movs	r2, #3
 800053a:	705a      	strb	r2, [r3, #1]
	LeftArm_State.Speed = 10;
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <LeftArm_SelfTest+0x20>)
 800053e:	220a      	movs	r2, #10
 8000540:	611a      	str	r2, [r3, #16]

	LeftArm_EnableBrake(False);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f854 	bl	80005f0 <LeftArm_EnableBrake>
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000218 	.word	0x20000218

08000550 <LeftArm_Update10Hz>:
{
	// Move if correctly homed
}

void LeftArm_Update10Hz()
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	//  Check if selftest is running
	if (LeftArm_State.SelTestRunning == 1)
 8000554:	4b24      	ldr	r3, [pc, #144]	; (80005e8 <LeftArm_Update10Hz+0x98>)
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d117      	bne.n	800058c <LeftArm_Update10Hz+0x3c>
	{
		LeftArm_State.Timer += 1;
 800055c:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <LeftArm_Update10Hz+0x98>)
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	3301      	adds	r3, #1
 8000562:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <LeftArm_Update10Hz+0x98>)
 8000564:	6093      	str	r3, [r2, #8]

		if (LeftArm_State.Timer <= 1 * UPDATE_10HZ)
 8000566:	4b20      	ldr	r3, [pc, #128]	; (80005e8 <LeftArm_Update10Hz+0x98>)
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	2b0a      	cmp	r3, #10
 800056c:	dc03      	bgt.n	8000576 <LeftArm_Update10Hz+0x26>
		{
			LeftArm_State.MotionState = Motion_MovingUp;
 800056e:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <LeftArm_Update10Hz+0x98>)
 8000570:	2203      	movs	r2, #3
 8000572:	705a      	strb	r2, [r3, #1]
 8000574:	e00a      	b.n	800058c <LeftArm_Update10Hz+0x3c>
		}
		else if (LeftArm_State.Timer <= 2 * UPDATE_10HZ)
 8000576:	4b1c      	ldr	r3, [pc, #112]	; (80005e8 <LeftArm_Update10Hz+0x98>)
 8000578:	689b      	ldr	r3, [r3, #8]
 800057a:	2b14      	cmp	r3, #20
 800057c:	dc03      	bgt.n	8000586 <LeftArm_Update10Hz+0x36>
		{
			LeftArm_State.MotionState = Motion_MovingDown;
 800057e:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <LeftArm_Update10Hz+0x98>)
 8000580:	2204      	movs	r2, #4
 8000582:	705a      	strb	r2, [r3, #1]
 8000584:	e002      	b.n	800058c <LeftArm_Update10Hz+0x3c>
		}
		else
		{
			LeftArm_State.MotionState = Motion_AtTarget;
 8000586:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <LeftArm_Update10Hz+0x98>)
 8000588:	2201      	movs	r2, #1
 800058a:	705a      	strb	r2, [r3, #1]
	{

	}

	// Write correct outputs
	if (LeftArm_State.MotionState == Motion_MovingUp)
 800058c:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <LeftArm_Update10Hz+0x98>)
 800058e:	785b      	ldrb	r3, [r3, #1]
 8000590:	2b03      	cmp	r3, #3
 8000592:	d10e      	bne.n	80005b2 <LeftArm_Update10Hz+0x62>
	{
		__HAL_TIM_SET_COMPARE(LeftArm_State.TIM, TIM_CHANNEL_1, LeftArm_State.Speed);
 8000594:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <LeftArm_Update10Hz+0x98>)
 8000596:	691a      	ldr	r2, [r3, #16]
 8000598:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <LeftArm_Update10Hz+0x98>)
 800059a:	695b      	ldr	r3, [r3, #20]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	635a      	str	r2, [r3, #52]	; 0x34

		HAL_GPIO_WritePin(LeftArmUp_GPIO_Port, LeftArmUp_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2102      	movs	r1, #2
 80005a4:	4811      	ldr	r0, [pc, #68]	; (80005ec <LeftArm_Update10Hz+0x9c>)
 80005a6:	f001 fa97 	bl	8001ad8 <HAL_GPIO_WritePin>

		LeftArm_EnableBrake(False);
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 f820 	bl	80005f0 <LeftArm_EnableBrake>
	}
	else
	{
		__HAL_TIM_SET_COMPARE(LeftArm_State.TIM, TIM_CHANNEL_1, 0);
	}
}
 80005b0:	e017      	b.n	80005e2 <LeftArm_Update10Hz+0x92>
	else if (LeftArm_State.MotionState == Motion_MovingDown)
 80005b2:	4b0d      	ldr	r3, [pc, #52]	; (80005e8 <LeftArm_Update10Hz+0x98>)
 80005b4:	785b      	ldrb	r3, [r3, #1]
 80005b6:	2b04      	cmp	r3, #4
 80005b8:	d10e      	bne.n	80005d8 <LeftArm_Update10Hz+0x88>
		__HAL_TIM_SET_COMPARE(LeftArm_State.TIM, TIM_CHANNEL_1, LeftArm_State.Speed);
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <LeftArm_Update10Hz+0x98>)
 80005bc:	691a      	ldr	r2, [r3, #16]
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <LeftArm_Update10Hz+0x98>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(LeftArmUp_GPIO_Port, LeftArmUp_Pin, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2102      	movs	r1, #2
 80005ca:	4808      	ldr	r0, [pc, #32]	; (80005ec <LeftArm_Update10Hz+0x9c>)
 80005cc:	f001 fa84 	bl	8001ad8 <HAL_GPIO_WritePin>
		LeftArm_EnableBrake(False);
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 f80d 	bl	80005f0 <LeftArm_EnableBrake>
}
 80005d6:	e004      	b.n	80005e2 <LeftArm_Update10Hz+0x92>
		__HAL_TIM_SET_COMPARE(LeftArm_State.TIM, TIM_CHANNEL_1, 0);
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <LeftArm_Update10Hz+0x98>)
 80005da:	695b      	ldr	r3, [r3, #20]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2200      	movs	r2, #0
 80005e0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000218 	.word	0x20000218
 80005ec:	40021000 	.word	0x40021000

080005f0 <LeftArm_EnableBrake>:

void LeftArm_EnableBrake(enum ENUM_Booleans BrakeEnable)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	// Works inverted. High to release brake.
	HAL_GPIO_WritePin(LeftArmBrake_GPIO_Port, LeftArmBrake_Pin, !BrakeEnable);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	bf0c      	ite	eq
 8000600:	2301      	moveq	r3, #1
 8000602:	2300      	movne	r3, #0
 8000604:	b2db      	uxtb	r3, r3
 8000606:	461a      	mov	r2, r3
 8000608:	2104      	movs	r1, #4
 800060a:	4803      	ldr	r0, [pc, #12]	; (8000618 <LeftArm_EnableBrake+0x28>)
 800060c:	f001 fa64 	bl	8001ad8 <HAL_GPIO_WritePin>
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40021000 	.word	0x40021000

0800061c <RightArm_Init>:

//----------------------------------------------------------------
//
//----------------------------------------------------------------
void RightArm_Init(TIM_HandleTypeDef *htim)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	RightArm_State.Angle = 0;
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <RightArm_Init+0x2c>)
 8000626:	2200      	movs	r2, #0
 8000628:	605a      	str	r2, [r3, #4]
	RightArm_State.Direction = Arm_Up;
 800062a:	4b07      	ldr	r3, [pc, #28]	; (8000648 <RightArm_Init+0x2c>)
 800062c:	2200      	movs	r2, #0
 800062e:	709a      	strb	r2, [r3, #2]
	RightArm_State.Homed = NotHomed;
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <RightArm_Init+0x2c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	RightArm_State.MotionState = Motion_Disabled;
 8000636:	4b04      	ldr	r3, [pc, #16]	; (8000648 <RightArm_Init+0x2c>)
 8000638:	2200      	movs	r2, #0
 800063a:	705a      	strb	r2, [r3, #1]

//	HAL_TIM_Base_Start(htim);
//	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20000238 	.word	0x20000238

0800064c <RightArm_Update10Hz>:
{

}

void RightArm_Update10Hz()
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0

}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr

08000658 <RGBLeds_Init>:

struct RGBLeds_State_Type RGBLeds_State[3];
int SelfTestCounterTmo = 0;

void RGBLeds_Init()
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	RGBLeds_SetColorOff(LeftArm);
 800065c:	2000      	movs	r0, #0
 800065e:	f000 f8b5 	bl	80007cc <RGBLeds_SetColorOff>
	RGBLeds_SetColorOff(RightArm);
 8000662:	2001      	movs	r0, #1
 8000664:	f000 f8b2 	bl	80007cc <RGBLeds_SetColorOff>
	RGBLeds_SetColorOff(Base);
 8000668:	2002      	movs	r0, #2
 800066a:	f000 f8af 	bl	80007cc <RGBLeds_SetColorOff>
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <RGBLeds_SetColorOn>:

void RGBLeds_SetColorOn(enum ENUM_BodyParts BodyPart, enum ENUM_RGBLeds_Color Color)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	460a      	mov	r2, r1
 800067e:	71fb      	strb	r3, [r7, #7]
 8000680:	4613      	mov	r3, r2
 8000682:	71bb      	strb	r3, [r7, #6]
	if (BodyPart == LeftArm)
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d12f      	bne.n	80006ea <RGBLeds_SetColorOn+0x76>
	{
		if (Color == Red)   {HAL_GPIO_WritePin(LeftArmRed_GPIO_Port,   LeftArmRed_Pin,   GPIO_PIN_RESET);}
 800068a:	79bb      	ldrb	r3, [r7, #6]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d105      	bne.n	800069c <RGBLeds_SetColorOn+0x28>
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000696:	484a      	ldr	r0, [pc, #296]	; (80007c0 <RGBLeds_SetColorOn+0x14c>)
 8000698:	f001 fa1e 	bl	8001ad8 <HAL_GPIO_WritePin>
		if (Color == Green) {HAL_GPIO_WritePin(LeftArmGreen_GPIO_Port, LeftArmGreen_Pin, GPIO_PIN_RESET);}
 800069c:	79bb      	ldrb	r3, [r7, #6]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d105      	bne.n	80006ae <RGBLeds_SetColorOn+0x3a>
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a8:	4845      	ldr	r0, [pc, #276]	; (80007c0 <RGBLeds_SetColorOn+0x14c>)
 80006aa:	f001 fa15 	bl	8001ad8 <HAL_GPIO_WritePin>
		if (Color == Blue)  {HAL_GPIO_WritePin(LeftArmBlue_GPIO_Port,  LeftArmBlue_Pin,  GPIO_PIN_RESET);}
 80006ae:	79bb      	ldrb	r3, [r7, #6]
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	d105      	bne.n	80006c0 <RGBLeds_SetColorOn+0x4c>
 80006b4:	2200      	movs	r2, #0
 80006b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ba:	4841      	ldr	r0, [pc, #260]	; (80007c0 <RGBLeds_SetColorOn+0x14c>)
 80006bc:	f001 fa0c 	bl	8001ad8 <HAL_GPIO_WritePin>
		if (Color == White)
 80006c0:	79bb      	ldrb	r3, [r7, #6]
 80006c2:	2b03      	cmp	r3, #3
 80006c4:	d111      	bne.n	80006ea <RGBLeds_SetColorOn+0x76>
		{
			HAL_GPIO_WritePin(LeftArmRed_GPIO_Port,   LeftArmRed_Pin,   GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006cc:	483c      	ldr	r0, [pc, #240]	; (80007c0 <RGBLeds_SetColorOn+0x14c>)
 80006ce:	f001 fa03 	bl	8001ad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LeftArmGreen_GPIO_Port, LeftArmGreen_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d8:	4839      	ldr	r0, [pc, #228]	; (80007c0 <RGBLeds_SetColorOn+0x14c>)
 80006da:	f001 f9fd 	bl	8001ad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LeftArmBlue_GPIO_Port,  LeftArmBlue_Pin,  GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006e4:	4836      	ldr	r0, [pc, #216]	; (80007c0 <RGBLeds_SetColorOn+0x14c>)
 80006e6:	f001 f9f7 	bl	8001ad8 <HAL_GPIO_WritePin>
		}
	}

	if (BodyPart == RightArm)
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d12f      	bne.n	8000750 <RGBLeds_SetColorOn+0xdc>
	{
		if (Color == Red)   {HAL_GPIO_WritePin(RightArmRed_GPIO_Port,   RightArmRed_Pin,   GPIO_PIN_RESET);}
 80006f0:	79bb      	ldrb	r3, [r7, #6]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d105      	bne.n	8000702 <RGBLeds_SetColorOn+0x8e>
 80006f6:	2200      	movs	r2, #0
 80006f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006fc:	4831      	ldr	r0, [pc, #196]	; (80007c4 <RGBLeds_SetColorOn+0x150>)
 80006fe:	f001 f9eb 	bl	8001ad8 <HAL_GPIO_WritePin>
		if (Color == Green) {HAL_GPIO_WritePin(RightArmGreen_GPIO_Port, RightArmGreen_Pin, GPIO_PIN_RESET);}
 8000702:	79bb      	ldrb	r3, [r7, #6]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d105      	bne.n	8000714 <RGBLeds_SetColorOn+0xa0>
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800070e:	482d      	ldr	r0, [pc, #180]	; (80007c4 <RGBLeds_SetColorOn+0x150>)
 8000710:	f001 f9e2 	bl	8001ad8 <HAL_GPIO_WritePin>
		if (Color == Blue)  {HAL_GPIO_WritePin(RightArmBlue_GPIO_Port,  RightArmBlue_Pin,  GPIO_PIN_RESET);}
 8000714:	79bb      	ldrb	r3, [r7, #6]
 8000716:	2b02      	cmp	r3, #2
 8000718:	d105      	bne.n	8000726 <RGBLeds_SetColorOn+0xb2>
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000720:	4828      	ldr	r0, [pc, #160]	; (80007c4 <RGBLeds_SetColorOn+0x150>)
 8000722:	f001 f9d9 	bl	8001ad8 <HAL_GPIO_WritePin>
		if (Color == White)
 8000726:	79bb      	ldrb	r3, [r7, #6]
 8000728:	2b03      	cmp	r3, #3
 800072a:	d111      	bne.n	8000750 <RGBLeds_SetColorOn+0xdc>
		{
			HAL_GPIO_WritePin(RightArmRed_GPIO_Port,   RightArmRed_Pin,   GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000732:	4824      	ldr	r0, [pc, #144]	; (80007c4 <RGBLeds_SetColorOn+0x150>)
 8000734:	f001 f9d0 	bl	8001ad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RightArmGreen_GPIO_Port, RightArmGreen_Pin, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800073e:	4821      	ldr	r0, [pc, #132]	; (80007c4 <RGBLeds_SetColorOn+0x150>)
 8000740:	f001 f9ca 	bl	8001ad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RightArmBlue_GPIO_Port,  RightArmBlue_Pin,  GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800074a:	481e      	ldr	r0, [pc, #120]	; (80007c4 <RGBLeds_SetColorOn+0x150>)
 800074c:	f001 f9c4 	bl	8001ad8 <HAL_GPIO_WritePin>
		}
	}

	if (BodyPart == Base)
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	2b02      	cmp	r3, #2
 8000754:	d12f      	bne.n	80007b6 <RGBLeds_SetColorOn+0x142>
	{
		if (Color == Red)   {HAL_GPIO_WritePin(BaseRed_GPIO_Port,   	BaseRed_Pin,   GPIO_PIN_RESET);}
 8000756:	79bb      	ldrb	r3, [r7, #6]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d105      	bne.n	8000768 <RGBLeds_SetColorOn+0xf4>
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000762:	4819      	ldr	r0, [pc, #100]	; (80007c8 <RGBLeds_SetColorOn+0x154>)
 8000764:	f001 f9b8 	bl	8001ad8 <HAL_GPIO_WritePin>
		if (Color == Green) {HAL_GPIO_WritePin(BaseGreen_GPIO_Port, 	BaseGreen_Pin, GPIO_PIN_RESET);}
 8000768:	79bb      	ldrb	r3, [r7, #6]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d105      	bne.n	800077a <RGBLeds_SetColorOn+0x106>
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000774:	4814      	ldr	r0, [pc, #80]	; (80007c8 <RGBLeds_SetColorOn+0x154>)
 8000776:	f001 f9af 	bl	8001ad8 <HAL_GPIO_WritePin>
		if (Color == Blue)  {HAL_GPIO_WritePin(BaseBlue_GPIO_Port,  	BaseBlue_Pin,  GPIO_PIN_RESET);}
 800077a:	79bb      	ldrb	r3, [r7, #6]
 800077c:	2b02      	cmp	r3, #2
 800077e:	d105      	bne.n	800078c <RGBLeds_SetColorOn+0x118>
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000786:	4810      	ldr	r0, [pc, #64]	; (80007c8 <RGBLeds_SetColorOn+0x154>)
 8000788:	f001 f9a6 	bl	8001ad8 <HAL_GPIO_WritePin>
		if (Color == White)
 800078c:	79bb      	ldrb	r3, [r7, #6]
 800078e:	2b03      	cmp	r3, #3
 8000790:	d111      	bne.n	80007b6 <RGBLeds_SetColorOn+0x142>
		{
			HAL_GPIO_WritePin(BaseRed_GPIO_Port,   	BaseRed_Pin,   GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000798:	480b      	ldr	r0, [pc, #44]	; (80007c8 <RGBLeds_SetColorOn+0x154>)
 800079a:	f001 f99d 	bl	8001ad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BaseGreen_GPIO_Port, 	BaseGreen_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a4:	4808      	ldr	r0, [pc, #32]	; (80007c8 <RGBLeds_SetColorOn+0x154>)
 80007a6:	f001 f997 	bl	8001ad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BaseBlue_GPIO_Port,  	BaseBlue_Pin,  GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <RGBLeds_SetColorOn+0x154>)
 80007b2:	f001 f991 	bl	8001ad8 <HAL_GPIO_WritePin>
		}
	}
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40021c00 	.word	0x40021c00
 80007c4:	40020c00 	.word	0x40020c00
 80007c8:	40021800 	.word	0x40021800

080007cc <RGBLeds_SetColorOff>:

void RGBLeds_SetColorOff(enum ENUM_BodyParts BodyPart)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
	if (BodyPart == LeftArm)
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d111      	bne.n	8000800 <RGBLeds_SetColorOff+0x34>
	{
		HAL_GPIO_WritePin(LeftArmRed_GPIO_Port, 	LeftArmRed_Pin, GPIO_PIN_SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e2:	481e      	ldr	r0, [pc, #120]	; (800085c <RGBLeds_SetColorOff+0x90>)
 80007e4:	f001 f978 	bl	8001ad8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LeftArmGreen_GPIO_Port, 	LeftArmGreen_Pin, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ee:	481b      	ldr	r0, [pc, #108]	; (800085c <RGBLeds_SetColorOff+0x90>)
 80007f0:	f001 f972 	bl	8001ad8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LeftArmBlue_GPIO_Port, 	LeftArmBlue_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007fa:	4818      	ldr	r0, [pc, #96]	; (800085c <RGBLeds_SetColorOff+0x90>)
 80007fc:	f001 f96c 	bl	8001ad8 <HAL_GPIO_WritePin>
	}

	if (BodyPart == RightArm)
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d111      	bne.n	800082a <RGBLeds_SetColorOff+0x5e>
	{
		HAL_GPIO_WritePin(RightArmRed_GPIO_Port, 	RightArmRed_Pin, GPIO_PIN_SET);
 8000806:	2201      	movs	r2, #1
 8000808:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080c:	4814      	ldr	r0, [pc, #80]	; (8000860 <RGBLeds_SetColorOff+0x94>)
 800080e:	f001 f963 	bl	8001ad8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RightArmGreen_GPIO_Port,  RightArmGreen_Pin, GPIO_PIN_SET);
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000818:	4811      	ldr	r0, [pc, #68]	; (8000860 <RGBLeds_SetColorOff+0x94>)
 800081a:	f001 f95d 	bl	8001ad8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RightArmBlue_GPIO_Port, 	RightArmBlue_Pin, GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000824:	480e      	ldr	r0, [pc, #56]	; (8000860 <RGBLeds_SetColorOff+0x94>)
 8000826:	f001 f957 	bl	8001ad8 <HAL_GPIO_WritePin>
	}

	if (BodyPart == Base)
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2b02      	cmp	r3, #2
 800082e:	d111      	bne.n	8000854 <RGBLeds_SetColorOff+0x88>
	{
		HAL_GPIO_WritePin(BaseRed_GPIO_Port, 		BaseRed_Pin, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000836:	480b      	ldr	r0, [pc, #44]	; (8000864 <RGBLeds_SetColorOff+0x98>)
 8000838:	f001 f94e 	bl	8001ad8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BaseGreen_GPIO_Port, 		BaseGreen_Pin, GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000842:	4808      	ldr	r0, [pc, #32]	; (8000864 <RGBLeds_SetColorOff+0x98>)
 8000844:	f001 f948 	bl	8001ad8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BaseBlue_GPIO_Port, 		BaseBlue_Pin, GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <RGBLeds_SetColorOff+0x98>)
 8000850:	f001 f942 	bl	8001ad8 <HAL_GPIO_WritePin>
	}
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40021c00 	.word	0x40021c00
 8000860:	40020c00 	.word	0x40020c00
 8000864:	40021800 	.word	0x40021800

08000868 <RGBLeds_BlinkColor>:

void RGBLeds_BlinkColor(enum ENUM_BodyParts BodyPart, enum ENUM_RGBLeds_Color Color, enum ENUM_RGBLeds_Blink Blink)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]
 8000872:	460b      	mov	r3, r1
 8000874:	71bb      	strb	r3, [r7, #6]
 8000876:	4613      	mov	r3, r2
 8000878:	717b      	strb	r3, [r7, #5]
	RGBLeds_State[BodyPart].Color = Color;
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	490a      	ldr	r1, [pc, #40]	; (80008a8 <RGBLeds_BlinkColor+0x40>)
 800087e:	79ba      	ldrb	r2, [r7, #6]
 8000880:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	RGBLeds_State[BodyPart].Blink = Blink;
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	4a08      	ldr	r2, [pc, #32]	; (80008a8 <RGBLeds_BlinkColor+0x40>)
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	4413      	add	r3, r2
 800088c:	797a      	ldrb	r2, [r7, #5]
 800088e:	705a      	strb	r2, [r3, #1]
	RGBLeds_State[BodyPart].Counter = 0;
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	4a05      	ldr	r2, [pc, #20]	; (80008a8 <RGBLeds_BlinkColor+0x40>)
 8000894:	00db      	lsls	r3, r3, #3
 8000896:	4413      	add	r3, r2
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	2000025c 	.word	0x2000025c

080008ac <RGBLeds_Update10Hz>:

void RGBLeds_Update10Hz()
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++)
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	e0b3      	b.n	8000a20 <RGBLeds_Update10Hz+0x174>
	{
		if (RGBLeds_State[i].Blink == Blink_Slow)
 80008b8:	4a67      	ldr	r2, [pc, #412]	; (8000a58 <RGBLeds_Update10Hz+0x1ac>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	00db      	lsls	r3, r3, #3
 80008be:	4413      	add	r3, r2
 80008c0:	785b      	ldrb	r3, [r3, #1]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d133      	bne.n	800092e <RGBLeds_Update10Hz+0x82>
		{
			if (RGBLeds_State[i].Counter == 0) { RGBLeds_SetColorOn ((enum ENUM_BodyParts)(i), RGBLeds_State[i].Color);}
 80008c6:	4a64      	ldr	r2, [pc, #400]	; (8000a58 <RGBLeds_Update10Hz+0x1ac>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	4413      	add	r3, r2
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d108      	bne.n	80008e6 <RGBLeds_Update10Hz+0x3a>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	b2d8      	uxtb	r0, r3
 80008d8:	4a5f      	ldr	r2, [pc, #380]	; (8000a58 <RGBLeds_Update10Hz+0x1ac>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80008e0:	4619      	mov	r1, r3
 80008e2:	f7ff fec7 	bl	8000674 <RGBLeds_SetColorOn>
			if (RGBLeds_State[i].Counter == 5) { RGBLeds_SetColorOff((enum ENUM_BodyParts)(i));}
 80008e6:	4a5c      	ldr	r2, [pc, #368]	; (8000a58 <RGBLeds_Update10Hz+0x1ac>)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	00db      	lsls	r3, r3, #3
 80008ec:	4413      	add	r3, r2
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	2b05      	cmp	r3, #5
 80008f2:	d104      	bne.n	80008fe <RGBLeds_Update10Hz+0x52>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff67 	bl	80007cc <RGBLeds_SetColorOff>

			RGBLeds_State[i].Counter += 1;
 80008fe:	4a56      	ldr	r2, [pc, #344]	; (8000a58 <RGBLeds_Update10Hz+0x1ac>)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	00db      	lsls	r3, r3, #3
 8000904:	4413      	add	r3, r2
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	1c5a      	adds	r2, r3, #1
 800090a:	4953      	ldr	r1, [pc, #332]	; (8000a58 <RGBLeds_Update10Hz+0x1ac>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	00db      	lsls	r3, r3, #3
 8000910:	440b      	add	r3, r1
 8000912:	605a      	str	r2, [r3, #4]
			if (RGBLeds_State[i].Counter >= 10) {RGBLeds_State[i].Counter = 0;}
 8000914:	4a50      	ldr	r2, [pc, #320]	; (8000a58 <RGBLeds_Update10Hz+0x1ac>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	4413      	add	r3, r2
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	2b09      	cmp	r3, #9
 8000920:	dd05      	ble.n	800092e <RGBLeds_Update10Hz+0x82>
 8000922:	4a4d      	ldr	r2, [pc, #308]	; (8000a58 <RGBLeds_Update10Hz+0x1ac>)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	00db      	lsls	r3, r3, #3
 8000928:	4413      	add	r3, r2
 800092a:	2200      	movs	r2, #0
 800092c:	605a      	str	r2, [r3, #4]
		}

		if (RGBLeds_State[i].Blink == Blink_Fast)
 800092e:	4a4a      	ldr	r2, [pc, #296]	; (8000a58 <RGBLeds_Update10Hz+0x1ac>)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	4413      	add	r3, r2
 8000936:	785b      	ldrb	r3, [r3, #1]
 8000938:	2b02      	cmp	r3, #2
 800093a:	d133      	bne.n	80009a4 <RGBLeds_Update10Hz+0xf8>
		{
			if (RGBLeds_State[i].Counter == 0) { RGBLeds_SetColorOn ((enum ENUM_BodyParts)(i), RGBLeds_State[i].Color);}
 800093c:	4a46      	ldr	r2, [pc, #280]	; (8000a58 <RGBLeds_Update10Hz+0x1ac>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	4413      	add	r3, r2
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d108      	bne.n	800095c <RGBLeds_Update10Hz+0xb0>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	b2d8      	uxtb	r0, r3
 800094e:	4a42      	ldr	r2, [pc, #264]	; (8000a58 <RGBLeds_Update10Hz+0x1ac>)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000956:	4619      	mov	r1, r3
 8000958:	f7ff fe8c 	bl	8000674 <RGBLeds_SetColorOn>
			if (RGBLeds_State[i].Counter == 3) { RGBLeds_SetColorOff((enum ENUM_BodyParts)(i));}
 800095c:	4a3e      	ldr	r2, [pc, #248]	; (8000a58 <RGBLeds_Update10Hz+0x1ac>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	00db      	lsls	r3, r3, #3
 8000962:	4413      	add	r3, r2
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	2b03      	cmp	r3, #3
 8000968:	d104      	bne.n	8000974 <RGBLeds_Update10Hz+0xc8>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff ff2c 	bl	80007cc <RGBLeds_SetColorOff>

			RGBLeds_State[i].Counter += 1;
 8000974:	4a38      	ldr	r2, [pc, #224]	; (8000a58 <RGBLeds_Update10Hz+0x1ac>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	4413      	add	r3, r2
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	1c5a      	adds	r2, r3, #1
 8000980:	4935      	ldr	r1, [pc, #212]	; (8000a58 <RGBLeds_Update10Hz+0x1ac>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	440b      	add	r3, r1
 8000988:	605a      	str	r2, [r3, #4]
			if (RGBLeds_State[i].Counter >= 6) {RGBLeds_State[i].Counter = 0;}
 800098a:	4a33      	ldr	r2, [pc, #204]	; (8000a58 <RGBLeds_Update10Hz+0x1ac>)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	00db      	lsls	r3, r3, #3
 8000990:	4413      	add	r3, r2
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	2b05      	cmp	r3, #5
 8000996:	dd05      	ble.n	80009a4 <RGBLeds_Update10Hz+0xf8>
 8000998:	4a2f      	ldr	r2, [pc, #188]	; (8000a58 <RGBLeds_Update10Hz+0x1ac>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	00db      	lsls	r3, r3, #3
 800099e:	4413      	add	r3, r2
 80009a0:	2200      	movs	r2, #0
 80009a2:	605a      	str	r2, [r3, #4]
		}

		if (RGBLeds_State[i].Blink == Blink_VeryFast)
 80009a4:	4a2c      	ldr	r2, [pc, #176]	; (8000a58 <RGBLeds_Update10Hz+0x1ac>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	4413      	add	r3, r2
 80009ac:	785b      	ldrb	r3, [r3, #1]
 80009ae:	2b03      	cmp	r3, #3
 80009b0:	d133      	bne.n	8000a1a <RGBLeds_Update10Hz+0x16e>
		{
			if (RGBLeds_State[i].Counter == 0) { RGBLeds_SetColorOn ((enum ENUM_BodyParts)(i), RGBLeds_State[i].Color);}
 80009b2:	4a29      	ldr	r2, [pc, #164]	; (8000a58 <RGBLeds_Update10Hz+0x1ac>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	00db      	lsls	r3, r3, #3
 80009b8:	4413      	add	r3, r2
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d108      	bne.n	80009d2 <RGBLeds_Update10Hz+0x126>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	b2d8      	uxtb	r0, r3
 80009c4:	4a24      	ldr	r2, [pc, #144]	; (8000a58 <RGBLeds_Update10Hz+0x1ac>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80009cc:	4619      	mov	r1, r3
 80009ce:	f7ff fe51 	bl	8000674 <RGBLeds_SetColorOn>
			if (RGBLeds_State[i].Counter == 2) { RGBLeds_SetColorOff((enum ENUM_BodyParts)(i));}
 80009d2:	4a21      	ldr	r2, [pc, #132]	; (8000a58 <RGBLeds_Update10Hz+0x1ac>)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	4413      	add	r3, r2
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d104      	bne.n	80009ea <RGBLeds_Update10Hz+0x13e>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fef1 	bl	80007cc <RGBLeds_SetColorOff>

			RGBLeds_State[i].Counter += 1;
 80009ea:	4a1b      	ldr	r2, [pc, #108]	; (8000a58 <RGBLeds_Update10Hz+0x1ac>)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	00db      	lsls	r3, r3, #3
 80009f0:	4413      	add	r3, r2
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	4918      	ldr	r1, [pc, #96]	; (8000a58 <RGBLeds_Update10Hz+0x1ac>)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	00db      	lsls	r3, r3, #3
 80009fc:	440b      	add	r3, r1
 80009fe:	605a      	str	r2, [r3, #4]
			if (RGBLeds_State[i].Counter >= 4) {RGBLeds_State[i].Counter = 0;}
 8000a00:	4a15      	ldr	r2, [pc, #84]	; (8000a58 <RGBLeds_Update10Hz+0x1ac>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	4413      	add	r3, r2
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	2b03      	cmp	r3, #3
 8000a0c:	dd05      	ble.n	8000a1a <RGBLeds_Update10Hz+0x16e>
 8000a0e:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <RGBLeds_Update10Hz+0x1ac>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	00db      	lsls	r3, r3, #3
 8000a14:	4413      	add	r3, r2
 8000a16:	2200      	movs	r2, #0
 8000a18:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 3; i++)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	f77f af48 	ble.w	80008b8 <RGBLeds_Update10Hz+0xc>
	}

	//---------------------------------------------------------
	// Selftest update
	//---------------------------------------------------------
	SelfTestCounterTmo += 1;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <RGBLeds_Update10Hz+0x1b0>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	4a0b      	ldr	r2, [pc, #44]	; (8000a5c <RGBLeds_Update10Hz+0x1b0>)
 8000a30:	6013      	str	r3, [r2, #0]

	if (SelfTestCounterTmo >= 5 * UPDATE_10HZ)
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <RGBLeds_Update10Hz+0x1b0>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b31      	cmp	r3, #49	; 0x31
 8000a38:	dd0a      	ble.n	8000a50 <RGBLeds_Update10Hz+0x1a4>
	{
		RGBLeds_SelfTest(False);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f000 f810 	bl	8000a60 <RGBLeds_SelfTest>

		RGBLeds_SetColorOn(LeftArm, White);
 8000a40:	2103      	movs	r1, #3
 8000a42:	2000      	movs	r0, #0
 8000a44:	f7ff fe16 	bl	8000674 <RGBLeds_SetColorOn>
		RGBLeds_SetColorOn(RightArm, White);
 8000a48:	2103      	movs	r1, #3
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f7ff fe12 	bl	8000674 <RGBLeds_SetColorOn>
	}
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	2000025c 	.word	0x2000025c
 8000a5c:	200001fc 	.word	0x200001fc

08000a60 <RGBLeds_SelfTest>:

void RGBLeds_SelfTest(enum ENUM_Booleans Enabled)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
	if (Enabled == True)
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d112      	bne.n	8000a96 <RGBLeds_SelfTest+0x36>
	{
		SelfTestCounterTmo = 0;
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <RGBLeds_SelfTest+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]

		RGBLeds_BlinkColor(LeftArm, Red, Blink_Slow);
 8000a76:	2201      	movs	r2, #1
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff fef4 	bl	8000868 <RGBLeds_BlinkColor>
		RGBLeds_BlinkColor(RightArm, Green, Blink_Fast);
 8000a80:	2202      	movs	r2, #2
 8000a82:	2101      	movs	r1, #1
 8000a84:	2001      	movs	r0, #1
 8000a86:	f7ff feef 	bl	8000868 <RGBLeds_BlinkColor>
		RGBLeds_BlinkColor(Base, White, Blink_VeryFast);
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	2103      	movs	r1, #3
 8000a8e:	2002      	movs	r0, #2
 8000a90:	f7ff feea 	bl	8000868 <RGBLeds_BlinkColor>
		RGBLeds_SetColorOn(RightArm, White);

		RGBLeds_BlinkColor(Base, White, Blink_Off);
		RGBLeds_SetColorOff(Base);
	}
}
 8000a94:	e019      	b.n	8000aca <RGBLeds_SelfTest+0x6a>
		RGBLeds_BlinkColor(LeftArm, White, Blink_Off);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2103      	movs	r1, #3
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f7ff fee4 	bl	8000868 <RGBLeds_BlinkColor>
		RGBLeds_SetColorOn(LeftArm, White);
 8000aa0:	2103      	movs	r1, #3
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f7ff fde6 	bl	8000674 <RGBLeds_SetColorOn>
		RGBLeds_BlinkColor(RightArm, White, Blink_Off);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2103      	movs	r1, #3
 8000aac:	2001      	movs	r0, #1
 8000aae:	f7ff fedb 	bl	8000868 <RGBLeds_BlinkColor>
		RGBLeds_SetColorOn(RightArm, White);
 8000ab2:	2103      	movs	r1, #3
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f7ff fddd 	bl	8000674 <RGBLeds_SetColorOn>
		RGBLeds_BlinkColor(Base, White, Blink_Off);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2103      	movs	r1, #3
 8000abe:	2002      	movs	r0, #2
 8000ac0:	f7ff fed2 	bl	8000868 <RGBLeds_BlinkColor>
		RGBLeds_SetColorOff(Base);
 8000ac4:	2002      	movs	r0, #2
 8000ac6:	f7ff fe81 	bl	80007cc <RGBLeds_SetColorOff>
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200001fc 	.word	0x200001fc

08000ad8 <Protocol_0x55_GetRxPointer>:
struct PROTOCOL_0X55_Data_Type PROTOCOL_0X55_RxData;
struct PROTOCOL_0X55_Data_Type PROTOCOL_0X55_TxData;

// Allow other modules to retreive the Rx pointer
struct PROTOCOL_0X55_Data_Type* Protocol_0x55_GetRxPointer()
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
	return (&PROTOCOL_0X55_RxData);
 8000adc:	4b02      	ldr	r3, [pc, #8]	; (8000ae8 <Protocol_0x55_GetRxPointer+0x10>)
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000274 	.word	0x20000274

08000aec <Protocol_0x55_CheckFifo>:
	PROTOCOL_0X55_RxData.NewData = 0;
	PROTOCOL_0X55_TxData.NewData = 0;
}

uint8_t Protocol_0x55_CheckFifo()
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
	return PROTOCOL_0X55_RxData.NewData;
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <Protocol_0x55_CheckFifo+0x14>)
 8000af2:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000274 	.word	0x20000274

08000b04 <Protocol_0x55_ProcessRxCommand>:

void Protocol_0x55_ProcessRxCommand()
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	PROTOCOL_0X55_RxData.NewData = 0;
 8000b08:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <Protocol_0x55_ProcessRxCommand+0x18>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401

	Protocol_0x55_SendVersion((char *) &PROTOCOL_0X55_TxData.FIFO_Data[0]);
 8000b10:	4803      	ldr	r0, [pc, #12]	; (8000b20 <Protocol_0x55_ProcessRxCommand+0x1c>)
 8000b12:	f000 f807 	bl	8000b24 <Protocol_0x55_SendVersion>
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000274 	.word	0x20000274
 8000b20:	20000678 	.word	0x20000678

08000b24 <Protocol_0x55_SendVersion>:

void Protocol_0x55_SendVersion(char *Buffer)
{
 8000b24:	b5b0      	push	{r4, r5, r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	Protocol_0x55_PrepareNewMessage(Buffer, CMD_VERSION, RESPONSE_TRUE);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2101      	movs	r1, #1
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f000 f867 	bl	8000c04 <Protocol_0x55_PrepareNewMessage>

	sprintf(&Buffer[3], "STM32F207 - Sanbot - Matthijs ");
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	3303      	adds	r3, #3
 8000b3a:	4a2e      	ldr	r2, [pc, #184]	; (8000bf4 <Protocol_0x55_SendVersion+0xd0>)
 8000b3c:	461d      	mov	r5, r3
 8000b3e:	4614      	mov	r4, r2
 8000b40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b42:	6028      	str	r0, [r5, #0]
 8000b44:	6069      	str	r1, [r5, #4]
 8000b46:	60aa      	str	r2, [r5, #8]
 8000b48:	60eb      	str	r3, [r5, #12]
 8000b4a:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000b4c:	6128      	str	r0, [r5, #16]
 8000b4e:	6169      	str	r1, [r5, #20]
 8000b50:	61aa      	str	r2, [r5, #24]
 8000b52:	8823      	ldrh	r3, [r4, #0]
 8000b54:	78a2      	ldrb	r2, [r4, #2]
 8000b56:	83ab      	strh	r3, [r5, #28]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	77ab      	strb	r3, [r5, #30]
	sprintf(&Buffer[3 + strlen(&Buffer[3])], __TIME__);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3303      	adds	r3, #3
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fb2f 	bl	80001c4 <strlen>
 8000b66:	4603      	mov	r3, r0
 8000b68:	3303      	adds	r3, #3
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	4922      	ldr	r1, [pc, #136]	; (8000bf8 <Protocol_0x55_SendVersion+0xd4>)
 8000b70:	461a      	mov	r2, r3
 8000b72:	460b      	mov	r3, r1
 8000b74:	cb03      	ldmia	r3!, {r0, r1}
 8000b76:	6010      	str	r0, [r2, #0]
 8000b78:	6051      	str	r1, [r2, #4]
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	7213      	strb	r3, [r2, #8]
	sprintf(&Buffer[3 + strlen(&Buffer[3])], " ");
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3303      	adds	r3, #3
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fb1e 	bl	80001c4 <strlen>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	3303      	adds	r3, #3
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	4413      	add	r3, r2
 8000b90:	491a      	ldr	r1, [pc, #104]	; (8000bfc <Protocol_0x55_SendVersion+0xd8>)
 8000b92:	461a      	mov	r2, r3
 8000b94:	460b      	mov	r3, r1
 8000b96:	881b      	ldrh	r3, [r3, #0]
 8000b98:	8013      	strh	r3, [r2, #0]
	sprintf(&Buffer[3 + strlen(&Buffer[3])], __DATE__);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	3303      	adds	r3, #3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fb10 	bl	80001c4 <strlen>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	3303      	adds	r3, #3
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a14      	ldr	r2, [pc, #80]	; (8000c00 <Protocol_0x55_SendVersion+0xdc>)
 8000bae:	461c      	mov	r4, r3
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000bb4:	6020      	str	r0, [r4, #0]
 8000bb6:	6061      	str	r1, [r4, #4]
 8000bb8:	60a2      	str	r2, [r4, #8]

	int datalen = strlen(&Buffer[3]);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3303      	adds	r3, #3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fb00 	bl	80001c4 <strlen>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	60fb      	str	r3, [r7, #12]

	Protocol_0x55_SetLength(Buffer, datalen);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	4619      	mov	r1, r3
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f000 f83f 	bl	8000c52 <Protocol_0x55_SetLength>
	Protocol_0x55_AddCRC(Buffer, datalen);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	4619      	mov	r1, r3
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f000 f848 	bl	8000c70 <Protocol_0x55_AddCRC>
	Protocol_0x55_Send(Buffer, datalen);
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	4619      	mov	r1, r3
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f000 f8a5 	bl	8000d36 <Protocol_0x55_Send>
}
 8000bec:	bf00      	nop
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8000bf4:	08007d60 	.word	0x08007d60
 8000bf8:	08007d80 	.word	0x08007d80
 8000bfc:	08007d8c 	.word	0x08007d8c
 8000c00:	08007d90 	.word	0x08007d90

08000c04 <Protocol_0x55_PrepareNewMessage>:

void Protocol_0x55_PrepareNewMessage(char *Buffer, char Command, char Response)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	70fb      	strb	r3, [r7, #3]
 8000c10:	4613      	mov	r3, r2
 8000c12:	70bb      	strb	r3, [r7, #2]
	memset((uint8_t*)Buffer, 0, sizeof(Buffer));
 8000c14:	2204      	movs	r2, #4
 8000c16:	2100      	movs	r1, #0
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f006 ffc1 	bl	8007ba0 <memset>

	Buffer[0] = 0x55;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2255      	movs	r2, #85	; 0x55
 8000c22:	701a      	strb	r2, [r3, #0]
	Buffer[1] = (Command & 0x7f);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3301      	adds	r3, #1
 8000c28:	78fa      	ldrb	r2, [r7, #3]
 8000c2a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	701a      	strb	r2, [r3, #0]

	if (Response == 1) {Buffer[1] = Buffer[1] | 0x80;}		// Set high bit
 8000c32:	78bb      	ldrb	r3, [r7, #2]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d108      	bne.n	8000c4a <Protocol_0x55_PrepareNewMessage+0x46>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	781a      	ldrb	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	3301      	adds	r3, #1
 8000c42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	701a      	strb	r2, [r3, #0]
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <Protocol_0x55_SetLength>:

void Protocol_0x55_SetLength(char *Buffer, uint8_t datalen)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b083      	sub	sp, #12
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	70fb      	strb	r3, [r7, #3]
	Buffer[2] = datalen;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3302      	adds	r3, #2
 8000c62:	78fa      	ldrb	r2, [r7, #3]
 8000c64:	701a      	strb	r2, [r3, #0]
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr

08000c70 <Protocol_0x55_AddCRC>:

void Protocol_0x55_AddCRC(char *Buffer, uint8_t datalen)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
	// 0x55 CMD LEN + datalen
	uint16_t Result = Protocol_0x55_CalculateCRC16(Buffer, datalen);
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f000 f816 	bl	8000cb2 <Protocol_0x55_CalculateCRC16>
 8000c86:	4603      	mov	r3, r0
 8000c88:	81fb      	strh	r3, [r7, #14]

	Buffer[datalen+3] 	= (Result & 0xff);
 8000c8a:	78fb      	ldrb	r3, [r7, #3]
 8000c8c:	3303      	adds	r3, #3
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	89fa      	ldrh	r2, [r7, #14]
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	701a      	strb	r2, [r3, #0]
	Buffer[datalen+4]	= ((Result >> 8) & 0xff);
 8000c98:	89fb      	ldrh	r3, [r7, #14]
 8000c9a:	0a1b      	lsrs	r3, r3, #8
 8000c9c:	b299      	uxth	r1, r3
 8000c9e:	78fb      	ldrb	r3, [r7, #3]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	b2ca      	uxtb	r2, r1
 8000ca8:	701a      	strb	r2, [r3, #0]
}
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <Protocol_0x55_CalculateCRC16>:
//------------------------------------------------------------------------
// CRC-16 / Modbus version. start at 0xFFFF, 0x8005 reversed
// Reversed because CRC is shifted right instead of left.
//------------------------------------------------------------------------
uint16_t Protocol_0x55_CalculateCRC16(char *data, uint8_t msgSize)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b085      	sub	sp, #20
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	460b      	mov	r3, r1
 8000cbc:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0xFFFF; // Initial value of CRC
 8000cbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cc2:	81fb      	strh	r3, [r7, #14]
	uint16_t crclen = msgSize - 2;	// Substract 2 CRC bytes
 8000cc4:	78fb      	ldrb	r3, [r7, #3]
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	3b02      	subs	r3, #2
 8000cca:	817b      	strh	r3, [r7, #10]

	for (uint8_t i = 0; i < crclen; i++) {
 8000ccc:	2300      	movs	r3, #0
 8000cce:	737b      	strb	r3, [r7, #13]
 8000cd0:	e026      	b.n	8000d20 <Protocol_0x55_CalculateCRC16+0x6e>
		crc ^= data[i]; // XOR the next data byte
 8000cd2:	7b7b      	ldrb	r3, [r7, #13]
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	89fb      	ldrh	r3, [r7, #14]
 8000cde:	4053      	eors	r3, r2
 8000ce0:	81fb      	strh	r3, [r7, #14]

		for (uint8_t j = 0; j < 8; j++) {
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	733b      	strb	r3, [r7, #12]
 8000ce6:	e015      	b.n	8000d14 <Protocol_0x55_CalculateCRC16+0x62>
			if (crc & 0x0001) {
 8000ce8:	89fb      	ldrh	r3, [r7, #14]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d00a      	beq.n	8000d08 <Protocol_0x55_CalculateCRC16+0x56>
				crc >>= 1;
 8000cf2:	89fb      	ldrh	r3, [r7, #14]
 8000cf4:	085b      	lsrs	r3, r3, #1
 8000cf6:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001; // Polynomial for CRC-16/MODBUS (0x8005 reversed)
 8000cf8:	89fb      	ldrh	r3, [r7, #14]
 8000cfa:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8000cfe:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8000d02:	43db      	mvns	r3, r3
 8000d04:	81fb      	strh	r3, [r7, #14]
 8000d06:	e002      	b.n	8000d0e <Protocol_0x55_CalculateCRC16+0x5c>
			} else {
				crc >>= 1;
 8000d08:	89fb      	ldrh	r3, [r7, #14]
 8000d0a:	085b      	lsrs	r3, r3, #1
 8000d0c:	81fb      	strh	r3, [r7, #14]
		for (uint8_t j = 0; j < 8; j++) {
 8000d0e:	7b3b      	ldrb	r3, [r7, #12]
 8000d10:	3301      	adds	r3, #1
 8000d12:	733b      	strb	r3, [r7, #12]
 8000d14:	7b3b      	ldrb	r3, [r7, #12]
 8000d16:	2b07      	cmp	r3, #7
 8000d18:	d9e6      	bls.n	8000ce8 <Protocol_0x55_CalculateCRC16+0x36>
	for (uint8_t i = 0; i < crclen; i++) {
 8000d1a:	7b7b      	ldrb	r3, [r7, #13]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	737b      	strb	r3, [r7, #13]
 8000d20:	7b7b      	ldrb	r3, [r7, #13]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	897a      	ldrh	r2, [r7, #10]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d8d3      	bhi.n	8000cd2 <Protocol_0x55_CalculateCRC16+0x20>
			}
		}
	}

	return crc;
 8000d2a:	89fb      	ldrh	r3, [r7, #14]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr

08000d36 <Protocol_0x55_Send>:

void Protocol_0x55_Send(char *data, uint8_t datalen)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	460b      	mov	r3, r1
 8000d40:	70fb      	strb	r3, [r7, #3]
	CDC_Transmit_FS((uint8_t*)data, 3 + datalen + 2);
 8000d42:	78fb      	ldrb	r3, [r7, #3]
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	3305      	adds	r3, #5
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f006 fabb 	bl	80072c8 <CDC_Transmit_FS>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <System_Initialize>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void System_Initialize()
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim14);
 8000d60:	4806      	ldr	r0, [pc, #24]	; (8000d7c <System_Initialize+0x20>)
 8000d62:	f002 fcfb 	bl	800375c <HAL_TIM_Base_Start_IT>

	RGBLeds_Init();
 8000d66:	f7ff fc77 	bl	8000658 <RGBLeds_Init>

	LeftArm_Init(&htim9);
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <System_Initialize+0x24>)
 8000d6c:	f7ff fbb4 	bl	80004d8 <LeftArm_Init>
	RightArm_Init(&htim9);
 8000d70:	4803      	ldr	r0, [pc, #12]	; (8000d80 <System_Initialize+0x24>)
 8000d72:	f7ff fc53 	bl	800061c <RightArm_Init>
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000ac4 	.word	0x20000ac4
 8000d80:	20000a7c 	.word	0x20000a7c

08000d84 <System_SelfTest>:

void System_SelfTest()
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	RGBLeds_SelfTest(False);
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f7ff fe69 	bl	8000a60 <RGBLeds_SelfTest>

	LeftArm_SelfTest(True);
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f7ff fbcc 	bl	800052c <LeftArm_SelfTest>
//	RightArm_SelfTest(True);

//	LeftArm_EnableBrake(False);
//	RightArm_EnableBrake(False);
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <Check_USB_Communication>:

void Check_USB_Communication()
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	if (Protocol_0x55_CheckFifo() > 0)
 8000d9c:	f7ff fea6 	bl	8000aec <Protocol_0x55_CheckFifo>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <Check_USB_Communication+0x12>
	{
		Protocol_0x55_ProcessRxCommand();
 8000da6:	f7ff fead 	bl	8000b04 <Protocol_0x55_ProcessRxCommand>

		// if (valid) --> find module to handle command
	}
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db4:	f000 fb54 	bl	8001460 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db8:	f000 f830 	bl	8000e1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dbc:	f000 f8ea 	bl	8000f94 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000dc0:	f006 f9b6 	bl	8007130 <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 8000dc4:	f000 f8c2 	bl	8000f4c <MX_TIM14_Init>
  MX_TIM9_Init();
 8000dc8:	f000 f870 	bl	8000eac <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  System_Initialize();
 8000dcc:	f7ff ffc6 	bl	8000d5c <System_Initialize>
  System_SelfTest();
 8000dd0:	f7ff ffd8 	bl	8000d84 <System_SelfTest>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (Update_10Hz)
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <main+0x60>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d008      	beq.n	8000dee <main+0x3e>
	  {
		  Update_10Hz = 0;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <main+0x60>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
		  RGBLeds_Update10Hz();
 8000de2:	f7ff fd63 	bl	80008ac <RGBLeds_Update10Hz>

		  LeftArm_Update10Hz();
 8000de6:	f7ff fbb3 	bl	8000550 <LeftArm_Update10Hz>
		  RightArm_Update10Hz();
 8000dea:	f7ff fc2f 	bl	800064c <RightArm_Update10Hz>
	  }

	  if (Update_5Hz)
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <main+0x64>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d002      	beq.n	8000dfc <main+0x4c>
	  {
		  Update_5Hz = 0;
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <main+0x64>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
	  }

	  if (Update_2Hz)
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <main+0x68>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d002      	beq.n	8000e0a <main+0x5a>
	  {
		  Update_2Hz = 0;
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <main+0x68>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
	  }

	  Check_USB_Communication();
 8000e0a:	f7ff ffc5 	bl	8000d98 <Check_USB_Communication>
	  if (Update_10Hz)
 8000e0e:	e7e1      	b.n	8000dd4 <main+0x24>
 8000e10:	20000250 	.word	0x20000250
 8000e14:	20000230 	.word	0x20000230
 8000e18:	20000254 	.word	0x20000254

08000e1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b092      	sub	sp, #72	; 0x48
 8000e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e22:	f107 0318 	add.w	r3, r7, #24
 8000e26:	2230      	movs	r2, #48	; 0x30
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f006 feb8 	bl	8007ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
 8000e3a:	60da      	str	r2, [r3, #12]
 8000e3c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e42:	2301      	movs	r3, #1
 8000e44:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e46:	2301      	movs	r3, #1
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e4a:	2310      	movs	r3, #16
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e56:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e58:	2304      	movs	r3, #4
 8000e5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e5c:	23c0      	movs	r3, #192	; 0xc0
 8000e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e60:	2302      	movs	r3, #2
 8000e62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000e64:	2308      	movs	r3, #8
 8000e66:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e68:	f107 0318 	add.w	r3, r7, #24
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f001 ffa1 	bl	8002db4 <HAL_RCC_OscConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000e78:	f000 f958 	bl	800112c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e7c:	230f      	movs	r3, #15
 8000e7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f002 f9dd 	bl	8003254 <HAL_RCC_ClockConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000ea0:	f000 f944 	bl	800112c <Error_Handler>
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	3748      	adds	r7, #72	; 0x48
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
 8000ec0:	615a      	str	r2, [r3, #20]
 8000ec2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <MX_TIM9_Init+0x98>)
 8000ec6:	4a20      	ldr	r2, [pc, #128]	; (8000f48 <MX_TIM9_Init+0x9c>)
 8000ec8:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 15;
 8000eca:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <MX_TIM9_Init+0x98>)
 8000ecc:	220f      	movs	r2, #15
 8000ece:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <MX_TIM9_Init+0x98>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 100;
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <MX_TIM9_Init+0x98>)
 8000ed8:	2264      	movs	r2, #100	; 0x64
 8000eda:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000edc:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <MX_TIM9_Init+0x98>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <MX_TIM9_Init+0x98>)
 8000ee4:	2280      	movs	r2, #128	; 0x80
 8000ee6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000ee8:	4816      	ldr	r0, [pc, #88]	; (8000f44 <MX_TIM9_Init+0x98>)
 8000eea:	f002 fca5 	bl	8003838 <HAL_TIM_PWM_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM9_Init+0x4c>
  {
    Error_Handler();
 8000ef4:	f000 f91a 	bl	800112c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef8:	2360      	movs	r3, #96	; 0x60
 8000efa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	480d      	ldr	r0, [pc, #52]	; (8000f44 <MX_TIM9_Init+0x98>)
 8000f10:	f002 feb2 	bl	8003c78 <HAL_TIM_PWM_ConfigChannel>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 8000f1a:	f000 f907 	bl	800112c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2204      	movs	r2, #4
 8000f22:	4619      	mov	r1, r3
 8000f24:	4807      	ldr	r0, [pc, #28]	; (8000f44 <MX_TIM9_Init+0x98>)
 8000f26:	f002 fea7 	bl	8003c78 <HAL_TIM_PWM_ConfigChannel>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8000f30:	f000 f8fc 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000f34:	4803      	ldr	r0, [pc, #12]	; (8000f44 <MX_TIM9_Init+0x98>)
 8000f36:	f000 f96b 	bl	8001210 <HAL_TIM_MspPostInit>

}
 8000f3a:	bf00      	nop
 8000f3c:	3720      	adds	r7, #32
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000a7c 	.word	0x20000a7c
 8000f48:	40014000 	.word	0x40014000

08000f4c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000f50:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_TIM14_Init+0x40>)
 8000f52:	4a0f      	ldr	r2, [pc, #60]	; (8000f90 <MX_TIM14_Init+0x44>)
 8000f54:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1599;
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <MX_TIM14_Init+0x40>)
 8000f58:	f240 623f 	movw	r2, #1599	; 0x63f
 8000f5c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MX_TIM14_Init+0x40>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_TIM14_Init+0x40>)
 8000f66:	2263      	movs	r2, #99	; 0x63
 8000f68:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <MX_TIM14_Init+0x40>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_TIM14_Init+0x40>)
 8000f72:	2280      	movs	r2, #128	; 0x80
 8000f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_TIM14_Init+0x40>)
 8000f78:	f002 fb3a 	bl	80035f0 <HAL_TIM_Base_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000f82:	f000 f8d3 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000ac4 	.word	0x20000ac4
 8000f90:	40002000 	.word	0x40002000

08000f94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b5a      	ldr	r3, [pc, #360]	; (8001118 <MX_GPIO_Init+0x184>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a59      	ldr	r2, [pc, #356]	; (8001118 <MX_GPIO_Init+0x184>)
 8000fb4:	f043 0310 	orr.w	r3, r3, #16
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b57      	ldr	r3, [pc, #348]	; (8001118 <MX_GPIO_Init+0x184>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0310 	and.w	r3, r3, #16
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b53      	ldr	r3, [pc, #332]	; (8001118 <MX_GPIO_Init+0x184>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a52      	ldr	r2, [pc, #328]	; (8001118 <MX_GPIO_Init+0x184>)
 8000fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b50      	ldr	r3, [pc, #320]	; (8001118 <MX_GPIO_Init+0x184>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	4b4c      	ldr	r3, [pc, #304]	; (8001118 <MX_GPIO_Init+0x184>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a4b      	ldr	r2, [pc, #300]	; (8001118 <MX_GPIO_Init+0x184>)
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b49      	ldr	r3, [pc, #292]	; (8001118 <MX_GPIO_Init+0x184>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0308 	and.w	r3, r3, #8
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	4b45      	ldr	r3, [pc, #276]	; (8001118 <MX_GPIO_Init+0x184>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a44      	ldr	r2, [pc, #272]	; (8001118 <MX_GPIO_Init+0x184>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b42      	ldr	r3, [pc, #264]	; (8001118 <MX_GPIO_Init+0x184>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	603b      	str	r3, [r7, #0]
 800101e:	4b3e      	ldr	r3, [pc, #248]	; (8001118 <MX_GPIO_Init+0x184>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a3d      	ldr	r2, [pc, #244]	; (8001118 <MX_GPIO_Init+0x184>)
 8001024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b3b      	ldr	r3, [pc, #236]	; (8001118 <MX_GPIO_Init+0x184>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LeftArmBrake_Pin|RightArmBrake_Pin|LeftArmUp_Pin, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	2116      	movs	r1, #22
 800103a:	4838      	ldr	r0, [pc, #224]	; (800111c <MX_GPIO_Init+0x188>)
 800103c:	f000 fd4c 	bl	8001ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RightArmRed_Pin|RightArmGreen_Pin|RightArmBlue_Pin, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8001046:	4836      	ldr	r0, [pc, #216]	; (8001120 <MX_GPIO_Init+0x18c>)
 8001048:	f000 fd46 	bl	8001ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LeftArmRed_Pin|LeftArmGreen_Pin|LeftArmBlue_Pin, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001052:	4834      	ldr	r0, [pc, #208]	; (8001124 <MX_GPIO_Init+0x190>)
 8001054:	f000 fd40 	bl	8001ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BaseRed_Pin|BaseGreen_Pin|BaseBlue_Pin, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 800105e:	4832      	ldr	r0, [pc, #200]	; (8001128 <MX_GPIO_Init+0x194>)
 8001060:	f000 fd3a 	bl	8001ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LeftArmBrake_Pin LeftArmUp_Pin */
  GPIO_InitStruct.Pin = LeftArmBrake_Pin|LeftArmUp_Pin;
 8001064:	2306      	movs	r3, #6
 8001066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001068:	2301      	movs	r3, #1
 800106a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800106c:	2302      	movs	r3, #2
 800106e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001070:	2301      	movs	r3, #1
 8001072:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	4619      	mov	r1, r3
 800107a:	4828      	ldr	r0, [pc, #160]	; (800111c <MX_GPIO_Init+0x188>)
 800107c:	f000 fb8e 	bl	800179c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001080:	2308      	movs	r3, #8
 8001082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001084:	2300      	movs	r3, #0
 8001086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	4822      	ldr	r0, [pc, #136]	; (800111c <MX_GPIO_Init+0x188>)
 8001094:	f000 fb82 	bl	800179c <HAL_GPIO_Init>

  /*Configure GPIO pin : RightArmBrake_Pin */
  GPIO_InitStruct.Pin = RightArmBrake_Pin;
 8001098:	2310      	movs	r3, #16
 800109a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RightArmBrake_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4619      	mov	r1, r3
 80010ae:	481b      	ldr	r0, [pc, #108]	; (800111c <MX_GPIO_Init+0x188>)
 80010b0:	f000 fb74 	bl	800179c <HAL_GPIO_Init>

  /*Configure GPIO pins : RightArmRed_Pin RightArmGreen_Pin RightArmBlue_Pin */
  GPIO_InitStruct.Pin = RightArmRed_Pin|RightArmGreen_Pin|RightArmBlue_Pin;
 80010b4:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80010b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	2301      	movs	r3, #1
 80010bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010be:	2302      	movs	r3, #2
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	4814      	ldr	r0, [pc, #80]	; (8001120 <MX_GPIO_Init+0x18c>)
 80010ce:	f000 fb65 	bl	800179c <HAL_GPIO_Init>

  /*Configure GPIO pins : LeftArmRed_Pin LeftArmGreen_Pin LeftArmBlue_Pin */
  GPIO_InitStruct.Pin = LeftArmRed_Pin|LeftArmGreen_Pin|LeftArmBlue_Pin;
 80010d2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80010d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d8:	2301      	movs	r3, #1
 80010da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010dc:	2302      	movs	r3, #2
 80010de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4619      	mov	r1, r3
 80010ea:	480e      	ldr	r0, [pc, #56]	; (8001124 <MX_GPIO_Init+0x190>)
 80010ec:	f000 fb56 	bl	800179c <HAL_GPIO_Init>

  /*Configure GPIO pins : BaseRed_Pin BaseGreen_Pin BaseBlue_Pin */
  GPIO_InitStruct.Pin = BaseRed_Pin|BaseGreen_Pin|BaseBlue_Pin;
 80010f0:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80010f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4807      	ldr	r0, [pc, #28]	; (8001128 <MX_GPIO_Init+0x194>)
 800110a:	f000 fb47 	bl	800179c <HAL_GPIO_Init>

}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	; 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	40021000 	.word	0x40021000
 8001120:	40020c00 	.word	0x40020c00
 8001124:	40021c00 	.word	0x40021c00
 8001128:	40021800 	.word	0x40021800

0800112c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001130:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001132:	e7fe      	b.n	8001132 <Error_Handler+0x6>

08001134 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <HAL_MspInit+0x48>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	4a0e      	ldr	r2, [pc, #56]	; (800117c <HAL_MspInit+0x48>)
 8001144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001148:	6453      	str	r3, [r2, #68]	; 0x44
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <HAL_MspInit+0x48>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <HAL_MspInit+0x48>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	4a07      	ldr	r2, [pc, #28]	; (800117c <HAL_MspInit+0x48>)
 8001160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001164:	6413      	str	r3, [r2, #64]	; 0x40
 8001166:	4b05      	ldr	r3, [pc, #20]	; (800117c <HAL_MspInit+0x48>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	40023800 	.word	0x40023800

08001180 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <HAL_TIM_PWM_MspInit+0x38>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d10d      	bne.n	80011ae <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <HAL_TIM_PWM_MspInit+0x3c>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	4a08      	ldr	r2, [pc, #32]	; (80011bc <HAL_TIM_PWM_MspInit+0x3c>)
 800119c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a0:	6453      	str	r3, [r2, #68]	; 0x44
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_TIM_PWM_MspInit+0x3c>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80011ae:	bf00      	nop
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	40014000 	.word	0x40014000
 80011bc:	40023800 	.word	0x40023800

080011c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <HAL_TIM_Base_MspInit+0x48>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d115      	bne.n	80011fe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <HAL_TIM_Base_MspInit+0x4c>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	4a0c      	ldr	r2, [pc, #48]	; (800120c <HAL_TIM_Base_MspInit+0x4c>)
 80011dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e0:	6413      	str	r3, [r2, #64]	; 0x40
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_TIM_Base_MspInit+0x4c>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	202d      	movs	r0, #45	; 0x2d
 80011f4:	f000 fa9b 	bl	800172e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80011f8:	202d      	movs	r0, #45	; 0x2d
 80011fa:	f000 fab4 	bl	8001766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40002000 	.word	0x40002000
 800120c:	40023800 	.word	0x40023800

08001210 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a12      	ldr	r2, [pc, #72]	; (8001278 <HAL_TIM_MspPostInit+0x68>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d11d      	bne.n	800126e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <HAL_TIM_MspPostInit+0x6c>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a10      	ldr	r2, [pc, #64]	; (800127c <HAL_TIM_MspPostInit+0x6c>)
 800123c:	f043 0310 	orr.w	r3, r3, #16
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <HAL_TIM_MspPostInit+0x6c>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0310 	and.w	r3, r3, #16
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800124e:	2360      	movs	r3, #96	; 0x60
 8001250:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800125e:	2303      	movs	r3, #3
 8001260:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	4619      	mov	r1, r3
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <HAL_TIM_MspPostInit+0x70>)
 800126a:	f000 fa97 	bl	800179c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800126e:	bf00      	nop
 8001270:	3720      	adds	r7, #32
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40014000 	.word	0x40014000
 800127c:	40023800 	.word	0x40023800
 8001280:	40021000 	.word	0x40021000

08001284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <NMI_Handler+0x4>

0800128a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128e:	e7fe      	b.n	800128e <HardFault_Handler+0x4>

08001290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <MemManage_Handler+0x4>

08001296 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800129a:	e7fe      	b.n	800129a <BusFault_Handler+0x4>

0800129c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <UsageFault_Handler+0x4>

080012a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr

080012ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr

080012c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ca:	f000 f91b 	bl	8001504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

	// 100 Hz counter for various purposes
	TIM14_Counter += 1;
 80012d8:	4b22      	ldr	r3, [pc, #136]	; (8001364 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	3301      	adds	r3, #1
 80012de:	4a21      	ldr	r2, [pc, #132]	; (8001364 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 80012e0:	6013      	str	r3, [r2, #0]

	// 1 Hz overflow
	if (TIM14_Counter == 100)
 80012e2:	4b20      	ldr	r3, [pc, #128]	; (8001364 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b64      	cmp	r3, #100	; 0x64
 80012e8:	d102      	bne.n	80012f0 <TIM8_TRG_COM_TIM14_IRQHandler+0x1c>
	{
		TIM14_Counter = 0;
 80012ea:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
	}

	if ((TIM14_Counter % 10) == 0)
 80012f0:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 80012f2:	6819      	ldr	r1, [r3, #0]
 80012f4:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 80012f6:	fb83 2301 	smull	r2, r3, r3, r1
 80012fa:	109a      	asrs	r2, r3, #2
 80012fc:	17cb      	asrs	r3, r1, #31
 80012fe:	1ad2      	subs	r2, r2, r3
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	1aca      	subs	r2, r1, r3
 800130a:	2a00      	cmp	r2, #0
 800130c:	d102      	bne.n	8001314 <TIM8_TRG_COM_TIM14_IRQHandler+0x40>
	{
		Update_10Hz = 1;
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 8001310:	2201      	movs	r2, #1
 8001312:	601a      	str	r2, [r3, #0]
	}

	if ((TIM14_Counter % 20) == 0)
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8001316:	6819      	ldr	r1, [r3, #0]
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 800131a:	fb83 2301 	smull	r2, r3, r3, r1
 800131e:	10da      	asrs	r2, r3, #3
 8001320:	17cb      	asrs	r3, r1, #31
 8001322:	1ad2      	subs	r2, r2, r3
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	1aca      	subs	r2, r1, r3
 800132e:	2a00      	cmp	r2, #0
 8001330:	d102      	bne.n	8001338 <TIM8_TRG_COM_TIM14_IRQHandler+0x64>
	{
		Update_5Hz = 1;
 8001332:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 8001334:	2201      	movs	r2, #1
 8001336:	601a      	str	r2, [r3, #0]
	}

	if ((TIM14_Counter % 50) == 0)
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <TIM8_TRG_COM_TIM14_IRQHandler+0xa0>)
 800133e:	fb83 1302 	smull	r1, r3, r3, r2
 8001342:	1119      	asrs	r1, r3, #4
 8001344:	17d3      	asrs	r3, r2, #31
 8001346:	1acb      	subs	r3, r1, r3
 8001348:	2132      	movs	r1, #50	; 0x32
 800134a:	fb01 f303 	mul.w	r3, r1, r3
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d102      	bne.n	800135a <TIM8_TRG_COM_TIM14_IRQHandler+0x86>
	{
		Update_2Hz = 1;
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <TIM8_TRG_COM_TIM14_IRQHandler+0xa4>)
 8001356:	2201      	movs	r2, #1
 8001358:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800135a:	4808      	ldr	r0, [pc, #32]	; (800137c <TIM8_TRG_COM_TIM14_IRQHandler+0xa8>)
 800135c:	f002 fb84 	bl	8003a68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000200 	.word	0x20000200
 8001368:	66666667 	.word	0x66666667
 800136c:	20000250 	.word	0x20000250
 8001370:	20000230 	.word	0x20000230
 8001374:	51eb851f 	.word	0x51eb851f
 8001378:	20000254 	.word	0x20000254
 800137c:	20000ac4 	.word	0x20000ac4

08001380 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <OTG_FS_IRQHandler+0x10>)
 8001386:	f000 fcfe 	bl	8001d86 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20001fd4 	.word	0x20001fd4

08001394 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800139c:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <_sbrk+0x5c>)
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <_sbrk+0x60>)
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d102      	bne.n	80013b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <_sbrk+0x64>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	; (80013fc <_sbrk+0x68>)
 80013b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d207      	bcs.n	80013d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c4:	f006 fbb2 	bl	8007b2c <__errno>
 80013c8:	4602      	mov	r2, r0
 80013ca:	230c      	movs	r3, #12
 80013cc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013d2:	e009      	b.n	80013e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <_sbrk+0x64>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <_sbrk+0x64>)
 80013e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013e6:	68fb      	ldr	r3, [r7, #12]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20020000 	.word	0x20020000
 80013f4:	00000400 	.word	0x00000400
 80013f8:	20000204 	.word	0x20000204
 80013fc:	200023d8 	.word	0x200023d8

08001400 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800140c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001444 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001410:	480d      	ldr	r0, [pc, #52]	; (8001448 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001412:	490e      	ldr	r1, [pc, #56]	; (800144c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001414:	4a0e      	ldr	r2, [pc, #56]	; (8001450 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001418:	e002      	b.n	8001420 <LoopCopyDataInit>

0800141a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800141c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141e:	3304      	adds	r3, #4

08001420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001424:	d3f9      	bcc.n	800141a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001426:	4a0b      	ldr	r2, [pc, #44]	; (8001454 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001428:	4c0b      	ldr	r4, [pc, #44]	; (8001458 <LoopFillZerobss+0x26>)
  movs r3, #0
 800142a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800142c:	e001      	b.n	8001432 <LoopFillZerobss>

0800142e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001430:	3204      	adds	r2, #4

08001432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001434:	d3fb      	bcc.n	800142e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001436:	f7ff ffe3 	bl	8001400 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800143a:	f006 fb7d 	bl	8007b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800143e:	f7ff fcb7 	bl	8000db0 <main>
  bx  lr
 8001442:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001444:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800144c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001450:	08007e04 	.word	0x08007e04
  ldr r2, =_sbss
 8001454:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001458:	200023d8 	.word	0x200023d8

0800145c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800145c:	e7fe      	b.n	800145c <ADC_IRQHandler>
	...

08001460 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001464:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <HAL_Init+0x40>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0d      	ldr	r2, [pc, #52]	; (80014a0 <HAL_Init+0x40>)
 800146a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800146e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_Init+0x40>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <HAL_Init+0x40>)
 8001476:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800147a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <HAL_Init+0x40>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <HAL_Init+0x40>)
 8001482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001486:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001488:	2003      	movs	r0, #3
 800148a:	f000 f945 	bl	8001718 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800148e:	2000      	movs	r0, #0
 8001490:	f000 f808 	bl	80014a4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001494:	f7ff fe4e 	bl	8001134 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023c00 	.word	0x40023c00

080014a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_InitTick+0x54>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_InitTick+0x58>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80014be:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f95d 	bl	8001782 <HAL_SYSTICK_Config>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00e      	b.n	80014f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b0f      	cmp	r3, #15
 80014d6:	d80a      	bhi.n	80014ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d8:	2200      	movs	r2, #0
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014e0:	f000 f925 	bl	800172e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e4:	4a06      	ldr	r2, [pc, #24]	; (8001500 <HAL_InitTick+0x5c>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e000      	b.n	80014f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000008 	.word	0x20000008
 8001500:	20000004 	.word	0x20000004

08001504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_IncTick+0x1c>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_IncTick+0x20>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4413      	add	r3, r2
 8001514:	4a03      	ldr	r2, [pc, #12]	; (8001524 <HAL_IncTick+0x20>)
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	20000008 	.word	0x20000008
 8001524:	20000b0c 	.word	0x20000b0c

08001528 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return uwTick;
 800152c:	4b02      	ldr	r3, [pc, #8]	; (8001538 <HAL_GetTick+0x10>)
 800152e:	681b      	ldr	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	20000b0c 	.word	0x20000b0c

0800153c <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001544:	f7ff fff0 	bl	8001528 <HAL_GetTick>
 8001548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001554:	d005      	beq.n	8001562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <HAL_Delay+0x40>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4413      	add	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001562:	bf00      	nop
 8001564:	f7ff ffe0 	bl	8001528 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	429a      	cmp	r2, r3
 8001572:	d8f7      	bhi.n	8001564 <HAL_Delay+0x28>
  {
  }
}
 8001574:	bf00      	nop
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000008 	.word	0x20000008

08001580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800159c:	4013      	ands	r3, r2
 800159e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b2:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <__NVIC_SetPriorityGrouping+0x44>)
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	60d3      	str	r3, [r2, #12]
}
 80015b8:	bf00      	nop
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	f003 0307 	and.w	r3, r3, #7
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	db0b      	blt.n	800160e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	f003 021f 	and.w	r2, r3, #31
 80015fc:	4906      	ldr	r1, [pc, #24]	; (8001618 <__NVIC_EnableIRQ+0x34>)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	095b      	lsrs	r3, r3, #5
 8001604:	2001      	movs	r0, #1
 8001606:	fa00 f202 	lsl.w	r2, r0, r2
 800160a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	e000e100 	.word	0xe000e100

0800161c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	6039      	str	r1, [r7, #0]
 8001626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162c:	2b00      	cmp	r3, #0
 800162e:	db0a      	blt.n	8001646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	490c      	ldr	r1, [pc, #48]	; (8001668 <__NVIC_SetPriority+0x4c>)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	0112      	lsls	r2, r2, #4
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	440b      	add	r3, r1
 8001640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001644:	e00a      	b.n	800165c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4908      	ldr	r1, [pc, #32]	; (800166c <__NVIC_SetPriority+0x50>)
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	3b04      	subs	r3, #4
 8001654:	0112      	lsls	r2, r2, #4
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	440b      	add	r3, r1
 800165a:	761a      	strb	r2, [r3, #24]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000e100 	.word	0xe000e100
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001670:	b480      	push	{r7}
 8001672:	b089      	sub	sp, #36	; 0x24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f1c3 0307 	rsb	r3, r3, #7
 800168a:	2b04      	cmp	r3, #4
 800168c:	bf28      	it	cs
 800168e:	2304      	movcs	r3, #4
 8001690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3304      	adds	r3, #4
 8001696:	2b06      	cmp	r3, #6
 8001698:	d902      	bls.n	80016a0 <NVIC_EncodePriority+0x30>
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3b03      	subs	r3, #3
 800169e:	e000      	b.n	80016a2 <NVIC_EncodePriority+0x32>
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43da      	mvns	r2, r3
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	401a      	ands	r2, r3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa01 f303 	lsl.w	r3, r1, r3
 80016c2:	43d9      	mvns	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	4313      	orrs	r3, r2
         );
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3724      	adds	r7, #36	; 0x24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3b01      	subs	r3, #1
 80016e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e4:	d301      	bcc.n	80016ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e6:	2301      	movs	r3, #1
 80016e8:	e00f      	b.n	800170a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <SysTick_Config+0x40>)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f2:	210f      	movs	r1, #15
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016f8:	f7ff ff90 	bl	800161c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <SysTick_Config+0x40>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001702:	4b04      	ldr	r3, [pc, #16]	; (8001714 <SysTick_Config+0x40>)
 8001704:	2207      	movs	r2, #7
 8001706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	e000e010 	.word	0xe000e010

08001718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff ff2d 	bl	8001580 <__NVIC_SetPriorityGrouping>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800172e:	b580      	push	{r7, lr}
 8001730:	b086      	sub	sp, #24
 8001732:	af00      	add	r7, sp, #0
 8001734:	4603      	mov	r3, r0
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001740:	f7ff ff42 	bl	80015c8 <__NVIC_GetPriorityGrouping>
 8001744:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	68b9      	ldr	r1, [r7, #8]
 800174a:	6978      	ldr	r0, [r7, #20]
 800174c:	f7ff ff90 	bl	8001670 <NVIC_EncodePriority>
 8001750:	4602      	mov	r2, r0
 8001752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001756:	4611      	mov	r1, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff5f 	bl	800161c <__NVIC_SetPriority>
}
 800175e:	bf00      	nop
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	4603      	mov	r3, r0
 800176e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff35 	bl	80015e4 <__NVIC_EnableIRQ>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ffa2 	bl	80016d4 <SysTick_Config>
 8001790:	4603      	mov	r3, r0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800179c:	b480      	push	{r7}
 800179e:	b087      	sub	sp, #28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017aa:	e16f      	b.n	8001a8c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	2101      	movs	r1, #1
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	fa01 f303 	lsl.w	r3, r1, r3
 80017b8:	4013      	ands	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 8161 	beq.w	8001a86 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d005      	beq.n	80017dc <HAL_GPIO_Init+0x40>
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d130      	bne.n	800183e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	68da      	ldr	r2, [r3, #12]
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4313      	orrs	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001812:	2201      	movs	r2, #1
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	091b      	lsrs	r3, r3, #4
 8001828:	f003 0201 	and.w	r2, r3, #1
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	2b03      	cmp	r3, #3
 8001848:	d017      	beq.n	800187a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	2203      	movs	r2, #3
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d123      	bne.n	80018ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	08da      	lsrs	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3208      	adds	r2, #8
 800188e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001892:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	220f      	movs	r2, #15
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	691a      	ldr	r2, [r3, #16]
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	08da      	lsrs	r2, r3, #3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3208      	adds	r2, #8
 80018c8:	6939      	ldr	r1, [r7, #16]
 80018ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	2203      	movs	r2, #3
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 0203 	and.w	r2, r3, #3
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 80bb 	beq.w	8001a86 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	4b64      	ldr	r3, [pc, #400]	; (8001aa8 <HAL_GPIO_Init+0x30c>)
 8001916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001918:	4a63      	ldr	r2, [pc, #396]	; (8001aa8 <HAL_GPIO_Init+0x30c>)
 800191a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800191e:	6453      	str	r3, [r2, #68]	; 0x44
 8001920:	4b61      	ldr	r3, [pc, #388]	; (8001aa8 <HAL_GPIO_Init+0x30c>)
 8001922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800192c:	4a5f      	ldr	r2, [pc, #380]	; (8001aac <HAL_GPIO_Init+0x310>)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	089b      	lsrs	r3, r3, #2
 8001932:	3302      	adds	r3, #2
 8001934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001938:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	220f      	movs	r2, #15
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a57      	ldr	r2, [pc, #348]	; (8001ab0 <HAL_GPIO_Init+0x314>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d031      	beq.n	80019bc <HAL_GPIO_Init+0x220>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a56      	ldr	r2, [pc, #344]	; (8001ab4 <HAL_GPIO_Init+0x318>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d02b      	beq.n	80019b8 <HAL_GPIO_Init+0x21c>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a55      	ldr	r2, [pc, #340]	; (8001ab8 <HAL_GPIO_Init+0x31c>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d025      	beq.n	80019b4 <HAL_GPIO_Init+0x218>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a54      	ldr	r2, [pc, #336]	; (8001abc <HAL_GPIO_Init+0x320>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d01f      	beq.n	80019b0 <HAL_GPIO_Init+0x214>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a53      	ldr	r2, [pc, #332]	; (8001ac0 <HAL_GPIO_Init+0x324>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d019      	beq.n	80019ac <HAL_GPIO_Init+0x210>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a52      	ldr	r2, [pc, #328]	; (8001ac4 <HAL_GPIO_Init+0x328>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d013      	beq.n	80019a8 <HAL_GPIO_Init+0x20c>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a51      	ldr	r2, [pc, #324]	; (8001ac8 <HAL_GPIO_Init+0x32c>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d00d      	beq.n	80019a4 <HAL_GPIO_Init+0x208>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a50      	ldr	r2, [pc, #320]	; (8001acc <HAL_GPIO_Init+0x330>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d007      	beq.n	80019a0 <HAL_GPIO_Init+0x204>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a4f      	ldr	r2, [pc, #316]	; (8001ad0 <HAL_GPIO_Init+0x334>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d101      	bne.n	800199c <HAL_GPIO_Init+0x200>
 8001998:	2308      	movs	r3, #8
 800199a:	e010      	b.n	80019be <HAL_GPIO_Init+0x222>
 800199c:	2309      	movs	r3, #9
 800199e:	e00e      	b.n	80019be <HAL_GPIO_Init+0x222>
 80019a0:	2307      	movs	r3, #7
 80019a2:	e00c      	b.n	80019be <HAL_GPIO_Init+0x222>
 80019a4:	2306      	movs	r3, #6
 80019a6:	e00a      	b.n	80019be <HAL_GPIO_Init+0x222>
 80019a8:	2305      	movs	r3, #5
 80019aa:	e008      	b.n	80019be <HAL_GPIO_Init+0x222>
 80019ac:	2304      	movs	r3, #4
 80019ae:	e006      	b.n	80019be <HAL_GPIO_Init+0x222>
 80019b0:	2303      	movs	r3, #3
 80019b2:	e004      	b.n	80019be <HAL_GPIO_Init+0x222>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e002      	b.n	80019be <HAL_GPIO_Init+0x222>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <HAL_GPIO_Init+0x222>
 80019bc:	2300      	movs	r3, #0
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	f002 0203 	and.w	r2, r2, #3
 80019c4:	0092      	lsls	r2, r2, #2
 80019c6:	4093      	lsls	r3, r2
 80019c8:	461a      	mov	r2, r3
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019d0:	4936      	ldr	r1, [pc, #216]	; (8001aac <HAL_GPIO_Init+0x310>)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	089b      	lsrs	r3, r3, #2
 80019d6:	3302      	adds	r3, #2
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019de:	4b3d      	ldr	r3, [pc, #244]	; (8001ad4 <HAL_GPIO_Init+0x338>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a02:	4a34      	ldr	r2, [pc, #208]	; (8001ad4 <HAL_GPIO_Init+0x338>)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a08:	4b32      	ldr	r3, [pc, #200]	; (8001ad4 <HAL_GPIO_Init+0x338>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a2c:	4a29      	ldr	r2, [pc, #164]	; (8001ad4 <HAL_GPIO_Init+0x338>)
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a32:	4b28      	ldr	r3, [pc, #160]	; (8001ad4 <HAL_GPIO_Init+0x338>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a56:	4a1f      	ldr	r2, [pc, #124]	; (8001ad4 <HAL_GPIO_Init+0x338>)
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <HAL_GPIO_Init+0x338>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a80:	4a14      	ldr	r2, [pc, #80]	; (8001ad4 <HAL_GPIO_Init+0x338>)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	fa22 f303 	lsr.w	r3, r2, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f47f ae88 	bne.w	80017ac <HAL_GPIO_Init+0x10>
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	371c      	adds	r7, #28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40013800 	.word	0x40013800
 8001ab0:	40020000 	.word	0x40020000
 8001ab4:	40020400 	.word	0x40020400
 8001ab8:	40020800 	.word	0x40020800
 8001abc:	40020c00 	.word	0x40020c00
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40021400 	.word	0x40021400
 8001ac8:	40021800 	.word	0x40021800
 8001acc:	40021c00 	.word	0x40021c00
 8001ad0:	40022000 	.word	0x40022000
 8001ad4:	40013c00 	.word	0x40013c00

08001ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ae8:	787b      	ldrb	r3, [r7, #1]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aee:	887a      	ldrh	r2, [r7, #2]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001af4:	e003      	b.n	8001afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001af6:	887b      	ldrh	r3, [r7, #2]
 8001af8:	041a      	lsls	r2, r3, #16
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	619a      	str	r2, [r3, #24]
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr

08001b08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b0a:	b08f      	sub	sp, #60	; 0x3c
 8001b0c:	af0a      	add	r7, sp, #40	; 0x28
 8001b0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e10f      	b.n	8001d3a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d106      	bne.n	8001b3a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f005 fcfb 	bl	8007530 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d102      	bne.n	8001b54 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f002 fd03 	bl	8004564 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	687e      	ldr	r6, [r7, #4]
 8001b66:	466d      	mov	r5, sp
 8001b68:	f106 0410 	add.w	r4, r6, #16
 8001b6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b78:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b7c:	1d33      	adds	r3, r6, #4
 8001b7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b80:	6838      	ldr	r0, [r7, #0]
 8001b82:	f002 fbe5 	bl	8004350 <USB_CoreInit>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0d0      	b.n	8001d3a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f002 fcf0 	bl	8004584 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	73fb      	strb	r3, [r7, #15]
 8001ba8:	e04a      	b.n	8001c40 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001baa:	7bfa      	ldrb	r2, [r7, #15]
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	1a9b      	subs	r3, r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	333d      	adds	r3, #61	; 0x3d
 8001bba:	2201      	movs	r2, #1
 8001bbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bbe:	7bfa      	ldrb	r2, [r7, #15]
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	1a9b      	subs	r3, r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	440b      	add	r3, r1
 8001bcc:	333c      	adds	r3, #60	; 0x3c
 8001bce:	7bfa      	ldrb	r2, [r7, #15]
 8001bd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bd2:	7bfa      	ldrb	r2, [r7, #15]
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	b298      	uxth	r0, r3
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	1a9b      	subs	r3, r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	440b      	add	r3, r1
 8001be4:	3342      	adds	r3, #66	; 0x42
 8001be6:	4602      	mov	r2, r0
 8001be8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bea:	7bfa      	ldrb	r2, [r7, #15]
 8001bec:	6879      	ldr	r1, [r7, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	1a9b      	subs	r3, r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	333f      	adds	r3, #63	; 0x3f
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bfe:	7bfa      	ldrb	r2, [r7, #15]
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	1a9b      	subs	r3, r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	3344      	adds	r3, #68	; 0x44
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c12:	7bfa      	ldrb	r2, [r7, #15]
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	1a9b      	subs	r3, r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	440b      	add	r3, r1
 8001c20:	3348      	adds	r3, #72	; 0x48
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c26:	7bfa      	ldrb	r2, [r7, #15]
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	1a9b      	subs	r3, r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	440b      	add	r3, r1
 8001c34:	3350      	adds	r3, #80	; 0x50
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
 8001c40:	7bfa      	ldrb	r2, [r7, #15]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d3af      	bcc.n	8001baa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	73fb      	strb	r3, [r7, #15]
 8001c4e:	e044      	b.n	8001cda <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c50:	7bfa      	ldrb	r2, [r7, #15]
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	1a9b      	subs	r3, r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c66:	7bfa      	ldrb	r2, [r7, #15]
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	1a9b      	subs	r3, r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	440b      	add	r3, r1
 8001c74:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001c78:	7bfa      	ldrb	r2, [r7, #15]
 8001c7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	1a9b      	subs	r3, r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c92:	7bfa      	ldrb	r2, [r7, #15]
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	1a9b      	subs	r3, r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ca8:	7bfa      	ldrb	r2, [r7, #15]
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	1a9b      	subs	r3, r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cbe:	7bfa      	ldrb	r2, [r7, #15]
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	1a9b      	subs	r3, r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	440b      	add	r3, r1
 8001ccc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	73fb      	strb	r3, [r7, #15]
 8001cda:	7bfa      	ldrb	r2, [r7, #15]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d3b5      	bcc.n	8001c50 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	603b      	str	r3, [r7, #0]
 8001cea:	687e      	ldr	r6, [r7, #4]
 8001cec:	466d      	mov	r5, sp
 8001cee:	f106 0410 	add.w	r4, r6, #16
 8001cf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cfa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cfe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d02:	1d33      	adds	r3, r6, #4
 8001d04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d06:	6838      	ldr	r0, [r7, #0]
 8001d08:	f002 fc88 	bl	800461c <USB_DevInit>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d005      	beq.n	8001d1e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2202      	movs	r2, #2
 8001d16:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e00d      	b.n	8001d3a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f003 fcf9 	bl	800572a <USB_DevDisconnect>

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d42 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <HAL_PCD_Start+0x16>
 8001d54:	2302      	movs	r3, #2
 8001d56:	e012      	b.n	8001d7e <HAL_PCD_Start+0x3c>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f002 fbed 	bl	8004544 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f003 fcbb 	bl	80056ea <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d86:	b590      	push	{r4, r7, lr}
 8001d88:	b08d      	sub	sp, #52	; 0x34
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f003 fd72 	bl	8005886 <USB_GetMode>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f040 838f 	bne.w	80024c8 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f003 fcdb 	bl	800576a <USB_ReadInterrupts>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 8385 	beq.w	80024c6 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f003 fcd2 	bl	800576a <USB_ReadInterrupts>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d107      	bne.n	8001de0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	695a      	ldr	r2, [r3, #20]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f002 0202 	and.w	r2, r2, #2
 8001dde:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f003 fcc0 	bl	800576a <USB_ReadInterrupts>
 8001dea:	4603      	mov	r3, r0
 8001dec:	f003 0310 	and.w	r3, r3, #16
 8001df0:	2b10      	cmp	r3, #16
 8001df2:	d161      	bne.n	8001eb8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	699a      	ldr	r2, [r3, #24]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0210 	bic.w	r2, r2, #16
 8001e02:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	f003 020f 	and.w	r2, r3, #15
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	1a9b      	subs	r3, r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	4413      	add	r3, r2
 8001e20:	3304      	adds	r3, #4
 8001e22:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	0c5b      	lsrs	r3, r3, #17
 8001e28:	f003 030f 	and.w	r3, r3, #15
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d124      	bne.n	8001e7a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d035      	beq.n	8001ea8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	091b      	lsrs	r3, r3, #4
 8001e44:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	6a38      	ldr	r0, [r7, #32]
 8001e50:	f003 fafd 	bl	800544e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	091b      	lsrs	r3, r3, #4
 8001e5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e60:	441a      	add	r2, r3
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	699a      	ldr	r2, [r3, #24]
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	091b      	lsrs	r3, r3, #4
 8001e6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e72:	441a      	add	r2, r3
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	619a      	str	r2, [r3, #24]
 8001e78:	e016      	b.n	8001ea8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	0c5b      	lsrs	r3, r3, #17
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	2b06      	cmp	r3, #6
 8001e84:	d110      	bne.n	8001ea8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	4619      	mov	r1, r3
 8001e90:	6a38      	ldr	r0, [r7, #32]
 8001e92:	f003 fadc 	bl	800544e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	699a      	ldr	r2, [r3, #24]
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	091b      	lsrs	r3, r3, #4
 8001e9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ea2:	441a      	add	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	699a      	ldr	r2, [r3, #24]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0210 	orr.w	r2, r2, #16
 8001eb6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f003 fc54 	bl	800576a <USB_ReadInterrupts>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ec8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001ecc:	d16e      	bne.n	8001fac <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 fc59 	bl	800578e <USB_ReadDevAllOutEpInterrupt>
 8001edc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001ede:	e062      	b.n	8001fa6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d057      	beq.n	8001f9a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f003 fc7c 	bl	80057f2 <USB_ReadDevOutEPInterrupt>
 8001efa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00c      	beq.n	8001f20 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	015a      	lsls	r2, r3, #5
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f12:	461a      	mov	r2, r3
 8001f14:	2301      	movs	r3, #1
 8001f16:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 fda2 	bl	8002a64 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00c      	beq.n	8001f44 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	015a      	lsls	r2, r3, #5
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f36:	461a      	mov	r2, r3
 8001f38:	2308      	movs	r3, #8
 8001f3a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 fe9c 	bl	8002c7c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d008      	beq.n	8001f60 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	015a      	lsls	r2, r3, #5
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	2310      	movs	r3, #16
 8001f5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	f003 0320 	and.w	r3, r3, #32
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d008      	beq.n	8001f7c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	015a      	lsls	r2, r3, #5
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	4413      	add	r3, r2
 8001f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f76:	461a      	mov	r2, r3
 8001f78:	2320      	movs	r3, #32
 8001f7a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d009      	beq.n	8001f9a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f92:	461a      	mov	r2, r3
 8001f94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f98:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa2:	085b      	lsrs	r3, r3, #1
 8001fa4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d199      	bne.n	8001ee0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f003 fbda 	bl	800576a <USB_ReadInterrupts>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001fc0:	f040 80c0 	bne.w	8002144 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f003 fbf9 	bl	80057c0 <USB_ReadDevAllInEpInterrupt>
 8001fce:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001fd4:	e0b2      	b.n	800213c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 80a7 	beq.w	8002130 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f003 fc1d 	bl	800582c <USB_ReadDevInEPInterrupt>
 8001ff2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d057      	beq.n	80020ae <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	2201      	movs	r2, #1
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	43db      	mvns	r3, r3
 8002018:	69f9      	ldr	r1, [r7, #28]
 800201a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800201e:	4013      	ands	r3, r2
 8002020:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	4413      	add	r3, r2
 800202a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800202e:	461a      	mov	r2, r3
 8002030:	2301      	movs	r3, #1
 8002032:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d132      	bne.n	80020a2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002040:	4613      	mov	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	1a9b      	subs	r3, r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	3348      	adds	r3, #72	; 0x48
 800204c:	6819      	ldr	r1, [r3, #0]
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002052:	4613      	mov	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	1a9b      	subs	r3, r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4403      	add	r3, r0
 800205c:	3344      	adds	r3, #68	; 0x44
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4419      	add	r1, r3
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	1a9b      	subs	r3, r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4403      	add	r3, r0
 8002070:	3348      	adds	r3, #72	; 0x48
 8002072:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	2b00      	cmp	r3, #0
 8002078:	d113      	bne.n	80020a2 <HAL_PCD_IRQHandler+0x31c>
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800207e:	4613      	mov	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	1a9b      	subs	r3, r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	440b      	add	r3, r1
 8002088:	3350      	adds	r3, #80	; 0x50
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d108      	bne.n	80020a2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800209a:	461a      	mov	r2, r3
 800209c:	2101      	movs	r1, #1
 800209e:	f003 fc21 	bl	80058e4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	4619      	mov	r1, r3
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f005 fac2 	bl	8007632 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	015a      	lsls	r2, r3, #5
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	4413      	add	r3, r2
 80020c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020c4:	461a      	mov	r2, r3
 80020c6:	2308      	movs	r3, #8
 80020c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	015a      	lsls	r2, r3, #5
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020e0:	461a      	mov	r2, r3
 80020e2:	2310      	movs	r3, #16
 80020e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d008      	beq.n	8002102 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020fc:	461a      	mov	r2, r3
 80020fe:	2340      	movs	r3, #64	; 0x40
 8002100:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	015a      	lsls	r2, r3, #5
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	4413      	add	r3, r2
 8002114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002118:	461a      	mov	r2, r3
 800211a:	2302      	movs	r3, #2
 800211c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002128:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 fc0c 	bl	8002948 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	3301      	adds	r3, #1
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002138:	085b      	lsrs	r3, r3, #1
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800213c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213e:	2b00      	cmp	r3, #0
 8002140:	f47f af49 	bne.w	8001fd6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f003 fb0e 	bl	800576a <USB_ReadInterrupts>
 800214e:	4603      	mov	r3, r0
 8002150:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002154:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002158:	d114      	bne.n	8002184 <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	69fa      	ldr	r2, [r7, #28]
 8002164:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002168:	f023 0301 	bic.w	r3, r3, #1
 800216c:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f005 fad6 	bl	8007720 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695a      	ldr	r2, [r3, #20]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002182:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f003 faee 	bl	800576a <USB_ReadInterrupts>
 800218e:	4603      	mov	r3, r0
 8002190:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002194:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002198:	d112      	bne.n	80021c0 <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d102      	bne.n	80021b0 <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f005 fa92 	bl	80076d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695a      	ldr	r2, [r3, #20]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80021be:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f003 fad0 	bl	800576a <USB_ReadInterrupts>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021d4:	f040 80c7 	bne.w	8002366 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	69fa      	ldr	r2, [r7, #28]
 80021e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021e6:	f023 0301 	bic.w	r3, r3, #1
 80021ea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2110      	movs	r1, #16
 80021f2:	4618      	mov	r0, r3
 80021f4:	f002 fb76 	bl	80048e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021f8:	2300      	movs	r3, #0
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021fc:	e056      	b.n	80022ac <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80021fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	4413      	add	r3, r2
 8002206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800220a:	461a      	mov	r2, r3
 800220c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002210:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	4413      	add	r3, r2
 800221a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002222:	0151      	lsls	r1, r2, #5
 8002224:	69fa      	ldr	r2, [r7, #28]
 8002226:	440a      	add	r2, r1
 8002228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800222c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002230:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	4413      	add	r3, r2
 800223a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002242:	0151      	lsls	r1, r2, #5
 8002244:	69fa      	ldr	r2, [r7, #28]
 8002246:	440a      	add	r2, r1
 8002248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800224c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002250:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002254:	015a      	lsls	r2, r3, #5
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	4413      	add	r3, r2
 800225a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800225e:	461a      	mov	r2, r3
 8002260:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002264:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002268:	015a      	lsls	r2, r3, #5
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	4413      	add	r3, r2
 800226e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002276:	0151      	lsls	r1, r2, #5
 8002278:	69fa      	ldr	r2, [r7, #28]
 800227a:	440a      	add	r2, r1
 800227c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002280:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002284:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002288:	015a      	lsls	r2, r3, #5
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	4413      	add	r3, r2
 800228e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002296:	0151      	lsls	r1, r2, #5
 8002298:	69fa      	ldr	r2, [r7, #28]
 800229a:	440a      	add	r2, r1
 800229c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80022a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80022a4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a8:	3301      	adds	r3, #1
 80022aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d3a3      	bcc.n	80021fe <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022c4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80022c8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d016      	beq.n	8002300 <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022dc:	69fa      	ldr	r2, [r7, #28]
 80022de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022e2:	f043 030b 	orr.w	r3, r3, #11
 80022e6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	69fa      	ldr	r2, [r7, #28]
 80022f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022f8:	f043 030b 	orr.w	r3, r3, #11
 80022fc:	6453      	str	r3, [r2, #68]	; 0x44
 80022fe:	e015      	b.n	800232c <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	69fa      	ldr	r2, [r7, #28]
 800230a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800230e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002312:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002316:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	69fa      	ldr	r2, [r7, #28]
 8002322:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002326:	f043 030b 	orr.w	r3, r3, #11
 800232a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	69fa      	ldr	r2, [r7, #28]
 8002336:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800233a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800233e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002350:	461a      	mov	r2, r3
 8002352:	f003 fac7 	bl	80058e4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695a      	ldr	r2, [r3, #20]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002364:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f003 f9fd 	bl	800576a <USB_ReadInterrupts>
 8002370:	4603      	mov	r3, r0
 8002372:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800237a:	d124      	bne.n	80023c6 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f003 fa8d 	bl	80058a0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f002 fb06 	bl	800499c <USB_GetDevSpeed>
 8002390:	4603      	mov	r3, r0
 8002392:	461a      	mov	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681c      	ldr	r4, [r3, #0]
 800239c:	f001 f91e 	bl	80035dc <HAL_RCC_GetHCLKFreq>
 80023a0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	4620      	mov	r0, r4
 80023ac:	f002 f828 	bl	8004400 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f005 f966 	bl	8007682 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80023c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f003 f9cd 	bl	800576a <USB_ReadInterrupts>
 80023d0:	4603      	mov	r3, r0
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d10a      	bne.n	80023f0 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f005 f943 	bl	8007666 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695a      	ldr	r2, [r3, #20]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f002 0208 	and.w	r2, r2, #8
 80023ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f003 f9b8 	bl	800576a <USB_ReadInterrupts>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002404:	d10f      	bne.n	8002426 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	b2db      	uxtb	r3, r3
 800240e:	4619      	mov	r1, r3
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f005 f9a5 	bl	8007760 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	695a      	ldr	r2, [r3, #20]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002424:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f003 f99d 	bl	800576a <USB_ReadInterrupts>
 8002430:	4603      	mov	r3, r0
 8002432:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002436:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800243a:	d10f      	bne.n	800245c <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	b2db      	uxtb	r3, r3
 8002444:	4619      	mov	r1, r3
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f005 f978 	bl	800773c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695a      	ldr	r2, [r3, #20]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800245a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f003 f982 	bl	800576a <USB_ReadInterrupts>
 8002466:	4603      	mov	r3, r0
 8002468:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800246c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002470:	d10a      	bne.n	8002488 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f005 f986 	bl	8007784 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695a      	ldr	r2, [r3, #20]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002486:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f003 f96c 	bl	800576a <USB_ReadInterrupts>
 8002492:	4603      	mov	r3, r0
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b04      	cmp	r3, #4
 800249a:	d115      	bne.n	80024c8 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f005 f976 	bl	80077a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6859      	ldr	r1, [r3, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	605a      	str	r2, [r3, #4]
 80024c4:	e000      	b.n	80024c8 <HAL_PCD_IRQHandler+0x742>
      return;
 80024c6:	bf00      	nop
    }
  }
}
 80024c8:	3734      	adds	r7, #52	; 0x34
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd90      	pop	{r4, r7, pc}

080024ce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	460b      	mov	r3, r1
 80024d8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_PCD_SetAddress+0x1a>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e013      	b.n	8002510 <HAL_PCD_SetAddress+0x42>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	78fa      	ldrb	r2, [r7, #3]
 80024f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	78fa      	ldrb	r2, [r7, #3]
 80024fe:	4611      	mov	r1, r2
 8002500:	4618      	mov	r0, r3
 8002502:	f003 f8cd 	bl	80056a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	4608      	mov	r0, r1
 8002522:	4611      	mov	r1, r2
 8002524:	461a      	mov	r2, r3
 8002526:	4603      	mov	r3, r0
 8002528:	70fb      	strb	r3, [r7, #3]
 800252a:	460b      	mov	r3, r1
 800252c:	803b      	strh	r3, [r7, #0]
 800252e:	4613      	mov	r3, r2
 8002530:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002536:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800253a:	2b00      	cmp	r3, #0
 800253c:	da0f      	bge.n	800255e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800253e:	78fb      	ldrb	r3, [r7, #3]
 8002540:	f003 020f 	and.w	r2, r3, #15
 8002544:	4613      	mov	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	1a9b      	subs	r3, r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	3338      	adds	r3, #56	; 0x38
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	4413      	add	r3, r2
 8002552:	3304      	adds	r3, #4
 8002554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2201      	movs	r2, #1
 800255a:	705a      	strb	r2, [r3, #1]
 800255c:	e00f      	b.n	800257e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800255e:	78fb      	ldrb	r3, [r7, #3]
 8002560:	f003 020f 	and.w	r2, r3, #15
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	4413      	add	r3, r2
 8002574:	3304      	adds	r3, #4
 8002576:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800257e:	78fb      	ldrb	r3, [r7, #3]
 8002580:	f003 030f 	and.w	r3, r3, #15
 8002584:	b2da      	uxtb	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800258a:	883a      	ldrh	r2, [r7, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	78ba      	ldrb	r2, [r7, #2]
 8002594:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	785b      	ldrb	r3, [r3, #1]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d004      	beq.n	80025a8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80025a8:	78bb      	ldrb	r3, [r7, #2]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d102      	bne.n	80025b4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <HAL_PCD_EP_Open+0xaa>
 80025be:	2302      	movs	r3, #2
 80025c0:	e00e      	b.n	80025e0 <HAL_PCD_EP_Open+0xc8>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68f9      	ldr	r1, [r7, #12]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f002 fa07 	bl	80049e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80025de:	7afb      	ldrb	r3, [r7, #11]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	da0f      	bge.n	800261c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025fc:	78fb      	ldrb	r3, [r7, #3]
 80025fe:	f003 020f 	and.w	r2, r3, #15
 8002602:	4613      	mov	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	1a9b      	subs	r3, r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	3338      	adds	r3, #56	; 0x38
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	4413      	add	r3, r2
 8002610:	3304      	adds	r3, #4
 8002612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	705a      	strb	r2, [r3, #1]
 800261a:	e00f      	b.n	800263c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800261c:	78fb      	ldrb	r3, [r7, #3]
 800261e:	f003 020f 	and.w	r2, r3, #15
 8002622:	4613      	mov	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	1a9b      	subs	r3, r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	4413      	add	r3, r2
 8002632:	3304      	adds	r3, #4
 8002634:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	b2da      	uxtb	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_PCD_EP_Close+0x6e>
 8002652:	2302      	movs	r3, #2
 8002654:	e00e      	b.n	8002674 <HAL_PCD_EP_Close+0x8c>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68f9      	ldr	r1, [r7, #12]
 8002664:	4618      	mov	r0, r3
 8002666:	f002 fa43 	bl	8004af0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	607a      	str	r2, [r7, #4]
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	460b      	mov	r3, r1
 800268a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800268c:	7afb      	ldrb	r3, [r7, #11]
 800268e:	f003 020f 	and.w	r2, r3, #15
 8002692:	4613      	mov	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	1a9b      	subs	r3, r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4413      	add	r3, r2
 80026a2:	3304      	adds	r3, #4
 80026a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2200      	movs	r2, #0
 80026b6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	2200      	movs	r2, #0
 80026bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026be:	7afb      	ldrb	r3, [r7, #11]
 80026c0:	f003 030f 	and.w	r3, r3, #15
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d102      	bne.n	80026d8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026d8:	7afb      	ldrb	r3, [r7, #11]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d109      	bne.n	80026f6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	6979      	ldr	r1, [r7, #20]
 80026f0:	f002 fd1e 	bl	8005130 <USB_EP0StartXfer>
 80026f4:	e008      	b.n	8002708 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	6979      	ldr	r1, [r7, #20]
 8002704:	f002 fad0 	bl	8004ca8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	460b      	mov	r3, r1
 800271c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800271e:	78fb      	ldrb	r3, [r7, #3]
 8002720:	f003 020f 	and.w	r2, r3, #15
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	1a9b      	subs	r3, r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002734:	681b      	ldr	r3, [r3, #0]
}
 8002736:	4618      	mov	r0, r3
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	607a      	str	r2, [r7, #4]
 800274a:	603b      	str	r3, [r7, #0]
 800274c:	460b      	mov	r3, r1
 800274e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002750:	7afb      	ldrb	r3, [r7, #11]
 8002752:	f003 020f 	and.w	r2, r3, #15
 8002756:	4613      	mov	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	1a9b      	subs	r3, r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	3338      	adds	r3, #56	; 0x38
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	4413      	add	r3, r2
 8002764:	3304      	adds	r3, #4
 8002766:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	2200      	movs	r2, #0
 8002778:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2201      	movs	r2, #1
 800277e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002780:	7afb      	ldrb	r3, [r7, #11]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	b2da      	uxtb	r2, r3
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d102      	bne.n	800279a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800279a:	7afb      	ldrb	r3, [r7, #11]
 800279c:	f003 030f 	and.w	r3, r3, #15
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d109      	bne.n	80027b8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	461a      	mov	r2, r3
 80027b0:	6979      	ldr	r1, [r7, #20]
 80027b2:	f002 fcbd 	bl	8005130 <USB_EP0StartXfer>
 80027b6:	e008      	b.n	80027ca <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	6979      	ldr	r1, [r7, #20]
 80027c6:	f002 fa6f 	bl	8004ca8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80027e0:	78fb      	ldrb	r3, [r7, #3]
 80027e2:	f003 020f 	and.w	r2, r3, #15
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d901      	bls.n	80027f2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e050      	b.n	8002894 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	da0f      	bge.n	800281a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	f003 020f 	and.w	r2, r3, #15
 8002800:	4613      	mov	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	3338      	adds	r3, #56	; 0x38
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	3304      	adds	r3, #4
 8002810:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2201      	movs	r2, #1
 8002816:	705a      	strb	r2, [r3, #1]
 8002818:	e00d      	b.n	8002836 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	4613      	mov	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	1a9b      	subs	r3, r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	4413      	add	r3, r2
 800282c:	3304      	adds	r3, #4
 800282e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2201      	movs	r2, #1
 800283a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	b2da      	uxtb	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_PCD_EP_SetStall+0x82>
 8002852:	2302      	movs	r3, #2
 8002854:	e01e      	b.n	8002894 <HAL_PCD_EP_SetStall+0xc0>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68f9      	ldr	r1, [r7, #12]
 8002864:	4618      	mov	r0, r3
 8002866:	f002 fe49 	bl	80054fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800286a:	78fb      	ldrb	r3, [r7, #3]
 800286c:	f003 030f 	and.w	r3, r3, #15
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10a      	bne.n	800288a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6818      	ldr	r0, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	b2d9      	uxtb	r1, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002884:	461a      	mov	r2, r3
 8002886:	f003 f82d 	bl	80058e4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028a8:	78fb      	ldrb	r3, [r7, #3]
 80028aa:	f003 020f 	and.w	r2, r3, #15
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d901      	bls.n	80028ba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e042      	b.n	8002940 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	da0f      	bge.n	80028e2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	f003 020f 	and.w	r2, r3, #15
 80028c8:	4613      	mov	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	3338      	adds	r3, #56	; 0x38
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	4413      	add	r3, r2
 80028d6:	3304      	adds	r3, #4
 80028d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2201      	movs	r2, #1
 80028de:	705a      	strb	r2, [r3, #1]
 80028e0:	e00f      	b.n	8002902 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	f003 020f 	and.w	r2, r3, #15
 80028e8:	4613      	mov	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	1a9b      	subs	r3, r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	4413      	add	r3, r2
 80028f8:	3304      	adds	r3, #4
 80028fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	b2da      	uxtb	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_PCD_EP_ClrStall+0x86>
 800291e:	2302      	movs	r3, #2
 8002920:	e00e      	b.n	8002940 <HAL_PCD_EP_ClrStall+0xa4>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68f9      	ldr	r1, [r7, #12]
 8002930:	4618      	mov	r0, r3
 8002932:	f002 fe50 	bl	80055d6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08a      	sub	sp, #40	; 0x28
 800294c:	af02      	add	r7, sp, #8
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	1a9b      	subs	r3, r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	3338      	adds	r3, #56	; 0x38
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	4413      	add	r3, r2
 800296c:	3304      	adds	r3, #4
 800296e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	699a      	ldr	r2, [r3, #24]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	429a      	cmp	r2, r3
 800297a:	d901      	bls.n	8002980 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e06c      	b.n	8002a5a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	695a      	ldr	r2, [r3, #20]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	69fa      	ldr	r2, [r7, #28]
 8002992:	429a      	cmp	r2, r3
 8002994:	d902      	bls.n	800299c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	3303      	adds	r3, #3
 80029a0:	089b      	lsrs	r3, r3, #2
 80029a2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029a4:	e02b      	b.n	80029fe <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	695a      	ldr	r2, [r3, #20]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	69fa      	ldr	r2, [r7, #28]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d902      	bls.n	80029c2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3303      	adds	r3, #3
 80029c6:	089b      	lsrs	r3, r3, #2
 80029c8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	68d9      	ldr	r1, [r3, #12]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	4603      	mov	r3, r0
 80029e0:	6978      	ldr	r0, [r7, #20]
 80029e2:	f002 fcf7 	bl	80053d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	441a      	add	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	699a      	ldr	r2, [r3, #24]
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	441a      	add	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	015a      	lsls	r2, r3, #5
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4413      	add	r3, r2
 8002a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d809      	bhi.n	8002a28 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	699a      	ldr	r2, [r3, #24]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d203      	bcs.n	8002a28 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1be      	bne.n	80029a6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	695a      	ldr	r2, [r3, #20]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d811      	bhi.n	8002a58 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	6939      	ldr	r1, [r7, #16]
 8002a50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a54:	4013      	ands	r3, r2
 8002a56:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3720      	adds	r7, #32
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	333c      	adds	r3, #60	; 0x3c
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	015a      	lsls	r2, r3, #5
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	f040 80a0 	bne.w	8002bdc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d015      	beq.n	8002ad2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4a72      	ldr	r2, [pc, #456]	; (8002c74 <PCD_EP_OutXfrComplete_int+0x210>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	f240 80dd 	bls.w	8002c6a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 80d7 	beq.w	8002c6a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac8:	461a      	mov	r2, r3
 8002aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ace:	6093      	str	r3, [r2, #8]
 8002ad0:	e0cb      	b.n	8002c6a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d009      	beq.n	8002af0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2320      	movs	r3, #32
 8002aec:	6093      	str	r3, [r2, #8]
 8002aee:	e0bc      	b.n	8002c6a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f040 80b7 	bne.w	8002c6a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4a5d      	ldr	r2, [pc, #372]	; (8002c74 <PCD_EP_OutXfrComplete_int+0x210>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d90f      	bls.n	8002b24 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b20:	6093      	str	r3, [r2, #8]
 8002b22:	e0a2      	b.n	8002c6a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b36:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	0159      	lsls	r1, r3, #5
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	440b      	add	r3, r1
 8002b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002b4a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	4613      	mov	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4403      	add	r3, r0
 8002b5a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002b5e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	4613      	mov	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	1a9b      	subs	r3, r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b72:	6819      	ldr	r1, [r3, #0]
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4403      	add	r3, r0
 8002b82:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4419      	add	r1, r3
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4403      	add	r3, r0
 8002b98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b9c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d114      	bne.n	8002bce <PCD_EP_OutXfrComplete_int+0x16a>
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d108      	bne.n	8002bce <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	2101      	movs	r1, #1
 8002bca:	f002 fe8b 	bl	80058e4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f004 fd11 	bl	80075fc <HAL_PCD_DataOutStageCallback>
 8002bda:	e046      	b.n	8002c6a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4a26      	ldr	r2, [pc, #152]	; (8002c78 <PCD_EP_OutXfrComplete_int+0x214>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d124      	bne.n	8002c2e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00a      	beq.n	8002c04 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	015a      	lsls	r2, r3, #5
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c00:	6093      	str	r3, [r2, #8]
 8002c02:	e032      	b.n	8002c6a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f003 0320 	and.w	r3, r3, #32
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d008      	beq.n	8002c20 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	2320      	movs	r3, #32
 8002c1e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	4619      	mov	r1, r3
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f004 fce8 	bl	80075fc <HAL_PCD_DataOutStageCallback>
 8002c2c:	e01d      	b.n	8002c6a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d114      	bne.n	8002c5e <PCD_EP_OutXfrComplete_int+0x1fa>
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d108      	bne.n	8002c5e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6818      	ldr	r0, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c56:	461a      	mov	r2, r3
 8002c58:	2100      	movs	r1, #0
 8002c5a:	f002 fe43 	bl	80058e4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	4619      	mov	r1, r3
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f004 fcc9 	bl	80075fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	4f54300a 	.word	0x4f54300a
 8002c78:	4f54310a 	.word	0x4f54310a

08002c7c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	333c      	adds	r3, #60	; 0x3c
 8002c94:	3304      	adds	r3, #4
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4a15      	ldr	r2, [pc, #84]	; (8002d04 <PCD_EP_OutSetupPacket_int+0x88>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d90e      	bls.n	8002cd0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d009      	beq.n	8002cd0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cc8:	461a      	mov	r2, r3
 8002cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f004 fc81 	bl	80075d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4a0a      	ldr	r2, [pc, #40]	; (8002d04 <PCD_EP_OutSetupPacket_int+0x88>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d90c      	bls.n	8002cf8 <PCD_EP_OutSetupPacket_int+0x7c>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d108      	bne.n	8002cf8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6818      	ldr	r0, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	f002 fdf6 	bl	80058e4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	4f54300a 	.word	0x4f54300a

08002d08 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	70fb      	strb	r3, [r7, #3]
 8002d14:	4613      	mov	r3, r2
 8002d16:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d107      	bne.n	8002d36 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002d26:	883b      	ldrh	r3, [r7, #0]
 8002d28:	0419      	lsls	r1, r3, #16
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	629a      	str	r2, [r3, #40]	; 0x28
 8002d34:	e028      	b.n	8002d88 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	0c1b      	lsrs	r3, r3, #16
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	4413      	add	r3, r2
 8002d42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d44:	2300      	movs	r3, #0
 8002d46:	73fb      	strb	r3, [r7, #15]
 8002d48:	e00d      	b.n	8002d66 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	3340      	adds	r3, #64	; 0x40
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	0c1b      	lsrs	r3, r3, #16
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	3301      	adds	r3, #1
 8002d64:	73fb      	strb	r3, [r7, #15]
 8002d66:	7bfa      	ldrb	r2, [r7, #15]
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d3ec      	bcc.n	8002d4a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002d70:	883b      	ldrh	r3, [r7, #0]
 8002d72:	0418      	lsls	r0, r3, #16
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6819      	ldr	r1, [r3, #0]
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	4302      	orrs	r2, r0
 8002d80:	3340      	adds	r3, #64	; 0x40
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	887a      	ldrh	r2, [r7, #2]
 8002da6:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08a      	sub	sp, #40	; 0x28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e237      	b.n	8003236 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d050      	beq.n	8002e74 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dd2:	4ba3      	ldr	r3, [pc, #652]	; (8003060 <HAL_RCC_OscConfig+0x2ac>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d00c      	beq.n	8002df8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dde:	4ba0      	ldr	r3, [pc, #640]	; (8003060 <HAL_RCC_OscConfig+0x2ac>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	d112      	bne.n	8002e10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dea:	4b9d      	ldr	r3, [pc, #628]	; (8003060 <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002df6:	d10b      	bne.n	8002e10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df8:	4b99      	ldr	r3, [pc, #612]	; (8003060 <HAL_RCC_OscConfig+0x2ac>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d036      	beq.n	8002e72 <HAL_RCC_OscConfig+0xbe>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d132      	bne.n	8002e72 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e212      	b.n	8003236 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	4b93      	ldr	r3, [pc, #588]	; (8003064 <HAL_RCC_OscConfig+0x2b0>)
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d013      	beq.n	8002e4a <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e22:	f7fe fb81 	bl	8001528 <HAL_GetTick>
 8002e26:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e2a:	f7fe fb7d 	bl	8001528 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b64      	cmp	r3, #100	; 0x64
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e1fc      	b.n	8003236 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3c:	4b88      	ldr	r3, [pc, #544]	; (8003060 <HAL_RCC_OscConfig+0x2ac>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCC_OscConfig+0x76>
 8002e48:	e014      	b.n	8002e74 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4a:	f7fe fb6d 	bl	8001528 <HAL_GetTick>
 8002e4e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e52:	f7fe fb69 	bl	8001528 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b64      	cmp	r3, #100	; 0x64
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e1e8      	b.n	8003236 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e64:	4b7e      	ldr	r3, [pc, #504]	; (8003060 <HAL_RCC_OscConfig+0x2ac>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1f0      	bne.n	8002e52 <HAL_RCC_OscConfig+0x9e>
 8002e70:	e000      	b.n	8002e74 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e72:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d077      	beq.n	8002f70 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e80:	4b77      	ldr	r3, [pc, #476]	; (8003060 <HAL_RCC_OscConfig+0x2ac>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 030c 	and.w	r3, r3, #12
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00b      	beq.n	8002ea4 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e8c:	4b74      	ldr	r3, [pc, #464]	; (8003060 <HAL_RCC_OscConfig+0x2ac>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d126      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e98:	4b71      	ldr	r3, [pc, #452]	; (8003060 <HAL_RCC_OscConfig+0x2ac>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d120      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ea4:	4b6e      	ldr	r3, [pc, #440]	; (8003060 <HAL_RCC_OscConfig+0x2ac>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_RCC_OscConfig+0x108>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e1bc      	b.n	8003236 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ebc:	4b68      	ldr	r3, [pc, #416]	; (8003060 <HAL_RCC_OscConfig+0x2ac>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	21f8      	movs	r1, #248	; 0xf8
 8002eca:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ecc:	69b9      	ldr	r1, [r7, #24]
 8002ece:	fa91 f1a1 	rbit	r1, r1
 8002ed2:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ed4:	6979      	ldr	r1, [r7, #20]
 8002ed6:	fab1 f181 	clz	r1, r1
 8002eda:	b2c9      	uxtb	r1, r1
 8002edc:	408b      	lsls	r3, r1
 8002ede:	4960      	ldr	r1, [pc, #384]	; (8003060 <HAL_RCC_OscConfig+0x2ac>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee4:	e044      	b.n	8002f70 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d02a      	beq.n	8002f44 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eee:	4b5e      	ldr	r3, [pc, #376]	; (8003068 <HAL_RCC_OscConfig+0x2b4>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef4:	f7fe fb18 	bl	8001528 <HAL_GetTick>
 8002ef8:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002efc:	f7fe fb14 	bl	8001528 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e193      	b.n	8003236 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0e:	4b54      	ldr	r3, [pc, #336]	; (8003060 <HAL_RCC_OscConfig+0x2ac>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1a:	4b51      	ldr	r3, [pc, #324]	; (8003060 <HAL_RCC_OscConfig+0x2ac>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	21f8      	movs	r1, #248	; 0xf8
 8002f28:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	6939      	ldr	r1, [r7, #16]
 8002f2c:	fa91 f1a1 	rbit	r1, r1
 8002f30:	60f9      	str	r1, [r7, #12]
  return result;
 8002f32:	68f9      	ldr	r1, [r7, #12]
 8002f34:	fab1 f181 	clz	r1, r1
 8002f38:	b2c9      	uxtb	r1, r1
 8002f3a:	408b      	lsls	r3, r1
 8002f3c:	4948      	ldr	r1, [pc, #288]	; (8003060 <HAL_RCC_OscConfig+0x2ac>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	600b      	str	r3, [r1, #0]
 8002f42:	e015      	b.n	8002f70 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f44:	4b48      	ldr	r3, [pc, #288]	; (8003068 <HAL_RCC_OscConfig+0x2b4>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4a:	f7fe faed 	bl	8001528 <HAL_GetTick>
 8002f4e:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f52:	f7fe fae9 	bl	8001528 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e168      	b.n	8003236 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f64:	4b3e      	ldr	r3, [pc, #248]	; (8003060 <HAL_RCC_OscConfig+0x2ac>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1f0      	bne.n	8002f52 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d030      	beq.n	8002fde <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d016      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f84:	4b39      	ldr	r3, [pc, #228]	; (800306c <HAL_RCC_OscConfig+0x2b8>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8a:	f7fe facd 	bl	8001528 <HAL_GetTick>
 8002f8e:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f92:	f7fe fac9 	bl	8001528 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e148      	b.n	8003236 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa4:	4b2e      	ldr	r3, [pc, #184]	; (8003060 <HAL_RCC_OscConfig+0x2ac>)
 8002fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0f0      	beq.n	8002f92 <HAL_RCC_OscConfig+0x1de>
 8002fb0:	e015      	b.n	8002fde <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fb2:	4b2e      	ldr	r3, [pc, #184]	; (800306c <HAL_RCC_OscConfig+0x2b8>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb8:	f7fe fab6 	bl	8001528 <HAL_GetTick>
 8002fbc:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fc0:	f7fe fab2 	bl	8001528 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e131      	b.n	8003236 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd2:	4b23      	ldr	r3, [pc, #140]	; (8003060 <HAL_RCC_OscConfig+0x2ac>)
 8002fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f0      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 8088 	beq.w	80030fc <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fec:	2300      	movs	r3, #0
 8002fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff2:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <HAL_RCC_OscConfig+0x2ac>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d110      	bne.n	8003020 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	4b17      	ldr	r3, [pc, #92]	; (8003060 <HAL_RCC_OscConfig+0x2ac>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	4a16      	ldr	r2, [pc, #88]	; (8003060 <HAL_RCC_OscConfig+0x2ac>)
 8003008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800300c:	6413      	str	r3, [r2, #64]	; 0x40
 800300e:	4b14      	ldr	r3, [pc, #80]	; (8003060 <HAL_RCC_OscConfig+0x2ac>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800301a:	2301      	movs	r3, #1
 800301c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003020:	4b13      	ldr	r3, [pc, #76]	; (8003070 <HAL_RCC_OscConfig+0x2bc>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a12      	ldr	r2, [pc, #72]	; (8003070 <HAL_RCC_OscConfig+0x2bc>)
 8003026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800302a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302c:	4b10      	ldr	r3, [pc, #64]	; (8003070 <HAL_RCC_OscConfig+0x2bc>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003034:	2b00      	cmp	r3, #0
 8003036:	d123      	bne.n	8003080 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003038:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <HAL_RCC_OscConfig+0x2bc>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a0c      	ldr	r2, [pc, #48]	; (8003070 <HAL_RCC_OscConfig+0x2bc>)
 800303e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003042:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003044:	f7fe fa70 	bl	8001528 <HAL_GetTick>
 8003048:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304a:	e013      	b.n	8003074 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800304c:	f7fe fa6c 	bl	8001528 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d90c      	bls.n	8003074 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e0eb      	b.n	8003236 <HAL_RCC_OscConfig+0x482>
 800305e:	bf00      	nop
 8003060:	40023800 	.word	0x40023800
 8003064:	40023802 	.word	0x40023802
 8003068:	42470000 	.word	0x42470000
 800306c:	42470e80 	.word	0x42470e80
 8003070:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003074:	4b72      	ldr	r3, [pc, #456]	; (8003240 <HAL_RCC_OscConfig+0x48c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0e5      	beq.n	800304c <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	4b6f      	ldr	r3, [pc, #444]	; (8003244 <HAL_RCC_OscConfig+0x490>)
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d015      	beq.n	80030be <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003092:	f7fe fa49 	bl	8001528 <HAL_GetTick>
 8003096:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003098:	e00a      	b.n	80030b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800309a:	f7fe fa45 	bl	8001528 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e0c2      	b.n	8003236 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b0:	4b65      	ldr	r3, [pc, #404]	; (8003248 <HAL_RCC_OscConfig+0x494>)
 80030b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0ee      	beq.n	800309a <HAL_RCC_OscConfig+0x2e6>
 80030bc:	e014      	b.n	80030e8 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030be:	f7fe fa33 	bl	8001528 <HAL_GetTick>
 80030c2:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c4:	e00a      	b.n	80030dc <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c6:	f7fe fa2f 	bl	8001528 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e0ac      	b.n	8003236 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030dc:	4b5a      	ldr	r3, [pc, #360]	; (8003248 <HAL_RCC_OscConfig+0x494>)
 80030de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1ee      	bne.n	80030c6 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d105      	bne.n	80030fc <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f0:	4b55      	ldr	r3, [pc, #340]	; (8003248 <HAL_RCC_OscConfig+0x494>)
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	4a54      	ldr	r2, [pc, #336]	; (8003248 <HAL_RCC_OscConfig+0x494>)
 80030f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 8097 	beq.w	8003234 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003106:	4b50      	ldr	r3, [pc, #320]	; (8003248 <HAL_RCC_OscConfig+0x494>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	2b08      	cmp	r3, #8
 8003110:	d061      	beq.n	80031d6 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d146      	bne.n	80031a8 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311a:	4b4c      	ldr	r3, [pc, #304]	; (800324c <HAL_RCC_OscConfig+0x498>)
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003120:	f7fe fa02 	bl	8001528 <HAL_GetTick>
 8003124:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003128:	f7fe f9fe 	bl	8001528 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b64      	cmp	r3, #100	; 0x64
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e07d      	b.n	8003236 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313a:	4b43      	ldr	r3, [pc, #268]	; (8003248 <HAL_RCC_OscConfig+0x494>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003146:	4b40      	ldr	r3, [pc, #256]	; (8003248 <HAL_RCC_OscConfig+0x494>)
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	4b41      	ldr	r3, [pc, #260]	; (8003250 <HAL_RCC_OscConfig+0x49c>)
 800314c:	4013      	ands	r3, r2
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	69d1      	ldr	r1, [r2, #28]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6a12      	ldr	r2, [r2, #32]
 8003156:	4311      	orrs	r1, r2
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800315c:	0192      	lsls	r2, r2, #6
 800315e:	4311      	orrs	r1, r2
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003164:	0612      	lsls	r2, r2, #24
 8003166:	4311      	orrs	r1, r2
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800316c:	0852      	lsrs	r2, r2, #1
 800316e:	3a01      	subs	r2, #1
 8003170:	0412      	lsls	r2, r2, #16
 8003172:	430a      	orrs	r2, r1
 8003174:	4934      	ldr	r1, [pc, #208]	; (8003248 <HAL_RCC_OscConfig+0x494>)
 8003176:	4313      	orrs	r3, r2
 8003178:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800317a:	4b34      	ldr	r3, [pc, #208]	; (800324c <HAL_RCC_OscConfig+0x498>)
 800317c:	2201      	movs	r2, #1
 800317e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003180:	f7fe f9d2 	bl	8001528 <HAL_GetTick>
 8003184:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003188:	f7fe f9ce 	bl	8001528 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b64      	cmp	r3, #100	; 0x64
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e04d      	b.n	8003236 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319a:	4b2b      	ldr	r3, [pc, #172]	; (8003248 <HAL_RCC_OscConfig+0x494>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0f0      	beq.n	8003188 <HAL_RCC_OscConfig+0x3d4>
 80031a6:	e045      	b.n	8003234 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a8:	4b28      	ldr	r3, [pc, #160]	; (800324c <HAL_RCC_OscConfig+0x498>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ae:	f7fe f9bb 	bl	8001528 <HAL_GetTick>
 80031b2:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b6:	f7fe f9b7 	bl	8001528 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b64      	cmp	r3, #100	; 0x64
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e036      	b.n	8003236 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c8:	4b1f      	ldr	r3, [pc, #124]	; (8003248 <HAL_RCC_OscConfig+0x494>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1f0      	bne.n	80031b6 <HAL_RCC_OscConfig+0x402>
 80031d4:	e02e      	b.n	8003234 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e029      	b.n	8003236 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80031e2:	4b19      	ldr	r3, [pc, #100]	; (8003248 <HAL_RCC_OscConfig+0x494>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d11c      	bne.n	8003230 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003200:	429a      	cmp	r2, r3
 8003202:	d115      	bne.n	8003230 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	099b      	lsrs	r3, r3, #6
 8003208:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003210:	429a      	cmp	r2, r3
 8003212:	d10d      	bne.n	8003230 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800321e:	429a      	cmp	r2, r3
 8003220:	d106      	bne.n	8003230 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e000      	b.n	8003236 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3728      	adds	r7, #40	; 0x28
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40007000 	.word	0x40007000
 8003244:	40023870 	.word	0x40023870
 8003248:	40023800 	.word	0x40023800
 800324c:	42470060 	.word	0x42470060
 8003250:	f0bc8000 	.word	0xf0bc8000

08003254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0d2      	b.n	800340e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003268:	4b6b      	ldr	r3, [pc, #428]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d90c      	bls.n	8003290 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003276:	4b68      	ldr	r3, [pc, #416]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800327e:	4b66      	ldr	r3, [pc, #408]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e0be      	b.n	800340e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d020      	beq.n	80032de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a8:	4b5c      	ldr	r3, [pc, #368]	; (800341c <HAL_RCC_ClockConfig+0x1c8>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	4a5b      	ldr	r2, [pc, #364]	; (800341c <HAL_RCC_ClockConfig+0x1c8>)
 80032ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80032c0:	4b56      	ldr	r3, [pc, #344]	; (800341c <HAL_RCC_ClockConfig+0x1c8>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	4a55      	ldr	r2, [pc, #340]	; (800341c <HAL_RCC_ClockConfig+0x1c8>)
 80032c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032cc:	4b53      	ldr	r3, [pc, #332]	; (800341c <HAL_RCC_ClockConfig+0x1c8>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	4950      	ldr	r1, [pc, #320]	; (800341c <HAL_RCC_ClockConfig+0x1c8>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d040      	beq.n	800336c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d107      	bne.n	8003302 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f2:	4b4a      	ldr	r3, [pc, #296]	; (800341c <HAL_RCC_ClockConfig+0x1c8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d115      	bne.n	800332a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e085      	b.n	800340e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d107      	bne.n	800331a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330a:	4b44      	ldr	r3, [pc, #272]	; (800341c <HAL_RCC_ClockConfig+0x1c8>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e079      	b.n	800340e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331a:	4b40      	ldr	r3, [pc, #256]	; (800341c <HAL_RCC_ClockConfig+0x1c8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e071      	b.n	800340e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800332a:	4b3c      	ldr	r3, [pc, #240]	; (800341c <HAL_RCC_ClockConfig+0x1c8>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f023 0203 	bic.w	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4939      	ldr	r1, [pc, #228]	; (800341c <HAL_RCC_ClockConfig+0x1c8>)
 8003338:	4313      	orrs	r3, r2
 800333a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800333c:	f7fe f8f4 	bl	8001528 <HAL_GetTick>
 8003340:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003342:	e00a      	b.n	800335a <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003344:	f7fe f8f0 	bl	8001528 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003352:	4293      	cmp	r3, r2
 8003354:	d901      	bls.n	800335a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e059      	b.n	800340e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335a:	4b30      	ldr	r3, [pc, #192]	; (800341c <HAL_RCC_ClockConfig+0x1c8>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 020c 	and.w	r2, r3, #12
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	429a      	cmp	r2, r3
 800336a:	d1eb      	bne.n	8003344 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800336c:	4b2a      	ldr	r3, [pc, #168]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d20c      	bcs.n	8003394 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337a:	4b27      	ldr	r3, [pc, #156]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003382:	4b25      	ldr	r3, [pc, #148]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	429a      	cmp	r2, r3
 800338e:	d001      	beq.n	8003394 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e03c      	b.n	800340e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a0:	4b1e      	ldr	r3, [pc, #120]	; (800341c <HAL_RCC_ClockConfig+0x1c8>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	491b      	ldr	r1, [pc, #108]	; (800341c <HAL_RCC_ClockConfig+0x1c8>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d009      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033be:	4b17      	ldr	r3, [pc, #92]	; (800341c <HAL_RCC_ClockConfig+0x1c8>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	4913      	ldr	r1, [pc, #76]	; (800341c <HAL_RCC_ClockConfig+0x1c8>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80033d2:	f000 f82b 	bl	800342c <HAL_RCC_GetSysClockFreq>
 80033d6:	4601      	mov	r1, r0
 80033d8:	4b10      	ldr	r3, [pc, #64]	; (800341c <HAL_RCC_ClockConfig+0x1c8>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033e0:	22f0      	movs	r2, #240	; 0xf0
 80033e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	fa92 f2a2 	rbit	r2, r2
 80033ea:	60fa      	str	r2, [r7, #12]
  return result;
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	fab2 f282 	clz	r2, r2
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	40d3      	lsrs	r3, r2
 80033f6:	4a0a      	ldr	r2, [pc, #40]	; (8003420 <HAL_RCC_ClockConfig+0x1cc>)
 80033f8:	5cd3      	ldrb	r3, [r2, r3]
 80033fa:	fa21 f303 	lsr.w	r3, r1, r3
 80033fe:	4a09      	ldr	r2, [pc, #36]	; (8003424 <HAL_RCC_ClockConfig+0x1d0>)
 8003400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003402:	4b09      	ldr	r3, [pc, #36]	; (8003428 <HAL_RCC_ClockConfig+0x1d4>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f7fe f84c 	bl	80014a4 <HAL_InitTick>

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40023c00 	.word	0x40023c00
 800341c:	40023800 	.word	0x40023800
 8003420:	08007de4 	.word	0x08007de4
 8003424:	20000000 	.word	0x20000000
 8003428:	20000004 	.word	0x20000004

0800342c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800342c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	607b      	str	r3, [r7, #4]
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	2300      	movs	r3, #0
 800343c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003442:	4b63      	ldr	r3, [pc, #396]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b04      	cmp	r3, #4
 800344c:	d007      	beq.n	800345e <HAL_RCC_GetSysClockFreq+0x32>
 800344e:	2b08      	cmp	r3, #8
 8003450:	d008      	beq.n	8003464 <HAL_RCC_GetSysClockFreq+0x38>
 8003452:	2b00      	cmp	r3, #0
 8003454:	f040 80b4 	bne.w	80035c0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003458:	4b5e      	ldr	r3, [pc, #376]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800345a:	60bb      	str	r3, [r7, #8]
       break;
 800345c:	e0b3      	b.n	80035c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800345e:	4b5e      	ldr	r3, [pc, #376]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003460:	60bb      	str	r3, [r7, #8]
      break;
 8003462:	e0b0      	b.n	80035c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003464:	4b5a      	ldr	r3, [pc, #360]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800346c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800346e:	4b58      	ldr	r3, [pc, #352]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d04a      	beq.n	8003510 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347a:	4b55      	ldr	r3, [pc, #340]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	099b      	lsrs	r3, r3, #6
 8003480:	f04f 0400 	mov.w	r4, #0
 8003484:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	ea03 0501 	and.w	r5, r3, r1
 8003490:	ea04 0602 	and.w	r6, r4, r2
 8003494:	4629      	mov	r1, r5
 8003496:	4632      	mov	r2, r6
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	f04f 0400 	mov.w	r4, #0
 80034a0:	0154      	lsls	r4, r2, #5
 80034a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034a6:	014b      	lsls	r3, r1, #5
 80034a8:	4619      	mov	r1, r3
 80034aa:	4622      	mov	r2, r4
 80034ac:	1b49      	subs	r1, r1, r5
 80034ae:	eb62 0206 	sbc.w	r2, r2, r6
 80034b2:	f04f 0300 	mov.w	r3, #0
 80034b6:	f04f 0400 	mov.w	r4, #0
 80034ba:	0194      	lsls	r4, r2, #6
 80034bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80034c0:	018b      	lsls	r3, r1, #6
 80034c2:	1a5b      	subs	r3, r3, r1
 80034c4:	eb64 0402 	sbc.w	r4, r4, r2
 80034c8:	f04f 0100 	mov.w	r1, #0
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	00e2      	lsls	r2, r4, #3
 80034d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80034d6:	00d9      	lsls	r1, r3, #3
 80034d8:	460b      	mov	r3, r1
 80034da:	4614      	mov	r4, r2
 80034dc:	195b      	adds	r3, r3, r5
 80034de:	eb44 0406 	adc.w	r4, r4, r6
 80034e2:	f04f 0100 	mov.w	r1, #0
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	0262      	lsls	r2, r4, #9
 80034ec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80034f0:	0259      	lsls	r1, r3, #9
 80034f2:	460b      	mov	r3, r1
 80034f4:	4614      	mov	r4, r2
 80034f6:	4618      	mov	r0, r3
 80034f8:	4621      	mov	r1, r4
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f04f 0400 	mov.w	r4, #0
 8003500:	461a      	mov	r2, r3
 8003502:	4623      	mov	r3, r4
 8003504:	f7fc fe66 	bl	80001d4 <__aeabi_uldivmod>
 8003508:	4603      	mov	r3, r0
 800350a:	460c      	mov	r4, r1
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	e049      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003510:	4b2f      	ldr	r3, [pc, #188]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	099b      	lsrs	r3, r3, #6
 8003516:	f04f 0400 	mov.w	r4, #0
 800351a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	ea03 0501 	and.w	r5, r3, r1
 8003526:	ea04 0602 	and.w	r6, r4, r2
 800352a:	4629      	mov	r1, r5
 800352c:	4632      	mov	r2, r6
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	f04f 0400 	mov.w	r4, #0
 8003536:	0154      	lsls	r4, r2, #5
 8003538:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800353c:	014b      	lsls	r3, r1, #5
 800353e:	4619      	mov	r1, r3
 8003540:	4622      	mov	r2, r4
 8003542:	1b49      	subs	r1, r1, r5
 8003544:	eb62 0206 	sbc.w	r2, r2, r6
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	f04f 0400 	mov.w	r4, #0
 8003550:	0194      	lsls	r4, r2, #6
 8003552:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003556:	018b      	lsls	r3, r1, #6
 8003558:	1a5b      	subs	r3, r3, r1
 800355a:	eb64 0402 	sbc.w	r4, r4, r2
 800355e:	f04f 0100 	mov.w	r1, #0
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	00e2      	lsls	r2, r4, #3
 8003568:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800356c:	00d9      	lsls	r1, r3, #3
 800356e:	460b      	mov	r3, r1
 8003570:	4614      	mov	r4, r2
 8003572:	195b      	adds	r3, r3, r5
 8003574:	eb44 0406 	adc.w	r4, r4, r6
 8003578:	f04f 0100 	mov.w	r1, #0
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	02a2      	lsls	r2, r4, #10
 8003582:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003586:	0299      	lsls	r1, r3, #10
 8003588:	460b      	mov	r3, r1
 800358a:	4614      	mov	r4, r2
 800358c:	4618      	mov	r0, r3
 800358e:	4621      	mov	r1, r4
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f04f 0400 	mov.w	r4, #0
 8003596:	461a      	mov	r2, r3
 8003598:	4623      	mov	r3, r4
 800359a:	f7fc fe1b 	bl	80001d4 <__aeabi_uldivmod>
 800359e:	4603      	mov	r3, r0
 80035a0:	460c      	mov	r4, r1
 80035a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035a4:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	0c1b      	lsrs	r3, r3, #16
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	3301      	adds	r3, #1
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035bc:	60bb      	str	r3, [r7, #8]
      break;
 80035be:	e002      	b.n	80035c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035c0:	4b04      	ldr	r3, [pc, #16]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80035c2:	60bb      	str	r3, [r7, #8]
      break;
 80035c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035c6:	68bb      	ldr	r3, [r7, #8]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035d0:	40023800 	.word	0x40023800
 80035d4:	00f42400 	.word	0x00f42400
 80035d8:	007a1200 	.word	0x007a1200

080035dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035e0:	4b02      	ldr	r3, [pc, #8]	; (80035ec <HAL_RCC_GetHCLKFreq+0x10>)
 80035e2:	681b      	ldr	r3, [r3, #0]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr
 80035ec:	20000000 	.word	0x20000000

080035f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e041      	b.n	8003686 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fd fdd2 	bl	80011c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2202      	movs	r2, #2
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3304      	adds	r3, #4
 800362c:	4619      	mov	r1, r3
 800362e:	4610      	mov	r0, r2
 8003630:	f000 fc0e 	bl	8003e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
	...

08003690 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d001      	beq.n	80036a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e046      	b.n	8003736 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2202      	movs	r2, #2
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a22      	ldr	r2, [pc, #136]	; (8003740 <HAL_TIM_Base_Start+0xb0>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d022      	beq.n	8003700 <HAL_TIM_Base_Start+0x70>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c2:	d01d      	beq.n	8003700 <HAL_TIM_Base_Start+0x70>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1e      	ldr	r2, [pc, #120]	; (8003744 <HAL_TIM_Base_Start+0xb4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d018      	beq.n	8003700 <HAL_TIM_Base_Start+0x70>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a1d      	ldr	r2, [pc, #116]	; (8003748 <HAL_TIM_Base_Start+0xb8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d013      	beq.n	8003700 <HAL_TIM_Base_Start+0x70>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a1b      	ldr	r2, [pc, #108]	; (800374c <HAL_TIM_Base_Start+0xbc>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00e      	beq.n	8003700 <HAL_TIM_Base_Start+0x70>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1a      	ldr	r2, [pc, #104]	; (8003750 <HAL_TIM_Base_Start+0xc0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d009      	beq.n	8003700 <HAL_TIM_Base_Start+0x70>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a18      	ldr	r2, [pc, #96]	; (8003754 <HAL_TIM_Base_Start+0xc4>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d004      	beq.n	8003700 <HAL_TIM_Base_Start+0x70>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a17      	ldr	r2, [pc, #92]	; (8003758 <HAL_TIM_Base_Start+0xc8>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d111      	bne.n	8003724 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2b06      	cmp	r3, #6
 8003710:	d010      	beq.n	8003734 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 0201 	orr.w	r2, r2, #1
 8003720:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003722:	e007      	b.n	8003734 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0201 	orr.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr
 8003740:	40010000 	.word	0x40010000
 8003744:	40000400 	.word	0x40000400
 8003748:	40000800 	.word	0x40000800
 800374c:	40000c00 	.word	0x40000c00
 8003750:	40010400 	.word	0x40010400
 8003754:	40014000 	.word	0x40014000
 8003758:	40001800 	.word	0x40001800

0800375c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b01      	cmp	r3, #1
 800376e:	d001      	beq.n	8003774 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e04e      	b.n	8003812 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a22      	ldr	r2, [pc, #136]	; (800381c <HAL_TIM_Base_Start_IT+0xc0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d022      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0x80>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800379e:	d01d      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0x80>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1e      	ldr	r2, [pc, #120]	; (8003820 <HAL_TIM_Base_Start_IT+0xc4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d018      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0x80>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a1d      	ldr	r2, [pc, #116]	; (8003824 <HAL_TIM_Base_Start_IT+0xc8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d013      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0x80>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a1b      	ldr	r2, [pc, #108]	; (8003828 <HAL_TIM_Base_Start_IT+0xcc>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00e      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0x80>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a1a      	ldr	r2, [pc, #104]	; (800382c <HAL_TIM_Base_Start_IT+0xd0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d009      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0x80>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a18      	ldr	r2, [pc, #96]	; (8003830 <HAL_TIM_Base_Start_IT+0xd4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d004      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0x80>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a17      	ldr	r2, [pc, #92]	; (8003834 <HAL_TIM_Base_Start_IT+0xd8>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d111      	bne.n	8003800 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b06      	cmp	r3, #6
 80037ec:	d010      	beq.n	8003810 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f042 0201 	orr.w	r2, r2, #1
 80037fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037fe:	e007      	b.n	8003810 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr
 800381c:	40010000 	.word	0x40010000
 8003820:	40000400 	.word	0x40000400
 8003824:	40000800 	.word	0x40000800
 8003828:	40000c00 	.word	0x40000c00
 800382c:	40010400 	.word	0x40010400
 8003830:	40014000 	.word	0x40014000
 8003834:	40001800 	.word	0x40001800

08003838 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e041      	b.n	80038ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fd fc8e 	bl	8001180 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3304      	adds	r3, #4
 8003874:	4619      	mov	r1, r3
 8003876:	4610      	mov	r0, r2
 8003878:	f000 faea 	bl	8003e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d109      	bne.n	80038fc <HAL_TIM_PWM_Start+0x24>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	bf14      	ite	ne
 80038f4:	2301      	movne	r3, #1
 80038f6:	2300      	moveq	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	e022      	b.n	8003942 <HAL_TIM_PWM_Start+0x6a>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d109      	bne.n	8003916 <HAL_TIM_PWM_Start+0x3e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b01      	cmp	r3, #1
 800390c:	bf14      	ite	ne
 800390e:	2301      	movne	r3, #1
 8003910:	2300      	moveq	r3, #0
 8003912:	b2db      	uxtb	r3, r3
 8003914:	e015      	b.n	8003942 <HAL_TIM_PWM_Start+0x6a>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b08      	cmp	r3, #8
 800391a:	d109      	bne.n	8003930 <HAL_TIM_PWM_Start+0x58>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b01      	cmp	r3, #1
 8003926:	bf14      	ite	ne
 8003928:	2301      	movne	r3, #1
 800392a:	2300      	moveq	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	e008      	b.n	8003942 <HAL_TIM_PWM_Start+0x6a>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b01      	cmp	r3, #1
 800393a:	bf14      	ite	ne
 800393c:	2301      	movne	r3, #1
 800393e:	2300      	moveq	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e07c      	b.n	8003a44 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d104      	bne.n	800395a <HAL_TIM_PWM_Start+0x82>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003958:	e013      	b.n	8003982 <HAL_TIM_PWM_Start+0xaa>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b04      	cmp	r3, #4
 800395e:	d104      	bne.n	800396a <HAL_TIM_PWM_Start+0x92>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003968:	e00b      	b.n	8003982 <HAL_TIM_PWM_Start+0xaa>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b08      	cmp	r3, #8
 800396e:	d104      	bne.n	800397a <HAL_TIM_PWM_Start+0xa2>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003978:	e003      	b.n	8003982 <HAL_TIM_PWM_Start+0xaa>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2202      	movs	r2, #2
 800397e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2201      	movs	r2, #1
 8003988:	6839      	ldr	r1, [r7, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fcaa 	bl	80042e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a2d      	ldr	r2, [pc, #180]	; (8003a4c <HAL_TIM_PWM_Start+0x174>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d004      	beq.n	80039a4 <HAL_TIM_PWM_Start+0xcc>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a2c      	ldr	r2, [pc, #176]	; (8003a50 <HAL_TIM_PWM_Start+0x178>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d101      	bne.n	80039a8 <HAL_TIM_PWM_Start+0xd0>
 80039a4:	2301      	movs	r3, #1
 80039a6:	e000      	b.n	80039aa <HAL_TIM_PWM_Start+0xd2>
 80039a8:	2300      	movs	r3, #0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d007      	beq.n	80039be <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a22      	ldr	r2, [pc, #136]	; (8003a4c <HAL_TIM_PWM_Start+0x174>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d022      	beq.n	8003a0e <HAL_TIM_PWM_Start+0x136>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d0:	d01d      	beq.n	8003a0e <HAL_TIM_PWM_Start+0x136>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a1f      	ldr	r2, [pc, #124]	; (8003a54 <HAL_TIM_PWM_Start+0x17c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d018      	beq.n	8003a0e <HAL_TIM_PWM_Start+0x136>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a1d      	ldr	r2, [pc, #116]	; (8003a58 <HAL_TIM_PWM_Start+0x180>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d013      	beq.n	8003a0e <HAL_TIM_PWM_Start+0x136>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a1c      	ldr	r2, [pc, #112]	; (8003a5c <HAL_TIM_PWM_Start+0x184>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00e      	beq.n	8003a0e <HAL_TIM_PWM_Start+0x136>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a16      	ldr	r2, [pc, #88]	; (8003a50 <HAL_TIM_PWM_Start+0x178>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d009      	beq.n	8003a0e <HAL_TIM_PWM_Start+0x136>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a18      	ldr	r2, [pc, #96]	; (8003a60 <HAL_TIM_PWM_Start+0x188>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d004      	beq.n	8003a0e <HAL_TIM_PWM_Start+0x136>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a16      	ldr	r2, [pc, #88]	; (8003a64 <HAL_TIM_PWM_Start+0x18c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d111      	bne.n	8003a32 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b06      	cmp	r3, #6
 8003a1e:	d010      	beq.n	8003a42 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0201 	orr.w	r2, r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a30:	e007      	b.n	8003a42 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f042 0201 	orr.w	r2, r2, #1
 8003a40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40010000 	.word	0x40010000
 8003a50:	40010400 	.word	0x40010400
 8003a54:	40000400 	.word	0x40000400
 8003a58:	40000800 	.word	0x40000800
 8003a5c:	40000c00 	.word	0x40000c00
 8003a60:	40014000 	.word	0x40014000
 8003a64:	40001800 	.word	0x40001800

08003a68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d122      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d11b      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f06f 0202 	mvn.w	r2, #2
 8003a94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f9b4 	bl	8003e18 <HAL_TIM_IC_CaptureCallback>
 8003ab0:	e005      	b.n	8003abe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f9a7 	bl	8003e06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f9b6 	bl	8003e2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d122      	bne.n	8003b18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d11b      	bne.n	8003b18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f06f 0204 	mvn.w	r2, #4
 8003ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2202      	movs	r2, #2
 8003aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f98a 	bl	8003e18 <HAL_TIM_IC_CaptureCallback>
 8003b04:	e005      	b.n	8003b12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f97d 	bl	8003e06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f98c 	bl	8003e2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d122      	bne.n	8003b6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d11b      	bne.n	8003b6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f06f 0208 	mvn.w	r2, #8
 8003b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2204      	movs	r2, #4
 8003b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f960 	bl	8003e18 <HAL_TIM_IC_CaptureCallback>
 8003b58:	e005      	b.n	8003b66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f953 	bl	8003e06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f962 	bl	8003e2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	f003 0310 	and.w	r3, r3, #16
 8003b76:	2b10      	cmp	r3, #16
 8003b78:	d122      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f003 0310 	and.w	r3, r3, #16
 8003b84:	2b10      	cmp	r3, #16
 8003b86:	d11b      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f06f 0210 	mvn.w	r2, #16
 8003b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2208      	movs	r2, #8
 8003b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f936 	bl	8003e18 <HAL_TIM_IC_CaptureCallback>
 8003bac:	e005      	b.n	8003bba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f929 	bl	8003e06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f938 	bl	8003e2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d10e      	bne.n	8003bec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d107      	bne.n	8003bec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0201 	mvn.w	r2, #1
 8003be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f904 	bl	8003df4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf6:	2b80      	cmp	r3, #128	; 0x80
 8003bf8:	d10e      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c04:	2b80      	cmp	r3, #128	; 0x80
 8003c06:	d107      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fb93 	bl	800433e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c22:	2b40      	cmp	r3, #64	; 0x40
 8003c24:	d10e      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c30:	2b40      	cmp	r3, #64	; 0x40
 8003c32:	d107      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f8fc 	bl	8003e3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f003 0320 	and.w	r3, r3, #32
 8003c4e:	2b20      	cmp	r3, #32
 8003c50:	d10e      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f003 0320 	and.w	r3, r3, #32
 8003c5c:	2b20      	cmp	r3, #32
 8003c5e:	d107      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f06f 0220 	mvn.w	r2, #32
 8003c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 fb5e 	bl	800432c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c70:	bf00      	nop
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e0ac      	b.n	8003dec <HAL_TIM_PWM_ConfigChannel+0x174>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b0c      	cmp	r3, #12
 8003c9e:	f200 809f 	bhi.w	8003de0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003ca2:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca8:	08003cdd 	.word	0x08003cdd
 8003cac:	08003de1 	.word	0x08003de1
 8003cb0:	08003de1 	.word	0x08003de1
 8003cb4:	08003de1 	.word	0x08003de1
 8003cb8:	08003d1d 	.word	0x08003d1d
 8003cbc:	08003de1 	.word	0x08003de1
 8003cc0:	08003de1 	.word	0x08003de1
 8003cc4:	08003de1 	.word	0x08003de1
 8003cc8:	08003d5f 	.word	0x08003d5f
 8003ccc:	08003de1 	.word	0x08003de1
 8003cd0:	08003de1 	.word	0x08003de1
 8003cd4:	08003de1 	.word	0x08003de1
 8003cd8:	08003d9f 	.word	0x08003d9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68b9      	ldr	r1, [r7, #8]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 f952 	bl	8003f8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699a      	ldr	r2, [r3, #24]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0208 	orr.w	r2, r2, #8
 8003cf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699a      	ldr	r2, [r3, #24]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0204 	bic.w	r2, r2, #4
 8003d06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6999      	ldr	r1, [r3, #24]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	691a      	ldr	r2, [r3, #16]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	619a      	str	r2, [r3, #24]
      break;
 8003d1a:	e062      	b.n	8003de2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68b9      	ldr	r1, [r7, #8]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 f9a2 	bl	800406c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699a      	ldr	r2, [r3, #24]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6999      	ldr	r1, [r3, #24]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	021a      	lsls	r2, r3, #8
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	619a      	str	r2, [r3, #24]
      break;
 8003d5c:	e041      	b.n	8003de2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68b9      	ldr	r1, [r7, #8]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 f9f5 	bl	8004154 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69da      	ldr	r2, [r3, #28]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f042 0208 	orr.w	r2, r2, #8
 8003d78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69da      	ldr	r2, [r3, #28]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0204 	bic.w	r2, r2, #4
 8003d88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69d9      	ldr	r1, [r3, #28]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	61da      	str	r2, [r3, #28]
      break;
 8003d9c:	e021      	b.n	8003de2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68b9      	ldr	r1, [r7, #8]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 fa49 	bl	800423c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	69da      	ldr	r2, [r3, #28]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003db8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69d9      	ldr	r1, [r3, #28]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	021a      	lsls	r2, r3, #8
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	61da      	str	r2, [r3, #28]
      break;
 8003dde:	e000      	b.n	8003de2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003de0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc80      	pop	{r7}
 8003e04:	4770      	bx	lr

08003e06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr

08003e18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr

08003e2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr

08003e3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc80      	pop	{r7}
 8003e4c:	4770      	bx	lr
	...

08003e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a3f      	ldr	r2, [pc, #252]	; (8003f60 <TIM_Base_SetConfig+0x110>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d013      	beq.n	8003e90 <TIM_Base_SetConfig+0x40>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e6e:	d00f      	beq.n	8003e90 <TIM_Base_SetConfig+0x40>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a3c      	ldr	r2, [pc, #240]	; (8003f64 <TIM_Base_SetConfig+0x114>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d00b      	beq.n	8003e90 <TIM_Base_SetConfig+0x40>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a3b      	ldr	r2, [pc, #236]	; (8003f68 <TIM_Base_SetConfig+0x118>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d007      	beq.n	8003e90 <TIM_Base_SetConfig+0x40>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a3a      	ldr	r2, [pc, #232]	; (8003f6c <TIM_Base_SetConfig+0x11c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d003      	beq.n	8003e90 <TIM_Base_SetConfig+0x40>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a39      	ldr	r2, [pc, #228]	; (8003f70 <TIM_Base_SetConfig+0x120>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d108      	bne.n	8003ea2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a2e      	ldr	r2, [pc, #184]	; (8003f60 <TIM_Base_SetConfig+0x110>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d02b      	beq.n	8003f02 <TIM_Base_SetConfig+0xb2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb0:	d027      	beq.n	8003f02 <TIM_Base_SetConfig+0xb2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a2b      	ldr	r2, [pc, #172]	; (8003f64 <TIM_Base_SetConfig+0x114>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d023      	beq.n	8003f02 <TIM_Base_SetConfig+0xb2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a2a      	ldr	r2, [pc, #168]	; (8003f68 <TIM_Base_SetConfig+0x118>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d01f      	beq.n	8003f02 <TIM_Base_SetConfig+0xb2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a29      	ldr	r2, [pc, #164]	; (8003f6c <TIM_Base_SetConfig+0x11c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d01b      	beq.n	8003f02 <TIM_Base_SetConfig+0xb2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a28      	ldr	r2, [pc, #160]	; (8003f70 <TIM_Base_SetConfig+0x120>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d017      	beq.n	8003f02 <TIM_Base_SetConfig+0xb2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a27      	ldr	r2, [pc, #156]	; (8003f74 <TIM_Base_SetConfig+0x124>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d013      	beq.n	8003f02 <TIM_Base_SetConfig+0xb2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a26      	ldr	r2, [pc, #152]	; (8003f78 <TIM_Base_SetConfig+0x128>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00f      	beq.n	8003f02 <TIM_Base_SetConfig+0xb2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a25      	ldr	r2, [pc, #148]	; (8003f7c <TIM_Base_SetConfig+0x12c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d00b      	beq.n	8003f02 <TIM_Base_SetConfig+0xb2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a24      	ldr	r2, [pc, #144]	; (8003f80 <TIM_Base_SetConfig+0x130>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d007      	beq.n	8003f02 <TIM_Base_SetConfig+0xb2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a23      	ldr	r2, [pc, #140]	; (8003f84 <TIM_Base_SetConfig+0x134>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d003      	beq.n	8003f02 <TIM_Base_SetConfig+0xb2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a22      	ldr	r2, [pc, #136]	; (8003f88 <TIM_Base_SetConfig+0x138>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d108      	bne.n	8003f14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a09      	ldr	r2, [pc, #36]	; (8003f60 <TIM_Base_SetConfig+0x110>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d003      	beq.n	8003f48 <TIM_Base_SetConfig+0xf8>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a0b      	ldr	r2, [pc, #44]	; (8003f70 <TIM_Base_SetConfig+0x120>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d103      	bne.n	8003f50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	615a      	str	r2, [r3, #20]
}
 8003f56:	bf00      	nop
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr
 8003f60:	40010000 	.word	0x40010000
 8003f64:	40000400 	.word	0x40000400
 8003f68:	40000800 	.word	0x40000800
 8003f6c:	40000c00 	.word	0x40000c00
 8003f70:	40010400 	.word	0x40010400
 8003f74:	40014000 	.word	0x40014000
 8003f78:	40014400 	.word	0x40014400
 8003f7c:	40014800 	.word	0x40014800
 8003f80:	40001800 	.word	0x40001800
 8003f84:	40001c00 	.word	0x40001c00
 8003f88:	40002000 	.word	0x40002000

08003f8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	f023 0201 	bic.w	r2, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f023 0303 	bic.w	r3, r3, #3
 8003fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f023 0302 	bic.w	r3, r3, #2
 8003fd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a20      	ldr	r2, [pc, #128]	; (8004064 <TIM_OC1_SetConfig+0xd8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d003      	beq.n	8003ff0 <TIM_OC1_SetConfig+0x64>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a1f      	ldr	r2, [pc, #124]	; (8004068 <TIM_OC1_SetConfig+0xdc>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d10c      	bne.n	800400a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f023 0308 	bic.w	r3, r3, #8
 8003ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f023 0304 	bic.w	r3, r3, #4
 8004008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a15      	ldr	r2, [pc, #84]	; (8004064 <TIM_OC1_SetConfig+0xd8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d003      	beq.n	800401a <TIM_OC1_SetConfig+0x8e>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a14      	ldr	r2, [pc, #80]	; (8004068 <TIM_OC1_SetConfig+0xdc>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d111      	bne.n	800403e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4313      	orrs	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	621a      	str	r2, [r3, #32]
}
 8004058:	bf00      	nop
 800405a:	371c      	adds	r7, #28
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40010000 	.word	0x40010000
 8004068:	40010400 	.word	0x40010400

0800406c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	f023 0210 	bic.w	r2, r3, #16
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800409a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	021b      	lsls	r3, r3, #8
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f023 0320 	bic.w	r3, r3, #32
 80040b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a21      	ldr	r2, [pc, #132]	; (800414c <TIM_OC2_SetConfig+0xe0>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d003      	beq.n	80040d4 <TIM_OC2_SetConfig+0x68>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a20      	ldr	r2, [pc, #128]	; (8004150 <TIM_OC2_SetConfig+0xe4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d10d      	bne.n	80040f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a16      	ldr	r2, [pc, #88]	; (800414c <TIM_OC2_SetConfig+0xe0>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d003      	beq.n	8004100 <TIM_OC2_SetConfig+0x94>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a15      	ldr	r2, [pc, #84]	; (8004150 <TIM_OC2_SetConfig+0xe4>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d113      	bne.n	8004128 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004106:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800410e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	4313      	orrs	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	621a      	str	r2, [r3, #32]
}
 8004142:	bf00      	nop
 8004144:	371c      	adds	r7, #28
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr
 800414c:	40010000 	.word	0x40010000
 8004150:	40010400 	.word	0x40010400

08004154 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0303 	bic.w	r3, r3, #3
 800418a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800419c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	021b      	lsls	r3, r3, #8
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a21      	ldr	r2, [pc, #132]	; (8004234 <TIM_OC3_SetConfig+0xe0>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d003      	beq.n	80041ba <TIM_OC3_SetConfig+0x66>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a20      	ldr	r2, [pc, #128]	; (8004238 <TIM_OC3_SetConfig+0xe4>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d10d      	bne.n	80041d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	021b      	lsls	r3, r3, #8
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a16      	ldr	r2, [pc, #88]	; (8004234 <TIM_OC3_SetConfig+0xe0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d003      	beq.n	80041e6 <TIM_OC3_SetConfig+0x92>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a15      	ldr	r2, [pc, #84]	; (8004238 <TIM_OC3_SetConfig+0xe4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d113      	bne.n	800420e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4313      	orrs	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	621a      	str	r2, [r3, #32]
}
 8004228:	bf00      	nop
 800422a:	371c      	adds	r7, #28
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40010000 	.word	0x40010000
 8004238:	40010400 	.word	0x40010400

0800423c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800426a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	021b      	lsls	r3, r3, #8
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4313      	orrs	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004286:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	031b      	lsls	r3, r3, #12
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a11      	ldr	r2, [pc, #68]	; (80042dc <TIM_OC4_SetConfig+0xa0>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d003      	beq.n	80042a4 <TIM_OC4_SetConfig+0x68>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a10      	ldr	r2, [pc, #64]	; (80042e0 <TIM_OC4_SetConfig+0xa4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d109      	bne.n	80042b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	019b      	lsls	r3, r3, #6
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	621a      	str	r2, [r3, #32]
}
 80042d2:	bf00      	nop
 80042d4:	371c      	adds	r7, #28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr
 80042dc:	40010000 	.word	0x40010000
 80042e0:	40010400 	.word	0x40010400

080042e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	2201      	movs	r2, #1
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a1a      	ldr	r2, [r3, #32]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	43db      	mvns	r3, r3
 8004306:	401a      	ands	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a1a      	ldr	r2, [r3, #32]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f003 031f 	and.w	r3, r3, #31
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	fa01 f303 	lsl.w	r3, r1, r3
 800431c:	431a      	orrs	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	621a      	str	r2, [r3, #32]
}
 8004322:	bf00      	nop
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr

0800432c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	bc80      	pop	{r7}
 800433c:	4770      	bx	lr

0800433e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr

08004350 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004350:	b084      	sub	sp, #16
 8004352:	b580      	push	{r7, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	f107 001c 	add.w	r0, r7, #28
 800435e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004364:	2b01      	cmp	r3, #1
 8004366:	d122      	bne.n	80043ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800437c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004392:	2b01      	cmp	r3, #1
 8004394:	d105      	bne.n	80043a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f001 fafa 	bl	800599c <USB_CoreReset>
 80043a8:	4603      	mov	r3, r0
 80043aa:	73fb      	strb	r3, [r7, #15]
 80043ac:	e010      	b.n	80043d0 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f001 faee 	bl	800599c <USB_CoreReset>
 80043c0:	4603      	mov	r3, r0
 80043c2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80043d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d10b      	bne.n	80043ee <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f043 0206 	orr.w	r2, r3, #6
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f043 0220 	orr.w	r2, r3, #32
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043fa:	b004      	add	sp, #16
 80043fc:	4770      	bx	lr
	...

08004400 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	4613      	mov	r3, r2
 800440c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800440e:	79fb      	ldrb	r3, [r7, #7]
 8004410:	2b02      	cmp	r3, #2
 8004412:	d165      	bne.n	80044e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	4a41      	ldr	r2, [pc, #260]	; (800451c <USB_SetTurnaroundTime+0x11c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d906      	bls.n	800442a <USB_SetTurnaroundTime+0x2a>
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	4a40      	ldr	r2, [pc, #256]	; (8004520 <USB_SetTurnaroundTime+0x120>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d802      	bhi.n	800442a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004424:	230f      	movs	r3, #15
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	e062      	b.n	80044f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	4a3c      	ldr	r2, [pc, #240]	; (8004520 <USB_SetTurnaroundTime+0x120>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d906      	bls.n	8004440 <USB_SetTurnaroundTime+0x40>
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	4a3b      	ldr	r2, [pc, #236]	; (8004524 <USB_SetTurnaroundTime+0x124>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d802      	bhi.n	8004440 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800443a:	230e      	movs	r3, #14
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	e057      	b.n	80044f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	4a38      	ldr	r2, [pc, #224]	; (8004524 <USB_SetTurnaroundTime+0x124>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d906      	bls.n	8004456 <USB_SetTurnaroundTime+0x56>
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	4a37      	ldr	r2, [pc, #220]	; (8004528 <USB_SetTurnaroundTime+0x128>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d802      	bhi.n	8004456 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004450:	230d      	movs	r3, #13
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	e04c      	b.n	80044f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	4a33      	ldr	r2, [pc, #204]	; (8004528 <USB_SetTurnaroundTime+0x128>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d906      	bls.n	800446c <USB_SetTurnaroundTime+0x6c>
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	4a32      	ldr	r2, [pc, #200]	; (800452c <USB_SetTurnaroundTime+0x12c>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d802      	bhi.n	800446c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004466:	230c      	movs	r3, #12
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	e041      	b.n	80044f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	4a2f      	ldr	r2, [pc, #188]	; (800452c <USB_SetTurnaroundTime+0x12c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d906      	bls.n	8004482 <USB_SetTurnaroundTime+0x82>
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4a2e      	ldr	r2, [pc, #184]	; (8004530 <USB_SetTurnaroundTime+0x130>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d802      	bhi.n	8004482 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800447c:	230b      	movs	r3, #11
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	e036      	b.n	80044f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	4a2a      	ldr	r2, [pc, #168]	; (8004530 <USB_SetTurnaroundTime+0x130>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d906      	bls.n	8004498 <USB_SetTurnaroundTime+0x98>
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	4a29      	ldr	r2, [pc, #164]	; (8004534 <USB_SetTurnaroundTime+0x134>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d802      	bhi.n	8004498 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004492:	230a      	movs	r3, #10
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	e02b      	b.n	80044f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4a26      	ldr	r2, [pc, #152]	; (8004534 <USB_SetTurnaroundTime+0x134>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d906      	bls.n	80044ae <USB_SetTurnaroundTime+0xae>
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4a25      	ldr	r2, [pc, #148]	; (8004538 <USB_SetTurnaroundTime+0x138>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d802      	bhi.n	80044ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80044a8:	2309      	movs	r3, #9
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	e020      	b.n	80044f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	4a21      	ldr	r2, [pc, #132]	; (8004538 <USB_SetTurnaroundTime+0x138>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d906      	bls.n	80044c4 <USB_SetTurnaroundTime+0xc4>
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	4a20      	ldr	r2, [pc, #128]	; (800453c <USB_SetTurnaroundTime+0x13c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d802      	bhi.n	80044c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80044be:	2308      	movs	r3, #8
 80044c0:	617b      	str	r3, [r7, #20]
 80044c2:	e015      	b.n	80044f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	4a1d      	ldr	r2, [pc, #116]	; (800453c <USB_SetTurnaroundTime+0x13c>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d906      	bls.n	80044da <USB_SetTurnaroundTime+0xda>
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	4a1c      	ldr	r2, [pc, #112]	; (8004540 <USB_SetTurnaroundTime+0x140>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d802      	bhi.n	80044da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80044d4:	2307      	movs	r3, #7
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	e00a      	b.n	80044f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80044da:	2306      	movs	r3, #6
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	e007      	b.n	80044f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80044e0:	79fb      	ldrb	r3, [r7, #7]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d102      	bne.n	80044ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80044e6:	2309      	movs	r3, #9
 80044e8:	617b      	str	r3, [r7, #20]
 80044ea:	e001      	b.n	80044f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80044ec:	2309      	movs	r3, #9
 80044ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	029b      	lsls	r3, r3, #10
 8004504:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004508:	431a      	orrs	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	371c      	adds	r7, #28
 8004514:	46bd      	mov	sp, r7
 8004516:	bc80      	pop	{r7}
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	00d8acbf 	.word	0x00d8acbf
 8004520:	00e4e1bf 	.word	0x00e4e1bf
 8004524:	00f423ff 	.word	0x00f423ff
 8004528:	0106737f 	.word	0x0106737f
 800452c:	011a499f 	.word	0x011a499f
 8004530:	01312cff 	.word	0x01312cff
 8004534:	014ca43f 	.word	0x014ca43f
 8004538:	016e35ff 	.word	0x016e35ff
 800453c:	01a6ab1f 	.word	0x01a6ab1f
 8004540:	01e847ff 	.word	0x01e847ff

08004544 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f043 0201 	orr.w	r2, r3, #1
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr

08004564 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f023 0201 	bic.w	r2, r3, #1
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	bc80      	pop	{r7}
 8004582:	4770      	bx	lr

08004584 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	460b      	mov	r3, r1
 800458e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004590:	2300      	movs	r3, #0
 8004592:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d115      	bne.n	80045d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045b2:	2001      	movs	r0, #1
 80045b4:	f7fc ffc2 	bl	800153c <HAL_Delay>
      ms++;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	3301      	adds	r3, #1
 80045bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f001 f961 	bl	8005886 <USB_GetMode>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d01e      	beq.n	8004608 <USB_SetCurrentMode+0x84>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2b31      	cmp	r3, #49	; 0x31
 80045ce:	d9f0      	bls.n	80045b2 <USB_SetCurrentMode+0x2e>
 80045d0:	e01a      	b.n	8004608 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045d2:	78fb      	ldrb	r3, [r7, #3]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d115      	bne.n	8004604 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045e4:	2001      	movs	r0, #1
 80045e6:	f7fc ffa9 	bl	800153c <HAL_Delay>
      ms++;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	3301      	adds	r3, #1
 80045ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f001 f948 	bl	8005886 <USB_GetMode>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <USB_SetCurrentMode+0x84>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b31      	cmp	r3, #49	; 0x31
 8004600:	d9f0      	bls.n	80045e4 <USB_SetCurrentMode+0x60>
 8004602:	e001      	b.n	8004608 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e005      	b.n	8004614 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2b32      	cmp	r3, #50	; 0x32
 800460c:	d101      	bne.n	8004612 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800461c:	b084      	sub	sp, #16
 800461e:	b580      	push	{r7, lr}
 8004620:	b086      	sub	sp, #24
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
 8004626:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800462a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004636:	2300      	movs	r3, #0
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	e009      	b.n	8004650 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	3340      	adds	r3, #64	; 0x40
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	2200      	movs	r2, #0
 8004648:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	3301      	adds	r3, #1
 800464e:	613b      	str	r3, [r7, #16]
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	2b0e      	cmp	r3, #14
 8004654:	d9f2      	bls.n	800463c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004658:	2b00      	cmp	r3, #0
 800465a:	d11c      	bne.n	8004696 <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800466a:	f043 0302 	orr.w	r3, r3, #2
 800466e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004680:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	639a      	str	r2, [r3, #56]	; 0x38
 8004694:	e00b      	b.n	80046ae <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046b4:	461a      	mov	r2, r3
 80046b6:	2300      	movs	r3, #0
 80046b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c0:	4619      	mov	r1, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c8:	461a      	mov	r2, r3
 80046ca:	680b      	ldr	r3, [r1, #0]
 80046cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d10c      	bne.n	80046ee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d104      	bne.n	80046e4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046da:	2100      	movs	r1, #0
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f945 	bl	800496c <USB_SetDevSpeed>
 80046e2:	e008      	b.n	80046f6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046e4:	2101      	movs	r1, #1
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f940 	bl	800496c <USB_SetDevSpeed>
 80046ec:	e003      	b.n	80046f6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046ee:	2103      	movs	r1, #3
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f93b 	bl	800496c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046f6:	2110      	movs	r1, #16
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f8f3 	bl	80048e4 <USB_FlushTxFifo>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f90f 	bl	800492c <USB_FlushRxFifo>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800471e:	461a      	mov	r2, r3
 8004720:	2300      	movs	r3, #0
 8004722:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800472a:	461a      	mov	r2, r3
 800472c:	2300      	movs	r3, #0
 800472e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004736:	461a      	mov	r2, r3
 8004738:	2300      	movs	r3, #0
 800473a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800473c:	2300      	movs	r3, #0
 800473e:	613b      	str	r3, [r7, #16]
 8004740:	e043      	b.n	80047ca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004754:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004758:	d118      	bne.n	800478c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10a      	bne.n	8004776 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476c:	461a      	mov	r2, r3
 800476e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004772:	6013      	str	r3, [r2, #0]
 8004774:	e013      	b.n	800479e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	015a      	lsls	r2, r3, #5
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4413      	add	r3, r2
 800477e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004782:	461a      	mov	r2, r3
 8004784:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	e008      	b.n	800479e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4413      	add	r3, r2
 8004794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004798:	461a      	mov	r2, r3
 800479a:	2300      	movs	r3, #0
 800479c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047aa:	461a      	mov	r2, r3
 80047ac:	2300      	movs	r3, #0
 80047ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047bc:	461a      	mov	r2, r3
 80047be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	3301      	adds	r3, #1
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d3b7      	bcc.n	8004742 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047d2:	2300      	movs	r3, #0
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	e043      	b.n	8004860 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047ee:	d118      	bne.n	8004822 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10a      	bne.n	800480c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004802:	461a      	mov	r2, r3
 8004804:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	e013      	b.n	8004834 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004818:	461a      	mov	r2, r3
 800481a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800481e:	6013      	str	r3, [r2, #0]
 8004820:	e008      	b.n	8004834 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4413      	add	r3, r2
 800482a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482e:	461a      	mov	r2, r3
 8004830:	2300      	movs	r3, #0
 8004832:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4413      	add	r3, r2
 800483c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004840:	461a      	mov	r2, r3
 8004842:	2300      	movs	r3, #0
 8004844:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	4413      	add	r3, r2
 800484e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004852:	461a      	mov	r2, r3
 8004854:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004858:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	3301      	adds	r3, #1
 800485e:	613b      	str	r3, [r7, #16]
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	429a      	cmp	r2, r3
 8004866:	d3b7      	bcc.n	80047d8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004876:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800487a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004888:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488c:	2b00      	cmp	r3, #0
 800488e:	d105      	bne.n	800489c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	f043 0210 	orr.w	r2, r3, #16
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	699a      	ldr	r2, [r3, #24]
 80048a0:	4b0f      	ldr	r3, [pc, #60]	; (80048e0 <USB_DevInit+0x2c4>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d005      	beq.n	80048ba <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	f043 0208 	orr.w	r2, r3, #8
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d107      	bne.n	80048d0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048c8:	f043 0304 	orr.w	r3, r3, #4
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048dc:	b004      	add	sp, #16
 80048de:	4770      	bx	lr
 80048e0:	803c3800 	.word	0x803c3800

080048e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	019b      	lsls	r3, r3, #6
 80048f6:	f043 0220 	orr.w	r2, r3, #32
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	3301      	adds	r3, #1
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4a08      	ldr	r2, [pc, #32]	; (8004928 <USB_FlushTxFifo+0x44>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d901      	bls.n	8004910 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e006      	b.n	800491e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	f003 0320 	and.w	r3, r3, #32
 8004918:	2b20      	cmp	r3, #32
 800491a:	d0f0      	beq.n	80048fe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	bc80      	pop	{r7}
 8004926:	4770      	bx	lr
 8004928:	00030d40 	.word	0x00030d40

0800492c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004934:	2300      	movs	r3, #0
 8004936:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2210      	movs	r2, #16
 800493c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	3301      	adds	r3, #1
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4a08      	ldr	r2, [pc, #32]	; (8004968 <USB_FlushRxFifo+0x3c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d901      	bls.n	8004950 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e006      	b.n	800495e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	2b10      	cmp	r3, #16
 800495a:	d0f0      	beq.n	800493e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr
 8004968:	00030d40 	.word	0x00030d40

0800496c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	460b      	mov	r3, r1
 8004976:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	68f9      	ldr	r1, [r7, #12]
 8004988:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800498c:	4313      	orrs	r3, r2
 800498e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr

0800499c <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f003 0306 	and.w	r3, r3, #6
 80049b4:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d102      	bne.n	80049c2 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80049bc:	2300      	movs	r3, #0
 80049be:	75fb      	strb	r3, [r7, #23]
 80049c0:	e00a      	b.n	80049d8 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d002      	beq.n	80049ce <USB_GetDevSpeed+0x32>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2b06      	cmp	r3, #6
 80049cc:	d102      	bne.n	80049d4 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80049ce:	2302      	movs	r3, #2
 80049d0:	75fb      	strb	r3, [r7, #23]
 80049d2:	e001      	b.n	80049d8 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80049d4:	230f      	movs	r3, #15
 80049d6:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80049d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr

080049e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	785b      	ldrb	r3, [r3, #1]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d13a      	bne.n	8004a76 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a06:	69da      	ldr	r2, [r3, #28]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	f003 030f 	and.w	r3, r3, #15
 8004a10:	2101      	movs	r1, #1
 8004a12:	fa01 f303 	lsl.w	r3, r1, r3
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	68f9      	ldr	r1, [r7, #12]
 8004a1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d155      	bne.n	8004ae4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	78db      	ldrb	r3, [r3, #3]
 8004a52:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a54:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	059b      	lsls	r3, r3, #22
 8004a5a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	0151      	lsls	r1, r2, #5
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	440a      	add	r2, r1
 8004a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	e036      	b.n	8004ae4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7c:	69da      	ldr	r2, [r3, #28]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	2101      	movs	r1, #1
 8004a88:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8c:	041b      	lsls	r3, r3, #16
 8004a8e:	68f9      	ldr	r1, [r7, #12]
 8004a90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a94:	4313      	orrs	r3, r2
 8004a96:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d11a      	bne.n	8004ae4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	78db      	ldrb	r3, [r3, #3]
 8004ac8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004aca:	430b      	orrs	r3, r1
 8004acc:	4313      	orrs	r3, r2
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	0151      	lsls	r1, r2, #5
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	440a      	add	r2, r1
 8004ad6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bc80      	pop	{r7}
 8004aee:	4770      	bx	lr

08004af0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	785b      	ldrb	r3, [r3, #1]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d161      	bne.n	8004bd0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b22:	d11f      	bne.n	8004b64 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	0151      	lsls	r1, r2, #5
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	440a      	add	r2, r1
 8004b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b42:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	0151      	lsls	r1, r2, #5
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	440a      	add	r2, r1
 8004b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	f003 030f 	and.w	r3, r3, #15
 8004b74:	2101      	movs	r1, #1
 8004b76:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	68f9      	ldr	r1, [r7, #12]
 8004b80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b84:	4013      	ands	r3, r2
 8004b86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8e:	69da      	ldr	r2, [r3, #28]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	f003 030f 	and.w	r3, r3, #15
 8004b98:	2101      	movs	r1, #1
 8004b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	43db      	mvns	r3, r3
 8004ba2:	68f9      	ldr	r1, [r7, #12]
 8004ba4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ba8:	4013      	ands	r3, r2
 8004baa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	0159      	lsls	r1, r3, #5
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	440b      	add	r3, r1
 8004bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	4b35      	ldr	r3, [pc, #212]	; (8004ca0 <USB_DeactivateEndpoint+0x1b0>)
 8004bca:	4013      	ands	r3, r2
 8004bcc:	600b      	str	r3, [r1, #0]
 8004bce:	e060      	b.n	8004c92 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004be2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004be6:	d11f      	bne.n	8004c28 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	0151      	lsls	r1, r2, #5
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	440a      	add	r2, r1
 8004bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c06:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	0151      	lsls	r1, r2, #5
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	440a      	add	r2, r1
 8004c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	f003 030f 	and.w	r3, r3, #15
 8004c38:	2101      	movs	r1, #1
 8004c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c3e:	041b      	lsls	r3, r3, #16
 8004c40:	43db      	mvns	r3, r3
 8004c42:	68f9      	ldr	r1, [r7, #12]
 8004c44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c48:	4013      	ands	r3, r2
 8004c4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c52:	69da      	ldr	r2, [r3, #28]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	f003 030f 	and.w	r3, r3, #15
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c62:	041b      	lsls	r3, r3, #16
 8004c64:	43db      	mvns	r3, r3
 8004c66:	68f9      	ldr	r1, [r7, #12]
 8004c68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	0159      	lsls	r1, r3, #5
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	440b      	add	r3, r1
 8004c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <USB_DeactivateEndpoint+0x1b4>)
 8004c8e:	4013      	ands	r3, r2
 8004c90:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bc80      	pop	{r7}
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	ec337800 	.word	0xec337800
 8004ca4:	eff37800 	.word	0xeff37800

08004ca8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08a      	sub	sp, #40	; 0x28
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	785b      	ldrb	r3, [r3, #1]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	f040 815c 	bne.w	8004f82 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d132      	bne.n	8004d38 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	0151      	lsls	r1, r2, #5
 8004ce4:	69fa      	ldr	r2, [r7, #28]
 8004ce6:	440a      	add	r2, r1
 8004ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cf0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	0151      	lsls	r1, r2, #5
 8004d08:	69fa      	ldr	r2, [r7, #28]
 8004d0a:	440a      	add	r2, r1
 8004d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	0151      	lsls	r1, r2, #5
 8004d28:	69fa      	ldr	r2, [r7, #28]
 8004d2a:	440a      	add	r2, r1
 8004d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d30:	0cdb      	lsrs	r3, r3, #19
 8004d32:	04db      	lsls	r3, r3, #19
 8004d34:	6113      	str	r3, [r2, #16]
 8004d36:	e074      	b.n	8004e22 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	0151      	lsls	r1, r2, #5
 8004d4a:	69fa      	ldr	r2, [r7, #28]
 8004d4c:	440a      	add	r2, r1
 8004d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d52:	0cdb      	lsrs	r3, r3, #19
 8004d54:	04db      	lsls	r3, r3, #19
 8004d56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	0151      	lsls	r1, r2, #5
 8004d6a:	69fa      	ldr	r2, [r7, #28]
 8004d6c:	440a      	add	r2, r1
 8004d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d88:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	6959      	ldr	r1, [r3, #20]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	440b      	add	r3, r1
 8004d94:	1e59      	subs	r1, r3, #1
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d9e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004da0:	4b9d      	ldr	r3, [pc, #628]	; (8005018 <USB_EPStartXfer+0x370>)
 8004da2:	400b      	ands	r3, r1
 8004da4:	69b9      	ldr	r1, [r7, #24]
 8004da6:	0148      	lsls	r0, r1, #5
 8004da8:	69f9      	ldr	r1, [r7, #28]
 8004daa:	4401      	add	r1, r0
 8004dac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004db0:	4313      	orrs	r3, r2
 8004db2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc0:	691a      	ldr	r2, [r3, #16]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dca:	69b9      	ldr	r1, [r7, #24]
 8004dcc:	0148      	lsls	r0, r1, #5
 8004dce:	69f9      	ldr	r1, [r7, #28]
 8004dd0:	4401      	add	r1, r0
 8004dd2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	78db      	ldrb	r3, [r3, #3]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d11f      	bne.n	8004e22 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	0151      	lsls	r1, r2, #5
 8004df4:	69fa      	ldr	r2, [r7, #28]
 8004df6:	440a      	add	r2, r1
 8004df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dfc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004e00:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	0151      	lsls	r1, r2, #5
 8004e14:	69fa      	ldr	r2, [r7, #28]
 8004e16:	440a      	add	r2, r1
 8004e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e20:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004e22:	79fb      	ldrb	r3, [r7, #7]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d14b      	bne.n	8004ec0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d009      	beq.n	8004e44 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	78db      	ldrb	r3, [r3, #3]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d128      	bne.n	8004e9e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d110      	bne.n	8004e7e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	0151      	lsls	r1, r2, #5
 8004e6e:	69fa      	ldr	r2, [r7, #28]
 8004e70:	440a      	add	r2, r1
 8004e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e7a:	6013      	str	r3, [r2, #0]
 8004e7c:	e00f      	b.n	8004e9e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	0151      	lsls	r1, r2, #5
 8004e90:	69fa      	ldr	r2, [r7, #28]
 8004e92:	440a      	add	r2, r1
 8004e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e9c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	0151      	lsls	r1, r2, #5
 8004eb0:	69fa      	ldr	r2, [r7, #28]
 8004eb2:	440a      	add	r2, r1
 8004eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	e12f      	b.n	8005120 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	0151      	lsls	r1, r2, #5
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	440a      	add	r2, r1
 8004ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ede:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	78db      	ldrb	r3, [r3, #3]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d015      	beq.n	8004f14 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 8117 	beq.w	8005120 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	2101      	movs	r1, #1
 8004f04:	fa01 f303 	lsl.w	r3, r1, r3
 8004f08:	69f9      	ldr	r1, [r7, #28]
 8004f0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	634b      	str	r3, [r1, #52]	; 0x34
 8004f12:	e105      	b.n	8005120 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d110      	bne.n	8004f46 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	0151      	lsls	r1, r2, #5
 8004f36:	69fa      	ldr	r2, [r7, #28]
 8004f38:	440a      	add	r2, r1
 8004f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f42:	6013      	str	r3, [r2, #0]
 8004f44:	e00f      	b.n	8004f66 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	0151      	lsls	r1, r2, #5
 8004f58:	69fa      	ldr	r2, [r7, #28]
 8004f5a:	440a      	add	r2, r1
 8004f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f64:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	68d9      	ldr	r1, [r3, #12]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	781a      	ldrb	r2, [r3, #0]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	b298      	uxth	r0, r3
 8004f74:	79fb      	ldrb	r3, [r7, #7]
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	4603      	mov	r3, r0
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f000 fa2a 	bl	80053d4 <USB_WritePacket>
 8004f80:	e0ce      	b.n	8005120 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	0151      	lsls	r1, r2, #5
 8004f94:	69fa      	ldr	r2, [r7, #28]
 8004f96:	440a      	add	r2, r1
 8004f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f9c:	0cdb      	lsrs	r3, r3, #19
 8004f9e:	04db      	lsls	r3, r3, #19
 8004fa0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	0151      	lsls	r1, r2, #5
 8004fb4:	69fa      	ldr	r2, [r7, #28]
 8004fb6:	440a      	add	r2, r1
 8004fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fbc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fc0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fc4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d126      	bne.n	800501c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	015a      	lsls	r2, r3, #5
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fe4:	69b9      	ldr	r1, [r7, #24]
 8004fe6:	0148      	lsls	r0, r1, #5
 8004fe8:	69f9      	ldr	r1, [r7, #28]
 8004fea:	4401      	add	r1, r0
 8004fec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	0151      	lsls	r1, r2, #5
 8005006:	69fa      	ldr	r2, [r7, #28]
 8005008:	440a      	add	r2, r1
 800500a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800500e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005012:	6113      	str	r3, [r2, #16]
 8005014:	e036      	b.n	8005084 <USB_EPStartXfer+0x3dc>
 8005016:	bf00      	nop
 8005018:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	695a      	ldr	r2, [r3, #20]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	4413      	add	r3, r2
 8005026:	1e5a      	subs	r2, r3, #1
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005030:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	4413      	add	r3, r2
 800503a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	8afb      	ldrh	r3, [r7, #22]
 8005042:	04d9      	lsls	r1, r3, #19
 8005044:	4b39      	ldr	r3, [pc, #228]	; (800512c <USB_EPStartXfer+0x484>)
 8005046:	400b      	ands	r3, r1
 8005048:	69b9      	ldr	r1, [r7, #24]
 800504a:	0148      	lsls	r0, r1, #5
 800504c:	69f9      	ldr	r1, [r7, #28]
 800504e:	4401      	add	r1, r0
 8005050:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005054:	4313      	orrs	r3, r2
 8005056:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005064:	691a      	ldr	r2, [r3, #16]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	8af9      	ldrh	r1, [r7, #22]
 800506c:	fb01 f303 	mul.w	r3, r1, r3
 8005070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005074:	69b9      	ldr	r1, [r7, #24]
 8005076:	0148      	lsls	r0, r1, #5
 8005078:	69f9      	ldr	r1, [r7, #28]
 800507a:	4401      	add	r1, r0
 800507c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005080:	4313      	orrs	r3, r2
 8005082:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005084:	79fb      	ldrb	r3, [r7, #7]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d10d      	bne.n	80050a6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d009      	beq.n	80050a6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	68d9      	ldr	r1, [r3, #12]
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	4413      	add	r3, r2
 800509e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a2:	460a      	mov	r2, r1
 80050a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	78db      	ldrb	r3, [r3, #3]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d128      	bne.n	8005100 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d110      	bne.n	80050e0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	0151      	lsls	r1, r2, #5
 80050d0:	69fa      	ldr	r2, [r7, #28]
 80050d2:	440a      	add	r2, r1
 80050d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	e00f      	b.n	8005100 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	0151      	lsls	r1, r2, #5
 80050f2:	69fa      	ldr	r2, [r7, #28]
 80050f4:	440a      	add	r2, r1
 80050f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	0151      	lsls	r1, r2, #5
 8005112:	69fa      	ldr	r2, [r7, #28]
 8005114:	440a      	add	r2, r1
 8005116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800511a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800511e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3720      	adds	r7, #32
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	1ff80000 	.word	0x1ff80000

08005130 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005130:	b480      	push	{r7}
 8005132:	b087      	sub	sp, #28
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	4613      	mov	r3, r2
 800513c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	785b      	ldrb	r3, [r3, #1]
 800514c:	2b01      	cmp	r3, #1
 800514e:	f040 80cd 	bne.w	80052ec <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d132      	bne.n	80051c0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	4413      	add	r3, r2
 8005162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	0151      	lsls	r1, r2, #5
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	440a      	add	r2, r1
 8005170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005174:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005178:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800517c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	4413      	add	r3, r2
 8005186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	0151      	lsls	r1, r2, #5
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	440a      	add	r2, r1
 8005194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005198:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800519c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	0151      	lsls	r1, r2, #5
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	440a      	add	r2, r1
 80051b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b8:	0cdb      	lsrs	r3, r3, #19
 80051ba:	04db      	lsls	r3, r3, #19
 80051bc:	6113      	str	r3, [r2, #16]
 80051be:	e04e      	b.n	800525e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	0151      	lsls	r1, r2, #5
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	440a      	add	r2, r1
 80051d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051da:	0cdb      	lsrs	r3, r3, #19
 80051dc:	04db      	lsls	r3, r3, #19
 80051de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	0151      	lsls	r1, r2, #5
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	440a      	add	r2, r1
 80051f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005202:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	695a      	ldr	r2, [r3, #20]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	429a      	cmp	r2, r3
 800520e:	d903      	bls.n	8005218 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	015a      	lsls	r2, r3, #5
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	4413      	add	r3, r2
 8005220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	0151      	lsls	r1, r2, #5
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	440a      	add	r2, r1
 800522e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005232:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005236:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	4413      	add	r3, r2
 8005240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005244:	691a      	ldr	r2, [r3, #16]
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800524e:	6939      	ldr	r1, [r7, #16]
 8005250:	0148      	lsls	r0, r1, #5
 8005252:	6979      	ldr	r1, [r7, #20]
 8005254:	4401      	add	r1, r0
 8005256:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800525a:	4313      	orrs	r3, r2
 800525c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800525e:	79fb      	ldrb	r3, [r7, #7]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d11e      	bne.n	80052a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d009      	beq.n	8005280 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	4413      	add	r3, r2
 8005274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005278:	461a      	mov	r2, r3
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	0151      	lsls	r1, r2, #5
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	440a      	add	r2, r1
 8005296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800529a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800529e:	6013      	str	r3, [r2, #0]
 80052a0:	e092      	b.n	80053c8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	0151      	lsls	r1, r2, #5
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	440a      	add	r2, r1
 80052b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d07e      	beq.n	80053c8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	2101      	movs	r1, #1
 80052dc:	fa01 f303 	lsl.w	r3, r1, r3
 80052e0:	6979      	ldr	r1, [r7, #20]
 80052e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052e6:	4313      	orrs	r3, r2
 80052e8:	634b      	str	r3, [r1, #52]	; 0x34
 80052ea:	e06d      	b.n	80053c8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	0151      	lsls	r1, r2, #5
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	440a      	add	r2, r1
 8005302:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005306:	0cdb      	lsrs	r3, r3, #19
 8005308:	04db      	lsls	r3, r3, #19
 800530a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	0151      	lsls	r1, r2, #5
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	440a      	add	r2, r1
 8005322:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005326:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800532a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800532e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d003      	beq.n	8005340 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	0151      	lsls	r1, r2, #5
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	440a      	add	r2, r1
 8005356:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800535a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800535e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536c:	691a      	ldr	r2, [r3, #16]
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005376:	6939      	ldr	r1, [r7, #16]
 8005378:	0148      	lsls	r0, r1, #5
 800537a:	6979      	ldr	r1, [r7, #20]
 800537c:	4401      	add	r1, r0
 800537e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005382:	4313      	orrs	r3, r2
 8005384:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005386:	79fb      	ldrb	r3, [r7, #7]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d10d      	bne.n	80053a8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d009      	beq.n	80053a8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	68d9      	ldr	r1, [r3, #12]
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a4:	460a      	mov	r2, r1
 80053a6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	0151      	lsls	r1, r2, #5
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	440a      	add	r2, r1
 80053be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	371c      	adds	r7, #28
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr

080053d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b089      	sub	sp, #36	; 0x24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	4611      	mov	r1, r2
 80053e0:	461a      	mov	r2, r3
 80053e2:	460b      	mov	r3, r1
 80053e4:	71fb      	strb	r3, [r7, #7]
 80053e6:	4613      	mov	r3, r2
 80053e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80053f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d123      	bne.n	8005442 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80053fa:	88bb      	ldrh	r3, [r7, #4]
 80053fc:	3303      	adds	r3, #3
 80053fe:	089b      	lsrs	r3, r3, #2
 8005400:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005402:	2300      	movs	r3, #0
 8005404:	61bb      	str	r3, [r7, #24]
 8005406:	e018      	b.n	800543a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005408:	79fb      	ldrb	r3, [r7, #7]
 800540a:	031a      	lsls	r2, r3, #12
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	4413      	add	r3, r2
 8005410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005414:	461a      	mov	r2, r3
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	3301      	adds	r3, #1
 8005420:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	3301      	adds	r3, #1
 8005426:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	3301      	adds	r3, #1
 800542c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	3301      	adds	r3, #1
 8005432:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	3301      	adds	r3, #1
 8005438:	61bb      	str	r3, [r7, #24]
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	429a      	cmp	r2, r3
 8005440:	d3e2      	bcc.n	8005408 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3724      	adds	r7, #36	; 0x24
 8005448:	46bd      	mov	sp, r7
 800544a:	bc80      	pop	{r7}
 800544c:	4770      	bx	lr

0800544e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800544e:	b480      	push	{r7}
 8005450:	b08b      	sub	sp, #44	; 0x2c
 8005452:	af00      	add	r7, sp, #0
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	4613      	mov	r3, r2
 800545a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005464:	88fb      	ldrh	r3, [r7, #6]
 8005466:	089b      	lsrs	r3, r3, #2
 8005468:	b29b      	uxth	r3, r3
 800546a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800546c:	88fb      	ldrh	r3, [r7, #6]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005474:	2300      	movs	r3, #0
 8005476:	623b      	str	r3, [r7, #32]
 8005478:	e014      	b.n	80054a4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	601a      	str	r2, [r3, #0]
    pDest++;
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	3301      	adds	r3, #1
 800548a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	3301      	adds	r3, #1
 8005490:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	3301      	adds	r3, #1
 8005496:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	3301      	adds	r3, #1
 800549c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	3301      	adds	r3, #1
 80054a2:	623b      	str	r3, [r7, #32]
 80054a4:	6a3a      	ldr	r2, [r7, #32]
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d3e6      	bcc.n	800547a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80054ac:	8bfb      	ldrh	r3, [r7, #30]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d01e      	beq.n	80054f0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80054b2:	2300      	movs	r3, #0
 80054b4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054bc:	461a      	mov	r2, r3
 80054be:	f107 0310 	add.w	r3, r7, #16
 80054c2:	6812      	ldr	r2, [r2, #0]
 80054c4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	00db      	lsls	r3, r3, #3
 80054ce:	fa22 f303 	lsr.w	r3, r2, r3
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	701a      	strb	r2, [r3, #0]
      i++;
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	3301      	adds	r3, #1
 80054dc:	623b      	str	r3, [r7, #32]
      pDest++;
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	3301      	adds	r3, #1
 80054e2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80054e4:	8bfb      	ldrh	r3, [r7, #30]
 80054e6:	3b01      	subs	r3, #1
 80054e8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80054ea:	8bfb      	ldrh	r3, [r7, #30]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1ea      	bne.n	80054c6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	372c      	adds	r7, #44	; 0x2c
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bc80      	pop	{r7}
 80054fa:	4770      	bx	lr

080054fc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	785b      	ldrb	r3, [r3, #1]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d12c      	bne.n	8005572 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	db12      	blt.n	8005550 <USB_EPSetStall+0x54>
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00f      	beq.n	8005550 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	0151      	lsls	r1, r2, #5
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	440a      	add	r2, r1
 8005546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800554a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800554e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	0151      	lsls	r1, r2, #5
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	440a      	add	r2, r1
 8005566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800556a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	e02b      	b.n	80055ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	db12      	blt.n	80055aa <USB_EPSetStall+0xae>
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00f      	beq.n	80055aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	0151      	lsls	r1, r2, #5
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	440a      	add	r2, r1
 80055a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	0151      	lsls	r1, r2, #5
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	440a      	add	r2, r1
 80055c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bc80      	pop	{r7}
 80055d4:	4770      	bx	lr

080055d6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b085      	sub	sp, #20
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	785b      	ldrb	r3, [r3, #1]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d128      	bne.n	8005644 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	0151      	lsls	r1, r2, #5
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	440a      	add	r2, r1
 8005608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800560c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005610:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	78db      	ldrb	r3, [r3, #3]
 8005616:	2b03      	cmp	r3, #3
 8005618:	d003      	beq.n	8005622 <USB_EPClearStall+0x4c>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	78db      	ldrb	r3, [r3, #3]
 800561e:	2b02      	cmp	r3, #2
 8005620:	d138      	bne.n	8005694 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	0151      	lsls	r1, r2, #5
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	440a      	add	r2, r1
 8005638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800563c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	e027      	b.n	8005694 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	0151      	lsls	r1, r2, #5
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	440a      	add	r2, r1
 800565a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800565e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005662:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	78db      	ldrb	r3, [r3, #3]
 8005668:	2b03      	cmp	r3, #3
 800566a:	d003      	beq.n	8005674 <USB_EPClearStall+0x9e>
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	78db      	ldrb	r3, [r3, #3]
 8005670:	2b02      	cmp	r3, #2
 8005672:	d10f      	bne.n	8005694 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4413      	add	r3, r2
 800567c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	0151      	lsls	r1, r2, #5
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	440a      	add	r2, r1
 800568a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800568e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005692:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	bc80      	pop	{r7}
 800569e:	4770      	bx	lr

080056a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	460b      	mov	r3, r1
 80056aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80056c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	78fb      	ldrb	r3, [r7, #3]
 80056ce:	011b      	lsls	r3, r3, #4
 80056d0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80056d4:	68f9      	ldr	r1, [r7, #12]
 80056d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056da:	4313      	orrs	r3, r2
 80056dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bc80      	pop	{r7}
 80056e8:	4770      	bx	lr

080056ea <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b085      	sub	sp, #20
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005704:	f023 0303 	bic.w	r3, r3, #3
 8005708:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005718:	f023 0302 	bic.w	r3, r3, #2
 800571c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	bc80      	pop	{r7}
 8005728:	4770      	bx	lr

0800572a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800572a:	b480      	push	{r7}
 800572c:	b085      	sub	sp, #20
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005744:	f023 0303 	bic.w	r3, r3, #3
 8005748:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005758:	f043 0302 	orr.w	r3, r3, #2
 800575c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	bc80      	pop	{r7}
 8005768:	4770      	bx	lr

0800576a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800576a:	b480      	push	{r7}
 800576c:	b085      	sub	sp, #20
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4013      	ands	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005782:	68fb      	ldr	r3, [r7, #12]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3714      	adds	r7, #20
 8005788:	46bd      	mov	sp, r7
 800578a:	bc80      	pop	{r7}
 800578c:	4770      	bx	lr

0800578e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800578e:	b480      	push	{r7}
 8005790:	b085      	sub	sp, #20
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	4013      	ands	r3, r2
 80057b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	0c1b      	lsrs	r3, r3, #16
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bc80      	pop	{r7}
 80057be:	4770      	bx	lr

080057c0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	4013      	ands	r3, r2
 80057e2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	b29b      	uxth	r3, r3
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bc80      	pop	{r7}
 80057f0:	4770      	bx	lr

080057f2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b085      	sub	sp, #20
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	460b      	mov	r3, r1
 80057fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005802:	78fb      	ldrb	r3, [r7, #3]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	4413      	add	r3, r2
 800580a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	4013      	ands	r3, r2
 800581e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005820:	68bb      	ldr	r3, [r7, #8]
}
 8005822:	4618      	mov	r0, r3
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	bc80      	pop	{r7}
 800582a:	4770      	bx	lr

0800582c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	460b      	mov	r3, r1
 8005836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005850:	78fb      	ldrb	r3, [r7, #3]
 8005852:	f003 030f 	and.w	r3, r3, #15
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	fa22 f303 	lsr.w	r3, r2, r3
 800585c:	01db      	lsls	r3, r3, #7
 800585e:	b2db      	uxtb	r3, r3
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	4313      	orrs	r3, r2
 8005864:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005866:	78fb      	ldrb	r3, [r7, #3]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4013      	ands	r3, r2
 8005878:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800587a:	68bb      	ldr	r3, [r7, #8]
}
 800587c:	4618      	mov	r0, r3
 800587e:	371c      	adds	r7, #28
 8005880:	46bd      	mov	sp, r7
 8005882:	bc80      	pop	{r7}
 8005884:	4770      	bx	lr

08005886 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005886:	b480      	push	{r7}
 8005888:	b083      	sub	sp, #12
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	f003 0301 	and.w	r3, r3, #1
}
 8005896:	4618      	mov	r0, r3
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	bc80      	pop	{r7}
 800589e:	4770      	bx	lr

080058a0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80058be:	f023 0307 	bic.w	r3, r3, #7
 80058c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	bc80      	pop	{r7}
 80058e2:	4770      	bx	lr

080058e4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	460b      	mov	r3, r1
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	333c      	adds	r3, #60	; 0x3c
 80058fa:	3304      	adds	r3, #4
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	4a25      	ldr	r2, [pc, #148]	; (8005998 <USB_EP0_OutStart+0xb4>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d90a      	bls.n	800591e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005914:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005918:	d101      	bne.n	800591e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	e037      	b.n	800598e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005924:	461a      	mov	r2, r3
 8005926:	2300      	movs	r3, #0
 8005928:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005938:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800593c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800594c:	f043 0318 	orr.w	r3, r3, #24
 8005950:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005960:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005964:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005966:	7afb      	ldrb	r3, [r7, #11]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d10f      	bne.n	800598c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005972:	461a      	mov	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005986:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800598a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	371c      	adds	r7, #28
 8005992:	46bd      	mov	sp, r7
 8005994:	bc80      	pop	{r7}
 8005996:	4770      	bx	lr
 8005998:	4f54300a 	.word	0x4f54300a

0800599c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	3301      	adds	r3, #1
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4a12      	ldr	r2, [pc, #72]	; (80059fc <USB_CoreReset+0x60>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d901      	bls.n	80059ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e01b      	b.n	80059f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	daf2      	bge.n	80059a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f043 0201 	orr.w	r2, r3, #1
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	3301      	adds	r3, #1
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4a08      	ldr	r2, [pc, #32]	; (80059fc <USB_CoreReset+0x60>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d901      	bls.n	80059e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e006      	b.n	80059f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d0f0      	beq.n	80059d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bc80      	pop	{r7}
 80059fa:	4770      	bx	lr
 80059fc:	00030d40 	.word	0x00030d40

08005a00 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	7c1b      	ldrb	r3, [r3, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d115      	bne.n	8005a44 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	2181      	movs	r1, #129	; 0x81
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f001 ff30 	bl	8007886 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a30:	2202      	movs	r2, #2
 8005a32:	2101      	movs	r1, #1
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f001 ff26 	bl	8007886 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005a42:	e012      	b.n	8005a6a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a44:	2340      	movs	r3, #64	; 0x40
 8005a46:	2202      	movs	r2, #2
 8005a48:	2181      	movs	r1, #129	; 0x81
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f001 ff1b 	bl	8007886 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a56:	2340      	movs	r3, #64	; 0x40
 8005a58:	2202      	movs	r2, #2
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f001 ff12 	bl	8007886 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a6a:	2308      	movs	r3, #8
 8005a6c:	2203      	movs	r2, #3
 8005a6e:	2182      	movs	r1, #130	; 0x82
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f001 ff08 	bl	8007886 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005a7c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005a80:	f002 f87e 	bl	8007b80 <malloc>
 8005a84:	4603      	mov	r3, r0
 8005a86:	461a      	mov	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d102      	bne.n	8005a9e <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	73fb      	strb	r3, [r7, #15]
 8005a9c:	e026      	b.n	8005aec <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aa4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	7c1b      	ldrb	r3, [r3, #16]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d109      	bne.n	8005adc <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ace:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ad2:	2101      	movs	r1, #1
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f001 ffc6 	bl	8007a66 <USBD_LL_PrepareReceive>
 8005ada:	e007      	b.n	8005aec <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ae2:	2340      	movs	r3, #64	; 0x40
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f001 ffbd 	bl	8007a66 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b084      	sub	sp, #16
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
 8005afe:	460b      	mov	r3, r1
 8005b00:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005b06:	2181      	movs	r1, #129	; 0x81
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f001 fee2 	bl	80078d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005b14:	2101      	movs	r1, #1
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f001 fedb 	bl	80078d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005b24:	2182      	movs	r1, #130	; 0x82
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f001 fed3 	bl	80078d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00e      	beq.n	8005b5a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f002 f81f 	bl	8007b90 <free>
    pdev->pClassData = NULL;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b74:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d039      	beq.n	8005c02 <USBD_CDC_Setup+0x9e>
 8005b8e:	2b20      	cmp	r3, #32
 8005b90:	d17c      	bne.n	8005c8c <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	88db      	ldrh	r3, [r3, #6]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d029      	beq.n	8005bee <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	b25b      	sxtb	r3, r3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	da11      	bge.n	8005bc8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	683a      	ldr	r2, [r7, #0]
 8005bae:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005bb0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	88d2      	ldrh	r2, [r2, #6]
 8005bb6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005bb8:	6939      	ldr	r1, [r7, #16]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	88db      	ldrh	r3, [r3, #6]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f001 fa31 	bl	8007028 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005bc6:	e068      	b.n	8005c9a <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	785a      	ldrb	r2, [r3, #1]
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	88db      	ldrh	r3, [r3, #6]
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005bde:	6939      	ldr	r1, [r7, #16]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	88db      	ldrh	r3, [r3, #6]
 8005be4:	461a      	mov	r2, r3
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f001 fa4c 	bl	8007084 <USBD_CtlPrepareRx>
      break;
 8005bec:	e055      	b.n	8005c9a <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	7850      	ldrb	r0, [r2, #1]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	6839      	ldr	r1, [r7, #0]
 8005bfe:	4798      	blx	r3
      break;
 8005c00:	e04b      	b.n	8005c9a <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	785b      	ldrb	r3, [r3, #1]
 8005c06:	2b0a      	cmp	r3, #10
 8005c08:	d017      	beq.n	8005c3a <USBD_CDC_Setup+0xd6>
 8005c0a:	2b0b      	cmp	r3, #11
 8005c0c:	d029      	beq.n	8005c62 <USBD_CDC_Setup+0xfe>
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d133      	bne.n	8005c7a <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c18:	2b03      	cmp	r3, #3
 8005c1a:	d107      	bne.n	8005c2c <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005c1c:	f107 030c 	add.w	r3, r7, #12
 8005c20:	2202      	movs	r2, #2
 8005c22:	4619      	mov	r1, r3
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f001 f9ff 	bl	8007028 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c2a:	e02e      	b.n	8005c8a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005c2c:	6839      	ldr	r1, [r7, #0]
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f001 f990 	bl	8006f54 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c34:	2302      	movs	r3, #2
 8005c36:	75fb      	strb	r3, [r7, #23]
          break;
 8005c38:	e027      	b.n	8005c8a <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d107      	bne.n	8005c54 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005c44:	f107 030f 	add.w	r3, r7, #15
 8005c48:	2201      	movs	r2, #1
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f001 f9eb 	bl	8007028 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c52:	e01a      	b.n	8005c8a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005c54:	6839      	ldr	r1, [r7, #0]
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f001 f97c 	bl	8006f54 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	75fb      	strb	r3, [r7, #23]
          break;
 8005c60:	e013      	b.n	8005c8a <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c68:	2b03      	cmp	r3, #3
 8005c6a:	d00d      	beq.n	8005c88 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005c6c:	6839      	ldr	r1, [r7, #0]
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f001 f970 	bl	8006f54 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c74:	2302      	movs	r3, #2
 8005c76:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005c78:	e006      	b.n	8005c88 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005c7a:	6839      	ldr	r1, [r7, #0]
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f001 f969 	bl	8006f54 <USBD_CtlError>
          ret = USBD_FAIL;
 8005c82:	2302      	movs	r3, #2
 8005c84:	75fb      	strb	r3, [r7, #23]
          break;
 8005c86:	e000      	b.n	8005c8a <USBD_CDC_Setup+0x126>
          break;
 8005c88:	bf00      	nop
      }
      break;
 8005c8a:	e006      	b.n	8005c9a <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005c8c:	6839      	ldr	r1, [r7, #0]
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f001 f960 	bl	8006f54 <USBD_CtlError>
      ret = USBD_FAIL;
 8005c94:	2302      	movs	r3, #2
 8005c96:	75fb      	strb	r3, [r7, #23]
      break;
 8005c98:	bf00      	nop
  }

  return ret;
 8005c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	460b      	mov	r3, r1
 8005cae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cb6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cbe:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d03a      	beq.n	8005d40 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005cca:	78fa      	ldrb	r2, [r7, #3]
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	440b      	add	r3, r1
 8005cd8:	331c      	adds	r3, #28
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d029      	beq.n	8005d34 <USBD_CDC_DataIn+0x90>
 8005ce0:	78fa      	ldrb	r2, [r7, #3]
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	440b      	add	r3, r1
 8005cee:	331c      	adds	r3, #28
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	78f9      	ldrb	r1, [r7, #3]
 8005cf4:	68b8      	ldr	r0, [r7, #8]
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	1a5b      	subs	r3, r3, r1
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4403      	add	r3, r0
 8005d00:	3344      	adds	r3, #68	; 0x44
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	fbb2 f1f3 	udiv	r1, r2, r3
 8005d08:	fb03 f301 	mul.w	r3, r3, r1
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d110      	bne.n	8005d34 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005d12:	78fa      	ldrb	r2, [r7, #3]
 8005d14:	6879      	ldr	r1, [r7, #4]
 8005d16:	4613      	mov	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	440b      	add	r3, r1
 8005d20:	331c      	adds	r3, #28
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005d26:	78f9      	ldrb	r1, [r7, #3]
 8005d28:	2300      	movs	r3, #0
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f001 fe77 	bl	8007a20 <USBD_LL_Transmit>
 8005d32:	e003      	b.n	8005d3c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	e000      	b.n	8005d42 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005d40:	2302      	movs	r3, #2
  }
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	460b      	mov	r3, r1
 8005d54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d5c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d5e:	78fb      	ldrb	r3, [r7, #3]
 8005d60:	4619      	mov	r1, r3
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f001 fea2 	bl	8007aac <USBD_LL_GetRxDataSize>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00d      	beq.n	8005d96 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005d8e:	4611      	mov	r1, r2
 8005d90:	4798      	blx	r3

    return USBD_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	e000      	b.n	8005d98 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005d96:	2302      	movs	r3, #2
  }
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dae:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d015      	beq.n	8005de6 <USBD_CDC_EP0_RxReady+0x46>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005dc0:	2bff      	cmp	r3, #255	; 0xff
 8005dc2:	d010      	beq.n	8005de6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005dd2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005dda:	b292      	uxth	r2, r2
 8005ddc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	22ff      	movs	r2, #255	; 0xff
 8005de2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2243      	movs	r2, #67	; 0x43
 8005dfc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005dfe:	4b03      	ldr	r3, [pc, #12]	; (8005e0c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bc80      	pop	{r7}
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	20000094 	.word	0x20000094

08005e10 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2243      	movs	r2, #67	; 0x43
 8005e1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005e1e:	4b03      	ldr	r3, [pc, #12]	; (8005e2c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bc80      	pop	{r7}
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	20000050 	.word	0x20000050

08005e30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2243      	movs	r2, #67	; 0x43
 8005e3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005e3e:	4b03      	ldr	r3, [pc, #12]	; (8005e4c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bc80      	pop	{r7}
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	200000d8 	.word	0x200000d8

08005e50 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	220a      	movs	r2, #10
 8005e5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005e5e:	4b03      	ldr	r3, [pc, #12]	; (8005e6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bc80      	pop	{r7}
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	2000000c 	.word	0x2000000c

08005e70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d005      	beq.n	8005e90 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bc80      	pop	{r7}
 8005e9a:	4770      	bx	lr

08005e9c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eb0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005eba:	88fa      	ldrh	r2, [r7, #6]
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	371c      	adds	r7, #28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bc80      	pop	{r7}
 8005ecc:	4770      	bx	lr

08005ece <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b085      	sub	sp, #20
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
 8005ed6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ede:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bc80      	pop	{r7}
 8005ef2:	4770      	bx	lr

08005ef4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d01c      	beq.n	8005f48 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d115      	bne.n	8005f44 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	2181      	movs	r1, #129	; 0x81
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f001 fd70 	bl	8007a20 <USBD_LL_Transmit>

      return USBD_OK;
 8005f40:	2300      	movs	r3, #0
 8005f42:	e002      	b.n	8005f4a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e000      	b.n	8005f4a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005f48:	2302      	movs	r3, #2
  }
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b084      	sub	sp, #16
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f60:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d017      	beq.n	8005f9c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	7c1b      	ldrb	r3, [r3, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d109      	bne.n	8005f88 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f7e:	2101      	movs	r1, #1
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f001 fd70 	bl	8007a66 <USBD_LL_PrepareReceive>
 8005f86:	e007      	b.n	8005f98 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f8e:	2340      	movs	r3, #64	; 0x40
 8005f90:	2101      	movs	r1, #1
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f001 fd67 	bl	8007a66 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	e000      	b.n	8005f9e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005f9c:	2302      	movs	r3, #2
  }
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b084      	sub	sp, #16
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	60f8      	str	r0, [r7, #12]
 8005fae:	60b9      	str	r1, [r7, #8]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005fba:	2302      	movs	r3, #2
 8005fbc:	e01a      	b.n	8005ff4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d003      	beq.n	8005fd0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	79fa      	ldrb	r2, [r7, #7]
 8005fea:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f001 fbe5 	bl	80077bc <USBD_LL_Init>

  return USBD_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d006      	beq.n	800601e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	73fb      	strb	r3, [r7, #15]
 800601c:	e001      	b.n	8006022 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800601e:	2302      	movs	r3, #2
 8006020:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006022:	7bfb      	ldrb	r3, [r7, #15]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	bc80      	pop	{r7}
 800602c:	4770      	bx	lr

0800602e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b082      	sub	sp, #8
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f001 fc0a 	bl	8007850 <USBD_LL_Start>

  return USBD_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006046:	b480      	push	{r7}
 8006048:	b083      	sub	sp, #12
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	bc80      	pop	{r7}
 8006058:	4770      	bx	lr

0800605a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b084      	sub	sp, #16
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
 8006062:	460b      	mov	r3, r1
 8006064:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006066:	2302      	movs	r3, #2
 8006068:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00c      	beq.n	800608e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	78fa      	ldrb	r2, [r7, #3]
 800607e:	4611      	mov	r1, r2
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	4798      	blx	r3
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800608a:	2300      	movs	r3, #0
 800608c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800608e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	460b      	mov	r3, r1
 80060a2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	78fa      	ldrb	r2, [r7, #3]
 80060ae:	4611      	mov	r1, r2
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	4798      	blx	r3

  return USBD_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b082      	sub	sp, #8
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80060ce:	6839      	ldr	r1, [r7, #0]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f000 ff03 	bl	8006edc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80060e4:	461a      	mov	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80060f2:	f003 031f 	and.w	r3, r3, #31
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d00c      	beq.n	8006114 <USBD_LL_SetupStage+0x56>
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d302      	bcc.n	8006104 <USBD_LL_SetupStage+0x46>
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d010      	beq.n	8006124 <USBD_LL_SetupStage+0x66>
 8006102:	e017      	b.n	8006134 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800610a:	4619      	mov	r1, r3
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fa03 	bl	8006518 <USBD_StdDevReq>
      break;
 8006112:	e01a      	b.n	800614a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800611a:	4619      	mov	r1, r3
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 fa65 	bl	80065ec <USBD_StdItfReq>
      break;
 8006122:	e012      	b.n	800614a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800612a:	4619      	mov	r1, r3
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 faa3 	bl	8006678 <USBD_StdEPReq>
      break;
 8006132:	e00a      	b.n	800614a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800613a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800613e:	b2db      	uxtb	r3, r3
 8006140:	4619      	mov	r1, r3
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f001 fbe4 	bl	8007910 <USBD_LL_StallEP>
      break;
 8006148:	bf00      	nop
  }

  return USBD_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	460b      	mov	r3, r1
 800615e:	607a      	str	r2, [r7, #4]
 8006160:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006162:	7afb      	ldrb	r3, [r7, #11]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d14b      	bne.n	8006200 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800616e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006176:	2b03      	cmp	r3, #3
 8006178:	d134      	bne.n	80061e4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	429a      	cmp	r2, r3
 8006184:	d919      	bls.n	80061ba <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	68da      	ldr	r2, [r3, #12]
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	1ad2      	subs	r2, r2, r3
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	68da      	ldr	r2, [r3, #12]
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800619c:	429a      	cmp	r2, r3
 800619e:	d203      	bcs.n	80061a8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	e002      	b.n	80061ae <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	461a      	mov	r2, r3
 80061b0:	6879      	ldr	r1, [r7, #4]
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 ff84 	bl	80070c0 <USBD_CtlContinueRx>
 80061b8:	e038      	b.n	800622c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80061cc:	2b03      	cmp	r3, #3
 80061ce:	d105      	bne.n	80061dc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 ff81 	bl	80070e4 <USBD_CtlSendStatus>
 80061e2:	e023      	b.n	800622c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061ea:	2b05      	cmp	r3, #5
 80061ec:	d11e      	bne.n	800622c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80061f6:	2100      	movs	r1, #0
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f001 fb89 	bl	8007910 <USBD_LL_StallEP>
 80061fe:	e015      	b.n	800622c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00d      	beq.n	8006228 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006212:	2b03      	cmp	r3, #3
 8006214:	d108      	bne.n	8006228 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	7afa      	ldrb	r2, [r7, #11]
 8006220:	4611      	mov	r1, r2
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	4798      	blx	r3
 8006226:	e001      	b.n	800622c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006228:	2302      	movs	r3, #2
 800622a:	e000      	b.n	800622e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3718      	adds	r7, #24
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b086      	sub	sp, #24
 800623a:	af00      	add	r7, sp, #0
 800623c:	60f8      	str	r0, [r7, #12]
 800623e:	460b      	mov	r3, r1
 8006240:	607a      	str	r2, [r7, #4]
 8006242:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006244:	7afb      	ldrb	r3, [r7, #11]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d17f      	bne.n	800634a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	3314      	adds	r3, #20
 800624e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006256:	2b02      	cmp	r3, #2
 8006258:	d15c      	bne.n	8006314 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	429a      	cmp	r2, r3
 8006264:	d915      	bls.n	8006292 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	68da      	ldr	r2, [r3, #12]
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	1ad2      	subs	r2, r2, r3
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	b29b      	uxth	r3, r3
 800627a:	461a      	mov	r2, r3
 800627c:	6879      	ldr	r1, [r7, #4]
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f000 feee 	bl	8007060 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006284:	2300      	movs	r3, #0
 8006286:	2200      	movs	r2, #0
 8006288:	2100      	movs	r1, #0
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f001 fbeb 	bl	8007a66 <USBD_LL_PrepareReceive>
 8006290:	e04e      	b.n	8006330 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	6912      	ldr	r2, [r2, #16]
 800629a:	fbb3 f1f2 	udiv	r1, r3, r2
 800629e:	fb02 f201 	mul.w	r2, r2, r1
 80062a2:	1a9b      	subs	r3, r3, r2
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d11c      	bne.n	80062e2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d316      	bcc.n	80062e2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	689a      	ldr	r2, [r3, #8]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80062be:	429a      	cmp	r2, r3
 80062c0:	d20f      	bcs.n	80062e2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80062c2:	2200      	movs	r2, #0
 80062c4:	2100      	movs	r1, #0
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f000 feca 	bl	8007060 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062d4:	2300      	movs	r3, #0
 80062d6:	2200      	movs	r2, #0
 80062d8:	2100      	movs	r1, #0
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f001 fbc3 	bl	8007a66 <USBD_LL_PrepareReceive>
 80062e0:	e026      	b.n	8006330 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00a      	beq.n	8006304 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80062f4:	2b03      	cmp	r3, #3
 80062f6:	d105      	bne.n	8006304 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006304:	2180      	movs	r1, #128	; 0x80
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f001 fb02 	bl	8007910 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 fefc 	bl	800710a <USBD_CtlReceiveStatus>
 8006312:	e00d      	b.n	8006330 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800631a:	2b04      	cmp	r3, #4
 800631c:	d004      	beq.n	8006328 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006324:	2b00      	cmp	r3, #0
 8006326:	d103      	bne.n	8006330 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006328:	2180      	movs	r1, #128	; 0x80
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f001 faf0 	bl	8007910 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006336:	2b01      	cmp	r3, #1
 8006338:	d11d      	bne.n	8006376 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f7ff fe83 	bl	8006046 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006348:	e015      	b.n	8006376 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00d      	beq.n	8006372 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800635c:	2b03      	cmp	r3, #3
 800635e:	d108      	bne.n	8006372 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	7afa      	ldrb	r2, [r7, #11]
 800636a:	4611      	mov	r1, r2
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	4798      	blx	r3
 8006370:	e001      	b.n	8006376 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006372:	2302      	movs	r3, #2
 8006374:	e000      	b.n	8006378 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3718      	adds	r7, #24
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006388:	2340      	movs	r3, #64	; 0x40
 800638a:	2200      	movs	r2, #0
 800638c:	2100      	movs	r1, #0
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f001 fa79 	bl	8007886 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2240      	movs	r2, #64	; 0x40
 80063a0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063a4:	2340      	movs	r3, #64	; 0x40
 80063a6:	2200      	movs	r2, #0
 80063a8:	2180      	movs	r1, #128	; 0x80
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f001 fa6b 	bl	8007886 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2240      	movs	r2, #64	; 0x40
 80063ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d009      	beq.n	80063f8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	6852      	ldr	r2, [r2, #4]
 80063f0:	b2d2      	uxtb	r2, r2
 80063f2:	4611      	mov	r1, r2
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	4798      	blx	r3
  }

  return USBD_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006402:	b480      	push	{r7}
 8006404:	b083      	sub	sp, #12
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	460b      	mov	r3, r1
 800640c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	78fa      	ldrb	r2, [r7, #3]
 8006412:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	bc80      	pop	{r7}
 800641e:	4770      	bx	lr

08006420 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2204      	movs	r2, #4
 8006438:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	bc80      	pop	{r7}
 8006446:	4770      	bx	lr

08006448 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006456:	2b04      	cmp	r3, #4
 8006458:	d105      	bne.n	8006466 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	bc80      	pop	{r7}
 8006470:	4770      	bx	lr

08006472 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b082      	sub	sp, #8
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006480:	2b03      	cmp	r3, #3
 8006482:	d10b      	bne.n	800649c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800648a:	69db      	ldr	r3, [r3, #28]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d005      	beq.n	800649c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006496:	69db      	ldr	r3, [r3, #28]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b083      	sub	sp, #12
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	460b      	mov	r3, r1
 80064b0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bc80      	pop	{r7}
 80064bc:	4770      	bx	lr

080064be <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80064be:	b480      	push	{r7}
 80064c0:	b083      	sub	sp, #12
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	460b      	mov	r3, r1
 80064c8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bc80      	pop	{r7}
 80064d4:	4770      	bx	lr

080064d6 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b083      	sub	sp, #12
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bc80      	pop	{r7}
 80064e8:	4770      	bx	lr

080064ea <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b082      	sub	sp, #8
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	6852      	ldr	r2, [r2, #4]
 8006506:	b2d2      	uxtb	r2, r2
 8006508:	4611      	mov	r1, r2
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	4798      	blx	r3

  return USBD_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800652e:	2b20      	cmp	r3, #32
 8006530:	d004      	beq.n	800653c <USBD_StdDevReq+0x24>
 8006532:	2b40      	cmp	r3, #64	; 0x40
 8006534:	d002      	beq.n	800653c <USBD_StdDevReq+0x24>
 8006536:	2b00      	cmp	r3, #0
 8006538:	d008      	beq.n	800654c <USBD_StdDevReq+0x34>
 800653a:	e04c      	b.n	80065d6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	4798      	blx	r3
      break;
 800654a:	e049      	b.n	80065e0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	785b      	ldrb	r3, [r3, #1]
 8006550:	2b09      	cmp	r3, #9
 8006552:	d83a      	bhi.n	80065ca <USBD_StdDevReq+0xb2>
 8006554:	a201      	add	r2, pc, #4	; (adr r2, 800655c <USBD_StdDevReq+0x44>)
 8006556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655a:	bf00      	nop
 800655c:	080065ad 	.word	0x080065ad
 8006560:	080065c1 	.word	0x080065c1
 8006564:	080065cb 	.word	0x080065cb
 8006568:	080065b7 	.word	0x080065b7
 800656c:	080065cb 	.word	0x080065cb
 8006570:	0800658f 	.word	0x0800658f
 8006574:	08006585 	.word	0x08006585
 8006578:	080065cb 	.word	0x080065cb
 800657c:	080065a3 	.word	0x080065a3
 8006580:	08006599 	.word	0x08006599
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006584:	6839      	ldr	r1, [r7, #0]
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f9d4 	bl	8006934 <USBD_GetDescriptor>
          break;
 800658c:	e022      	b.n	80065d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fb37 	bl	8006c04 <USBD_SetAddress>
          break;
 8006596:	e01d      	b.n	80065d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006598:	6839      	ldr	r1, [r7, #0]
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fb74 	bl	8006c88 <USBD_SetConfig>
          break;
 80065a0:	e018      	b.n	80065d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80065a2:	6839      	ldr	r1, [r7, #0]
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fbfd 	bl	8006da4 <USBD_GetConfig>
          break;
 80065aa:	e013      	b.n	80065d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80065ac:	6839      	ldr	r1, [r7, #0]
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fc2c 	bl	8006e0c <USBD_GetStatus>
          break;
 80065b4:	e00e      	b.n	80065d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80065b6:	6839      	ldr	r1, [r7, #0]
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fc5a 	bl	8006e72 <USBD_SetFeature>
          break;
 80065be:	e009      	b.n	80065d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fc69 	bl	8006e9a <USBD_ClrFeature>
          break;
 80065c8:	e004      	b.n	80065d4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80065ca:	6839      	ldr	r1, [r7, #0]
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fcc1 	bl	8006f54 <USBD_CtlError>
          break;
 80065d2:	bf00      	nop
      }
      break;
 80065d4:	e004      	b.n	80065e0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fcbb 	bl	8006f54 <USBD_CtlError>
      break;
 80065de:	bf00      	nop
  }

  return ret;
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop

080065ec <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006602:	2b20      	cmp	r3, #32
 8006604:	d003      	beq.n	800660e <USBD_StdItfReq+0x22>
 8006606:	2b40      	cmp	r3, #64	; 0x40
 8006608:	d001      	beq.n	800660e <USBD_StdItfReq+0x22>
 800660a:	2b00      	cmp	r3, #0
 800660c:	d12a      	bne.n	8006664 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006614:	3b01      	subs	r3, #1
 8006616:	2b02      	cmp	r3, #2
 8006618:	d81d      	bhi.n	8006656 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	889b      	ldrh	r3, [r3, #4]
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b01      	cmp	r3, #1
 8006622:	d813      	bhi.n	800664c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	6839      	ldr	r1, [r7, #0]
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	4798      	blx	r3
 8006632:	4603      	mov	r3, r0
 8006634:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	88db      	ldrh	r3, [r3, #6]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d110      	bne.n	8006660 <USBD_StdItfReq+0x74>
 800663e:	7bfb      	ldrb	r3, [r7, #15]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10d      	bne.n	8006660 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fd4d 	bl	80070e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800664a:	e009      	b.n	8006660 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800664c:	6839      	ldr	r1, [r7, #0]
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 fc80 	bl	8006f54 <USBD_CtlError>
          break;
 8006654:	e004      	b.n	8006660 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006656:	6839      	ldr	r1, [r7, #0]
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fc7b 	bl	8006f54 <USBD_CtlError>
          break;
 800665e:	e000      	b.n	8006662 <USBD_StdItfReq+0x76>
          break;
 8006660:	bf00      	nop
      }
      break;
 8006662:	e004      	b.n	800666e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006664:	6839      	ldr	r1, [r7, #0]
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fc74 	bl	8006f54 <USBD_CtlError>
      break;
 800666c:	bf00      	nop
  }

  return USBD_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006682:	2300      	movs	r3, #0
 8006684:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	889b      	ldrh	r3, [r3, #4]
 800668a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006694:	2b20      	cmp	r3, #32
 8006696:	d004      	beq.n	80066a2 <USBD_StdEPReq+0x2a>
 8006698:	2b40      	cmp	r3, #64	; 0x40
 800669a:	d002      	beq.n	80066a2 <USBD_StdEPReq+0x2a>
 800669c:	2b00      	cmp	r3, #0
 800669e:	d008      	beq.n	80066b2 <USBD_StdEPReq+0x3a>
 80066a0:	e13d      	b.n	800691e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	6839      	ldr	r1, [r7, #0]
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	4798      	blx	r3
      break;
 80066b0:	e13a      	b.n	8006928 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066ba:	2b20      	cmp	r3, #32
 80066bc:	d10a      	bne.n	80066d4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	6839      	ldr	r1, [r7, #0]
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	4798      	blx	r3
 80066cc:	4603      	mov	r3, r0
 80066ce:	73fb      	strb	r3, [r7, #15]

        return ret;
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
 80066d2:	e12a      	b.n	800692a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	785b      	ldrb	r3, [r3, #1]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d03e      	beq.n	800675a <USBD_StdEPReq+0xe2>
 80066dc:	2b03      	cmp	r3, #3
 80066de:	d002      	beq.n	80066e6 <USBD_StdEPReq+0x6e>
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d070      	beq.n	80067c6 <USBD_StdEPReq+0x14e>
 80066e4:	e115      	b.n	8006912 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d002      	beq.n	80066f6 <USBD_StdEPReq+0x7e>
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d015      	beq.n	8006720 <USBD_StdEPReq+0xa8>
 80066f4:	e02b      	b.n	800674e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066f6:	7bbb      	ldrb	r3, [r7, #14]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00c      	beq.n	8006716 <USBD_StdEPReq+0x9e>
 80066fc:	7bbb      	ldrb	r3, [r7, #14]
 80066fe:	2b80      	cmp	r3, #128	; 0x80
 8006700:	d009      	beq.n	8006716 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006702:	7bbb      	ldrb	r3, [r7, #14]
 8006704:	4619      	mov	r1, r3
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f001 f902 	bl	8007910 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800670c:	2180      	movs	r1, #128	; 0x80
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f001 f8fe 	bl	8007910 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006714:	e020      	b.n	8006758 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fc1b 	bl	8006f54 <USBD_CtlError>
              break;
 800671e:	e01b      	b.n	8006758 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	885b      	ldrh	r3, [r3, #2]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10e      	bne.n	8006746 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006728:	7bbb      	ldrb	r3, [r7, #14]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00b      	beq.n	8006746 <USBD_StdEPReq+0xce>
 800672e:	7bbb      	ldrb	r3, [r7, #14]
 8006730:	2b80      	cmp	r3, #128	; 0x80
 8006732:	d008      	beq.n	8006746 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	88db      	ldrh	r3, [r3, #6]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d104      	bne.n	8006746 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800673c:	7bbb      	ldrb	r3, [r7, #14]
 800673e:	4619      	mov	r1, r3
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f001 f8e5 	bl	8007910 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fccc 	bl	80070e4 <USBD_CtlSendStatus>

              break;
 800674c:	e004      	b.n	8006758 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800674e:	6839      	ldr	r1, [r7, #0]
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fbff 	bl	8006f54 <USBD_CtlError>
              break;
 8006756:	bf00      	nop
          }
          break;
 8006758:	e0e0      	b.n	800691c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006760:	2b02      	cmp	r3, #2
 8006762:	d002      	beq.n	800676a <USBD_StdEPReq+0xf2>
 8006764:	2b03      	cmp	r3, #3
 8006766:	d015      	beq.n	8006794 <USBD_StdEPReq+0x11c>
 8006768:	e026      	b.n	80067b8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800676a:	7bbb      	ldrb	r3, [r7, #14]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00c      	beq.n	800678a <USBD_StdEPReq+0x112>
 8006770:	7bbb      	ldrb	r3, [r7, #14]
 8006772:	2b80      	cmp	r3, #128	; 0x80
 8006774:	d009      	beq.n	800678a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006776:	7bbb      	ldrb	r3, [r7, #14]
 8006778:	4619      	mov	r1, r3
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f001 f8c8 	bl	8007910 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006780:	2180      	movs	r1, #128	; 0x80
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f001 f8c4 	bl	8007910 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006788:	e01c      	b.n	80067c4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800678a:	6839      	ldr	r1, [r7, #0]
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fbe1 	bl	8006f54 <USBD_CtlError>
              break;
 8006792:	e017      	b.n	80067c4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	885b      	ldrh	r3, [r3, #2]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d112      	bne.n	80067c2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800679c:	7bbb      	ldrb	r3, [r7, #14]
 800679e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d004      	beq.n	80067b0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80067a6:	7bbb      	ldrb	r3, [r7, #14]
 80067a8:	4619      	mov	r1, r3
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f001 f8cf 	bl	800794e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fc97 	bl	80070e4 <USBD_CtlSendStatus>
              }
              break;
 80067b6:	e004      	b.n	80067c2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80067b8:	6839      	ldr	r1, [r7, #0]
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fbca 	bl	8006f54 <USBD_CtlError>
              break;
 80067c0:	e000      	b.n	80067c4 <USBD_StdEPReq+0x14c>
              break;
 80067c2:	bf00      	nop
          }
          break;
 80067c4:	e0aa      	b.n	800691c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d002      	beq.n	80067d6 <USBD_StdEPReq+0x15e>
 80067d0:	2b03      	cmp	r3, #3
 80067d2:	d032      	beq.n	800683a <USBD_StdEPReq+0x1c2>
 80067d4:	e097      	b.n	8006906 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067d6:	7bbb      	ldrb	r3, [r7, #14]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d007      	beq.n	80067ec <USBD_StdEPReq+0x174>
 80067dc:	7bbb      	ldrb	r3, [r7, #14]
 80067de:	2b80      	cmp	r3, #128	; 0x80
 80067e0:	d004      	beq.n	80067ec <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80067e2:	6839      	ldr	r1, [r7, #0]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fbb5 	bl	8006f54 <USBD_CtlError>
                break;
 80067ea:	e091      	b.n	8006910 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	da0b      	bge.n	800680c <USBD_StdEPReq+0x194>
 80067f4:	7bbb      	ldrb	r3, [r7, #14]
 80067f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067fa:	4613      	mov	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	3310      	adds	r3, #16
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	4413      	add	r3, r2
 8006808:	3304      	adds	r3, #4
 800680a:	e00b      	b.n	8006824 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800680c:	7bbb      	ldrb	r3, [r7, #14]
 800680e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006812:	4613      	mov	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4413      	add	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	4413      	add	r3, r2
 8006822:	3304      	adds	r3, #4
 8006824:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2200      	movs	r2, #0
 800682a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	2202      	movs	r2, #2
 8006830:	4619      	mov	r1, r3
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fbf8 	bl	8007028 <USBD_CtlSendData>
              break;
 8006838:	e06a      	b.n	8006910 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800683a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800683e:	2b00      	cmp	r3, #0
 8006840:	da11      	bge.n	8006866 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006842:	7bbb      	ldrb	r3, [r7, #14]
 8006844:	f003 020f 	and.w	r2, r3, #15
 8006848:	6879      	ldr	r1, [r7, #4]
 800684a:	4613      	mov	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	440b      	add	r3, r1
 8006854:	3318      	adds	r3, #24
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d117      	bne.n	800688c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800685c:	6839      	ldr	r1, [r7, #0]
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fb78 	bl	8006f54 <USBD_CtlError>
                  break;
 8006864:	e054      	b.n	8006910 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006866:	7bbb      	ldrb	r3, [r7, #14]
 8006868:	f003 020f 	and.w	r2, r3, #15
 800686c:	6879      	ldr	r1, [r7, #4]
 800686e:	4613      	mov	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	440b      	add	r3, r1
 8006878:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d104      	bne.n	800688c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006882:	6839      	ldr	r1, [r7, #0]
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fb65 	bl	8006f54 <USBD_CtlError>
                  break;
 800688a:	e041      	b.n	8006910 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800688c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006890:	2b00      	cmp	r3, #0
 8006892:	da0b      	bge.n	80068ac <USBD_StdEPReq+0x234>
 8006894:	7bbb      	ldrb	r3, [r7, #14]
 8006896:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800689a:	4613      	mov	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	3310      	adds	r3, #16
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	4413      	add	r3, r2
 80068a8:	3304      	adds	r3, #4
 80068aa:	e00b      	b.n	80068c4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80068ac:	7bbb      	ldrb	r3, [r7, #14]
 80068ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068b2:	4613      	mov	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	4413      	add	r3, r2
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	4413      	add	r3, r2
 80068c2:	3304      	adds	r3, #4
 80068c4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80068c6:	7bbb      	ldrb	r3, [r7, #14]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <USBD_StdEPReq+0x25a>
 80068cc:	7bbb      	ldrb	r3, [r7, #14]
 80068ce:	2b80      	cmp	r3, #128	; 0x80
 80068d0:	d103      	bne.n	80068da <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	e00e      	b.n	80068f8 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80068da:	7bbb      	ldrb	r3, [r7, #14]
 80068dc:	4619      	mov	r1, r3
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f001 f854 	bl	800798c <USBD_LL_IsStallEP>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	2201      	movs	r2, #1
 80068ee:	601a      	str	r2, [r3, #0]
 80068f0:	e002      	b.n	80068f8 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	2200      	movs	r2, #0
 80068f6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2202      	movs	r2, #2
 80068fc:	4619      	mov	r1, r3
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fb92 	bl	8007028 <USBD_CtlSendData>
              break;
 8006904:	e004      	b.n	8006910 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006906:	6839      	ldr	r1, [r7, #0]
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fb23 	bl	8006f54 <USBD_CtlError>
              break;
 800690e:	bf00      	nop
          }
          break;
 8006910:	e004      	b.n	800691c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006912:	6839      	ldr	r1, [r7, #0]
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fb1d 	bl	8006f54 <USBD_CtlError>
          break;
 800691a:	bf00      	nop
      }
      break;
 800691c:	e004      	b.n	8006928 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fb17 	bl	8006f54 <USBD_CtlError>
      break;
 8006926:	bf00      	nop
  }

  return ret;
 8006928:	7bfb      	ldrb	r3, [r7, #15]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
	...

08006934 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800693e:	2300      	movs	r3, #0
 8006940:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006942:	2300      	movs	r3, #0
 8006944:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006946:	2300      	movs	r3, #0
 8006948:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	885b      	ldrh	r3, [r3, #2]
 800694e:	0a1b      	lsrs	r3, r3, #8
 8006950:	b29b      	uxth	r3, r3
 8006952:	3b01      	subs	r3, #1
 8006954:	2b06      	cmp	r3, #6
 8006956:	f200 8128 	bhi.w	8006baa <USBD_GetDescriptor+0x276>
 800695a:	a201      	add	r2, pc, #4	; (adr r2, 8006960 <USBD_GetDescriptor+0x2c>)
 800695c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006960:	0800697d 	.word	0x0800697d
 8006964:	08006995 	.word	0x08006995
 8006968:	080069d5 	.word	0x080069d5
 800696c:	08006bab 	.word	0x08006bab
 8006970:	08006bab 	.word	0x08006bab
 8006974:	08006b4b 	.word	0x08006b4b
 8006978:	08006b77 	.word	0x08006b77
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	7c12      	ldrb	r2, [r2, #16]
 8006988:	f107 0108 	add.w	r1, r7, #8
 800698c:	4610      	mov	r0, r2
 800698e:	4798      	blx	r3
 8006990:	60f8      	str	r0, [r7, #12]
      break;
 8006992:	e112      	b.n	8006bba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	7c1b      	ldrb	r3, [r3, #16]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10d      	bne.n	80069b8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a4:	f107 0208 	add.w	r2, r7, #8
 80069a8:	4610      	mov	r0, r2
 80069aa:	4798      	blx	r3
 80069ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	3301      	adds	r3, #1
 80069b2:	2202      	movs	r2, #2
 80069b4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80069b6:	e100      	b.n	8006bba <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c0:	f107 0208 	add.w	r2, r7, #8
 80069c4:	4610      	mov	r0, r2
 80069c6:	4798      	blx	r3
 80069c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	3301      	adds	r3, #1
 80069ce:	2202      	movs	r2, #2
 80069d0:	701a      	strb	r2, [r3, #0]
      break;
 80069d2:	e0f2      	b.n	8006bba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	885b      	ldrh	r3, [r3, #2]
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b05      	cmp	r3, #5
 80069dc:	f200 80ac 	bhi.w	8006b38 <USBD_GetDescriptor+0x204>
 80069e0:	a201      	add	r2, pc, #4	; (adr r2, 80069e8 <USBD_GetDescriptor+0xb4>)
 80069e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e6:	bf00      	nop
 80069e8:	08006a01 	.word	0x08006a01
 80069ec:	08006a35 	.word	0x08006a35
 80069f0:	08006a69 	.word	0x08006a69
 80069f4:	08006a9d 	.word	0x08006a9d
 80069f8:	08006ad1 	.word	0x08006ad1
 80069fc:	08006b05 	.word	0x08006b05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00b      	beq.n	8006a24 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	7c12      	ldrb	r2, [r2, #16]
 8006a18:	f107 0108 	add.w	r1, r7, #8
 8006a1c:	4610      	mov	r0, r2
 8006a1e:	4798      	blx	r3
 8006a20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a22:	e091      	b.n	8006b48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fa94 	bl	8006f54 <USBD_CtlError>
            err++;
 8006a2c:	7afb      	ldrb	r3, [r7, #11]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	72fb      	strb	r3, [r7, #11]
          break;
 8006a32:	e089      	b.n	8006b48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00b      	beq.n	8006a58 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	7c12      	ldrb	r2, [r2, #16]
 8006a4c:	f107 0108 	add.w	r1, r7, #8
 8006a50:	4610      	mov	r0, r2
 8006a52:	4798      	blx	r3
 8006a54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a56:	e077      	b.n	8006b48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a58:	6839      	ldr	r1, [r7, #0]
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fa7a 	bl	8006f54 <USBD_CtlError>
            err++;
 8006a60:	7afb      	ldrb	r3, [r7, #11]
 8006a62:	3301      	adds	r3, #1
 8006a64:	72fb      	strb	r3, [r7, #11]
          break;
 8006a66:	e06f      	b.n	8006b48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00b      	beq.n	8006a8c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	7c12      	ldrb	r2, [r2, #16]
 8006a80:	f107 0108 	add.w	r1, r7, #8
 8006a84:	4610      	mov	r0, r2
 8006a86:	4798      	blx	r3
 8006a88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a8a:	e05d      	b.n	8006b48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a8c:	6839      	ldr	r1, [r7, #0]
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fa60 	bl	8006f54 <USBD_CtlError>
            err++;
 8006a94:	7afb      	ldrb	r3, [r7, #11]
 8006a96:	3301      	adds	r3, #1
 8006a98:	72fb      	strb	r3, [r7, #11]
          break;
 8006a9a:	e055      	b.n	8006b48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00b      	beq.n	8006ac0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	7c12      	ldrb	r2, [r2, #16]
 8006ab4:	f107 0108 	add.w	r1, r7, #8
 8006ab8:	4610      	mov	r0, r2
 8006aba:	4798      	blx	r3
 8006abc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006abe:	e043      	b.n	8006b48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ac0:	6839      	ldr	r1, [r7, #0]
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fa46 	bl	8006f54 <USBD_CtlError>
            err++;
 8006ac8:	7afb      	ldrb	r3, [r7, #11]
 8006aca:	3301      	adds	r3, #1
 8006acc:	72fb      	strb	r3, [r7, #11]
          break;
 8006ace:	e03b      	b.n	8006b48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ad6:	695b      	ldr	r3, [r3, #20]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00b      	beq.n	8006af4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ae2:	695b      	ldr	r3, [r3, #20]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	7c12      	ldrb	r2, [r2, #16]
 8006ae8:	f107 0108 	add.w	r1, r7, #8
 8006aec:	4610      	mov	r0, r2
 8006aee:	4798      	blx	r3
 8006af0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006af2:	e029      	b.n	8006b48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fa2c 	bl	8006f54 <USBD_CtlError>
            err++;
 8006afc:	7afb      	ldrb	r3, [r7, #11]
 8006afe:	3301      	adds	r3, #1
 8006b00:	72fb      	strb	r3, [r7, #11]
          break;
 8006b02:	e021      	b.n	8006b48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00b      	beq.n	8006b28 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	7c12      	ldrb	r2, [r2, #16]
 8006b1c:	f107 0108 	add.w	r1, r7, #8
 8006b20:	4610      	mov	r0, r2
 8006b22:	4798      	blx	r3
 8006b24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b26:	e00f      	b.n	8006b48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b28:	6839      	ldr	r1, [r7, #0]
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fa12 	bl	8006f54 <USBD_CtlError>
            err++;
 8006b30:	7afb      	ldrb	r3, [r7, #11]
 8006b32:	3301      	adds	r3, #1
 8006b34:	72fb      	strb	r3, [r7, #11]
          break;
 8006b36:	e007      	b.n	8006b48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006b38:	6839      	ldr	r1, [r7, #0]
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fa0a 	bl	8006f54 <USBD_CtlError>
          err++;
 8006b40:	7afb      	ldrb	r3, [r7, #11]
 8006b42:	3301      	adds	r3, #1
 8006b44:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006b46:	e038      	b.n	8006bba <USBD_GetDescriptor+0x286>
 8006b48:	e037      	b.n	8006bba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	7c1b      	ldrb	r3, [r3, #16]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d109      	bne.n	8006b66 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b5a:	f107 0208 	add.w	r2, r7, #8
 8006b5e:	4610      	mov	r0, r2
 8006b60:	4798      	blx	r3
 8006b62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b64:	e029      	b.n	8006bba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f9f3 	bl	8006f54 <USBD_CtlError>
        err++;
 8006b6e:	7afb      	ldrb	r3, [r7, #11]
 8006b70:	3301      	adds	r3, #1
 8006b72:	72fb      	strb	r3, [r7, #11]
      break;
 8006b74:	e021      	b.n	8006bba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	7c1b      	ldrb	r3, [r3, #16]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10d      	bne.n	8006b9a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b86:	f107 0208 	add.w	r2, r7, #8
 8006b8a:	4610      	mov	r0, r2
 8006b8c:	4798      	blx	r3
 8006b8e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	3301      	adds	r3, #1
 8006b94:	2207      	movs	r2, #7
 8006b96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b98:	e00f      	b.n	8006bba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b9a:	6839      	ldr	r1, [r7, #0]
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f9d9 	bl	8006f54 <USBD_CtlError>
        err++;
 8006ba2:	7afb      	ldrb	r3, [r7, #11]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	72fb      	strb	r3, [r7, #11]
      break;
 8006ba8:	e007      	b.n	8006bba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006baa:	6839      	ldr	r1, [r7, #0]
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f9d1 	bl	8006f54 <USBD_CtlError>
      err++;
 8006bb2:	7afb      	ldrb	r3, [r7, #11]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	72fb      	strb	r3, [r7, #11]
      break;
 8006bb8:	bf00      	nop
  }

  if (err != 0U)
 8006bba:	7afb      	ldrb	r3, [r7, #11]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d11c      	bne.n	8006bfa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006bc0:	893b      	ldrh	r3, [r7, #8]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d011      	beq.n	8006bea <USBD_GetDescriptor+0x2b6>
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	88db      	ldrh	r3, [r3, #6]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00d      	beq.n	8006bea <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	88da      	ldrh	r2, [r3, #6]
 8006bd2:	893b      	ldrh	r3, [r7, #8]
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	bf28      	it	cs
 8006bd8:	4613      	movcs	r3, r2
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006bde:	893b      	ldrh	r3, [r7, #8]
 8006be0:	461a      	mov	r2, r3
 8006be2:	68f9      	ldr	r1, [r7, #12]
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fa1f 	bl	8007028 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	88db      	ldrh	r3, [r3, #6]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d104      	bne.n	8006bfc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fa76 	bl	80070e4 <USBD_CtlSendStatus>
 8006bf8:	e000      	b.n	8006bfc <USBD_GetDescriptor+0x2c8>
    return;
 8006bfa:	bf00      	nop
    }
  }
}
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop

08006c04 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	889b      	ldrh	r3, [r3, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d130      	bne.n	8006c78 <USBD_SetAddress+0x74>
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	88db      	ldrh	r3, [r3, #6]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d12c      	bne.n	8006c78 <USBD_SetAddress+0x74>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	885b      	ldrh	r3, [r3, #2]
 8006c22:	2b7f      	cmp	r3, #127	; 0x7f
 8006c24:	d828      	bhi.n	8006c78 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	885b      	ldrh	r3, [r3, #2]
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c38:	2b03      	cmp	r3, #3
 8006c3a:	d104      	bne.n	8006c46 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006c3c:	6839      	ldr	r1, [r7, #0]
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f988 	bl	8006f54 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c44:	e01c      	b.n	8006c80 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	7bfa      	ldrb	r2, [r7, #15]
 8006c4a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006c4e:	7bfb      	ldrb	r3, [r7, #15]
 8006c50:	4619      	mov	r1, r3
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fec5 	bl	80079e2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fa43 	bl	80070e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c5e:	7bfb      	ldrb	r3, [r7, #15]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d004      	beq.n	8006c6e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c6c:	e008      	b.n	8006c80 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c76:	e003      	b.n	8006c80 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c78:	6839      	ldr	r1, [r7, #0]
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f96a 	bl	8006f54 <USBD_CtlError>
  }
}
 8006c80:	bf00      	nop
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	885b      	ldrh	r3, [r3, #2]
 8006c96:	b2da      	uxtb	r2, r3
 8006c98:	4b41      	ldr	r3, [pc, #260]	; (8006da0 <USBD_SetConfig+0x118>)
 8006c9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c9c:	4b40      	ldr	r3, [pc, #256]	; (8006da0 <USBD_SetConfig+0x118>)
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d904      	bls.n	8006cae <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006ca4:	6839      	ldr	r1, [r7, #0]
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f954 	bl	8006f54 <USBD_CtlError>
 8006cac:	e075      	b.n	8006d9a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d002      	beq.n	8006cbe <USBD_SetConfig+0x36>
 8006cb8:	2b03      	cmp	r3, #3
 8006cba:	d023      	beq.n	8006d04 <USBD_SetConfig+0x7c>
 8006cbc:	e062      	b.n	8006d84 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006cbe:	4b38      	ldr	r3, [pc, #224]	; (8006da0 <USBD_SetConfig+0x118>)
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d01a      	beq.n	8006cfc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006cc6:	4b36      	ldr	r3, [pc, #216]	; (8006da0 <USBD_SetConfig+0x118>)
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2203      	movs	r2, #3
 8006cd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006cd8:	4b31      	ldr	r3, [pc, #196]	; (8006da0 <USBD_SetConfig+0x118>)
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7ff f9bb 	bl	800605a <USBD_SetClassConfig>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d104      	bne.n	8006cf4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006cea:	6839      	ldr	r1, [r7, #0]
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f931 	bl	8006f54 <USBD_CtlError>
            return;
 8006cf2:	e052      	b.n	8006d9a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f9f5 	bl	80070e4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006cfa:	e04e      	b.n	8006d9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 f9f1 	bl	80070e4 <USBD_CtlSendStatus>
        break;
 8006d02:	e04a      	b.n	8006d9a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006d04:	4b26      	ldr	r3, [pc, #152]	; (8006da0 <USBD_SetConfig+0x118>)
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d112      	bne.n	8006d32 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2202      	movs	r2, #2
 8006d10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006d14:	4b22      	ldr	r3, [pc, #136]	; (8006da0 <USBD_SetConfig+0x118>)
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	461a      	mov	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006d1e:	4b20      	ldr	r3, [pc, #128]	; (8006da0 <USBD_SetConfig+0x118>)
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7ff f9b7 	bl	8006098 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f9da 	bl	80070e4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006d30:	e033      	b.n	8006d9a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006d32:	4b1b      	ldr	r3, [pc, #108]	; (8006da0 <USBD_SetConfig+0x118>)
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	461a      	mov	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d01d      	beq.n	8006d7c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7ff f9a5 	bl	8006098 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006d4e:	4b14      	ldr	r3, [pc, #80]	; (8006da0 <USBD_SetConfig+0x118>)
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	461a      	mov	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006d58:	4b11      	ldr	r3, [pc, #68]	; (8006da0 <USBD_SetConfig+0x118>)
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f7ff f97b 	bl	800605a <USBD_SetClassConfig>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d104      	bne.n	8006d74 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006d6a:	6839      	ldr	r1, [r7, #0]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f8f1 	bl	8006f54 <USBD_CtlError>
            return;
 8006d72:	e012      	b.n	8006d9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f9b5 	bl	80070e4 <USBD_CtlSendStatus>
        break;
 8006d7a:	e00e      	b.n	8006d9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 f9b1 	bl	80070e4 <USBD_CtlSendStatus>
        break;
 8006d82:	e00a      	b.n	8006d9a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f8e4 	bl	8006f54 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006d8c:	4b04      	ldr	r3, [pc, #16]	; (8006da0 <USBD_SetConfig+0x118>)
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	4619      	mov	r1, r3
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f7ff f980 	bl	8006098 <USBD_ClrClassConfig>
        break;
 8006d98:	bf00      	nop
    }
  }
}
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	20000208 	.word	0x20000208

08006da4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	88db      	ldrh	r3, [r3, #6]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d004      	beq.n	8006dc0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f8cb 	bl	8006f54 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006dbe:	e021      	b.n	8006e04 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	db17      	blt.n	8006dfa <USBD_GetConfig+0x56>
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	dd02      	ble.n	8006dd4 <USBD_GetConfig+0x30>
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	d00b      	beq.n	8006dea <USBD_GetConfig+0x46>
 8006dd2:	e012      	b.n	8006dfa <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	3308      	adds	r3, #8
 8006dde:	2201      	movs	r2, #1
 8006de0:	4619      	mov	r1, r3
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f920 	bl	8007028 <USBD_CtlSendData>
        break;
 8006de8:	e00c      	b.n	8006e04 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	3304      	adds	r3, #4
 8006dee:	2201      	movs	r2, #1
 8006df0:	4619      	mov	r1, r3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f918 	bl	8007028 <USBD_CtlSendData>
        break;
 8006df8:	e004      	b.n	8006e04 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006dfa:	6839      	ldr	r1, [r7, #0]
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 f8a9 	bl	8006f54 <USBD_CtlError>
        break;
 8006e02:	bf00      	nop
}
 8006e04:	bf00      	nop
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d81e      	bhi.n	8006e60 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	88db      	ldrh	r3, [r3, #6]
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d004      	beq.n	8006e34 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006e2a:	6839      	ldr	r1, [r7, #0]
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f891 	bl	8006f54 <USBD_CtlError>
        break;
 8006e32:	e01a      	b.n	8006e6a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d005      	beq.n	8006e50 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	f043 0202 	orr.w	r2, r3, #2
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	330c      	adds	r3, #12
 8006e54:	2202      	movs	r2, #2
 8006e56:	4619      	mov	r1, r3
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f8e5 	bl	8007028 <USBD_CtlSendData>
      break;
 8006e5e:	e004      	b.n	8006e6a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006e60:	6839      	ldr	r1, [r7, #0]
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f876 	bl	8006f54 <USBD_CtlError>
      break;
 8006e68:	bf00      	nop
  }
}
 8006e6a:	bf00      	nop
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b082      	sub	sp, #8
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	885b      	ldrh	r3, [r3, #2]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d106      	bne.n	8006e92 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f929 	bl	80070e4 <USBD_CtlSendStatus>
  }
}
 8006e92:	bf00      	nop
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b082      	sub	sp, #8
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d80b      	bhi.n	8006ec8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	885b      	ldrh	r3, [r3, #2]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d10c      	bne.n	8006ed2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f90f 	bl	80070e4 <USBD_CtlSendStatus>
      }
      break;
 8006ec6:	e004      	b.n	8006ed2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f842 	bl	8006f54 <USBD_CtlError>
      break;
 8006ed0:	e000      	b.n	8006ed4 <USBD_ClrFeature+0x3a>
      break;
 8006ed2:	bf00      	nop
  }
}
 8006ed4:	bf00      	nop
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	781a      	ldrb	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	785a      	ldrb	r2, [r3, #1]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	3302      	adds	r3, #2
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	3303      	adds	r3, #3
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	021b      	lsls	r3, r3, #8
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	4413      	add	r3, r2
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	3304      	adds	r3, #4
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	3305      	adds	r3, #5
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	021b      	lsls	r3, r3, #8
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	4413      	add	r3, r2
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	3306      	adds	r3, #6
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	3307      	adds	r3, #7
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	021b      	lsls	r3, r3, #8
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	4413      	add	r3, r2
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	80da      	strh	r2, [r3, #6]

}
 8006f4a:	bf00      	nop
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bc80      	pop	{r7}
 8006f52:	4770      	bx	lr

08006f54 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006f5e:	2180      	movs	r1, #128	; 0x80
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fcd5 	bl	8007910 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006f66:	2100      	movs	r1, #0
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fcd1 	bl	8007910 <USBD_LL_StallEP>
}
 8006f6e:	bf00      	nop
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b086      	sub	sp, #24
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	60f8      	str	r0, [r7, #12]
 8006f7e:	60b9      	str	r1, [r7, #8]
 8006f80:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d032      	beq.n	8006ff2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 f834 	bl	8006ffa <USBD_GetLen>
 8006f92:	4603      	mov	r3, r0
 8006f94:	3301      	adds	r3, #1
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006fa0:	7dfb      	ldrb	r3, [r7, #23]
 8006fa2:	1c5a      	adds	r2, r3, #1
 8006fa4:	75fa      	strb	r2, [r7, #23]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	4413      	add	r3, r2
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	7812      	ldrb	r2, [r2, #0]
 8006fb0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006fb2:	7dfb      	ldrb	r3, [r7, #23]
 8006fb4:	1c5a      	adds	r2, r3, #1
 8006fb6:	75fa      	strb	r2, [r7, #23]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	2203      	movs	r2, #3
 8006fc0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006fc2:	e012      	b.n	8006fea <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	1c5a      	adds	r2, r3, #1
 8006fc8:	60fa      	str	r2, [r7, #12]
 8006fca:	7dfa      	ldrb	r2, [r7, #23]
 8006fcc:	1c51      	adds	r1, r2, #1
 8006fce:	75f9      	strb	r1, [r7, #23]
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	440a      	add	r2, r1
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006fda:	7dfb      	ldrb	r3, [r7, #23]
 8006fdc:	1c5a      	adds	r2, r3, #1
 8006fde:	75fa      	strb	r2, [r7, #23]
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1e8      	bne.n	8006fc4 <USBD_GetString+0x4e>
    }
  }
}
 8006ff2:	bf00      	nop
 8006ff4:	3718      	adds	r7, #24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b085      	sub	sp, #20
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007002:	2300      	movs	r3, #0
 8007004:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007006:	e005      	b.n	8007014 <USBD_GetLen+0x1a>
  {
    len++;
 8007008:	7bfb      	ldrb	r3, [r7, #15]
 800700a:	3301      	adds	r3, #1
 800700c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	3301      	adds	r3, #1
 8007012:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1f5      	bne.n	8007008 <USBD_GetLen+0xe>
  }

  return len;
 800701c:	7bfb      	ldrb	r3, [r7, #15]
}
 800701e:	4618      	mov	r0, r3
 8007020:	3714      	adds	r7, #20
 8007022:	46bd      	mov	sp, r7
 8007024:	bc80      	pop	{r7}
 8007026:	4770      	bx	lr

08007028 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	4613      	mov	r3, r2
 8007034:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2202      	movs	r2, #2
 800703a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800703e:	88fa      	ldrh	r2, [r7, #6]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007044:	88fa      	ldrh	r2, [r7, #6]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800704a:	88fb      	ldrh	r3, [r7, #6]
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	2100      	movs	r1, #0
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 fce5 	bl	8007a20 <USBD_LL_Transmit>

  return USBD_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	4613      	mov	r3, r2
 800706c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800706e:	88fb      	ldrh	r3, [r7, #6]
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	2100      	movs	r1, #0
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f000 fcd3 	bl	8007a20 <USBD_LL_Transmit>

  return USBD_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	4613      	mov	r3, r2
 8007090:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2203      	movs	r2, #3
 8007096:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800709a:	88fa      	ldrh	r2, [r7, #6]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80070a2:	88fa      	ldrh	r2, [r7, #6]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070aa:	88fb      	ldrh	r3, [r7, #6]
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	2100      	movs	r1, #0
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f000 fcd8 	bl	8007a66 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	4613      	mov	r3, r2
 80070cc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070ce:	88fb      	ldrh	r3, [r7, #6]
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	2100      	movs	r1, #0
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f000 fcc6 	bl	8007a66 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2204      	movs	r2, #4
 80070f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80070f4:	2300      	movs	r3, #0
 80070f6:	2200      	movs	r2, #0
 80070f8:	2100      	movs	r1, #0
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fc90 	bl	8007a20 <USBD_LL_Transmit>

  return USBD_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b082      	sub	sp, #8
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2205      	movs	r2, #5
 8007116:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800711a:	2300      	movs	r3, #0
 800711c:	2200      	movs	r2, #0
 800711e:	2100      	movs	r1, #0
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fca0 	bl	8007a66 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3708      	adds	r7, #8
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007134:	2200      	movs	r2, #0
 8007136:	4912      	ldr	r1, [pc, #72]	; (8007180 <MX_USB_DEVICE_Init+0x50>)
 8007138:	4812      	ldr	r0, [pc, #72]	; (8007184 <MX_USB_DEVICE_Init+0x54>)
 800713a:	f7fe ff34 	bl	8005fa6 <USBD_Init>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d001      	beq.n	8007148 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007144:	f7f9 fff2 	bl	800112c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007148:	490f      	ldr	r1, [pc, #60]	; (8007188 <MX_USB_DEVICE_Init+0x58>)
 800714a:	480e      	ldr	r0, [pc, #56]	; (8007184 <MX_USB_DEVICE_Init+0x54>)
 800714c:	f7fe ff56 	bl	8005ffc <USBD_RegisterClass>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007156:	f7f9 ffe9 	bl	800112c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800715a:	490c      	ldr	r1, [pc, #48]	; (800718c <MX_USB_DEVICE_Init+0x5c>)
 800715c:	4809      	ldr	r0, [pc, #36]	; (8007184 <MX_USB_DEVICE_Init+0x54>)
 800715e:	f7fe fe87 	bl	8005e70 <USBD_CDC_RegisterInterface>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007168:	f7f9 ffe0 	bl	800112c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800716c:	4805      	ldr	r0, [pc, #20]	; (8007184 <MX_USB_DEVICE_Init+0x54>)
 800716e:	f7fe ff5e 	bl	800602e <USBD_Start>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d001      	beq.n	800717c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007178:	f7f9 ffd8 	bl	800112c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800717c:	bf00      	nop
 800717e:	bd80      	pop	{r7, pc}
 8007180:	2000012c 	.word	0x2000012c
 8007184:	20000b10 	.word	0x20000b10
 8007188:	20000018 	.word	0x20000018
 800718c:	2000011c 	.word	0x2000011c

08007190 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007194:	2200      	movs	r2, #0
 8007196:	4905      	ldr	r1, [pc, #20]	; (80071ac <CDC_Init_FS+0x1c>)
 8007198:	4805      	ldr	r0, [pc, #20]	; (80071b0 <CDC_Init_FS+0x20>)
 800719a:	f7fe fe7f 	bl	8005e9c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800719e:	4905      	ldr	r1, [pc, #20]	; (80071b4 <CDC_Init_FS+0x24>)
 80071a0:	4803      	ldr	r0, [pc, #12]	; (80071b0 <CDC_Init_FS+0x20>)
 80071a2:	f7fe fe94 	bl	8005ece <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80071a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	200015d4 	.word	0x200015d4
 80071b0:	20000b10 	.word	0x20000b10
 80071b4:	20000dd4 	.word	0x20000dd4

080071b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80071b8:	b480      	push	{r7}
 80071ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80071bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80071be:	4618      	mov	r0, r3
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bc80      	pop	{r7}
 80071c4:	4770      	bx	lr
	...

080071c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	4603      	mov	r3, r0
 80071d0:	6039      	str	r1, [r7, #0]
 80071d2:	71fb      	strb	r3, [r7, #7]
 80071d4:	4613      	mov	r3, r2
 80071d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80071d8:	79fb      	ldrb	r3, [r7, #7]
 80071da:	2b23      	cmp	r3, #35	; 0x23
 80071dc:	d84a      	bhi.n	8007274 <CDC_Control_FS+0xac>
 80071de:	a201      	add	r2, pc, #4	; (adr r2, 80071e4 <CDC_Control_FS+0x1c>)
 80071e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e4:	08007275 	.word	0x08007275
 80071e8:	08007275 	.word	0x08007275
 80071ec:	08007275 	.word	0x08007275
 80071f0:	08007275 	.word	0x08007275
 80071f4:	08007275 	.word	0x08007275
 80071f8:	08007275 	.word	0x08007275
 80071fc:	08007275 	.word	0x08007275
 8007200:	08007275 	.word	0x08007275
 8007204:	08007275 	.word	0x08007275
 8007208:	08007275 	.word	0x08007275
 800720c:	08007275 	.word	0x08007275
 8007210:	08007275 	.word	0x08007275
 8007214:	08007275 	.word	0x08007275
 8007218:	08007275 	.word	0x08007275
 800721c:	08007275 	.word	0x08007275
 8007220:	08007275 	.word	0x08007275
 8007224:	08007275 	.word	0x08007275
 8007228:	08007275 	.word	0x08007275
 800722c:	08007275 	.word	0x08007275
 8007230:	08007275 	.word	0x08007275
 8007234:	08007275 	.word	0x08007275
 8007238:	08007275 	.word	0x08007275
 800723c:	08007275 	.word	0x08007275
 8007240:	08007275 	.word	0x08007275
 8007244:	08007275 	.word	0x08007275
 8007248:	08007275 	.word	0x08007275
 800724c:	08007275 	.word	0x08007275
 8007250:	08007275 	.word	0x08007275
 8007254:	08007275 	.word	0x08007275
 8007258:	08007275 	.word	0x08007275
 800725c:	08007275 	.word	0x08007275
 8007260:	08007275 	.word	0x08007275
 8007264:	08007275 	.word	0x08007275
 8007268:	08007275 	.word	0x08007275
 800726c:	08007275 	.word	0x08007275
 8007270:	08007275 	.word	0x08007275
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007274:	bf00      	nop
  }

  return (USBD_OK);
 8007276:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007278:	4618      	mov	r0, r3
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	bc80      	pop	{r7}
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop

08007284 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	// Copy new data to RxBuffer
	struct PROTOCOL_0X55_Data_Type *TmpPointer;
	TmpPointer = Protocol_0x55_GetRxPointer();
 800728e:	f7f9 fc23 	bl	8000ad8 <Protocol_0x55_GetRxPointer>
 8007292:	60f8      	str	r0, [r7, #12]

	strncat((char*)TmpPointer->FIFO_Data, (char*) Buf, *Len);
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	461a      	mov	r2, r3
 800729c:	6879      	ldr	r1, [r7, #4]
 800729e:	f000 fd3d 	bl	8007d1c <strncat>

	// Set new data flag
	TmpPointer->NewData = 1;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401

	// Prepare next receive
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80072aa:	6879      	ldr	r1, [r7, #4]
 80072ac:	4805      	ldr	r0, [pc, #20]	; (80072c4 <CDC_Receive_FS+0x40>)
 80072ae:	f7fe fe0e 	bl	8005ece <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80072b2:	4804      	ldr	r0, [pc, #16]	; (80072c4 <CDC_Receive_FS+0x40>)
 80072b4:	f7fe fe4d 	bl	8005f52 <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 80072b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	20000b10 	.word	0x20000b10

080072c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	460b      	mov	r3, r1
 80072d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80072d8:	4b0d      	ldr	r3, [pc, #52]	; (8007310 <CDC_Transmit_FS+0x48>)
 80072da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e00b      	b.n	8007306 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80072ee:	887b      	ldrh	r3, [r7, #2]
 80072f0:	461a      	mov	r2, r3
 80072f2:	6879      	ldr	r1, [r7, #4]
 80072f4:	4806      	ldr	r0, [pc, #24]	; (8007310 <CDC_Transmit_FS+0x48>)
 80072f6:	f7fe fdd1 	bl	8005e9c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80072fa:	4805      	ldr	r0, [pc, #20]	; (8007310 <CDC_Transmit_FS+0x48>)
 80072fc:	f7fe fdfa 	bl	8005ef4 <USBD_CDC_TransmitPacket>
 8007300:	4603      	mov	r3, r0
 8007302:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007304:	7bfb      	ldrb	r3, [r7, #15]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	20000b10 	.word	0x20000b10

08007314 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	4603      	mov	r3, r0
 800731c:	6039      	str	r1, [r7, #0]
 800731e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	2212      	movs	r2, #18
 8007324:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007326:	4b03      	ldr	r3, [pc, #12]	; (8007334 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007328:	4618      	mov	r0, r3
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	bc80      	pop	{r7}
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	20000148 	.word	0x20000148

08007338 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	4603      	mov	r3, r0
 8007340:	6039      	str	r1, [r7, #0]
 8007342:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	2204      	movs	r2, #4
 8007348:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800734a:	4b03      	ldr	r3, [pc, #12]	; (8007358 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800734c:	4618      	mov	r0, r3
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	bc80      	pop	{r7}
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	2000015c 	.word	0x2000015c

0800735c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	4603      	mov	r3, r0
 8007364:	6039      	str	r1, [r7, #0]
 8007366:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007368:	79fb      	ldrb	r3, [r7, #7]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d105      	bne.n	800737a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800736e:	683a      	ldr	r2, [r7, #0]
 8007370:	4907      	ldr	r1, [pc, #28]	; (8007390 <USBD_FS_ProductStrDescriptor+0x34>)
 8007372:	4808      	ldr	r0, [pc, #32]	; (8007394 <USBD_FS_ProductStrDescriptor+0x38>)
 8007374:	f7ff fdff 	bl	8006f76 <USBD_GetString>
 8007378:	e004      	b.n	8007384 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800737a:	683a      	ldr	r2, [r7, #0]
 800737c:	4904      	ldr	r1, [pc, #16]	; (8007390 <USBD_FS_ProductStrDescriptor+0x34>)
 800737e:	4805      	ldr	r0, [pc, #20]	; (8007394 <USBD_FS_ProductStrDescriptor+0x38>)
 8007380:	f7ff fdf9 	bl	8006f76 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007384:	4b02      	ldr	r3, [pc, #8]	; (8007390 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007386:	4618      	mov	r0, r3
 8007388:	3708      	adds	r7, #8
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	20001dd4 	.word	0x20001dd4
 8007394:	08007d9c 	.word	0x08007d9c

08007398 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	4603      	mov	r3, r0
 80073a0:	6039      	str	r1, [r7, #0]
 80073a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	4904      	ldr	r1, [pc, #16]	; (80073b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80073a8:	4804      	ldr	r0, [pc, #16]	; (80073bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80073aa:	f7ff fde4 	bl	8006f76 <USBD_GetString>
  return USBD_StrDesc;
 80073ae:	4b02      	ldr	r3, [pc, #8]	; (80073b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	20001dd4 	.word	0x20001dd4
 80073bc:	08007db4 	.word	0x08007db4

080073c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	4603      	mov	r3, r0
 80073c8:	6039      	str	r1, [r7, #0]
 80073ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	221a      	movs	r2, #26
 80073d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80073d2:	f000 f843 	bl	800745c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80073d6:	4b02      	ldr	r3, [pc, #8]	; (80073e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	20000160 	.word	0x20000160

080073e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	4603      	mov	r3, r0
 80073ec:	6039      	str	r1, [r7, #0]
 80073ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80073f0:	79fb      	ldrb	r3, [r7, #7]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d105      	bne.n	8007402 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	4907      	ldr	r1, [pc, #28]	; (8007418 <USBD_FS_ConfigStrDescriptor+0x34>)
 80073fa:	4808      	ldr	r0, [pc, #32]	; (800741c <USBD_FS_ConfigStrDescriptor+0x38>)
 80073fc:	f7ff fdbb 	bl	8006f76 <USBD_GetString>
 8007400:	e004      	b.n	800740c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007402:	683a      	ldr	r2, [r7, #0]
 8007404:	4904      	ldr	r1, [pc, #16]	; (8007418 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007406:	4805      	ldr	r0, [pc, #20]	; (800741c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007408:	f7ff fdb5 	bl	8006f76 <USBD_GetString>
  }
  return USBD_StrDesc;
 800740c:	4b02      	ldr	r3, [pc, #8]	; (8007418 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800740e:	4618      	mov	r0, r3
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	20001dd4 	.word	0x20001dd4
 800741c:	08007dc8 	.word	0x08007dc8

08007420 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	4603      	mov	r3, r0
 8007428:	6039      	str	r1, [r7, #0]
 800742a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800742c:	79fb      	ldrb	r3, [r7, #7]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d105      	bne.n	800743e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	4907      	ldr	r1, [pc, #28]	; (8007454 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007436:	4808      	ldr	r0, [pc, #32]	; (8007458 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007438:	f7ff fd9d 	bl	8006f76 <USBD_GetString>
 800743c:	e004      	b.n	8007448 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800743e:	683a      	ldr	r2, [r7, #0]
 8007440:	4904      	ldr	r1, [pc, #16]	; (8007454 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007442:	4805      	ldr	r0, [pc, #20]	; (8007458 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007444:	f7ff fd97 	bl	8006f76 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007448:	4b02      	ldr	r3, [pc, #8]	; (8007454 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800744a:	4618      	mov	r0, r3
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	20001dd4 	.word	0x20001dd4
 8007458:	08007dd4 	.word	0x08007dd4

0800745c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007462:	4b0f      	ldr	r3, [pc, #60]	; (80074a0 <Get_SerialNum+0x44>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007468:	4b0e      	ldr	r3, [pc, #56]	; (80074a4 <Get_SerialNum+0x48>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800746e:	4b0e      	ldr	r3, [pc, #56]	; (80074a8 <Get_SerialNum+0x4c>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4413      	add	r3, r2
 800747a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d009      	beq.n	8007496 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007482:	2208      	movs	r2, #8
 8007484:	4909      	ldr	r1, [pc, #36]	; (80074ac <Get_SerialNum+0x50>)
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 f814 	bl	80074b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800748c:	2204      	movs	r2, #4
 800748e:	4908      	ldr	r1, [pc, #32]	; (80074b0 <Get_SerialNum+0x54>)
 8007490:	68b8      	ldr	r0, [r7, #8]
 8007492:	f000 f80f 	bl	80074b4 <IntToUnicode>
  }
}
 8007496:	bf00      	nop
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	1fff7a10 	.word	0x1fff7a10
 80074a4:	1fff7a14 	.word	0x1fff7a14
 80074a8:	1fff7a18 	.word	0x1fff7a18
 80074ac:	20000162 	.word	0x20000162
 80074b0:	20000172 	.word	0x20000172

080074b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	4613      	mov	r3, r2
 80074c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80074c2:	2300      	movs	r3, #0
 80074c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80074c6:	2300      	movs	r3, #0
 80074c8:	75fb      	strb	r3, [r7, #23]
 80074ca:	e027      	b.n	800751c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	0f1b      	lsrs	r3, r3, #28
 80074d0:	2b09      	cmp	r3, #9
 80074d2:	d80b      	bhi.n	80074ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	0f1b      	lsrs	r3, r3, #28
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	7dfb      	ldrb	r3, [r7, #23]
 80074dc:	005b      	lsls	r3, r3, #1
 80074de:	4619      	mov	r1, r3
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	440b      	add	r3, r1
 80074e4:	3230      	adds	r2, #48	; 0x30
 80074e6:	b2d2      	uxtb	r2, r2
 80074e8:	701a      	strb	r2, [r3, #0]
 80074ea:	e00a      	b.n	8007502 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	0f1b      	lsrs	r3, r3, #28
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	7dfb      	ldrb	r3, [r7, #23]
 80074f4:	005b      	lsls	r3, r3, #1
 80074f6:	4619      	mov	r1, r3
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	440b      	add	r3, r1
 80074fc:	3237      	adds	r2, #55	; 0x37
 80074fe:	b2d2      	uxtb	r2, r2
 8007500:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	011b      	lsls	r3, r3, #4
 8007506:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007508:	7dfb      	ldrb	r3, [r7, #23]
 800750a:	005b      	lsls	r3, r3, #1
 800750c:	3301      	adds	r3, #1
 800750e:	68ba      	ldr	r2, [r7, #8]
 8007510:	4413      	add	r3, r2
 8007512:	2200      	movs	r2, #0
 8007514:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007516:	7dfb      	ldrb	r3, [r7, #23]
 8007518:	3301      	adds	r3, #1
 800751a:	75fb      	strb	r3, [r7, #23]
 800751c:	7dfa      	ldrb	r2, [r7, #23]
 800751e:	79fb      	ldrb	r3, [r7, #7]
 8007520:	429a      	cmp	r2, r3
 8007522:	d3d3      	bcc.n	80074cc <IntToUnicode+0x18>
  }
}
 8007524:	bf00      	nop
 8007526:	371c      	adds	r7, #28
 8007528:	46bd      	mov	sp, r7
 800752a:	bc80      	pop	{r7}
 800752c:	4770      	bx	lr
	...

08007530 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b08a      	sub	sp, #40	; 0x28
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007538:	f107 0314 	add.w	r3, r7, #20
 800753c:	2200      	movs	r2, #0
 800753e:	601a      	str	r2, [r3, #0]
 8007540:	605a      	str	r2, [r3, #4]
 8007542:	609a      	str	r2, [r3, #8]
 8007544:	60da      	str	r2, [r3, #12]
 8007546:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007550:	d13a      	bne.n	80075c8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007552:	2300      	movs	r3, #0
 8007554:	613b      	str	r3, [r7, #16]
 8007556:	4b1e      	ldr	r3, [pc, #120]	; (80075d0 <HAL_PCD_MspInit+0xa0>)
 8007558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755a:	4a1d      	ldr	r2, [pc, #116]	; (80075d0 <HAL_PCD_MspInit+0xa0>)
 800755c:	f043 0301 	orr.w	r3, r3, #1
 8007560:	6313      	str	r3, [r2, #48]	; 0x30
 8007562:	4b1b      	ldr	r3, [pc, #108]	; (80075d0 <HAL_PCD_MspInit+0xa0>)
 8007564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	613b      	str	r3, [r7, #16]
 800756c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800756e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007574:	2302      	movs	r3, #2
 8007576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007578:	2300      	movs	r3, #0
 800757a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800757c:	2303      	movs	r3, #3
 800757e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007580:	230a      	movs	r3, #10
 8007582:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007584:	f107 0314 	add.w	r3, r7, #20
 8007588:	4619      	mov	r1, r3
 800758a:	4812      	ldr	r0, [pc, #72]	; (80075d4 <HAL_PCD_MspInit+0xa4>)
 800758c:	f7fa f906 	bl	800179c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007590:	4b0f      	ldr	r3, [pc, #60]	; (80075d0 <HAL_PCD_MspInit+0xa0>)
 8007592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007594:	4a0e      	ldr	r2, [pc, #56]	; (80075d0 <HAL_PCD_MspInit+0xa0>)
 8007596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800759a:	6353      	str	r3, [r2, #52]	; 0x34
 800759c:	2300      	movs	r3, #0
 800759e:	60fb      	str	r3, [r7, #12]
 80075a0:	4b0b      	ldr	r3, [pc, #44]	; (80075d0 <HAL_PCD_MspInit+0xa0>)
 80075a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075a4:	4a0a      	ldr	r2, [pc, #40]	; (80075d0 <HAL_PCD_MspInit+0xa0>)
 80075a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075aa:	6453      	str	r3, [r2, #68]	; 0x44
 80075ac:	4b08      	ldr	r3, [pc, #32]	; (80075d0 <HAL_PCD_MspInit+0xa0>)
 80075ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075b4:	60fb      	str	r3, [r7, #12]
 80075b6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80075b8:	2200      	movs	r2, #0
 80075ba:	2100      	movs	r1, #0
 80075bc:	2043      	movs	r0, #67	; 0x43
 80075be:	f7fa f8b6 	bl	800172e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80075c2:	2043      	movs	r0, #67	; 0x43
 80075c4:	f7fa f8cf 	bl	8001766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80075c8:	bf00      	nop
 80075ca:	3728      	adds	r7, #40	; 0x28
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	40023800 	.word	0x40023800
 80075d4:	40020000 	.word	0x40020000

080075d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80075ec:	4619      	mov	r1, r3
 80075ee:	4610      	mov	r0, r2
 80075f0:	f7fe fd65 	bl	80060be <USBD_LL_SetupStage>
}
 80075f4:	bf00      	nop
 80075f6:	3708      	adds	r7, #8
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	460b      	mov	r3, r1
 8007606:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800760e:	78fa      	ldrb	r2, [r7, #3]
 8007610:	6879      	ldr	r1, [r7, #4]
 8007612:	4613      	mov	r3, r2
 8007614:	00db      	lsls	r3, r3, #3
 8007616:	1a9b      	subs	r3, r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	440b      	add	r3, r1
 800761c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	78fb      	ldrb	r3, [r7, #3]
 8007624:	4619      	mov	r1, r3
 8007626:	f7fe fd95 	bl	8006154 <USBD_LL_DataOutStage>
}
 800762a:	bf00      	nop
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b082      	sub	sp, #8
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	460b      	mov	r3, r1
 800763c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8007644:	78fa      	ldrb	r2, [r7, #3]
 8007646:	6879      	ldr	r1, [r7, #4]
 8007648:	4613      	mov	r3, r2
 800764a:	00db      	lsls	r3, r3, #3
 800764c:	1a9b      	subs	r3, r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	440b      	add	r3, r1
 8007652:	3348      	adds	r3, #72	; 0x48
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	78fb      	ldrb	r3, [r7, #3]
 8007658:	4619      	mov	r1, r3
 800765a:	f7fe fdec 	bl	8006236 <USBD_LL_DataInStage>
}
 800765e:	bf00      	nop
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b082      	sub	sp, #8
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8007674:	4618      	mov	r0, r3
 8007676:	f7fe fefc 	bl	8006472 <USBD_LL_SOF>
}
 800767a:	bf00      	nop
 800767c:	3708      	adds	r7, #8
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b084      	sub	sp, #16
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800768a:	2301      	movs	r3, #1
 800768c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d102      	bne.n	800769c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007696:	2300      	movs	r3, #0
 8007698:	73fb      	strb	r3, [r7, #15]
 800769a:	e008      	b.n	80076ae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d102      	bne.n	80076aa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80076a4:	2301      	movs	r3, #1
 80076a6:	73fb      	strb	r3, [r7, #15]
 80076a8:	e001      	b.n	80076ae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80076aa:	f7f9 fd3f 	bl	800112c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80076b4:	7bfa      	ldrb	r2, [r7, #15]
 80076b6:	4611      	mov	r1, r2
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7fe fea2 	bl	8006402 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7fe fe5b 	bl	8006380 <USBD_LL_Reset>
}
 80076ca:	bf00      	nop
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
	...

080076d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fe fe9c 	bl	8006420 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	6812      	ldr	r2, [r2, #0]
 80076f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076fa:	f043 0301 	orr.w	r3, r3, #1
 80076fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a1b      	ldr	r3, [r3, #32]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d005      	beq.n	8007714 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007708:	4b04      	ldr	r3, [pc, #16]	; (800771c <HAL_PCD_SuspendCallback+0x48>)
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	4a03      	ldr	r2, [pc, #12]	; (800771c <HAL_PCD_SuspendCallback+0x48>)
 800770e:	f043 0306 	orr.w	r3, r3, #6
 8007712:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007714:	bf00      	nop
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	e000ed00 	.word	0xe000ed00

08007720 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800772e:	4618      	mov	r0, r3
 8007730:	f7fe fe8a 	bl	8006448 <USBD_LL_Resume>
}
 8007734:	bf00      	nop
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	460b      	mov	r3, r1
 8007746:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800774e:	78fa      	ldrb	r2, [r7, #3]
 8007750:	4611      	mov	r1, r2
 8007752:	4618      	mov	r0, r3
 8007754:	f7fe feb3 	bl	80064be <USBD_LL_IsoOUTIncomplete>
}
 8007758:	bf00      	nop
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8007772:	78fa      	ldrb	r2, [r7, #3]
 8007774:	4611      	mov	r1, r2
 8007776:	4618      	mov	r0, r3
 8007778:	f7fe fe95 	bl	80064a6 <USBD_LL_IsoINIncomplete>
}
 800777c:	bf00      	nop
 800777e:	3708      	adds	r7, #8
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8007792:	4618      	mov	r0, r3
 8007794:	f7fe fe9f 	bl	80064d6 <USBD_LL_DevConnected>
}
 8007798:	bf00      	nop
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fe fe9b 	bl	80064ea <USBD_LL_DevDisconnected>
}
 80077b4:	bf00      	nop
 80077b6:	3708      	adds	r7, #8
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d139      	bne.n	8007840 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80077cc:	4a1f      	ldr	r2, [pc, #124]	; (800784c <USBD_LL_Init+0x90>)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a1d      	ldr	r2, [pc, #116]	; (800784c <USBD_LL_Init+0x90>)
 80077d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80077dc:	4b1b      	ldr	r3, [pc, #108]	; (800784c <USBD_LL_Init+0x90>)
 80077de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80077e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80077e4:	4b19      	ldr	r3, [pc, #100]	; (800784c <USBD_LL_Init+0x90>)
 80077e6:	2204      	movs	r2, #4
 80077e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80077ea:	4b18      	ldr	r3, [pc, #96]	; (800784c <USBD_LL_Init+0x90>)
 80077ec:	2202      	movs	r2, #2
 80077ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80077f0:	4b16      	ldr	r3, [pc, #88]	; (800784c <USBD_LL_Init+0x90>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80077f6:	4b15      	ldr	r3, [pc, #84]	; (800784c <USBD_LL_Init+0x90>)
 80077f8:	2202      	movs	r2, #2
 80077fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80077fc:	4b13      	ldr	r3, [pc, #76]	; (800784c <USBD_LL_Init+0x90>)
 80077fe:	2200      	movs	r2, #0
 8007800:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007802:	4b12      	ldr	r3, [pc, #72]	; (800784c <USBD_LL_Init+0x90>)
 8007804:	2200      	movs	r2, #0
 8007806:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007808:	4b10      	ldr	r3, [pc, #64]	; (800784c <USBD_LL_Init+0x90>)
 800780a:	2200      	movs	r2, #0
 800780c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800780e:	4b0f      	ldr	r3, [pc, #60]	; (800784c <USBD_LL_Init+0x90>)
 8007810:	2200      	movs	r2, #0
 8007812:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007814:	480d      	ldr	r0, [pc, #52]	; (800784c <USBD_LL_Init+0x90>)
 8007816:	f7fa f977 	bl	8001b08 <HAL_PCD_Init>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d001      	beq.n	8007824 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8007820:	f7f9 fc84 	bl	800112c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007824:	2180      	movs	r1, #128	; 0x80
 8007826:	4809      	ldr	r0, [pc, #36]	; (800784c <USBD_LL_Init+0x90>)
 8007828:	f7fb fab4 	bl	8002d94 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800782c:	2240      	movs	r2, #64	; 0x40
 800782e:	2100      	movs	r1, #0
 8007830:	4806      	ldr	r0, [pc, #24]	; (800784c <USBD_LL_Init+0x90>)
 8007832:	f7fb fa69 	bl	8002d08 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007836:	2280      	movs	r2, #128	; 0x80
 8007838:	2101      	movs	r1, #1
 800783a:	4804      	ldr	r0, [pc, #16]	; (800784c <USBD_LL_Init+0x90>)
 800783c:	f7fb fa64 	bl	8002d08 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	20001fd4 	.word	0x20001fd4

08007850 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007858:	2300      	movs	r3, #0
 800785a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800785c:	2300      	movs	r3, #0
 800785e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007866:	4618      	mov	r0, r3
 8007868:	f7fa fa6b 	bl	8001d42 <HAL_PCD_Start>
 800786c:	4603      	mov	r3, r0
 800786e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007870:	7bfb      	ldrb	r3, [r7, #15]
 8007872:	4618      	mov	r0, r3
 8007874:	f000 f92e 	bl	8007ad4 <USBD_Get_USB_Status>
 8007878:	4603      	mov	r3, r0
 800787a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800787c:	7bbb      	ldrb	r3, [r7, #14]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b084      	sub	sp, #16
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
 800788e:	4608      	mov	r0, r1
 8007890:	4611      	mov	r1, r2
 8007892:	461a      	mov	r2, r3
 8007894:	4603      	mov	r3, r0
 8007896:	70fb      	strb	r3, [r7, #3]
 8007898:	460b      	mov	r3, r1
 800789a:	70bb      	strb	r3, [r7, #2]
 800789c:	4613      	mov	r3, r2
 800789e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80078ae:	78bb      	ldrb	r3, [r7, #2]
 80078b0:	883a      	ldrh	r2, [r7, #0]
 80078b2:	78f9      	ldrb	r1, [r7, #3]
 80078b4:	f7fa fe30 	bl	8002518 <HAL_PCD_EP_Open>
 80078b8:	4603      	mov	r3, r0
 80078ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
 80078be:	4618      	mov	r0, r3
 80078c0:	f000 f908 	bl	8007ad4 <USBD_Get_USB_Status>
 80078c4:	4603      	mov	r3, r0
 80078c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b084      	sub	sp, #16
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	460b      	mov	r3, r1
 80078dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078de:	2300      	movs	r3, #0
 80078e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078ec:	78fa      	ldrb	r2, [r7, #3]
 80078ee:	4611      	mov	r1, r2
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7fa fe79 	bl	80025e8 <HAL_PCD_EP_Close>
 80078f6:	4603      	mov	r3, r0
 80078f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078fa:	7bfb      	ldrb	r3, [r7, #15]
 80078fc:	4618      	mov	r0, r3
 80078fe:	f000 f8e9 	bl	8007ad4 <USBD_Get_USB_Status>
 8007902:	4603      	mov	r3, r0
 8007904:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007906:	7bbb      	ldrb	r3, [r7, #14]
}
 8007908:	4618      	mov	r0, r3
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	460b      	mov	r3, r1
 800791a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007920:	2300      	movs	r3, #0
 8007922:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800792a:	78fa      	ldrb	r2, [r7, #3]
 800792c:	4611      	mov	r1, r2
 800792e:	4618      	mov	r0, r3
 8007930:	f7fa ff50 	bl	80027d4 <HAL_PCD_EP_SetStall>
 8007934:	4603      	mov	r3, r0
 8007936:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007938:	7bfb      	ldrb	r3, [r7, #15]
 800793a:	4618      	mov	r0, r3
 800793c:	f000 f8ca 	bl	8007ad4 <USBD_Get_USB_Status>
 8007940:	4603      	mov	r3, r0
 8007942:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007944:	7bbb      	ldrb	r3, [r7, #14]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b084      	sub	sp, #16
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	460b      	mov	r3, r1
 8007958:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800795e:	2300      	movs	r3, #0
 8007960:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007968:	78fa      	ldrb	r2, [r7, #3]
 800796a:	4611      	mov	r1, r2
 800796c:	4618      	mov	r0, r3
 800796e:	f7fa ff95 	bl	800289c <HAL_PCD_EP_ClrStall>
 8007972:	4603      	mov	r3, r0
 8007974:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007976:	7bfb      	ldrb	r3, [r7, #15]
 8007978:	4618      	mov	r0, r3
 800797a:	f000 f8ab 	bl	8007ad4 <USBD_Get_USB_Status>
 800797e:	4603      	mov	r3, r0
 8007980:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007982:	7bbb      	ldrb	r3, [r7, #14]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	460b      	mov	r3, r1
 8007996:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800799e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80079a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	da0b      	bge.n	80079c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80079a8:	78fb      	ldrb	r3, [r7, #3]
 80079aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079ae:	68f9      	ldr	r1, [r7, #12]
 80079b0:	4613      	mov	r3, r2
 80079b2:	00db      	lsls	r3, r3, #3
 80079b4:	1a9b      	subs	r3, r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	440b      	add	r3, r1
 80079ba:	333e      	adds	r3, #62	; 0x3e
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	e00b      	b.n	80079d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80079c0:	78fb      	ldrb	r3, [r7, #3]
 80079c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079c6:	68f9      	ldr	r1, [r7, #12]
 80079c8:	4613      	mov	r3, r2
 80079ca:	00db      	lsls	r3, r3, #3
 80079cc:	1a9b      	subs	r3, r3, r2
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	440b      	add	r3, r1
 80079d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80079d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3714      	adds	r7, #20
 80079dc:	46bd      	mov	sp, r7
 80079de:	bc80      	pop	{r7}
 80079e0:	4770      	bx	lr

080079e2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b084      	sub	sp, #16
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	460b      	mov	r3, r1
 80079ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079fc:	78fa      	ldrb	r2, [r7, #3]
 80079fe:	4611      	mov	r1, r2
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7fa fd64 	bl	80024ce <HAL_PCD_SetAddress>
 8007a06:	4603      	mov	r3, r0
 8007a08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 f861 	bl	8007ad4 <USBD_Get_USB_Status>
 8007a12:	4603      	mov	r3, r0
 8007a14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a16:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	607a      	str	r2, [r7, #4]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	72fb      	strb	r3, [r7, #11]
 8007a30:	4613      	mov	r3, r2
 8007a32:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a42:	893b      	ldrh	r3, [r7, #8]
 8007a44:	7af9      	ldrb	r1, [r7, #11]
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	f7fa fe7a 	bl	8002740 <HAL_PCD_EP_Transmit>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a50:	7dfb      	ldrb	r3, [r7, #23]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f000 f83e 	bl	8007ad4 <USBD_Get_USB_Status>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a5c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3718      	adds	r7, #24
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b086      	sub	sp, #24
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	60f8      	str	r0, [r7, #12]
 8007a6e:	607a      	str	r2, [r7, #4]
 8007a70:	461a      	mov	r2, r3
 8007a72:	460b      	mov	r3, r1
 8007a74:	72fb      	strb	r3, [r7, #11]
 8007a76:	4613      	mov	r3, r2
 8007a78:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a88:	893b      	ldrh	r3, [r7, #8]
 8007a8a:	7af9      	ldrb	r1, [r7, #11]
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	f7fa fdf5 	bl	800267c <HAL_PCD_EP_Receive>
 8007a92:	4603      	mov	r3, r0
 8007a94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a96:	7dfb      	ldrb	r3, [r7, #23]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f000 f81b 	bl	8007ad4 <USBD_Get_USB_Status>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007aa2:	7dbb      	ldrb	r3, [r7, #22]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3718      	adds	r7, #24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007abe:	78fa      	ldrb	r2, [r7, #3]
 8007ac0:	4611      	mov	r1, r2
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7fa fe25 	bl	8002712 <HAL_PCD_EP_GetRxCount>
 8007ac8:	4603      	mov	r3, r0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
	...

08007ad4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	4603      	mov	r3, r0
 8007adc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007ae2:	79fb      	ldrb	r3, [r7, #7]
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d817      	bhi.n	8007b18 <USBD_Get_USB_Status+0x44>
 8007ae8:	a201      	add	r2, pc, #4	; (adr r2, 8007af0 <USBD_Get_USB_Status+0x1c>)
 8007aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aee:	bf00      	nop
 8007af0:	08007b01 	.word	0x08007b01
 8007af4:	08007b07 	.word	0x08007b07
 8007af8:	08007b0d 	.word	0x08007b0d
 8007afc:	08007b13 	.word	0x08007b13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	73fb      	strb	r3, [r7, #15]
    break;
 8007b04:	e00b      	b.n	8007b1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b06:	2302      	movs	r3, #2
 8007b08:	73fb      	strb	r3, [r7, #15]
    break;
 8007b0a:	e008      	b.n	8007b1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	73fb      	strb	r3, [r7, #15]
    break;
 8007b10:	e005      	b.n	8007b1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b12:	2302      	movs	r3, #2
 8007b14:	73fb      	strb	r3, [r7, #15]
    break;
 8007b16:	e002      	b.n	8007b1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007b18:	2302      	movs	r3, #2
 8007b1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b1c:	bf00      	nop
  }
  return usb_status;
 8007b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bc80      	pop	{r7}
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop

08007b2c <__errno>:
 8007b2c:	4b01      	ldr	r3, [pc, #4]	; (8007b34 <__errno+0x8>)
 8007b2e:	6818      	ldr	r0, [r3, #0]
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	2000017c 	.word	0x2000017c

08007b38 <__libc_init_array>:
 8007b38:	b570      	push	{r4, r5, r6, lr}
 8007b3a:	2500      	movs	r5, #0
 8007b3c:	4e0c      	ldr	r6, [pc, #48]	; (8007b70 <__libc_init_array+0x38>)
 8007b3e:	4c0d      	ldr	r4, [pc, #52]	; (8007b74 <__libc_init_array+0x3c>)
 8007b40:	1ba4      	subs	r4, r4, r6
 8007b42:	10a4      	asrs	r4, r4, #2
 8007b44:	42a5      	cmp	r5, r4
 8007b46:	d109      	bne.n	8007b5c <__libc_init_array+0x24>
 8007b48:	f000 f8fe 	bl	8007d48 <_init>
 8007b4c:	2500      	movs	r5, #0
 8007b4e:	4e0a      	ldr	r6, [pc, #40]	; (8007b78 <__libc_init_array+0x40>)
 8007b50:	4c0a      	ldr	r4, [pc, #40]	; (8007b7c <__libc_init_array+0x44>)
 8007b52:	1ba4      	subs	r4, r4, r6
 8007b54:	10a4      	asrs	r4, r4, #2
 8007b56:	42a5      	cmp	r5, r4
 8007b58:	d105      	bne.n	8007b66 <__libc_init_array+0x2e>
 8007b5a:	bd70      	pop	{r4, r5, r6, pc}
 8007b5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b60:	4798      	blx	r3
 8007b62:	3501      	adds	r5, #1
 8007b64:	e7ee      	b.n	8007b44 <__libc_init_array+0xc>
 8007b66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b6a:	4798      	blx	r3
 8007b6c:	3501      	adds	r5, #1
 8007b6e:	e7f2      	b.n	8007b56 <__libc_init_array+0x1e>
 8007b70:	08007dfc 	.word	0x08007dfc
 8007b74:	08007dfc 	.word	0x08007dfc
 8007b78:	08007dfc 	.word	0x08007dfc
 8007b7c:	08007e00 	.word	0x08007e00

08007b80 <malloc>:
 8007b80:	4b02      	ldr	r3, [pc, #8]	; (8007b8c <malloc+0xc>)
 8007b82:	4601      	mov	r1, r0
 8007b84:	6818      	ldr	r0, [r3, #0]
 8007b86:	f000 b85f 	b.w	8007c48 <_malloc_r>
 8007b8a:	bf00      	nop
 8007b8c:	2000017c 	.word	0x2000017c

08007b90 <free>:
 8007b90:	4b02      	ldr	r3, [pc, #8]	; (8007b9c <free+0xc>)
 8007b92:	4601      	mov	r1, r0
 8007b94:	6818      	ldr	r0, [r3, #0]
 8007b96:	f000 b80b 	b.w	8007bb0 <_free_r>
 8007b9a:	bf00      	nop
 8007b9c:	2000017c 	.word	0x2000017c

08007ba0 <memset>:
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	4402      	add	r2, r0
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d100      	bne.n	8007baa <memset+0xa>
 8007ba8:	4770      	bx	lr
 8007baa:	f803 1b01 	strb.w	r1, [r3], #1
 8007bae:	e7f9      	b.n	8007ba4 <memset+0x4>

08007bb0 <_free_r>:
 8007bb0:	b538      	push	{r3, r4, r5, lr}
 8007bb2:	4605      	mov	r5, r0
 8007bb4:	2900      	cmp	r1, #0
 8007bb6:	d043      	beq.n	8007c40 <_free_r+0x90>
 8007bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bbc:	1f0c      	subs	r4, r1, #4
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	bfb8      	it	lt
 8007bc2:	18e4      	addlt	r4, r4, r3
 8007bc4:	f000 f8be 	bl	8007d44 <__malloc_lock>
 8007bc8:	4a1e      	ldr	r2, [pc, #120]	; (8007c44 <_free_r+0x94>)
 8007bca:	6813      	ldr	r3, [r2, #0]
 8007bcc:	4610      	mov	r0, r2
 8007bce:	b933      	cbnz	r3, 8007bde <_free_r+0x2e>
 8007bd0:	6063      	str	r3, [r4, #4]
 8007bd2:	6014      	str	r4, [r2, #0]
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bda:	f000 b8b4 	b.w	8007d46 <__malloc_unlock>
 8007bde:	42a3      	cmp	r3, r4
 8007be0:	d90b      	bls.n	8007bfa <_free_r+0x4a>
 8007be2:	6821      	ldr	r1, [r4, #0]
 8007be4:	1862      	adds	r2, r4, r1
 8007be6:	4293      	cmp	r3, r2
 8007be8:	bf01      	itttt	eq
 8007bea:	681a      	ldreq	r2, [r3, #0]
 8007bec:	685b      	ldreq	r3, [r3, #4]
 8007bee:	1852      	addeq	r2, r2, r1
 8007bf0:	6022      	streq	r2, [r4, #0]
 8007bf2:	6063      	str	r3, [r4, #4]
 8007bf4:	6004      	str	r4, [r0, #0]
 8007bf6:	e7ed      	b.n	8007bd4 <_free_r+0x24>
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	b10a      	cbz	r2, 8007c02 <_free_r+0x52>
 8007bfe:	42a2      	cmp	r2, r4
 8007c00:	d9fa      	bls.n	8007bf8 <_free_r+0x48>
 8007c02:	6819      	ldr	r1, [r3, #0]
 8007c04:	1858      	adds	r0, r3, r1
 8007c06:	42a0      	cmp	r0, r4
 8007c08:	d10b      	bne.n	8007c22 <_free_r+0x72>
 8007c0a:	6820      	ldr	r0, [r4, #0]
 8007c0c:	4401      	add	r1, r0
 8007c0e:	1858      	adds	r0, r3, r1
 8007c10:	4282      	cmp	r2, r0
 8007c12:	6019      	str	r1, [r3, #0]
 8007c14:	d1de      	bne.n	8007bd4 <_free_r+0x24>
 8007c16:	6810      	ldr	r0, [r2, #0]
 8007c18:	6852      	ldr	r2, [r2, #4]
 8007c1a:	4401      	add	r1, r0
 8007c1c:	6019      	str	r1, [r3, #0]
 8007c1e:	605a      	str	r2, [r3, #4]
 8007c20:	e7d8      	b.n	8007bd4 <_free_r+0x24>
 8007c22:	d902      	bls.n	8007c2a <_free_r+0x7a>
 8007c24:	230c      	movs	r3, #12
 8007c26:	602b      	str	r3, [r5, #0]
 8007c28:	e7d4      	b.n	8007bd4 <_free_r+0x24>
 8007c2a:	6820      	ldr	r0, [r4, #0]
 8007c2c:	1821      	adds	r1, r4, r0
 8007c2e:	428a      	cmp	r2, r1
 8007c30:	bf01      	itttt	eq
 8007c32:	6811      	ldreq	r1, [r2, #0]
 8007c34:	6852      	ldreq	r2, [r2, #4]
 8007c36:	1809      	addeq	r1, r1, r0
 8007c38:	6021      	streq	r1, [r4, #0]
 8007c3a:	6062      	str	r2, [r4, #4]
 8007c3c:	605c      	str	r4, [r3, #4]
 8007c3e:	e7c9      	b.n	8007bd4 <_free_r+0x24>
 8007c40:	bd38      	pop	{r3, r4, r5, pc}
 8007c42:	bf00      	nop
 8007c44:	2000020c 	.word	0x2000020c

08007c48 <_malloc_r>:
 8007c48:	b570      	push	{r4, r5, r6, lr}
 8007c4a:	1ccd      	adds	r5, r1, #3
 8007c4c:	f025 0503 	bic.w	r5, r5, #3
 8007c50:	3508      	adds	r5, #8
 8007c52:	2d0c      	cmp	r5, #12
 8007c54:	bf38      	it	cc
 8007c56:	250c      	movcc	r5, #12
 8007c58:	2d00      	cmp	r5, #0
 8007c5a:	4606      	mov	r6, r0
 8007c5c:	db01      	blt.n	8007c62 <_malloc_r+0x1a>
 8007c5e:	42a9      	cmp	r1, r5
 8007c60:	d903      	bls.n	8007c6a <_malloc_r+0x22>
 8007c62:	230c      	movs	r3, #12
 8007c64:	6033      	str	r3, [r6, #0]
 8007c66:	2000      	movs	r0, #0
 8007c68:	bd70      	pop	{r4, r5, r6, pc}
 8007c6a:	f000 f86b 	bl	8007d44 <__malloc_lock>
 8007c6e:	4a21      	ldr	r2, [pc, #132]	; (8007cf4 <_malloc_r+0xac>)
 8007c70:	6814      	ldr	r4, [r2, #0]
 8007c72:	4621      	mov	r1, r4
 8007c74:	b991      	cbnz	r1, 8007c9c <_malloc_r+0x54>
 8007c76:	4c20      	ldr	r4, [pc, #128]	; (8007cf8 <_malloc_r+0xb0>)
 8007c78:	6823      	ldr	r3, [r4, #0]
 8007c7a:	b91b      	cbnz	r3, 8007c84 <_malloc_r+0x3c>
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	f000 f83d 	bl	8007cfc <_sbrk_r>
 8007c82:	6020      	str	r0, [r4, #0]
 8007c84:	4629      	mov	r1, r5
 8007c86:	4630      	mov	r0, r6
 8007c88:	f000 f838 	bl	8007cfc <_sbrk_r>
 8007c8c:	1c43      	adds	r3, r0, #1
 8007c8e:	d124      	bne.n	8007cda <_malloc_r+0x92>
 8007c90:	230c      	movs	r3, #12
 8007c92:	4630      	mov	r0, r6
 8007c94:	6033      	str	r3, [r6, #0]
 8007c96:	f000 f856 	bl	8007d46 <__malloc_unlock>
 8007c9a:	e7e4      	b.n	8007c66 <_malloc_r+0x1e>
 8007c9c:	680b      	ldr	r3, [r1, #0]
 8007c9e:	1b5b      	subs	r3, r3, r5
 8007ca0:	d418      	bmi.n	8007cd4 <_malloc_r+0x8c>
 8007ca2:	2b0b      	cmp	r3, #11
 8007ca4:	d90f      	bls.n	8007cc6 <_malloc_r+0x7e>
 8007ca6:	600b      	str	r3, [r1, #0]
 8007ca8:	18cc      	adds	r4, r1, r3
 8007caa:	50cd      	str	r5, [r1, r3]
 8007cac:	4630      	mov	r0, r6
 8007cae:	f000 f84a 	bl	8007d46 <__malloc_unlock>
 8007cb2:	f104 000b 	add.w	r0, r4, #11
 8007cb6:	1d23      	adds	r3, r4, #4
 8007cb8:	f020 0007 	bic.w	r0, r0, #7
 8007cbc:	1ac3      	subs	r3, r0, r3
 8007cbe:	d0d3      	beq.n	8007c68 <_malloc_r+0x20>
 8007cc0:	425a      	negs	r2, r3
 8007cc2:	50e2      	str	r2, [r4, r3]
 8007cc4:	e7d0      	b.n	8007c68 <_malloc_r+0x20>
 8007cc6:	684b      	ldr	r3, [r1, #4]
 8007cc8:	428c      	cmp	r4, r1
 8007cca:	bf16      	itet	ne
 8007ccc:	6063      	strne	r3, [r4, #4]
 8007cce:	6013      	streq	r3, [r2, #0]
 8007cd0:	460c      	movne	r4, r1
 8007cd2:	e7eb      	b.n	8007cac <_malloc_r+0x64>
 8007cd4:	460c      	mov	r4, r1
 8007cd6:	6849      	ldr	r1, [r1, #4]
 8007cd8:	e7cc      	b.n	8007c74 <_malloc_r+0x2c>
 8007cda:	1cc4      	adds	r4, r0, #3
 8007cdc:	f024 0403 	bic.w	r4, r4, #3
 8007ce0:	42a0      	cmp	r0, r4
 8007ce2:	d005      	beq.n	8007cf0 <_malloc_r+0xa8>
 8007ce4:	1a21      	subs	r1, r4, r0
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	f000 f808 	bl	8007cfc <_sbrk_r>
 8007cec:	3001      	adds	r0, #1
 8007cee:	d0cf      	beq.n	8007c90 <_malloc_r+0x48>
 8007cf0:	6025      	str	r5, [r4, #0]
 8007cf2:	e7db      	b.n	8007cac <_malloc_r+0x64>
 8007cf4:	2000020c 	.word	0x2000020c
 8007cf8:	20000210 	.word	0x20000210

08007cfc <_sbrk_r>:
 8007cfc:	b538      	push	{r3, r4, r5, lr}
 8007cfe:	2300      	movs	r3, #0
 8007d00:	4c05      	ldr	r4, [pc, #20]	; (8007d18 <_sbrk_r+0x1c>)
 8007d02:	4605      	mov	r5, r0
 8007d04:	4608      	mov	r0, r1
 8007d06:	6023      	str	r3, [r4, #0]
 8007d08:	f7f9 fb44 	bl	8001394 <_sbrk>
 8007d0c:	1c43      	adds	r3, r0, #1
 8007d0e:	d102      	bne.n	8007d16 <_sbrk_r+0x1a>
 8007d10:	6823      	ldr	r3, [r4, #0]
 8007d12:	b103      	cbz	r3, 8007d16 <_sbrk_r+0x1a>
 8007d14:	602b      	str	r3, [r5, #0]
 8007d16:	bd38      	pop	{r3, r4, r5, pc}
 8007d18:	200023d4 	.word	0x200023d4

08007d1c <strncat>:
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	b530      	push	{r4, r5, lr}
 8007d20:	781c      	ldrb	r4, [r3, #0]
 8007d22:	1c5d      	adds	r5, r3, #1
 8007d24:	b944      	cbnz	r4, 8007d38 <strncat+0x1c>
 8007d26:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 8007d2a:	d304      	bcc.n	8007d36 <strncat+0x1a>
 8007d2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d30:	f803 4b01 	strb.w	r4, [r3], #1
 8007d34:	b914      	cbnz	r4, 8007d3c <strncat+0x20>
 8007d36:	bd30      	pop	{r4, r5, pc}
 8007d38:	462b      	mov	r3, r5
 8007d3a:	e7f1      	b.n	8007d20 <strncat+0x4>
 8007d3c:	2a00      	cmp	r2, #0
 8007d3e:	d1f2      	bne.n	8007d26 <strncat+0xa>
 8007d40:	701a      	strb	r2, [r3, #0]
 8007d42:	e7f0      	b.n	8007d26 <strncat+0xa>

08007d44 <__malloc_lock>:
 8007d44:	4770      	bx	lr

08007d46 <__malloc_unlock>:
 8007d46:	4770      	bx	lr

08007d48 <_init>:
 8007d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4a:	bf00      	nop
 8007d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d4e:	bc08      	pop	{r3}
 8007d50:	469e      	mov	lr, r3
 8007d52:	4770      	bx	lr

08007d54 <_fini>:
 8007d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d56:	bf00      	nop
 8007d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d5a:	bc08      	pop	{r3}
 8007d5c:	469e      	mov	lr, r3
 8007d5e:	4770      	bx	lr
