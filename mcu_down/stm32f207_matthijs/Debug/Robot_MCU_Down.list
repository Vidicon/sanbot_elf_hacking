
Robot_MCU_Down.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070e8  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800726c  0800726c  0001726c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007300  08007300  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007300  08007300  00017300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007308  08007308  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007308  08007308  00017308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800730c  0800730c  0001730c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007310  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002198  200001e0  080074f0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002378  080074f0  00022378  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001822d  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035cc  00000000  00000000  00038436  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001188  00000000  00000000  0003ba08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ff0  00000000  00000000  0003cb90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000231bd  00000000  00000000  0003db80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000111fd  00000000  00000000  00060d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4c23  00000000  00000000  00071f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136b5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000493c  00000000  00000000  00136bd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	200001e0 	.word	0x200001e0
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08007254 	.word	0x08007254

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	200001e4 	.word	0x200001e4
 80001c0:	08007254 	.word	0x08007254

080001c4 <strlen>:
 80001c4:	4603      	mov	r3, r0
 80001c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ca:	2a00      	cmp	r2, #0
 80001cc:	d1fb      	bne.n	80001c6 <strlen+0x2>
 80001ce:	1a18      	subs	r0, r3, r0
 80001d0:	3801      	subs	r0, #1
 80001d2:	4770      	bx	lr

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	4604      	mov	r4, r0
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0c03 	orr.w	ip, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	fbbc f7fe 	udiv	r7, ip, lr
 800023a:	fa1f f885 	uxth.w	r8, r5
 800023e:	fb0e c317 	mls	r3, lr, r7, ip
 8000242:	fb07 f908 	mul.w	r9, r7, r8
 8000246:	0c21      	lsrs	r1, r4, #16
 8000248:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024c:	4599      	cmp	r9, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8000256:	f080 811c 	bcs.w	8000492 <__udivmoddi4+0x28e>
 800025a:	4599      	cmp	r9, r3
 800025c:	f240 8119 	bls.w	8000492 <__udivmoddi4+0x28e>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	eba3 0309 	sub.w	r3, r3, r9
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	fb00 f108 	mul.w	r1, r0, r8
 8000274:	b2a4      	uxth	r4, r4
 8000276:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027a:	42a1      	cmp	r1, r4
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	192c      	adds	r4, r5, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 8107 	bcs.w	8000496 <__udivmoddi4+0x292>
 8000288:	42a1      	cmp	r1, r4
 800028a:	f240 8104 	bls.w	8000496 <__udivmoddi4+0x292>
 800028e:	3802      	subs	r0, #2
 8000290:	442c      	add	r4, r5
 8000292:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000296:	2700      	movs	r7, #0
 8000298:	1a64      	subs	r4, r4, r1
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	2300      	movs	r3, #0
 800029e:	40d4      	lsrs	r4, r2
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ec 	beq.w	800048c <__udivmoddi4+0x288>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d148      	bne.n	800035c <__udivmoddi4+0x158>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fb 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469c      	mov	ip, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4c00 	strd	r4, ip, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	2701      	movs	r7, #1
 80002f8:	1b49      	subs	r1, r1, r5
 80002fa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002fe:	fa1f f985 	uxth.w	r9, r5
 8000302:	fbb1 fef8 	udiv	lr, r1, r8
 8000306:	fb08 111e 	mls	r1, r8, lr, r1
 800030a:	fb09 f00e 	mul.w	r0, r9, lr
 800030e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000312:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000316:	4298      	cmp	r0, r3
 8000318:	d907      	bls.n	800032a <__udivmoddi4+0x126>
 800031a:	18eb      	adds	r3, r5, r3
 800031c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x124>
 8000322:	4298      	cmp	r0, r3
 8000324:	f200 80cd 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 8000328:	468e      	mov	lr, r1
 800032a:	1a1b      	subs	r3, r3, r0
 800032c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000330:	fb08 3310 	mls	r3, r8, r0, r3
 8000334:	fb09 f900 	mul.w	r9, r9, r0
 8000338:	b2a4      	uxth	r4, r4
 800033a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800033e:	45a1      	cmp	r9, r4
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000342:	192c      	adds	r4, r5, r4
 8000344:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a1      	cmp	r9, r4
 800034c:	f200 80b6 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000350:	4618      	mov	r0, r3
 8000352:	eba4 0409 	sub.w	r4, r4, r9
 8000356:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800035a:	e79e      	b.n	800029a <__udivmoddi4+0x96>
 800035c:	f1c7 0520 	rsb	r5, r7, #32
 8000360:	40bb      	lsls	r3, r7
 8000362:	fa22 fc05 	lsr.w	ip, r2, r5
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa21 f405 	lsr.w	r4, r1, r5
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fbb4 f9fe 	udiv	r9, r4, lr
 8000376:	fa1f f88c 	uxth.w	r8, ip
 800037a:	fb0e 4419 	mls	r4, lr, r9, r4
 800037e:	fa20 f305 	lsr.w	r3, r0, r5
 8000382:	40b9      	lsls	r1, r7
 8000384:	fb09 fa08 	mul.w	sl, r9, r8
 8000388:	4319      	orrs	r1, r3
 800038a:	0c0b      	lsrs	r3, r1, #16
 800038c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000390:	45a2      	cmp	sl, r4
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f307 	lsl.w	r3, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	45a2      	cmp	sl, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	eba4 040a 	sub.w	r4, r4, sl
 80003b8:	fbb4 f0fe 	udiv	r0, r4, lr
 80003bc:	fb0e 4410 	mls	r4, lr, r0, r4
 80003c0:	fb00 fa08 	mul.w	sl, r0, r8
 80003c4:	b289      	uxth	r1, r1
 80003c6:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x1dc>
 80003ce:	eb1c 0404 	adds.w	r4, ip, r4
 80003d2:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003d6:	d26b      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d8:	45a2      	cmp	sl, r4
 80003da:	d969      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003dc:	3802      	subs	r0, #2
 80003de:	4464      	add	r4, ip
 80003e0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e4:	fba0 8902 	umull	r8, r9, r0, r2
 80003e8:	eba4 040a 	sub.w	r4, r4, sl
 80003ec:	454c      	cmp	r4, r9
 80003ee:	4641      	mov	r1, r8
 80003f0:	46ce      	mov	lr, r9
 80003f2:	d354      	bcc.n	800049e <__udivmoddi4+0x29a>
 80003f4:	d051      	beq.n	800049a <__udivmoddi4+0x296>
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d069      	beq.n	80004ce <__udivmoddi4+0x2ca>
 80003fa:	1a5a      	subs	r2, r3, r1
 80003fc:	eb64 040e 	sbc.w	r4, r4, lr
 8000400:	fa04 f505 	lsl.w	r5, r4, r5
 8000404:	fa22 f307 	lsr.w	r3, r2, r7
 8000408:	40fc      	lsrs	r4, r7
 800040a:	431d      	orrs	r5, r3
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	4095      	lsls	r5, r2
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	fa21 f003 	lsr.w	r0, r1, r3
 800041e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000422:	fbb0 f7f8 	udiv	r7, r0, r8
 8000426:	fa1f f985 	uxth.w	r9, r5
 800042a:	fb08 0017 	mls	r0, r8, r7, r0
 800042e:	fa24 f303 	lsr.w	r3, r4, r3
 8000432:	4091      	lsls	r1, r2
 8000434:	fb07 fc09 	mul.w	ip, r7, r9
 8000438:	430b      	orrs	r3, r1
 800043a:	0c19      	lsrs	r1, r3, #16
 800043c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000440:	458c      	cmp	ip, r1
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x254>
 8000448:	1869      	adds	r1, r5, r1
 800044a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800044e:	d231      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000450:	458c      	cmp	ip, r1
 8000452:	d92f      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	3f02      	subs	r7, #2
 8000456:	4429      	add	r1, r5
 8000458:	eba1 010c 	sub.w	r1, r1, ip
 800045c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000460:	fb08 1c10 	mls	ip, r8, r0, r1
 8000464:	fb00 fe09 	mul.w	lr, r0, r9
 8000468:	b299      	uxth	r1, r3
 800046a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000478:	d218      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047a:	458e      	cmp	lr, r1
 800047c:	d916      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	eba1 010e 	sub.w	r1, r1, lr
 8000486:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048a:	e73a      	b.n	8000302 <__udivmoddi4+0xfe>
 800048c:	4637      	mov	r7, r6
 800048e:	4630      	mov	r0, r6
 8000490:	e708      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000492:	460f      	mov	r7, r1
 8000494:	e6e6      	b.n	8000264 <__udivmoddi4+0x60>
 8000496:	4618      	mov	r0, r3
 8000498:	e6fb      	b.n	8000292 <__udivmoddi4+0x8e>
 800049a:	4543      	cmp	r3, r8
 800049c:	d2ab      	bcs.n	80003f6 <__udivmoddi4+0x1f2>
 800049e:	ebb8 0102 	subs.w	r1, r8, r2
 80004a2:	eb69 020c 	sbc.w	r2, r9, ip
 80004a6:	3801      	subs	r0, #1
 80004a8:	4696      	mov	lr, r2
 80004aa:	e7a4      	b.n	80003f6 <__udivmoddi4+0x1f2>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e7e8      	b.n	8000482 <__udivmoddi4+0x27e>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e795      	b.n	80003e0 <__udivmoddi4+0x1dc>
 80004b4:	4607      	mov	r7, r0
 80004b6:	e7cf      	b.n	8000458 <__udivmoddi4+0x254>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	442c      	add	r4, r5
 80004c0:	e747      	b.n	8000352 <__udivmoddi4+0x14e>
 80004c2:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c6:	442b      	add	r3, r5
 80004c8:	e72f      	b.n	800032a <__udivmoddi4+0x126>
 80004ca:	4638      	mov	r0, r7
 80004cc:	e707      	b.n	80002de <__udivmoddi4+0xda>
 80004ce:	4637      	mov	r7, r6
 80004d0:	e6e8      	b.n	80002a4 <__udivmoddi4+0xa0>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <LeftArm_Init>:

//----------------------------------------------------------------
//
//----------------------------------------------------------------
void LeftArm_Init()
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
	LeftArm_State.Angle = 0;
 80004dc:	4b07      	ldr	r3, [pc, #28]	; (80004fc <LeftArm_Init+0x24>)
 80004de:	2200      	movs	r2, #0
 80004e0:	605a      	str	r2, [r3, #4]
	LeftArm_State.Direction = Arm_Up;
 80004e2:	4b06      	ldr	r3, [pc, #24]	; (80004fc <LeftArm_Init+0x24>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	721a      	strb	r2, [r3, #8]
	LeftArm_State.Homed = NotHomed;
 80004e8:	4b04      	ldr	r3, [pc, #16]	; (80004fc <LeftArm_Init+0x24>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	701a      	strb	r2, [r3, #0]
	LeftArm_State.MotionState = Motion_Disabled;
 80004ee:	4b03      	ldr	r3, [pc, #12]	; (80004fc <LeftArm_Init+0x24>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	705a      	strb	r2, [r3, #1]
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr
 80004fc:	20000218 	.word	0x20000218

08000500 <LeftArm_SelfTest>:

void LeftArm_SelfTest()
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
	// Force a home sequence
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <RightArm_Init>:

//----------------------------------------------------------------
//
//----------------------------------------------------------------
void RightArm_Init()
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
	RightArm_State.Angle = 0;
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <RightArm_Init+0x24>)
 8000512:	2200      	movs	r2, #0
 8000514:	605a      	str	r2, [r3, #4]
	RightArm_State.Direction = Arm_Up;
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <RightArm_Init+0x24>)
 8000518:	2200      	movs	r2, #0
 800051a:	721a      	strb	r2, [r3, #8]
	RightArm_State.Homed = NotHomed;
 800051c:	4b04      	ldr	r3, [pc, #16]	; (8000530 <RightArm_Init+0x24>)
 800051e:	2200      	movs	r2, #0
 8000520:	701a      	strb	r2, [r3, #0]
	RightArm_State.MotionState = Motion_Disabled;
 8000522:	4b03      	ldr	r3, [pc, #12]	; (8000530 <RightArm_Init+0x24>)
 8000524:	2200      	movs	r2, #0
 8000526:	705a      	strb	r2, [r3, #1]
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	2000022c 	.word	0x2000022c

08000534 <RightArm_SelfTest>:

void RightArm_SelfTest()
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	GenericArm_Init(RightArm_State);
 8000538:	4b03      	ldr	r3, [pc, #12]	; (8000548 <RightArm_SelfTest+0x14>)
 800053a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800053e:	f000 f805 	bl	800054c <GenericArm_Init>
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	2000022c 	.word	0x2000022c

0800054c <GenericArm_Init>:

//----------------------------------------------------------------
//
//----------------------------------------------------------------
void GenericArm_Init(struct Arm_State_Type LeftArm_State)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	e883 0007 	stmia.w	r3, {r0, r1, r2}

}
 8000558:	bf00      	nop
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr

08000562 <RGBLeds_Init>:

struct RGBLeds_State_Type RGBLeds_State[3];
int SelfTestCounterTmo = 0;

void RGBLeds_Init()
{
 8000562:	b580      	push	{r7, lr}
 8000564:	af00      	add	r7, sp, #0
	RGBLeds_SetColorOff(LeftArm);
 8000566:	2000      	movs	r0, #0
 8000568:	f000 f8b4 	bl	80006d4 <RGBLeds_SetColorOff>
	RGBLeds_SetColorOff(RightArm);
 800056c:	2001      	movs	r0, #1
 800056e:	f000 f8b1 	bl	80006d4 <RGBLeds_SetColorOff>
	RGBLeds_SetColorOff(Base);
 8000572:	2002      	movs	r0, #2
 8000574:	f000 f8ae 	bl	80006d4 <RGBLeds_SetColorOff>
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}

0800057c <RGBLeds_SetColorOn>:

void RGBLeds_SetColorOn(enum ENUM_BodyParts BodyPart, enum ENUM_RGBLeds_Color Color)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	460a      	mov	r2, r1
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	4613      	mov	r3, r2
 800058a:	71bb      	strb	r3, [r7, #6]
	if (BodyPart == LeftArm)
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d12f      	bne.n	80005f2 <RGBLeds_SetColorOn+0x76>
	{
		if (Color == Red)   {HAL_GPIO_WritePin(LeftArmRed_GPIO_Port,   LeftArmRed_Pin,   GPIO_PIN_RESET);}
 8000592:	79bb      	ldrb	r3, [r7, #6]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d105      	bne.n	80005a4 <RGBLeds_SetColorOn+0x28>
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059e:	484a      	ldr	r0, [pc, #296]	; (80006c8 <RGBLeds_SetColorOn+0x14c>)
 80005a0:	f001 f92c 	bl	80017fc <HAL_GPIO_WritePin>
		if (Color == Green) {HAL_GPIO_WritePin(LeftArmGreen_GPIO_Port, LeftArmGreen_Pin, GPIO_PIN_RESET);}
 80005a4:	79bb      	ldrb	r3, [r7, #6]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d105      	bne.n	80005b6 <RGBLeds_SetColorOn+0x3a>
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b0:	4845      	ldr	r0, [pc, #276]	; (80006c8 <RGBLeds_SetColorOn+0x14c>)
 80005b2:	f001 f923 	bl	80017fc <HAL_GPIO_WritePin>
		if (Color == Blue)  {HAL_GPIO_WritePin(LeftArmBlue_GPIO_Port,  LeftArmBlue_Pin,  GPIO_PIN_RESET);}
 80005b6:	79bb      	ldrb	r3, [r7, #6]
 80005b8:	2b02      	cmp	r3, #2
 80005ba:	d105      	bne.n	80005c8 <RGBLeds_SetColorOn+0x4c>
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005c2:	4841      	ldr	r0, [pc, #260]	; (80006c8 <RGBLeds_SetColorOn+0x14c>)
 80005c4:	f001 f91a 	bl	80017fc <HAL_GPIO_WritePin>
		if (Color == White)
 80005c8:	79bb      	ldrb	r3, [r7, #6]
 80005ca:	2b03      	cmp	r3, #3
 80005cc:	d111      	bne.n	80005f2 <RGBLeds_SetColorOn+0x76>
		{
			HAL_GPIO_WritePin(LeftArmRed_GPIO_Port,   LeftArmRed_Pin,   GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d4:	483c      	ldr	r0, [pc, #240]	; (80006c8 <RGBLeds_SetColorOn+0x14c>)
 80005d6:	f001 f911 	bl	80017fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LeftArmGreen_GPIO_Port, LeftArmGreen_Pin, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005e0:	4839      	ldr	r0, [pc, #228]	; (80006c8 <RGBLeds_SetColorOn+0x14c>)
 80005e2:	f001 f90b 	bl	80017fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LeftArmBlue_GPIO_Port,  LeftArmBlue_Pin,  GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ec:	4836      	ldr	r0, [pc, #216]	; (80006c8 <RGBLeds_SetColorOn+0x14c>)
 80005ee:	f001 f905 	bl	80017fc <HAL_GPIO_WritePin>
		}
	}

	if (BodyPart == RightArm)
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d12f      	bne.n	8000658 <RGBLeds_SetColorOn+0xdc>
	{
		if (Color == Red)   {HAL_GPIO_WritePin(RightArmRed_GPIO_Port,   RightArmRed_Pin,   GPIO_PIN_RESET);}
 80005f8:	79bb      	ldrb	r3, [r7, #6]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d105      	bne.n	800060a <RGBLeds_SetColorOn+0x8e>
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000604:	4831      	ldr	r0, [pc, #196]	; (80006cc <RGBLeds_SetColorOn+0x150>)
 8000606:	f001 f8f9 	bl	80017fc <HAL_GPIO_WritePin>
		if (Color == Green) {HAL_GPIO_WritePin(RightArmGreen_GPIO_Port, RightArmGreen_Pin, GPIO_PIN_RESET);}
 800060a:	79bb      	ldrb	r3, [r7, #6]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d105      	bne.n	800061c <RGBLeds_SetColorOn+0xa0>
 8000610:	2200      	movs	r2, #0
 8000612:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000616:	482d      	ldr	r0, [pc, #180]	; (80006cc <RGBLeds_SetColorOn+0x150>)
 8000618:	f001 f8f0 	bl	80017fc <HAL_GPIO_WritePin>
		if (Color == Blue)  {HAL_GPIO_WritePin(RightArmBlue_GPIO_Port,  RightArmBlue_Pin,  GPIO_PIN_RESET);}
 800061c:	79bb      	ldrb	r3, [r7, #6]
 800061e:	2b02      	cmp	r3, #2
 8000620:	d105      	bne.n	800062e <RGBLeds_SetColorOn+0xb2>
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000628:	4828      	ldr	r0, [pc, #160]	; (80006cc <RGBLeds_SetColorOn+0x150>)
 800062a:	f001 f8e7 	bl	80017fc <HAL_GPIO_WritePin>
		if (Color == White)
 800062e:	79bb      	ldrb	r3, [r7, #6]
 8000630:	2b03      	cmp	r3, #3
 8000632:	d111      	bne.n	8000658 <RGBLeds_SetColorOn+0xdc>
		{
			HAL_GPIO_WritePin(RightArmRed_GPIO_Port,   RightArmRed_Pin,   GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800063a:	4824      	ldr	r0, [pc, #144]	; (80006cc <RGBLeds_SetColorOn+0x150>)
 800063c:	f001 f8de 	bl	80017fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RightArmGreen_GPIO_Port, RightArmGreen_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000646:	4821      	ldr	r0, [pc, #132]	; (80006cc <RGBLeds_SetColorOn+0x150>)
 8000648:	f001 f8d8 	bl	80017fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RightArmBlue_GPIO_Port,  RightArmBlue_Pin,  GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000652:	481e      	ldr	r0, [pc, #120]	; (80006cc <RGBLeds_SetColorOn+0x150>)
 8000654:	f001 f8d2 	bl	80017fc <HAL_GPIO_WritePin>
		}
	}

	if (BodyPart == Base)
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2b02      	cmp	r3, #2
 800065c:	d12f      	bne.n	80006be <RGBLeds_SetColorOn+0x142>
	{
		if (Color == Red)   {HAL_GPIO_WritePin(BaseRed_GPIO_Port,   	BaseRed_Pin,   GPIO_PIN_RESET);}
 800065e:	79bb      	ldrb	r3, [r7, #6]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d105      	bne.n	8000670 <RGBLeds_SetColorOn+0xf4>
 8000664:	2200      	movs	r2, #0
 8000666:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800066a:	4819      	ldr	r0, [pc, #100]	; (80006d0 <RGBLeds_SetColorOn+0x154>)
 800066c:	f001 f8c6 	bl	80017fc <HAL_GPIO_WritePin>
		if (Color == Green) {HAL_GPIO_WritePin(BaseGreen_GPIO_Port, 	BaseGreen_Pin, GPIO_PIN_RESET);}
 8000670:	79bb      	ldrb	r3, [r7, #6]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d105      	bne.n	8000682 <RGBLeds_SetColorOn+0x106>
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067c:	4814      	ldr	r0, [pc, #80]	; (80006d0 <RGBLeds_SetColorOn+0x154>)
 800067e:	f001 f8bd 	bl	80017fc <HAL_GPIO_WritePin>
		if (Color == Blue)  {HAL_GPIO_WritePin(BaseBlue_GPIO_Port,  	BaseBlue_Pin,  GPIO_PIN_RESET);}
 8000682:	79bb      	ldrb	r3, [r7, #6]
 8000684:	2b02      	cmp	r3, #2
 8000686:	d105      	bne.n	8000694 <RGBLeds_SetColorOn+0x118>
 8000688:	2200      	movs	r2, #0
 800068a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800068e:	4810      	ldr	r0, [pc, #64]	; (80006d0 <RGBLeds_SetColorOn+0x154>)
 8000690:	f001 f8b4 	bl	80017fc <HAL_GPIO_WritePin>
		if (Color == White)
 8000694:	79bb      	ldrb	r3, [r7, #6]
 8000696:	2b03      	cmp	r3, #3
 8000698:	d111      	bne.n	80006be <RGBLeds_SetColorOn+0x142>
		{
			HAL_GPIO_WritePin(BaseRed_GPIO_Port,   	BaseRed_Pin,   GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <RGBLeds_SetColorOn+0x154>)
 80006a2:	f001 f8ab 	bl	80017fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BaseGreen_GPIO_Port, 	BaseGreen_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ac:	4808      	ldr	r0, [pc, #32]	; (80006d0 <RGBLeds_SetColorOn+0x154>)
 80006ae:	f001 f8a5 	bl	80017fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BaseBlue_GPIO_Port,  	BaseBlue_Pin,  GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006b8:	4805      	ldr	r0, [pc, #20]	; (80006d0 <RGBLeds_SetColorOn+0x154>)
 80006ba:	f001 f89f 	bl	80017fc <HAL_GPIO_WritePin>
		}
	}
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021c00 	.word	0x40021c00
 80006cc:	40020c00 	.word	0x40020c00
 80006d0:	40021800 	.word	0x40021800

080006d4 <RGBLeds_SetColorOff>:

void RGBLeds_SetColorOff(enum ENUM_BodyParts BodyPart)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
	if (BodyPart == LeftArm)
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d111      	bne.n	8000708 <RGBLeds_SetColorOff+0x34>
	{
		HAL_GPIO_WritePin(LeftArmRed_GPIO_Port, 	LeftArmRed_Pin, GPIO_PIN_SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ea:	481e      	ldr	r0, [pc, #120]	; (8000764 <RGBLeds_SetColorOff+0x90>)
 80006ec:	f001 f886 	bl	80017fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LeftArmGreen_GPIO_Port, 	LeftArmGreen_Pin, GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f6:	481b      	ldr	r0, [pc, #108]	; (8000764 <RGBLeds_SetColorOff+0x90>)
 80006f8:	f001 f880 	bl	80017fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LeftArmBlue_GPIO_Port, 	LeftArmBlue_Pin, GPIO_PIN_SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000702:	4818      	ldr	r0, [pc, #96]	; (8000764 <RGBLeds_SetColorOff+0x90>)
 8000704:	f001 f87a 	bl	80017fc <HAL_GPIO_WritePin>
	}

	if (BodyPart == RightArm)
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d111      	bne.n	8000732 <RGBLeds_SetColorOff+0x5e>
	{
		HAL_GPIO_WritePin(RightArmRed_GPIO_Port, 	RightArmRed_Pin, GPIO_PIN_SET);
 800070e:	2201      	movs	r2, #1
 8000710:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000714:	4814      	ldr	r0, [pc, #80]	; (8000768 <RGBLeds_SetColorOff+0x94>)
 8000716:	f001 f871 	bl	80017fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RightArmGreen_GPIO_Port,  RightArmGreen_Pin, GPIO_PIN_SET);
 800071a:	2201      	movs	r2, #1
 800071c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000720:	4811      	ldr	r0, [pc, #68]	; (8000768 <RGBLeds_SetColorOff+0x94>)
 8000722:	f001 f86b 	bl	80017fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RightArmBlue_GPIO_Port, 	RightArmBlue_Pin, GPIO_PIN_SET);
 8000726:	2201      	movs	r2, #1
 8000728:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800072c:	480e      	ldr	r0, [pc, #56]	; (8000768 <RGBLeds_SetColorOff+0x94>)
 800072e:	f001 f865 	bl	80017fc <HAL_GPIO_WritePin>
	}

	if (BodyPart == Base)
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b02      	cmp	r3, #2
 8000736:	d111      	bne.n	800075c <RGBLeds_SetColorOff+0x88>
	{
		HAL_GPIO_WritePin(BaseRed_GPIO_Port, 		BaseRed_Pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800073e:	480b      	ldr	r0, [pc, #44]	; (800076c <RGBLeds_SetColorOff+0x98>)
 8000740:	f001 f85c 	bl	80017fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BaseGreen_GPIO_Port, 		BaseGreen_Pin, GPIO_PIN_SET);
 8000744:	2201      	movs	r2, #1
 8000746:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800074a:	4808      	ldr	r0, [pc, #32]	; (800076c <RGBLeds_SetColorOff+0x98>)
 800074c:	f001 f856 	bl	80017fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BaseBlue_GPIO_Port, 		BaseBlue_Pin, GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <RGBLeds_SetColorOff+0x98>)
 8000758:	f001 f850 	bl	80017fc <HAL_GPIO_WritePin>
	}
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40021c00 	.word	0x40021c00
 8000768:	40020c00 	.word	0x40020c00
 800076c:	40021800 	.word	0x40021800

08000770 <RGBLeds_BlinkColor>:

void RGBLeds_BlinkColor(enum ENUM_BodyParts BodyPart, enum ENUM_RGBLeds_Color Color, enum ENUM_RGBLeds_Blink Blink)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
 800077a:	460b      	mov	r3, r1
 800077c:	71bb      	strb	r3, [r7, #6]
 800077e:	4613      	mov	r3, r2
 8000780:	717b      	strb	r3, [r7, #5]
	RGBLeds_State[BodyPart].Color = Color;
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	490a      	ldr	r1, [pc, #40]	; (80007b0 <RGBLeds_BlinkColor+0x40>)
 8000786:	79ba      	ldrb	r2, [r7, #6]
 8000788:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	RGBLeds_State[BodyPart].Blink = Blink;
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	4a08      	ldr	r2, [pc, #32]	; (80007b0 <RGBLeds_BlinkColor+0x40>)
 8000790:	00db      	lsls	r3, r3, #3
 8000792:	4413      	add	r3, r2
 8000794:	797a      	ldrb	r2, [r7, #5]
 8000796:	705a      	strb	r2, [r3, #1]
	RGBLeds_State[BodyPart].Counter = 0;
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	4a05      	ldr	r2, [pc, #20]	; (80007b0 <RGBLeds_BlinkColor+0x40>)
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	4413      	add	r3, r2
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	20000244 	.word	0x20000244

080007b4 <RGBLeds_Update10Hz>:

void RGBLeds_Update10Hz()
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++)
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	e0b3      	b.n	8000928 <RGBLeds_Update10Hz+0x174>
	{
		if (RGBLeds_State[i].Blink == Blink_Slow)
 80007c0:	4a67      	ldr	r2, [pc, #412]	; (8000960 <RGBLeds_Update10Hz+0x1ac>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	00db      	lsls	r3, r3, #3
 80007c6:	4413      	add	r3, r2
 80007c8:	785b      	ldrb	r3, [r3, #1]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d133      	bne.n	8000836 <RGBLeds_Update10Hz+0x82>
		{
			if (RGBLeds_State[i].Counter == 0) { RGBLeds_SetColorOn ((enum ENUM_BodyParts)(i), RGBLeds_State[i].Color);}
 80007ce:	4a64      	ldr	r2, [pc, #400]	; (8000960 <RGBLeds_Update10Hz+0x1ac>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	4413      	add	r3, r2
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d108      	bne.n	80007ee <RGBLeds_Update10Hz+0x3a>
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	b2d8      	uxtb	r0, r3
 80007e0:	4a5f      	ldr	r2, [pc, #380]	; (8000960 <RGBLeds_Update10Hz+0x1ac>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80007e8:	4619      	mov	r1, r3
 80007ea:	f7ff fec7 	bl	800057c <RGBLeds_SetColorOn>
			if (RGBLeds_State[i].Counter == 5) { RGBLeds_SetColorOff((enum ENUM_BodyParts)(i));}
 80007ee:	4a5c      	ldr	r2, [pc, #368]	; (8000960 <RGBLeds_Update10Hz+0x1ac>)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	00db      	lsls	r3, r3, #3
 80007f4:	4413      	add	r3, r2
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	2b05      	cmp	r3, #5
 80007fa:	d104      	bne.n	8000806 <RGBLeds_Update10Hz+0x52>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff ff67 	bl	80006d4 <RGBLeds_SetColorOff>

			RGBLeds_State[i].Counter += 1;
 8000806:	4a56      	ldr	r2, [pc, #344]	; (8000960 <RGBLeds_Update10Hz+0x1ac>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	00db      	lsls	r3, r3, #3
 800080c:	4413      	add	r3, r2
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	1c5a      	adds	r2, r3, #1
 8000812:	4953      	ldr	r1, [pc, #332]	; (8000960 <RGBLeds_Update10Hz+0x1ac>)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	00db      	lsls	r3, r3, #3
 8000818:	440b      	add	r3, r1
 800081a:	605a      	str	r2, [r3, #4]
			if (RGBLeds_State[i].Counter >= 10) {RGBLeds_State[i].Counter = 0;}
 800081c:	4a50      	ldr	r2, [pc, #320]	; (8000960 <RGBLeds_Update10Hz+0x1ac>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	4413      	add	r3, r2
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	2b09      	cmp	r3, #9
 8000828:	dd05      	ble.n	8000836 <RGBLeds_Update10Hz+0x82>
 800082a:	4a4d      	ldr	r2, [pc, #308]	; (8000960 <RGBLeds_Update10Hz+0x1ac>)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	4413      	add	r3, r2
 8000832:	2200      	movs	r2, #0
 8000834:	605a      	str	r2, [r3, #4]
		}

		if (RGBLeds_State[i].Blink == Blink_Fast)
 8000836:	4a4a      	ldr	r2, [pc, #296]	; (8000960 <RGBLeds_Update10Hz+0x1ac>)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	00db      	lsls	r3, r3, #3
 800083c:	4413      	add	r3, r2
 800083e:	785b      	ldrb	r3, [r3, #1]
 8000840:	2b02      	cmp	r3, #2
 8000842:	d133      	bne.n	80008ac <RGBLeds_Update10Hz+0xf8>
		{
			if (RGBLeds_State[i].Counter == 0) { RGBLeds_SetColorOn ((enum ENUM_BodyParts)(i), RGBLeds_State[i].Color);}
 8000844:	4a46      	ldr	r2, [pc, #280]	; (8000960 <RGBLeds_Update10Hz+0x1ac>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	4413      	add	r3, r2
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d108      	bne.n	8000864 <RGBLeds_Update10Hz+0xb0>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	b2d8      	uxtb	r0, r3
 8000856:	4a42      	ldr	r2, [pc, #264]	; (8000960 <RGBLeds_Update10Hz+0x1ac>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800085e:	4619      	mov	r1, r3
 8000860:	f7ff fe8c 	bl	800057c <RGBLeds_SetColorOn>
			if (RGBLeds_State[i].Counter == 3) { RGBLeds_SetColorOff((enum ENUM_BodyParts)(i));}
 8000864:	4a3e      	ldr	r2, [pc, #248]	; (8000960 <RGBLeds_Update10Hz+0x1ac>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	00db      	lsls	r3, r3, #3
 800086a:	4413      	add	r3, r2
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	2b03      	cmp	r3, #3
 8000870:	d104      	bne.n	800087c <RGBLeds_Update10Hz+0xc8>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ff2c 	bl	80006d4 <RGBLeds_SetColorOff>

			RGBLeds_State[i].Counter += 1;
 800087c:	4a38      	ldr	r2, [pc, #224]	; (8000960 <RGBLeds_Update10Hz+0x1ac>)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	00db      	lsls	r3, r3, #3
 8000882:	4413      	add	r3, r2
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	1c5a      	adds	r2, r3, #1
 8000888:	4935      	ldr	r1, [pc, #212]	; (8000960 <RGBLeds_Update10Hz+0x1ac>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	440b      	add	r3, r1
 8000890:	605a      	str	r2, [r3, #4]
			if (RGBLeds_State[i].Counter >= 6) {RGBLeds_State[i].Counter = 0;}
 8000892:	4a33      	ldr	r2, [pc, #204]	; (8000960 <RGBLeds_Update10Hz+0x1ac>)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	00db      	lsls	r3, r3, #3
 8000898:	4413      	add	r3, r2
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	2b05      	cmp	r3, #5
 800089e:	dd05      	ble.n	80008ac <RGBLeds_Update10Hz+0xf8>
 80008a0:	4a2f      	ldr	r2, [pc, #188]	; (8000960 <RGBLeds_Update10Hz+0x1ac>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	00db      	lsls	r3, r3, #3
 80008a6:	4413      	add	r3, r2
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
		}

		if (RGBLeds_State[i].Blink == Blink_VeryFast)
 80008ac:	4a2c      	ldr	r2, [pc, #176]	; (8000960 <RGBLeds_Update10Hz+0x1ac>)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	00db      	lsls	r3, r3, #3
 80008b2:	4413      	add	r3, r2
 80008b4:	785b      	ldrb	r3, [r3, #1]
 80008b6:	2b03      	cmp	r3, #3
 80008b8:	d133      	bne.n	8000922 <RGBLeds_Update10Hz+0x16e>
		{
			if (RGBLeds_State[i].Counter == 0) { RGBLeds_SetColorOn ((enum ENUM_BodyParts)(i), RGBLeds_State[i].Color);}
 80008ba:	4a29      	ldr	r2, [pc, #164]	; (8000960 <RGBLeds_Update10Hz+0x1ac>)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	00db      	lsls	r3, r3, #3
 80008c0:	4413      	add	r3, r2
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d108      	bne.n	80008da <RGBLeds_Update10Hz+0x126>
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	b2d8      	uxtb	r0, r3
 80008cc:	4a24      	ldr	r2, [pc, #144]	; (8000960 <RGBLeds_Update10Hz+0x1ac>)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80008d4:	4619      	mov	r1, r3
 80008d6:	f7ff fe51 	bl	800057c <RGBLeds_SetColorOn>
			if (RGBLeds_State[i].Counter == 2) { RGBLeds_SetColorOff((enum ENUM_BodyParts)(i));}
 80008da:	4a21      	ldr	r2, [pc, #132]	; (8000960 <RGBLeds_Update10Hz+0x1ac>)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	00db      	lsls	r3, r3, #3
 80008e0:	4413      	add	r3, r2
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d104      	bne.n	80008f2 <RGBLeds_Update10Hz+0x13e>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fef1 	bl	80006d4 <RGBLeds_SetColorOff>

			RGBLeds_State[i].Counter += 1;
 80008f2:	4a1b      	ldr	r2, [pc, #108]	; (8000960 <RGBLeds_Update10Hz+0x1ac>)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	4413      	add	r3, r2
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	1c5a      	adds	r2, r3, #1
 80008fe:	4918      	ldr	r1, [pc, #96]	; (8000960 <RGBLeds_Update10Hz+0x1ac>)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	00db      	lsls	r3, r3, #3
 8000904:	440b      	add	r3, r1
 8000906:	605a      	str	r2, [r3, #4]
			if (RGBLeds_State[i].Counter >= 4) {RGBLeds_State[i].Counter = 0;}
 8000908:	4a15      	ldr	r2, [pc, #84]	; (8000960 <RGBLeds_Update10Hz+0x1ac>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	4413      	add	r3, r2
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	2b03      	cmp	r3, #3
 8000914:	dd05      	ble.n	8000922 <RGBLeds_Update10Hz+0x16e>
 8000916:	4a12      	ldr	r2, [pc, #72]	; (8000960 <RGBLeds_Update10Hz+0x1ac>)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	4413      	add	r3, r2
 800091e:	2200      	movs	r2, #0
 8000920:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 3; i++)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	3301      	adds	r3, #1
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b02      	cmp	r3, #2
 800092c:	f77f af48 	ble.w	80007c0 <RGBLeds_Update10Hz+0xc>
	}

	//---------------------------------------------------------
	// Selftest update
	//---------------------------------------------------------
	SelfTestCounterTmo += 1;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <RGBLeds_Update10Hz+0x1b0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	3301      	adds	r3, #1
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <RGBLeds_Update10Hz+0x1b0>)
 8000938:	6013      	str	r3, [r2, #0]

	if (SelfTestCounterTmo >= 5 * UPDATE_10HZ)
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <RGBLeds_Update10Hz+0x1b0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b31      	cmp	r3, #49	; 0x31
 8000940:	dd0a      	ble.n	8000958 <RGBLeds_Update10Hz+0x1a4>
	{
		RGBLeds_SelfTest(False);
 8000942:	2000      	movs	r0, #0
 8000944:	f000 f810 	bl	8000968 <RGBLeds_SelfTest>

		RGBLeds_SetColorOn(LeftArm, White);
 8000948:	2103      	movs	r1, #3
 800094a:	2000      	movs	r0, #0
 800094c:	f7ff fe16 	bl	800057c <RGBLeds_SetColorOn>
		RGBLeds_SetColorOn(RightArm, White);
 8000950:	2103      	movs	r1, #3
 8000952:	2001      	movs	r0, #1
 8000954:	f7ff fe12 	bl	800057c <RGBLeds_SetColorOn>
	}
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000244 	.word	0x20000244
 8000964:	200001fc 	.word	0x200001fc

08000968 <RGBLeds_SelfTest>:

void RGBLeds_SelfTest(enum ENUM_Booleans Enabled)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
	if (Enabled == True)
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d112      	bne.n	800099e <RGBLeds_SelfTest+0x36>
	{
		SelfTestCounterTmo = 0;
 8000978:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <RGBLeds_SelfTest+0x70>)
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]

		RGBLeds_BlinkColor(LeftArm, Red, Blink_Slow);
 800097e:	2201      	movs	r2, #1
 8000980:	2100      	movs	r1, #0
 8000982:	2000      	movs	r0, #0
 8000984:	f7ff fef4 	bl	8000770 <RGBLeds_BlinkColor>
		RGBLeds_BlinkColor(RightArm, Green, Blink_Fast);
 8000988:	2202      	movs	r2, #2
 800098a:	2101      	movs	r1, #1
 800098c:	2001      	movs	r0, #1
 800098e:	f7ff feef 	bl	8000770 <RGBLeds_BlinkColor>
		RGBLeds_BlinkColor(Base, White, Blink_VeryFast);
 8000992:	2203      	movs	r2, #3
 8000994:	2103      	movs	r1, #3
 8000996:	2002      	movs	r0, #2
 8000998:	f7ff feea 	bl	8000770 <RGBLeds_BlinkColor>
		RGBLeds_SetColorOff(RightArm);

		RGBLeds_BlinkColor(Base, White, Blink_Off);
		RGBLeds_SetColorOff(Base);
	}
}
 800099c:	e017      	b.n	80009ce <RGBLeds_SelfTest+0x66>
		RGBLeds_BlinkColor(LeftArm, Red, Blink_Off);
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	2000      	movs	r0, #0
 80009a4:	f7ff fee4 	bl	8000770 <RGBLeds_BlinkColor>
		RGBLeds_SetColorOff(LeftArm);
 80009a8:	2000      	movs	r0, #0
 80009aa:	f7ff fe93 	bl	80006d4 <RGBLeds_SetColorOff>
		RGBLeds_BlinkColor(RightArm, Green, Blink_Off);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2101      	movs	r1, #1
 80009b2:	2001      	movs	r0, #1
 80009b4:	f7ff fedc 	bl	8000770 <RGBLeds_BlinkColor>
		RGBLeds_SetColorOff(RightArm);
 80009b8:	2001      	movs	r0, #1
 80009ba:	f7ff fe8b 	bl	80006d4 <RGBLeds_SetColorOff>
		RGBLeds_BlinkColor(Base, White, Blink_Off);
 80009be:	2200      	movs	r2, #0
 80009c0:	2103      	movs	r1, #3
 80009c2:	2002      	movs	r0, #2
 80009c4:	f7ff fed4 	bl	8000770 <RGBLeds_BlinkColor>
		RGBLeds_SetColorOff(Base);
 80009c8:	2002      	movs	r0, #2
 80009ca:	f7ff fe83 	bl	80006d4 <RGBLeds_SetColorOff>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200001fc 	.word	0x200001fc

080009dc <Protocol_0x55_GetRxPointer>:
struct PROTOCOL_0X55_Data_Type PROTOCOL_0X55_RxData;
struct PROTOCOL_0X55_Data_Type PROTOCOL_0X55_TxData;

// Allow other modules to retreive the Rx pointer
struct PROTOCOL_0X55_Data_Type* Protocol_0x55_GetRxPointer()
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
	return (&PROTOCOL_0X55_RxData);
 80009e0:	4b02      	ldr	r3, [pc, #8]	; (80009ec <Protocol_0x55_GetRxPointer+0x10>)
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	2000025c 	.word	0x2000025c

080009f0 <Protocol_0x55_CheckFifo>:
	PROTOCOL_0X55_RxData.NewData = 0;
	PROTOCOL_0X55_TxData.NewData = 0;
}

uint8_t Protocol_0x55_CheckFifo()
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
	return PROTOCOL_0X55_RxData.NewData;
 80009f4:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <Protocol_0x55_CheckFifo+0x14>)
 80009f6:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	2000025c 	.word	0x2000025c

08000a08 <Protocol_0x55_ProcessRxCommand>:

void Protocol_0x55_ProcessRxCommand()
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	PROTOCOL_0X55_RxData.NewData = 0;
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <Protocol_0x55_ProcessRxCommand+0x18>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401

	Protocol_0x55_SendVersion((char *) &PROTOCOL_0X55_TxData.FIFO_Data[0]);
 8000a14:	4803      	ldr	r0, [pc, #12]	; (8000a24 <Protocol_0x55_ProcessRxCommand+0x1c>)
 8000a16:	f000 f807 	bl	8000a28 <Protocol_0x55_SendVersion>
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000025c 	.word	0x2000025c
 8000a24:	20000660 	.word	0x20000660

08000a28 <Protocol_0x55_SendVersion>:

void Protocol_0x55_SendVersion(char *Buffer)
{
 8000a28:	b5b0      	push	{r4, r5, r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	Protocol_0x55_PrepareNewMessage(Buffer, CMD_VERSION, RESPONSE_TRUE);
 8000a30:	2201      	movs	r2, #1
 8000a32:	2101      	movs	r1, #1
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f000 f867 	bl	8000b08 <Protocol_0x55_PrepareNewMessage>

	sprintf(&Buffer[3], "STM32F207 - Sanbot - Matthijs ");
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	3303      	adds	r3, #3
 8000a3e:	4a2e      	ldr	r2, [pc, #184]	; (8000af8 <Protocol_0x55_SendVersion+0xd0>)
 8000a40:	461d      	mov	r5, r3
 8000a42:	4614      	mov	r4, r2
 8000a44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a46:	6028      	str	r0, [r5, #0]
 8000a48:	6069      	str	r1, [r5, #4]
 8000a4a:	60aa      	str	r2, [r5, #8]
 8000a4c:	60eb      	str	r3, [r5, #12]
 8000a4e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000a50:	6128      	str	r0, [r5, #16]
 8000a52:	6169      	str	r1, [r5, #20]
 8000a54:	61aa      	str	r2, [r5, #24]
 8000a56:	8823      	ldrh	r3, [r4, #0]
 8000a58:	78a2      	ldrb	r2, [r4, #2]
 8000a5a:	83ab      	strh	r3, [r5, #28]
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	77ab      	strb	r3, [r5, #30]
	sprintf(&Buffer[3 + strlen(&Buffer[3])], __TIME__);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3303      	adds	r3, #3
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fbad 	bl	80001c4 <strlen>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	3303      	adds	r3, #3
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	4922      	ldr	r1, [pc, #136]	; (8000afc <Protocol_0x55_SendVersion+0xd4>)
 8000a74:	461a      	mov	r2, r3
 8000a76:	460b      	mov	r3, r1
 8000a78:	cb03      	ldmia	r3!, {r0, r1}
 8000a7a:	6010      	str	r0, [r2, #0]
 8000a7c:	6051      	str	r1, [r2, #4]
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	7213      	strb	r3, [r2, #8]
	sprintf(&Buffer[3 + strlen(&Buffer[3])], " ");
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	3303      	adds	r3, #3
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fb9c 	bl	80001c4 <strlen>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	3303      	adds	r3, #3
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	4413      	add	r3, r2
 8000a94:	491a      	ldr	r1, [pc, #104]	; (8000b00 <Protocol_0x55_SendVersion+0xd8>)
 8000a96:	461a      	mov	r2, r3
 8000a98:	460b      	mov	r3, r1
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	8013      	strh	r3, [r2, #0]
	sprintf(&Buffer[3 + strlen(&Buffer[3])], __DATE__);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	3303      	adds	r3, #3
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fb8e 	bl	80001c4 <strlen>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	3303      	adds	r3, #3
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	4413      	add	r3, r2
 8000ab0:	4a14      	ldr	r2, [pc, #80]	; (8000b04 <Protocol_0x55_SendVersion+0xdc>)
 8000ab2:	461c      	mov	r4, r3
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000ab8:	6020      	str	r0, [r4, #0]
 8000aba:	6061      	str	r1, [r4, #4]
 8000abc:	60a2      	str	r2, [r4, #8]

	int datalen = strlen(&Buffer[3]);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3303      	adds	r3, #3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fb7e 	bl	80001c4 <strlen>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	60fb      	str	r3, [r7, #12]

	Protocol_0x55_SetLength(Buffer, datalen);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f000 f83f 	bl	8000b56 <Protocol_0x55_SetLength>
	Protocol_0x55_AddCRC(Buffer, datalen);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	4619      	mov	r1, r3
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f000 f848 	bl	8000b74 <Protocol_0x55_AddCRC>
	Protocol_0x55_Send(Buffer, datalen);
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	4619      	mov	r1, r3
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f000 f8a5 	bl	8000c3a <Protocol_0x55_Send>
}
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bdb0      	pop	{r4, r5, r7, pc}
 8000af8:	0800726c 	.word	0x0800726c
 8000afc:	0800728c 	.word	0x0800728c
 8000b00:	08007298 	.word	0x08007298
 8000b04:	0800729c 	.word	0x0800729c

08000b08 <Protocol_0x55_PrepareNewMessage>:

void Protocol_0x55_PrepareNewMessage(char *Buffer, char Command, char Response)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	460b      	mov	r3, r1
 8000b12:	70fb      	strb	r3, [r7, #3]
 8000b14:	4613      	mov	r3, r2
 8000b16:	70bb      	strb	r3, [r7, #2]
	memset((uint8_t*)Buffer, 0, sizeof(Buffer));
 8000b18:	2204      	movs	r2, #4
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f006 fac5 	bl	80070ac <memset>

	Buffer[0] = 0x55;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2255      	movs	r2, #85	; 0x55
 8000b26:	701a      	strb	r2, [r3, #0]
	Buffer[1] = (Command & 0x7f);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	78fa      	ldrb	r2, [r7, #3]
 8000b2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	701a      	strb	r2, [r3, #0]

	if (Response == 1) {Buffer[1] = Buffer[1] | 0x80;}		// Set high bit
 8000b36:	78bb      	ldrb	r3, [r7, #2]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d108      	bne.n	8000b4e <Protocol_0x55_PrepareNewMessage+0x46>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	781a      	ldrb	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	3301      	adds	r3, #1
 8000b46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000b4a:	b2d2      	uxtb	r2, r2
 8000b4c:	701a      	strb	r2, [r3, #0]
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <Protocol_0x55_SetLength>:

void Protocol_0x55_SetLength(char *Buffer, uint8_t datalen)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b083      	sub	sp, #12
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
 8000b5e:	460b      	mov	r3, r1
 8000b60:	70fb      	strb	r3, [r7, #3]
	Buffer[2] = datalen;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3302      	adds	r3, #2
 8000b66:	78fa      	ldrb	r2, [r7, #3]
 8000b68:	701a      	strb	r2, [r3, #0]
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <Protocol_0x55_AddCRC>:

void Protocol_0x55_AddCRC(char *Buffer, uint8_t datalen)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	70fb      	strb	r3, [r7, #3]
	// 0x55 CMD LEN + datalen
	uint16_t Result = Protocol_0x55_CalculateCRC16(Buffer, datalen);
 8000b80:	78fb      	ldrb	r3, [r7, #3]
 8000b82:	4619      	mov	r1, r3
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f000 f816 	bl	8000bb6 <Protocol_0x55_CalculateCRC16>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	81fb      	strh	r3, [r7, #14]

	Buffer[datalen+3] 	= (Result & 0xff);
 8000b8e:	78fb      	ldrb	r3, [r7, #3]
 8000b90:	3303      	adds	r3, #3
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	89fa      	ldrh	r2, [r7, #14]
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	701a      	strb	r2, [r3, #0]
	Buffer[datalen+4]	= ((Result >> 8) & 0xff);
 8000b9c:	89fb      	ldrh	r3, [r7, #14]
 8000b9e:	0a1b      	lsrs	r3, r3, #8
 8000ba0:	b299      	uxth	r1, r3
 8000ba2:	78fb      	ldrb	r3, [r7, #3]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	b2ca      	uxtb	r2, r1
 8000bac:	701a      	strb	r2, [r3, #0]
}
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <Protocol_0x55_CalculateCRC16>:
//------------------------------------------------------------------------
// CRC-16 / Modbus version. start at 0xFFFF, 0x8005 reversed
// Reversed because CRC is shifted right instead of left.
//------------------------------------------------------------------------
uint16_t Protocol_0x55_CalculateCRC16(char *data, uint8_t msgSize)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b085      	sub	sp, #20
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0xFFFF; // Initial value of CRC
 8000bc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bc6:	81fb      	strh	r3, [r7, #14]
	uint16_t crclen = msgSize - 2;	// Substract 2 CRC bytes
 8000bc8:	78fb      	ldrb	r3, [r7, #3]
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	3b02      	subs	r3, #2
 8000bce:	817b      	strh	r3, [r7, #10]

	for (uint8_t i = 0; i < crclen; i++) {
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	737b      	strb	r3, [r7, #13]
 8000bd4:	e026      	b.n	8000c24 <Protocol_0x55_CalculateCRC16+0x6e>
		crc ^= data[i]; // XOR the next data byte
 8000bd6:	7b7b      	ldrb	r3, [r7, #13]
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	4413      	add	r3, r2
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	89fb      	ldrh	r3, [r7, #14]
 8000be2:	4053      	eors	r3, r2
 8000be4:	81fb      	strh	r3, [r7, #14]

		for (uint8_t j = 0; j < 8; j++) {
 8000be6:	2300      	movs	r3, #0
 8000be8:	733b      	strb	r3, [r7, #12]
 8000bea:	e015      	b.n	8000c18 <Protocol_0x55_CalculateCRC16+0x62>
			if (crc & 0x0001) {
 8000bec:	89fb      	ldrh	r3, [r7, #14]
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d00a      	beq.n	8000c0c <Protocol_0x55_CalculateCRC16+0x56>
				crc >>= 1;
 8000bf6:	89fb      	ldrh	r3, [r7, #14]
 8000bf8:	085b      	lsrs	r3, r3, #1
 8000bfa:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001; // Polynomial for CRC-16/MODBUS (0x8005 reversed)
 8000bfc:	89fb      	ldrh	r3, [r7, #14]
 8000bfe:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8000c02:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8000c06:	43db      	mvns	r3, r3
 8000c08:	81fb      	strh	r3, [r7, #14]
 8000c0a:	e002      	b.n	8000c12 <Protocol_0x55_CalculateCRC16+0x5c>
			} else {
				crc >>= 1;
 8000c0c:	89fb      	ldrh	r3, [r7, #14]
 8000c0e:	085b      	lsrs	r3, r3, #1
 8000c10:	81fb      	strh	r3, [r7, #14]
		for (uint8_t j = 0; j < 8; j++) {
 8000c12:	7b3b      	ldrb	r3, [r7, #12]
 8000c14:	3301      	adds	r3, #1
 8000c16:	733b      	strb	r3, [r7, #12]
 8000c18:	7b3b      	ldrb	r3, [r7, #12]
 8000c1a:	2b07      	cmp	r3, #7
 8000c1c:	d9e6      	bls.n	8000bec <Protocol_0x55_CalculateCRC16+0x36>
	for (uint8_t i = 0; i < crclen; i++) {
 8000c1e:	7b7b      	ldrb	r3, [r7, #13]
 8000c20:	3301      	adds	r3, #1
 8000c22:	737b      	strb	r3, [r7, #13]
 8000c24:	7b7b      	ldrb	r3, [r7, #13]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	897a      	ldrh	r2, [r7, #10]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d8d3      	bhi.n	8000bd6 <Protocol_0x55_CalculateCRC16+0x20>
			}
		}
	}

	return crc;
 8000c2e:	89fb      	ldrh	r3, [r7, #14]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr

08000c3a <Protocol_0x55_Send>:

void Protocol_0x55_Send(char *data, uint8_t datalen)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
 8000c42:	460b      	mov	r3, r1
 8000c44:	70fb      	strb	r3, [r7, #3]
	CDC_Transmit_FS((uint8_t*)data, 3 + datalen + 2);
 8000c46:	78fb      	ldrb	r3, [r7, #3]
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	3305      	adds	r3, #5
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	4619      	mov	r1, r3
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f005 fdbf 	bl	80067d4 <CDC_Transmit_FS>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <System_Initialize>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void System_Initialize()
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim14);
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <System_Initialize+0x1c>)
 8000c66:	f002 fba5 	bl	80033b4 <HAL_TIM_Base_Start_IT>

	RGBLeds_Init();
 8000c6a:	f7ff fc7a 	bl	8000562 <RGBLeds_Init>
	LeftArm_Init();
 8000c6e:	f7ff fc33 	bl	80004d8 <LeftArm_Init>
	RightArm_Init();
 8000c72:	f7ff fc4b 	bl	800050c <RightArm_Init>
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000a64 	.word	0x20000a64

08000c80 <System_SelfTest>:

void System_SelfTest()
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	RGBLeds_SelfTest(True);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f7ff fe6f 	bl	8000968 <RGBLeds_SelfTest>
	LeftArm_SelfTest(True);
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f7ff fc38 	bl	8000500 <LeftArm_SelfTest>
	RightArm_SelfTest(True);
 8000c90:	2001      	movs	r0, #1
 8000c92:	f7ff fc4f 	bl	8000534 <RightArm_SelfTest>
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <Check_USB_Communication>:

void Check_USB_Communication()
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	af00      	add	r7, sp, #0
	if (Protocol_0x55_CheckFifo() > 0)
 8000c9e:	f7ff fea7 	bl	80009f0 <Protocol_0x55_CheckFifo>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <Check_USB_Communication+0x12>
	{
		Protocol_0x55_ProcessRxCommand();
 8000ca8:	f7ff feae 	bl	8000a08 <Protocol_0x55_ProcessRxCommand>

		// if (valid) --> find module to handle command
	}
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb4:	f000 fa66 	bl	8001184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb8:	f000 f82a 	bl	8000d10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cbc:	f000 f894 	bl	8000de8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000cc0:	f005 fcbc 	bl	800663c <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 8000cc4:	f000 f86c 	bl	8000da0 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  System_Initialize();
 8000cc8:	f7ff ffca 	bl	8000c60 <System_Initialize>
  System_SelfTest();
 8000ccc:	f7ff ffd8 	bl	8000c80 <System_SelfTest>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (Update_10Hz)
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <main+0x54>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d004      	beq.n	8000ce2 <main+0x32>
	  {
		  Update_10Hz = 0;
 8000cd8:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <main+0x54>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
		  RGBLeds_Update10Hz();
 8000cde:	f7ff fd69 	bl	80007b4 <RGBLeds_Update10Hz>
	  }

	  if (Update_5Hz)
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <main+0x58>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d002      	beq.n	8000cf0 <main+0x40>
	  {
		  Update_5Hz = 0;
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <main+0x58>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
	  }

	  if (Update_2Hz)
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <main+0x5c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d002      	beq.n	8000cfe <main+0x4e>
	  {
		  Update_2Hz = 0;
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <main+0x5c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
	  }

	  Check_USB_Communication();
 8000cfe:	f7ff ffcc 	bl	8000c9a <Check_USB_Communication>
	  if (Update_10Hz)
 8000d02:	e7e5      	b.n	8000cd0 <main+0x20>
 8000d04:	20000238 	.word	0x20000238
 8000d08:	20000224 	.word	0x20000224
 8000d0c:	2000023c 	.word	0x2000023c

08000d10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b092      	sub	sp, #72	; 0x48
 8000d14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d16:	f107 0318 	add.w	r3, r7, #24
 8000d1a:	2230      	movs	r2, #48	; 0x30
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f006 f9c4 	bl	80070ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d32:	2303      	movs	r3, #3
 8000d34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d36:	2301      	movs	r3, #1
 8000d38:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d3e:	2310      	movs	r3, #16
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d42:	2302      	movs	r3, #2
 8000d44:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d50:	23c0      	movs	r3, #192	; 0xc0
 8000d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d54:	2302      	movs	r3, #2
 8000d56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5c:	f107 0318 	add.w	r3, r7, #24
 8000d60:	4618      	mov	r0, r3
 8000d62:	f001 feb9 	bl	8002ad8 <HAL_RCC_OscConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000d6c:	f000 f8ca 	bl	8000f04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d70:	230f      	movs	r3, #15
 8000d72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f002 f8f5 	bl	8002f78 <HAL_RCC_ClockConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000d94:	f000 f8b6 	bl	8000f04 <Error_Handler>
  }
}
 8000d98:	bf00      	nop
 8000d9a:	3748      	adds	r7, #72	; 0x48
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000da4:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <MX_TIM14_Init+0x40>)
 8000da6:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <MX_TIM14_Init+0x44>)
 8000da8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1599;
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <MX_TIM14_Init+0x40>)
 8000dac:	f240 623f 	movw	r2, #1599	; 0x63f
 8000db0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <MX_TIM14_Init+0x40>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <MX_TIM14_Init+0x40>)
 8000dba:	2263      	movs	r2, #99	; 0x63
 8000dbc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <MX_TIM14_Init+0x40>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <MX_TIM14_Init+0x40>)
 8000dc6:	2280      	movs	r2, #128	; 0x80
 8000dc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_TIM14_Init+0x40>)
 8000dcc:	f002 faa2 	bl	8003314 <HAL_TIM_Base_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000dd6:	f000 f895 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000a64 	.word	0x20000a64
 8000de4:	40002000 	.word	0x40002000

08000de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	4b3c      	ldr	r3, [pc, #240]	; (8000ef4 <MX_GPIO_Init+0x10c>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a3b      	ldr	r2, [pc, #236]	; (8000ef4 <MX_GPIO_Init+0x10c>)
 8000e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b39      	ldr	r3, [pc, #228]	; (8000ef4 <MX_GPIO_Init+0x10c>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b35      	ldr	r3, [pc, #212]	; (8000ef4 <MX_GPIO_Init+0x10c>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a34      	ldr	r2, [pc, #208]	; (8000ef4 <MX_GPIO_Init+0x10c>)
 8000e24:	f043 0308 	orr.w	r3, r3, #8
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b32      	ldr	r3, [pc, #200]	; (8000ef4 <MX_GPIO_Init+0x10c>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0308 	and.w	r3, r3, #8
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	4b2e      	ldr	r3, [pc, #184]	; (8000ef4 <MX_GPIO_Init+0x10c>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a2d      	ldr	r2, [pc, #180]	; (8000ef4 <MX_GPIO_Init+0x10c>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b2b      	ldr	r3, [pc, #172]	; (8000ef4 <MX_GPIO_Init+0x10c>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	4b27      	ldr	r3, [pc, #156]	; (8000ef4 <MX_GPIO_Init+0x10c>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a26      	ldr	r2, [pc, #152]	; (8000ef4 <MX_GPIO_Init+0x10c>)
 8000e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <MX_GPIO_Init+0x10c>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RightArmRed_Pin|RightArmGreen_Pin|RightArmBlue_Pin, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8000e74:	4820      	ldr	r0, [pc, #128]	; (8000ef8 <MX_GPIO_Init+0x110>)
 8000e76:	f000 fcc1 	bl	80017fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LeftArmRed_Pin|LeftArmGreen_Pin|LeftArmBlue_Pin, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000e80:	481e      	ldr	r0, [pc, #120]	; (8000efc <MX_GPIO_Init+0x114>)
 8000e82:	f000 fcbb 	bl	80017fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BaseRed_Pin|BaseGreen_Pin|BaseBlue_Pin, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 8000e8c:	481c      	ldr	r0, [pc, #112]	; (8000f00 <MX_GPIO_Init+0x118>)
 8000e8e:	f000 fcb5 	bl	80017fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WingRightRed_Pin WingRightGreen_Pin WingRightBlue_Pin */
  GPIO_InitStruct.Pin = RightArmRed_Pin|RightArmGreen_Pin|RightArmBlue_Pin;
 8000e92:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4813      	ldr	r0, [pc, #76]	; (8000ef8 <MX_GPIO_Init+0x110>)
 8000eac:	f000 fb08 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : WingLeftRed_Pin WingLeftGreen_Pin WingLeftBlue_Pin */
  GPIO_InitStruct.Pin = LeftArmRed_Pin|LeftArmGreen_Pin|LeftArmBlue_Pin;
 8000eb0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000eb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <MX_GPIO_Init+0x114>)
 8000eca:	f000 faf9 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BaseRed_Pin BaseGreen_Pin BaseBlue_Pin */
  GPIO_InitStruct.Pin = BaseRed_Pin|BaseGreen_Pin|BaseBlue_Pin;
 8000ece:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000ed2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4806      	ldr	r0, [pc, #24]	; (8000f00 <MX_GPIO_Init+0x118>)
 8000ee8:	f000 faea 	bl	80014c0 <HAL_GPIO_Init>

}
 8000eec:	bf00      	nop
 8000eee:	3728      	adds	r7, #40	; 0x28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020c00 	.word	0x40020c00
 8000efc:	40021c00 	.word	0x40021c00
 8000f00:	40021800 	.word	0x40021800

08000f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f08:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <Error_Handler+0x6>

08000f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <HAL_MspInit+0x48>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <HAL_MspInit+0x48>)
 8000f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f20:	6453      	str	r3, [r2, #68]	; 0x44
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <HAL_MspInit+0x48>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <HAL_MspInit+0x48>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <HAL_MspInit+0x48>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3e:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <HAL_MspInit+0x48>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	40023800 	.word	0x40023800

08000f58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <HAL_TIM_Base_MspInit+0x48>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d115      	bne.n	8000f96 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <HAL_TIM_Base_MspInit+0x4c>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	4a0c      	ldr	r2, [pc, #48]	; (8000fa4 <HAL_TIM_Base_MspInit+0x4c>)
 8000f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f78:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <HAL_TIM_Base_MspInit+0x4c>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	202d      	movs	r0, #45	; 0x2d
 8000f8c:	f000 fa61 	bl	8001452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000f90:	202d      	movs	r0, #45	; 0x2d
 8000f92:	f000 fa7a 	bl	800148a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40002000 	.word	0x40002000
 8000fa4:	40023800 	.word	0x40023800

08000fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <NMI_Handler+0x4>

08000fae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <HardFault_Handler+0x4>

08000fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <MemManage_Handler+0x4>

08000fba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fbe:	e7fe      	b.n	8000fbe <BusFault_Handler+0x4>

08000fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <UsageFault_Handler+0x4>

08000fc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr

08000fd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr

08000fde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr

08000fea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fee:	f000 f91b 	bl	8001228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

	// 100 Hz counter for various purposes
	TIM14_Counter += 1;
 8000ffc:	4b22      	ldr	r3, [pc, #136]	; (8001088 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	3301      	adds	r3, #1
 8001002:	4a21      	ldr	r2, [pc, #132]	; (8001088 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8001004:	6013      	str	r3, [r2, #0]

	// 1 Hz overflow
	if (TIM14_Counter == 100)
 8001006:	4b20      	ldr	r3, [pc, #128]	; (8001088 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2b64      	cmp	r3, #100	; 0x64
 800100c:	d102      	bne.n	8001014 <TIM8_TRG_COM_TIM14_IRQHandler+0x1c>
	{
		TIM14_Counter = 0;
 800100e:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
	}

	if ((TIM14_Counter % 10) == 0)
 8001014:	4b1c      	ldr	r3, [pc, #112]	; (8001088 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8001016:	6819      	ldr	r1, [r3, #0]
 8001018:	4b1c      	ldr	r3, [pc, #112]	; (800108c <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 800101a:	fb83 2301 	smull	r2, r3, r3, r1
 800101e:	109a      	asrs	r2, r3, #2
 8001020:	17cb      	asrs	r3, r1, #31
 8001022:	1ad2      	subs	r2, r2, r3
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	1aca      	subs	r2, r1, r3
 800102e:	2a00      	cmp	r2, #0
 8001030:	d102      	bne.n	8001038 <TIM8_TRG_COM_TIM14_IRQHandler+0x40>
	{
		Update_10Hz = 1;
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 8001034:	2201      	movs	r2, #1
 8001036:	601a      	str	r2, [r3, #0]
	}

	if ((TIM14_Counter % 20) == 0)
 8001038:	4b13      	ldr	r3, [pc, #76]	; (8001088 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 800103a:	6819      	ldr	r1, [r3, #0]
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 800103e:	fb83 2301 	smull	r2, r3, r3, r1
 8001042:	10da      	asrs	r2, r3, #3
 8001044:	17cb      	asrs	r3, r1, #31
 8001046:	1ad2      	subs	r2, r2, r3
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	1aca      	subs	r2, r1, r3
 8001052:	2a00      	cmp	r2, #0
 8001054:	d102      	bne.n	800105c <TIM8_TRG_COM_TIM14_IRQHandler+0x64>
	{
		Update_5Hz = 1;
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 8001058:	2201      	movs	r2, #1
 800105a:	601a      	str	r2, [r3, #0]
	}

	if ((TIM14_Counter % 50) == 0)
 800105c:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <TIM8_TRG_COM_TIM14_IRQHandler+0xa0>)
 8001062:	fb83 1302 	smull	r1, r3, r3, r2
 8001066:	1119      	asrs	r1, r3, #4
 8001068:	17d3      	asrs	r3, r2, #31
 800106a:	1acb      	subs	r3, r1, r3
 800106c:	2132      	movs	r1, #50	; 0x32
 800106e:	fb01 f303 	mul.w	r3, r1, r3
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d102      	bne.n	800107e <TIM8_TRG_COM_TIM14_IRQHandler+0x86>
	{
		Update_2Hz = 1;
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <TIM8_TRG_COM_TIM14_IRQHandler+0xa4>)
 800107a:	2201      	movs	r2, #1
 800107c:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800107e:	4808      	ldr	r0, [pc, #32]	; (80010a0 <TIM8_TRG_COM_TIM14_IRQHandler+0xa8>)
 8001080:	f002 fa06 	bl	8003490 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000200 	.word	0x20000200
 800108c:	66666667 	.word	0x66666667
 8001090:	20000238 	.word	0x20000238
 8001094:	20000224 	.word	0x20000224
 8001098:	51eb851f 	.word	0x51eb851f
 800109c:	2000023c 	.word	0x2000023c
 80010a0:	20000a64 	.word	0x20000a64

080010a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <OTG_FS_IRQHandler+0x10>)
 80010aa:	f000 fcfe 	bl	8001aaa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20001f74 	.word	0x20001f74

080010b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c0:	4a14      	ldr	r2, [pc, #80]	; (8001114 <_sbrk+0x5c>)
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <_sbrk+0x60>)
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010cc:	4b13      	ldr	r3, [pc, #76]	; (800111c <_sbrk+0x64>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d102      	bne.n	80010da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <_sbrk+0x64>)
 80010d6:	4a12      	ldr	r2, [pc, #72]	; (8001120 <_sbrk+0x68>)
 80010d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <_sbrk+0x64>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d207      	bcs.n	80010f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e8:	f005 ffa6 	bl	8007038 <__errno>
 80010ec:	4602      	mov	r2, r0
 80010ee:	230c      	movs	r3, #12
 80010f0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010f6:	e009      	b.n	800110c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <_sbrk+0x64>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	4a05      	ldr	r2, [pc, #20]	; (800111c <_sbrk+0x64>)
 8001108:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800110a:	68fb      	ldr	r3, [r7, #12]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20020000 	.word	0x20020000
 8001118:	00000400 	.word	0x00000400
 800111c:	20000204 	.word	0x20000204
 8001120:	20002378 	.word	0x20002378

08001124 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001130:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001168 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001134:	480d      	ldr	r0, [pc, #52]	; (800116c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001136:	490e      	ldr	r1, [pc, #56]	; (8001170 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001138:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800114c:	4c0b      	ldr	r4, [pc, #44]	; (800117c <LoopFillZerobss+0x26>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800115a:	f7ff ffe3 	bl	8001124 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800115e:	f005 ff71 	bl	8007044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001162:	f7ff fda5 	bl	8000cb0 <main>
  bx  lr
 8001166:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001168:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800116c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001170:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001174:	08007310 	.word	0x08007310
  ldr r2, =_sbss
 8001178:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800117c:	20002378 	.word	0x20002378

08001180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001180:	e7fe      	b.n	8001180 <ADC_IRQHandler>
	...

08001184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001188:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <HAL_Init+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <HAL_Init+0x40>)
 800118e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001192:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <HAL_Init+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <HAL_Init+0x40>)
 800119a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800119e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_Init+0x40>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <HAL_Init+0x40>)
 80011a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f000 f945 	bl	800143c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b2:	2000      	movs	r0, #0
 80011b4:	f000 f808 	bl	80011c8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80011b8:	f7ff fea8 	bl	8000f0c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023c00 	.word	0x40023c00

080011c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_InitTick+0x54>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_InitTick+0x58>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011de:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f95d 	bl	80014a6 <HAL_SYSTICK_Config>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00e      	b.n	8001214 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b0f      	cmp	r3, #15
 80011fa:	d80a      	bhi.n	8001212 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011fc:	2200      	movs	r2, #0
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001204:	f000 f925 	bl	8001452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001208:	4a06      	ldr	r2, [pc, #24]	; (8001224 <HAL_InitTick+0x5c>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	e000      	b.n	8001214 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000000 	.word	0x20000000
 8001220:	20000008 	.word	0x20000008
 8001224:	20000004 	.word	0x20000004

08001228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <HAL_IncTick+0x1c>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b05      	ldr	r3, [pc, #20]	; (8001248 <HAL_IncTick+0x20>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4413      	add	r3, r2
 8001238:	4a03      	ldr	r2, [pc, #12]	; (8001248 <HAL_IncTick+0x20>)
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr
 8001244:	20000008 	.word	0x20000008
 8001248:	20000aac 	.word	0x20000aac

0800124c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return uwTick;
 8001250:	4b02      	ldr	r3, [pc, #8]	; (800125c <HAL_GetTick+0x10>)
 8001252:	681b      	ldr	r3, [r3, #0]
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	20000aac 	.word	0x20000aac

08001260 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001268:	f7ff fff0 	bl	800124c <HAL_GetTick>
 800126c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001278:	d005      	beq.n	8001286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_Delay+0x40>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001286:	bf00      	nop
 8001288:	f7ff ffe0 	bl	800124c <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	429a      	cmp	r2, r3
 8001296:	d8f7      	bhi.n	8001288 <HAL_Delay+0x28>
  {
  }
}
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000008 	.word	0x20000008

080012a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c0:	4013      	ands	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d6:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	60d3      	str	r3, [r2, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <__NVIC_GetPriorityGrouping+0x18>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	f003 0307 	and.w	r3, r3, #7
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	2b00      	cmp	r3, #0
 8001318:	db0b      	blt.n	8001332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	f003 021f 	and.w	r2, r3, #31
 8001320:	4906      	ldr	r1, [pc, #24]	; (800133c <__NVIC_EnableIRQ+0x34>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	095b      	lsrs	r3, r3, #5
 8001328:	2001      	movs	r0, #1
 800132a:	fa00 f202 	lsl.w	r2, r0, r2
 800132e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	e000e100 	.word	0xe000e100

08001340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	2b00      	cmp	r3, #0
 8001352:	db0a      	blt.n	800136a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	490c      	ldr	r1, [pc, #48]	; (800138c <__NVIC_SetPriority+0x4c>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	0112      	lsls	r2, r2, #4
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	440b      	add	r3, r1
 8001364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001368:	e00a      	b.n	8001380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4908      	ldr	r1, [pc, #32]	; (8001390 <__NVIC_SetPriority+0x50>)
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	3b04      	subs	r3, #4
 8001378:	0112      	lsls	r2, r2, #4
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	440b      	add	r3, r1
 800137e:	761a      	strb	r2, [r3, #24]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000e100 	.word	0xe000e100
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	; 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f1c3 0307 	rsb	r3, r3, #7
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	bf28      	it	cs
 80013b2:	2304      	movcs	r3, #4
 80013b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3304      	adds	r3, #4
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d902      	bls.n	80013c4 <NVIC_EncodePriority+0x30>
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3b03      	subs	r3, #3
 80013c2:	e000      	b.n	80013c6 <NVIC_EncodePriority+0x32>
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43da      	mvns	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	401a      	ands	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	43d9      	mvns	r1, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	4313      	orrs	r3, r2
         );
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3724      	adds	r7, #36	; 0x24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr

080013f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001408:	d301      	bcc.n	800140e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140a:	2301      	movs	r3, #1
 800140c:	e00f      	b.n	800142e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <SysTick_Config+0x40>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001416:	210f      	movs	r1, #15
 8001418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800141c:	f7ff ff90 	bl	8001340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <SysTick_Config+0x40>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001426:	4b04      	ldr	r3, [pc, #16]	; (8001438 <SysTick_Config+0x40>)
 8001428:	2207      	movs	r2, #7
 800142a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	e000e010 	.word	0xe000e010

0800143c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff2d 	bl	80012a4 <__NVIC_SetPriorityGrouping>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001452:	b580      	push	{r7, lr}
 8001454:	b086      	sub	sp, #24
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001464:	f7ff ff42 	bl	80012ec <__NVIC_GetPriorityGrouping>
 8001468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	6978      	ldr	r0, [r7, #20]
 8001470:	f7ff ff90 	bl	8001394 <NVIC_EncodePriority>
 8001474:	4602      	mov	r2, r0
 8001476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff5f 	bl	8001340 <__NVIC_SetPriority>
}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff35 	bl	8001308 <__NVIC_EnableIRQ>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff ffa2 	bl	80013f8 <SysTick_Config>
 80014b4:	4603      	mov	r3, r0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b087      	sub	sp, #28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ce:	e16f      	b.n	80017b0 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	2101      	movs	r1, #1
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	fa01 f303 	lsl.w	r3, r1, r3
 80014dc:	4013      	ands	r3, r2
 80014de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 8161 	beq.w	80017aa <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d005      	beq.n	8001500 <HAL_GPIO_Init+0x40>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d130      	bne.n	8001562 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	2203      	movs	r2, #3
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001536:	2201      	movs	r2, #1
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	091b      	lsrs	r3, r3, #4
 800154c:	f003 0201 	and.w	r2, r3, #1
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	2b03      	cmp	r3, #3
 800156c:	d017      	beq.n	800159e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	2203      	movs	r2, #3
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d123      	bne.n	80015f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	08da      	lsrs	r2, r3, #3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3208      	adds	r2, #8
 80015b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	220f      	movs	r2, #15
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	691a      	ldr	r2, [r3, #16]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	08da      	lsrs	r2, r3, #3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3208      	adds	r2, #8
 80015ec:	6939      	ldr	r1, [r7, #16]
 80015ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	2203      	movs	r2, #3
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 0203 	and.w	r2, r3, #3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 80bb 	beq.w	80017aa <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	4b64      	ldr	r3, [pc, #400]	; (80017cc <HAL_GPIO_Init+0x30c>)
 800163a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163c:	4a63      	ldr	r2, [pc, #396]	; (80017cc <HAL_GPIO_Init+0x30c>)
 800163e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001642:	6453      	str	r3, [r2, #68]	; 0x44
 8001644:	4b61      	ldr	r3, [pc, #388]	; (80017cc <HAL_GPIO_Init+0x30c>)
 8001646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001650:	4a5f      	ldr	r2, [pc, #380]	; (80017d0 <HAL_GPIO_Init+0x310>)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	3302      	adds	r3, #2
 8001658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	220f      	movs	r2, #15
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4013      	ands	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a57      	ldr	r2, [pc, #348]	; (80017d4 <HAL_GPIO_Init+0x314>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d031      	beq.n	80016e0 <HAL_GPIO_Init+0x220>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a56      	ldr	r2, [pc, #344]	; (80017d8 <HAL_GPIO_Init+0x318>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d02b      	beq.n	80016dc <HAL_GPIO_Init+0x21c>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a55      	ldr	r2, [pc, #340]	; (80017dc <HAL_GPIO_Init+0x31c>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d025      	beq.n	80016d8 <HAL_GPIO_Init+0x218>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a54      	ldr	r2, [pc, #336]	; (80017e0 <HAL_GPIO_Init+0x320>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d01f      	beq.n	80016d4 <HAL_GPIO_Init+0x214>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a53      	ldr	r2, [pc, #332]	; (80017e4 <HAL_GPIO_Init+0x324>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d019      	beq.n	80016d0 <HAL_GPIO_Init+0x210>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a52      	ldr	r2, [pc, #328]	; (80017e8 <HAL_GPIO_Init+0x328>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d013      	beq.n	80016cc <HAL_GPIO_Init+0x20c>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a51      	ldr	r2, [pc, #324]	; (80017ec <HAL_GPIO_Init+0x32c>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d00d      	beq.n	80016c8 <HAL_GPIO_Init+0x208>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a50      	ldr	r2, [pc, #320]	; (80017f0 <HAL_GPIO_Init+0x330>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d007      	beq.n	80016c4 <HAL_GPIO_Init+0x204>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a4f      	ldr	r2, [pc, #316]	; (80017f4 <HAL_GPIO_Init+0x334>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d101      	bne.n	80016c0 <HAL_GPIO_Init+0x200>
 80016bc:	2308      	movs	r3, #8
 80016be:	e010      	b.n	80016e2 <HAL_GPIO_Init+0x222>
 80016c0:	2309      	movs	r3, #9
 80016c2:	e00e      	b.n	80016e2 <HAL_GPIO_Init+0x222>
 80016c4:	2307      	movs	r3, #7
 80016c6:	e00c      	b.n	80016e2 <HAL_GPIO_Init+0x222>
 80016c8:	2306      	movs	r3, #6
 80016ca:	e00a      	b.n	80016e2 <HAL_GPIO_Init+0x222>
 80016cc:	2305      	movs	r3, #5
 80016ce:	e008      	b.n	80016e2 <HAL_GPIO_Init+0x222>
 80016d0:	2304      	movs	r3, #4
 80016d2:	e006      	b.n	80016e2 <HAL_GPIO_Init+0x222>
 80016d4:	2303      	movs	r3, #3
 80016d6:	e004      	b.n	80016e2 <HAL_GPIO_Init+0x222>
 80016d8:	2302      	movs	r3, #2
 80016da:	e002      	b.n	80016e2 <HAL_GPIO_Init+0x222>
 80016dc:	2301      	movs	r3, #1
 80016de:	e000      	b.n	80016e2 <HAL_GPIO_Init+0x222>
 80016e0:	2300      	movs	r3, #0
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	f002 0203 	and.w	r2, r2, #3
 80016e8:	0092      	lsls	r2, r2, #2
 80016ea:	4093      	lsls	r3, r2
 80016ec:	461a      	mov	r2, r3
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016f4:	4936      	ldr	r1, [pc, #216]	; (80017d0 <HAL_GPIO_Init+0x310>)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	089b      	lsrs	r3, r3, #2
 80016fa:	3302      	adds	r3, #2
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001702:	4b3d      	ldr	r3, [pc, #244]	; (80017f8 <HAL_GPIO_Init+0x338>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	43db      	mvns	r3, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4313      	orrs	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001726:	4a34      	ldr	r2, [pc, #208]	; (80017f8 <HAL_GPIO_Init+0x338>)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800172c:	4b32      	ldr	r3, [pc, #200]	; (80017f8 <HAL_GPIO_Init+0x338>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	43db      	mvns	r3, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001750:	4a29      	ldr	r2, [pc, #164]	; (80017f8 <HAL_GPIO_Init+0x338>)
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001756:	4b28      	ldr	r3, [pc, #160]	; (80017f8 <HAL_GPIO_Init+0x338>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	43db      	mvns	r3, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4313      	orrs	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800177a:	4a1f      	ldr	r2, [pc, #124]	; (80017f8 <HAL_GPIO_Init+0x338>)
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001780:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <HAL_GPIO_Init+0x338>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	43db      	mvns	r3, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017a4:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <HAL_GPIO_Init+0x338>)
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	3301      	adds	r3, #1
 80017ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa22 f303 	lsr.w	r3, r2, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f47f ae88 	bne.w	80014d0 <HAL_GPIO_Init+0x10>
  }
}
 80017c0:	bf00      	nop
 80017c2:	371c      	adds	r7, #28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40013800 	.word	0x40013800
 80017d4:	40020000 	.word	0x40020000
 80017d8:	40020400 	.word	0x40020400
 80017dc:	40020800 	.word	0x40020800
 80017e0:	40020c00 	.word	0x40020c00
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40021400 	.word	0x40021400
 80017ec:	40021800 	.word	0x40021800
 80017f0:	40021c00 	.word	0x40021c00
 80017f4:	40022000 	.word	0x40022000
 80017f8:	40013c00 	.word	0x40013c00

080017fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	807b      	strh	r3, [r7, #2]
 8001808:	4613      	mov	r3, r2
 800180a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800180c:	787b      	ldrb	r3, [r7, #1]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001812:	887a      	ldrh	r2, [r7, #2]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001818:	e003      	b.n	8001822 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800181a:	887b      	ldrh	r3, [r7, #2]
 800181c:	041a      	lsls	r2, r3, #16
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	619a      	str	r2, [r3, #24]
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800182c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800182e:	b08f      	sub	sp, #60	; 0x3c
 8001830:	af0a      	add	r7, sp, #40	; 0x28
 8001832:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e10f      	b.n	8001a5e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d106      	bne.n	800185e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f005 f8ef 	bl	8006a3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2203      	movs	r2, #3
 8001862:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186e:	2b00      	cmp	r3, #0
 8001870:	d102      	bne.n	8001878 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f002 f8f7 	bl	8003a70 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	687e      	ldr	r6, [r7, #4]
 800188a:	466d      	mov	r5, sp
 800188c:	f106 0410 	add.w	r4, r6, #16
 8001890:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001892:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001894:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001896:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001898:	e894 0003 	ldmia.w	r4, {r0, r1}
 800189c:	e885 0003 	stmia.w	r5, {r0, r1}
 80018a0:	1d33      	adds	r3, r6, #4
 80018a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018a4:	6838      	ldr	r0, [r7, #0]
 80018a6:	f001 ffd9 	bl	800385c <USB_CoreInit>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2202      	movs	r2, #2
 80018b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e0d0      	b.n	8001a5e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f002 f8e4 	bl	8003a90 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018c8:	2300      	movs	r3, #0
 80018ca:	73fb      	strb	r3, [r7, #15]
 80018cc:	e04a      	b.n	8001964 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018ce:	7bfa      	ldrb	r2, [r7, #15]
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	1a9b      	subs	r3, r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	440b      	add	r3, r1
 80018dc:	333d      	adds	r3, #61	; 0x3d
 80018de:	2201      	movs	r2, #1
 80018e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018e2:	7bfa      	ldrb	r2, [r7, #15]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	1a9b      	subs	r3, r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	333c      	adds	r3, #60	; 0x3c
 80018f2:	7bfa      	ldrb	r2, [r7, #15]
 80018f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018f6:	7bfa      	ldrb	r2, [r7, #15]
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	b298      	uxth	r0, r3
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	1a9b      	subs	r3, r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	440b      	add	r3, r1
 8001908:	3342      	adds	r3, #66	; 0x42
 800190a:	4602      	mov	r2, r0
 800190c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800190e:	7bfa      	ldrb	r2, [r7, #15]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	333f      	adds	r3, #63	; 0x3f
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001922:	7bfa      	ldrb	r2, [r7, #15]
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	1a9b      	subs	r3, r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	3344      	adds	r3, #68	; 0x44
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001936:	7bfa      	ldrb	r2, [r7, #15]
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	1a9b      	subs	r3, r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	440b      	add	r3, r1
 8001944:	3348      	adds	r3, #72	; 0x48
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800194a:	7bfa      	ldrb	r2, [r7, #15]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	1a9b      	subs	r3, r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	440b      	add	r3, r1
 8001958:	3350      	adds	r3, #80	; 0x50
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	3301      	adds	r3, #1
 8001962:	73fb      	strb	r3, [r7, #15]
 8001964:	7bfa      	ldrb	r2, [r7, #15]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	429a      	cmp	r2, r3
 800196c:	d3af      	bcc.n	80018ce <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800196e:	2300      	movs	r3, #0
 8001970:	73fb      	strb	r3, [r7, #15]
 8001972:	e044      	b.n	80019fe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001974:	7bfa      	ldrb	r2, [r7, #15]
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	1a9b      	subs	r3, r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800198a:	7bfa      	ldrb	r2, [r7, #15]
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	1a9b      	subs	r3, r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	440b      	add	r3, r1
 8001998:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800199c:	7bfa      	ldrb	r2, [r7, #15]
 800199e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019a0:	7bfa      	ldrb	r2, [r7, #15]
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	1a9b      	subs	r3, r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019b6:	7bfa      	ldrb	r2, [r7, #15]
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	1a9b      	subs	r3, r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	440b      	add	r3, r1
 80019c4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019cc:	7bfa      	ldrb	r2, [r7, #15]
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	1a9b      	subs	r3, r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019e2:	7bfa      	ldrb	r2, [r7, #15]
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	1a9b      	subs	r3, r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	3301      	adds	r3, #1
 80019fc:	73fb      	strb	r3, [r7, #15]
 80019fe:	7bfa      	ldrb	r2, [r7, #15]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d3b5      	bcc.n	8001974 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	603b      	str	r3, [r7, #0]
 8001a0e:	687e      	ldr	r6, [r7, #4]
 8001a10:	466d      	mov	r5, sp
 8001a12:	f106 0410 	add.w	r4, r6, #16
 8001a16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a22:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a26:	1d33      	adds	r3, r6, #4
 8001a28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a2a:	6838      	ldr	r0, [r7, #0]
 8001a2c:	f002 f87c 	bl	8003b28 <USB_DevInit>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d005      	beq.n	8001a42 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2202      	movs	r2, #2
 8001a3a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e00d      	b.n	8001a5e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f003 f8ed 	bl	8004c36 <USB_DevDisconnect>

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a66 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <HAL_PCD_Start+0x16>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e012      	b.n	8001aa2 <HAL_PCD_Start+0x3c>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f001 ffe1 	bl	8003a50 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 f8af 	bl	8004bf6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001aaa:	b590      	push	{r4, r7, lr}
 8001aac:	b08d      	sub	sp, #52	; 0x34
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ab8:	6a3b      	ldr	r3, [r7, #32]
 8001aba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f003 f966 	bl	8004d92 <USB_GetMode>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f040 838f 	bne.w	80021ec <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f003 f8cf 	bl	8004c76 <USB_ReadInterrupts>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 8385 	beq.w	80021ea <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f003 f8c6 	bl	8004c76 <USB_ReadInterrupts>
 8001aea:	4603      	mov	r3, r0
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d107      	bne.n	8001b04 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	695a      	ldr	r2, [r3, #20]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f002 0202 	and.w	r2, r2, #2
 8001b02:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f003 f8b4 	bl	8004c76 <USB_ReadInterrupts>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	f003 0310 	and.w	r3, r3, #16
 8001b14:	2b10      	cmp	r3, #16
 8001b16:	d161      	bne.n	8001bdc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	699a      	ldr	r2, [r3, #24]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0210 	bic.w	r2, r2, #16
 8001b26:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	f003 020f 	and.w	r2, r3, #15
 8001b34:	4613      	mov	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	1a9b      	subs	r3, r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	4413      	add	r3, r2
 8001b44:	3304      	adds	r3, #4
 8001b46:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	0c5b      	lsrs	r3, r3, #17
 8001b4c:	f003 030f 	and.w	r3, r3, #15
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d124      	bne.n	8001b9e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d035      	beq.n	8001bcc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	091b      	lsrs	r3, r3, #4
 8001b68:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	461a      	mov	r2, r3
 8001b72:	6a38      	ldr	r0, [r7, #32]
 8001b74:	f002 fef1 	bl	800495a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	091b      	lsrs	r3, r3, #4
 8001b80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b84:	441a      	add	r2, r3
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	699a      	ldr	r2, [r3, #24]
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	091b      	lsrs	r3, r3, #4
 8001b92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b96:	441a      	add	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	619a      	str	r2, [r3, #24]
 8001b9c:	e016      	b.n	8001bcc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	0c5b      	lsrs	r3, r3, #17
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	2b06      	cmp	r3, #6
 8001ba8:	d110      	bne.n	8001bcc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001bb0:	2208      	movs	r2, #8
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	6a38      	ldr	r0, [r7, #32]
 8001bb6:	f002 fed0 	bl	800495a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	699a      	ldr	r2, [r3, #24]
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bc6:	441a      	add	r2, r3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699a      	ldr	r2, [r3, #24]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0210 	orr.w	r2, r2, #16
 8001bda:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f003 f848 	bl	8004c76 <USB_ReadInterrupts>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001bf0:	d16e      	bne.n	8001cd0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f003 f84d 	bl	8004c9a <USB_ReadDevAllOutEpInterrupt>
 8001c00:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001c02:	e062      	b.n	8001cca <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d057      	beq.n	8001cbe <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	4611      	mov	r1, r2
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f003 f870 	bl	8004cfe <USB_ReadDevOutEPInterrupt>
 8001c1e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00c      	beq.n	8001c44 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	015a      	lsls	r2, r3, #5
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	4413      	add	r3, r2
 8001c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c36:	461a      	mov	r2, r3
 8001c38:	2301      	movs	r3, #1
 8001c3a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 fda2 	bl	8002788 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00c      	beq.n	8001c68 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	015a      	lsls	r2, r3, #5
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	4413      	add	r3, r2
 8001c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	2308      	movs	r3, #8
 8001c5e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001c60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 fe9c 	bl	80029a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	f003 0310 	and.w	r3, r3, #16
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d008      	beq.n	8001c84 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	015a      	lsls	r2, r3, #5
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	4413      	add	r3, r2
 8001c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c7e:	461a      	mov	r2, r3
 8001c80:	2310      	movs	r3, #16
 8001c82:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	f003 0320 	and.w	r3, r3, #32
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d008      	beq.n	8001ca0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	015a      	lsls	r2, r3, #5
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	4413      	add	r3, r2
 8001c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	2320      	movs	r3, #32
 8001c9e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d009      	beq.n	8001cbe <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	015a      	lsls	r2, r3, #5
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cbc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc6:	085b      	lsrs	r3, r3, #1
 8001cc8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d199      	bne.n	8001c04 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f002 ffce 	bl	8004c76 <USB_ReadInterrupts>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ce0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ce4:	f040 80c0 	bne.w	8001e68 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f002 ffed 	bl	8004ccc <USB_ReadDevAllInEpInterrupt>
 8001cf2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001cf8:	e0b2      	b.n	8001e60 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f000 80a7 	beq.w	8001e54 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f003 f811 	bl	8004d38 <USB_ReadDevInEPInterrupt>
 8001d16:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d057      	beq.n	8001dd2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	f003 030f 	and.w	r3, r3, #15
 8001d28:	2201      	movs	r2, #1
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69f9      	ldr	r1, [r7, #28]
 8001d3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d42:	4013      	ands	r3, r2
 8001d44:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	015a      	lsls	r2, r3, #5
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d52:	461a      	mov	r2, r3
 8001d54:	2301      	movs	r3, #1
 8001d56:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d132      	bne.n	8001dc6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d64:	4613      	mov	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	1a9b      	subs	r3, r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	3348      	adds	r3, #72	; 0x48
 8001d70:	6819      	ldr	r1, [r3, #0]
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d76:	4613      	mov	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	1a9b      	subs	r3, r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4403      	add	r3, r0
 8001d80:	3344      	adds	r3, #68	; 0x44
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4419      	add	r1, r3
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	1a9b      	subs	r3, r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4403      	add	r3, r0
 8001d94:	3348      	adds	r3, #72	; 0x48
 8001d96:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d113      	bne.n	8001dc6 <HAL_PCD_IRQHandler+0x31c>
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da2:	4613      	mov	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	1a9b      	subs	r3, r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	440b      	add	r3, r1
 8001dac:	3350      	adds	r3, #80	; 0x50
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d108      	bne.n	8001dc6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	f003 f815 	bl	8004df0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	4619      	mov	r1, r3
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f004 feb6 	bl	8006b3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d008      	beq.n	8001dee <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	015a      	lsls	r2, r3, #5
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	4413      	add	r3, r2
 8001de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001de8:	461a      	mov	r2, r3
 8001dea:	2308      	movs	r3, #8
 8001dec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	f003 0310 	and.w	r3, r3, #16
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d008      	beq.n	8001e0a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	015a      	lsls	r2, r3, #5
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	4413      	add	r3, r2
 8001e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e04:	461a      	mov	r2, r3
 8001e06:	2310      	movs	r3, #16
 8001e08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	015a      	lsls	r2, r3, #5
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e20:	461a      	mov	r2, r3
 8001e22:	2340      	movs	r3, #64	; 0x40
 8001e24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d008      	beq.n	8001e42 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	015a      	lsls	r2, r3, #5
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	4413      	add	r3, r2
 8001e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	2302      	movs	r3, #2
 8001e40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 fc0c 	bl	800266c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	3301      	adds	r3, #1
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5c:	085b      	lsrs	r3, r3, #1
 8001e5e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f47f af49 	bne.w	8001cfa <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f002 ff02 	bl	8004c76 <USB_ReadInterrupts>
 8001e72:	4603      	mov	r3, r0
 8001e74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e7c:	d114      	bne.n	8001ea8 <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e8c:	f023 0301 	bic.w	r3, r3, #1
 8001e90:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f004 feca 	bl	8006c2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	695a      	ldr	r2, [r3, #20]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001ea6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f002 fee2 	bl	8004c76 <USB_ReadInterrupts>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ebc:	d112      	bne.n	8001ee4 <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d102      	bne.n	8001ed4 <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f004 fe86 	bl	8006be0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	695a      	ldr	r2, [r3, #20]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001ee2:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f002 fec4 	bl	8004c76 <USB_ReadInterrupts>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ef8:	f040 80c7 	bne.w	800208a <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	69fa      	ldr	r2, [r7, #28]
 8001f06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f0a:	f023 0301 	bic.w	r3, r3, #1
 8001f0e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2110      	movs	r1, #16
 8001f16:	4618      	mov	r0, r3
 8001f18:	f001 ff6a 	bl	8003df0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f20:	e056      	b.n	8001fd0 <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f2e:	461a      	mov	r2, r3
 8001f30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f34:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f38:	015a      	lsls	r2, r3, #5
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f46:	0151      	lsls	r1, r2, #5
 8001f48:	69fa      	ldr	r2, [r7, #28]
 8001f4a:	440a      	add	r2, r1
 8001f4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f54:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f58:	015a      	lsls	r2, r3, #5
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f66:	0151      	lsls	r1, r2, #5
 8001f68:	69fa      	ldr	r2, [r7, #28]
 8001f6a:	440a      	add	r2, r1
 8001f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f74:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f78:	015a      	lsls	r2, r3, #5
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f82:	461a      	mov	r2, r3
 8001f84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f88:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f8c:	015a      	lsls	r2, r3, #5
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	4413      	add	r3, r2
 8001f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f9a:	0151      	lsls	r1, r2, #5
 8001f9c:	69fa      	ldr	r2, [r7, #28]
 8001f9e:	440a      	add	r2, r1
 8001fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001fa4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001fa8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fac:	015a      	lsls	r2, r3, #5
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fba:	0151      	lsls	r1, r2, #5
 8001fbc:	69fa      	ldr	r2, [r7, #28]
 8001fbe:	440a      	add	r2, r1
 8001fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001fc4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001fc8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fcc:	3301      	adds	r3, #1
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d3a3      	bcc.n	8001f22 <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	69fa      	ldr	r2, [r7, #28]
 8001fe4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fe8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001fec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d016      	beq.n	8002024 <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002000:	69fa      	ldr	r2, [r7, #28]
 8002002:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002006:	f043 030b 	orr.w	r3, r3, #11
 800200a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	69fa      	ldr	r2, [r7, #28]
 8002018:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800201c:	f043 030b 	orr.w	r3, r3, #11
 8002020:	6453      	str	r3, [r2, #68]	; 0x44
 8002022:	e015      	b.n	8002050 <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	69fa      	ldr	r2, [r7, #28]
 800202e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002032:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002036:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800203a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	69fa      	ldr	r2, [r7, #28]
 8002046:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800204a:	f043 030b 	orr.w	r3, r3, #11
 800204e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	69fa      	ldr	r2, [r7, #28]
 800205a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800205e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002062:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002074:	461a      	mov	r2, r3
 8002076:	f002 febb 	bl	8004df0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	695a      	ldr	r2, [r3, #20]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002088:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f002 fdf1 	bl	8004c76 <USB_ReadInterrupts>
 8002094:	4603      	mov	r3, r0
 8002096:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800209a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800209e:	d124      	bne.n	80020ea <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f002 fe81 	bl	8004dac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f001 fefa 	bl	8003ea8 <USB_GetDevSpeed>
 80020b4:	4603      	mov	r3, r0
 80020b6:	461a      	mov	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681c      	ldr	r4, [r3, #0]
 80020c0:	f001 f91e 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 80020c4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	461a      	mov	r2, r3
 80020ce:	4620      	mov	r0, r4
 80020d0:	f001 fc1c 	bl	800390c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f004 fd5a 	bl	8006b8e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695a      	ldr	r2, [r3, #20]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80020e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f002 fdc1 	bl	8004c76 <USB_ReadInterrupts>
 80020f4:	4603      	mov	r3, r0
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	d10a      	bne.n	8002114 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f004 fd37 	bl	8006b72 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	695a      	ldr	r2, [r3, #20]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f002 0208 	and.w	r2, r2, #8
 8002112:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f002 fdac 	bl	8004c76 <USB_ReadInterrupts>
 800211e:	4603      	mov	r3, r0
 8002120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002124:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002128:	d10f      	bne.n	800214a <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	b2db      	uxtb	r3, r3
 8002132:	4619      	mov	r1, r3
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f004 fd99 	bl	8006c6c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	695a      	ldr	r2, [r3, #20]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002148:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f002 fd91 	bl	8004c76 <USB_ReadInterrupts>
 8002154:	4603      	mov	r3, r0
 8002156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800215a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800215e:	d10f      	bne.n	8002180 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	b2db      	uxtb	r3, r3
 8002168:	4619      	mov	r1, r3
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f004 fd6c 	bl	8006c48 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	695a      	ldr	r2, [r3, #20]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800217e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f002 fd76 	bl	8004c76 <USB_ReadInterrupts>
 800218a:	4603      	mov	r3, r0
 800218c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002194:	d10a      	bne.n	80021ac <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f004 fd7a 	bl	8006c90 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695a      	ldr	r2, [r3, #20]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80021aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f002 fd60 	bl	8004c76 <USB_ReadInterrupts>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d115      	bne.n	80021ec <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d002      	beq.n	80021d8 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f004 fd6a 	bl	8006cac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6859      	ldr	r1, [r3, #4]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	605a      	str	r2, [r3, #4]
 80021e8:	e000      	b.n	80021ec <HAL_PCD_IRQHandler+0x742>
      return;
 80021ea:	bf00      	nop
    }
  }
}
 80021ec:	3734      	adds	r7, #52	; 0x34
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd90      	pop	{r4, r7, pc}

080021f2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	460b      	mov	r3, r1
 80021fc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_PCD_SetAddress+0x1a>
 8002208:	2302      	movs	r3, #2
 800220a:	e013      	b.n	8002234 <HAL_PCD_SetAddress+0x42>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	78fa      	ldrb	r2, [r7, #3]
 8002218:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	78fa      	ldrb	r2, [r7, #3]
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f002 fcc1 	bl	8004bac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	4608      	mov	r0, r1
 8002246:	4611      	mov	r1, r2
 8002248:	461a      	mov	r2, r3
 800224a:	4603      	mov	r3, r0
 800224c:	70fb      	strb	r3, [r7, #3]
 800224e:	460b      	mov	r3, r1
 8002250:	803b      	strh	r3, [r7, #0]
 8002252:	4613      	mov	r3, r2
 8002254:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800225a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800225e:	2b00      	cmp	r3, #0
 8002260:	da0f      	bge.n	8002282 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	f003 020f 	and.w	r2, r3, #15
 8002268:	4613      	mov	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	1a9b      	subs	r3, r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	3338      	adds	r3, #56	; 0x38
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	3304      	adds	r3, #4
 8002278:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2201      	movs	r2, #1
 800227e:	705a      	strb	r2, [r3, #1]
 8002280:	e00f      	b.n	80022a2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002282:	78fb      	ldrb	r3, [r7, #3]
 8002284:	f003 020f 	and.w	r2, r3, #15
 8002288:	4613      	mov	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	1a9b      	subs	r3, r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	4413      	add	r3, r2
 8002298:	3304      	adds	r3, #4
 800229a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80022a2:	78fb      	ldrb	r3, [r7, #3]
 80022a4:	f003 030f 	and.w	r3, r3, #15
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80022ae:	883a      	ldrh	r2, [r7, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	78ba      	ldrb	r2, [r7, #2]
 80022b8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	785b      	ldrb	r3, [r3, #1]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d004      	beq.n	80022cc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80022cc:	78bb      	ldrb	r3, [r7, #2]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d102      	bne.n	80022d8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_PCD_EP_Open+0xaa>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e00e      	b.n	8002304 <HAL_PCD_EP_Open+0xc8>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68f9      	ldr	r1, [r7, #12]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f001 fdfb 	bl	8003ef0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002302:	7afb      	ldrb	r3, [r7, #11]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002318:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800231c:	2b00      	cmp	r3, #0
 800231e:	da0f      	bge.n	8002340 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002320:	78fb      	ldrb	r3, [r7, #3]
 8002322:	f003 020f 	and.w	r2, r3, #15
 8002326:	4613      	mov	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	1a9b      	subs	r3, r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	3338      	adds	r3, #56	; 0x38
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	4413      	add	r3, r2
 8002334:	3304      	adds	r3, #4
 8002336:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2201      	movs	r2, #1
 800233c:	705a      	strb	r2, [r3, #1]
 800233e:	e00f      	b.n	8002360 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	f003 020f 	and.w	r2, r3, #15
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	3304      	adds	r3, #4
 8002358:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	b2da      	uxtb	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002372:	2b01      	cmp	r3, #1
 8002374:	d101      	bne.n	800237a <HAL_PCD_EP_Close+0x6e>
 8002376:	2302      	movs	r3, #2
 8002378:	e00e      	b.n	8002398 <HAL_PCD_EP_Close+0x8c>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68f9      	ldr	r1, [r7, #12]
 8002388:	4618      	mov	r0, r3
 800238a:	f001 fe37 	bl	8003ffc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	607a      	str	r2, [r7, #4]
 80023aa:	603b      	str	r3, [r7, #0]
 80023ac:	460b      	mov	r3, r1
 80023ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023b0:	7afb      	ldrb	r3, [r7, #11]
 80023b2:	f003 020f 	and.w	r2, r3, #15
 80023b6:	4613      	mov	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	4413      	add	r3, r2
 80023c6:	3304      	adds	r3, #4
 80023c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2200      	movs	r2, #0
 80023da:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	2200      	movs	r2, #0
 80023e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023e2:	7afb      	ldrb	r3, [r7, #11]
 80023e4:	f003 030f 	and.w	r3, r3, #15
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d102      	bne.n	80023fc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023fc:	7afb      	ldrb	r3, [r7, #11]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	2b00      	cmp	r3, #0
 8002404:	d109      	bne.n	800241a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	461a      	mov	r2, r3
 8002412:	6979      	ldr	r1, [r7, #20]
 8002414:	f002 f912 	bl	800463c <USB_EP0StartXfer>
 8002418:	e008      	b.n	800242c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	b2db      	uxtb	r3, r3
 8002424:	461a      	mov	r2, r3
 8002426:	6979      	ldr	r1, [r7, #20]
 8002428:	f001 fec4 	bl	80041b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	460b      	mov	r3, r1
 8002440:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002442:	78fb      	ldrb	r3, [r7, #3]
 8002444:	f003 020f 	and.w	r2, r3, #15
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002458:	681b      	ldr	r3, [r3, #0]
}
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	607a      	str	r2, [r7, #4]
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	460b      	mov	r3, r1
 8002472:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002474:	7afb      	ldrb	r3, [r7, #11]
 8002476:	f003 020f 	and.w	r2, r3, #15
 800247a:	4613      	mov	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	1a9b      	subs	r3, r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	3338      	adds	r3, #56	; 0x38
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	4413      	add	r3, r2
 8002488:	3304      	adds	r3, #4
 800248a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	2200      	movs	r2, #0
 800249c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	2201      	movs	r2, #1
 80024a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024a4:	7afb      	ldrb	r3, [r7, #11]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d102      	bne.n	80024be <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024be:	7afb      	ldrb	r3, [r7, #11]
 80024c0:	f003 030f 	and.w	r3, r3, #15
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d109      	bne.n	80024dc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	6979      	ldr	r1, [r7, #20]
 80024d6:	f002 f8b1 	bl	800463c <USB_EP0StartXfer>
 80024da:	e008      	b.n	80024ee <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	461a      	mov	r2, r3
 80024e8:	6979      	ldr	r1, [r7, #20]
 80024ea:	f001 fe63 	bl	80041b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	f003 020f 	and.w	r2, r3, #15
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	429a      	cmp	r2, r3
 8002510:	d901      	bls.n	8002516 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e050      	b.n	80025b8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002516:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800251a:	2b00      	cmp	r3, #0
 800251c:	da0f      	bge.n	800253e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800251e:	78fb      	ldrb	r3, [r7, #3]
 8002520:	f003 020f 	and.w	r2, r3, #15
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	3338      	adds	r3, #56	; 0x38
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	4413      	add	r3, r2
 8002532:	3304      	adds	r3, #4
 8002534:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2201      	movs	r2, #1
 800253a:	705a      	strb	r2, [r3, #1]
 800253c:	e00d      	b.n	800255a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800253e:	78fa      	ldrb	r2, [r7, #3]
 8002540:	4613      	mov	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	1a9b      	subs	r3, r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	4413      	add	r3, r2
 8002550:	3304      	adds	r3, #4
 8002552:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2201      	movs	r2, #1
 800255e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	b2da      	uxtb	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <HAL_PCD_EP_SetStall+0x82>
 8002576:	2302      	movs	r3, #2
 8002578:	e01e      	b.n	80025b8 <HAL_PCD_EP_SetStall+0xc0>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68f9      	ldr	r1, [r7, #12]
 8002588:	4618      	mov	r0, r3
 800258a:	f002 fa3d 	bl	8004a08 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800258e:	78fb      	ldrb	r3, [r7, #3]
 8002590:	f003 030f 	and.w	r3, r3, #15
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10a      	bne.n	80025ae <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	b2d9      	uxtb	r1, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025a8:	461a      	mov	r2, r3
 80025aa:	f002 fc21 	bl	8004df0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025cc:	78fb      	ldrb	r3, [r7, #3]
 80025ce:	f003 020f 	and.w	r2, r3, #15
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d901      	bls.n	80025de <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e042      	b.n	8002664 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	da0f      	bge.n	8002606 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025e6:	78fb      	ldrb	r3, [r7, #3]
 80025e8:	f003 020f 	and.w	r2, r3, #15
 80025ec:	4613      	mov	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	1a9b      	subs	r3, r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	3338      	adds	r3, #56	; 0x38
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	3304      	adds	r3, #4
 80025fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2201      	movs	r2, #1
 8002602:	705a      	strb	r2, [r3, #1]
 8002604:	e00f      	b.n	8002626 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002606:	78fb      	ldrb	r3, [r7, #3]
 8002608:	f003 020f 	and.w	r2, r3, #15
 800260c:	4613      	mov	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	4413      	add	r3, r2
 800261c:	3304      	adds	r3, #4
 800261e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800262c:	78fb      	ldrb	r3, [r7, #3]
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	b2da      	uxtb	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <HAL_PCD_EP_ClrStall+0x86>
 8002642:	2302      	movs	r3, #2
 8002644:	e00e      	b.n	8002664 <HAL_PCD_EP_ClrStall+0xa4>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68f9      	ldr	r1, [r7, #12]
 8002654:	4618      	mov	r0, r3
 8002656:	f002 fa44 	bl	8004ae2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08a      	sub	sp, #40	; 0x28
 8002670:	af02      	add	r7, sp, #8
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	4613      	mov	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	1a9b      	subs	r3, r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	3338      	adds	r3, #56	; 0x38
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	4413      	add	r3, r2
 8002690:	3304      	adds	r3, #4
 8002692:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	699a      	ldr	r2, [r3, #24]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	429a      	cmp	r2, r3
 800269e:	d901      	bls.n	80026a4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e06c      	b.n	800277e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	695a      	ldr	r2, [r3, #20]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	69fa      	ldr	r2, [r7, #28]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d902      	bls.n	80026c0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	3303      	adds	r3, #3
 80026c4:	089b      	lsrs	r3, r3, #2
 80026c6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026c8:	e02b      	b.n	8002722 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	69fa      	ldr	r2, [r7, #28]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d902      	bls.n	80026e6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3303      	adds	r3, #3
 80026ea:	089b      	lsrs	r3, r3, #2
 80026ec:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	68d9      	ldr	r1, [r3, #12]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	4603      	mov	r3, r0
 8002704:	6978      	ldr	r0, [r7, #20]
 8002706:	f002 f8eb 	bl	80048e0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	441a      	add	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	441a      	add	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4413      	add	r3, r2
 800272a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	b29b      	uxth	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	429a      	cmp	r2, r3
 8002736:	d809      	bhi.n	800274c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	699a      	ldr	r2, [r3, #24]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002740:	429a      	cmp	r2, r3
 8002742:	d203      	bcs.n	800274c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1be      	bne.n	80026ca <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	695a      	ldr	r2, [r3, #20]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	429a      	cmp	r2, r3
 8002756:	d811      	bhi.n	800277c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	2201      	movs	r2, #1
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800276c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	43db      	mvns	r3, r3
 8002772:	6939      	ldr	r1, [r7, #16]
 8002774:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002778:	4013      	ands	r3, r2
 800277a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3720      	adds	r7, #32
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	333c      	adds	r3, #60	; 0x3c
 80027a0:	3304      	adds	r3, #4
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	015a      	lsls	r2, r3, #5
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	4413      	add	r3, r2
 80027ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	f040 80a0 	bne.w	8002900 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d015      	beq.n	80027f6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4a72      	ldr	r2, [pc, #456]	; (8002998 <PCD_EP_OutXfrComplete_int+0x210>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	f240 80dd 	bls.w	800298e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 80d7 	beq.w	800298e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ec:	461a      	mov	r2, r3
 80027ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027f2:	6093      	str	r3, [r2, #8]
 80027f4:	e0cb      	b.n	800298e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	f003 0320 	and.w	r3, r3, #32
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d009      	beq.n	8002814 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4413      	add	r3, r2
 8002808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800280c:	461a      	mov	r2, r3
 800280e:	2320      	movs	r3, #32
 8002810:	6093      	str	r3, [r2, #8]
 8002812:	e0bc      	b.n	800298e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800281a:	2b00      	cmp	r3, #0
 800281c:	f040 80b7 	bne.w	800298e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4a5d      	ldr	r2, [pc, #372]	; (8002998 <PCD_EP_OutXfrComplete_int+0x210>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d90f      	bls.n	8002848 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	015a      	lsls	r2, r3, #5
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4413      	add	r3, r2
 800283a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800283e:	461a      	mov	r2, r3
 8002840:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002844:	6093      	str	r3, [r2, #8]
 8002846:	e0a2      	b.n	800298e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	4613      	mov	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800285a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	0159      	lsls	r1, r3, #5
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	440b      	add	r3, r1
 8002864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800286e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	4613      	mov	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4403      	add	r3, r0
 800287e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002882:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	4613      	mov	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002896:	6819      	ldr	r1, [r3, #0]
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	4613      	mov	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4403      	add	r3, r0
 80028a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4419      	add	r1, r3
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	4613      	mov	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	1a9b      	subs	r3, r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4403      	add	r3, r0
 80028bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028c0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d114      	bne.n	80028f2 <PCD_EP_OutXfrComplete_int+0x16a>
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	4613      	mov	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d108      	bne.n	80028f2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6818      	ldr	r0, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028ea:	461a      	mov	r2, r3
 80028ec:	2101      	movs	r1, #1
 80028ee:	f002 fa7f 	bl	8004df0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	4619      	mov	r1, r3
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f004 f905 	bl	8006b08 <HAL_PCD_DataOutStageCallback>
 80028fe:	e046      	b.n	800298e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4a26      	ldr	r2, [pc, #152]	; (800299c <PCD_EP_OutXfrComplete_int+0x214>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d124      	bne.n	8002952 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	015a      	lsls	r2, r3, #5
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4413      	add	r3, r2
 800291a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800291e:	461a      	mov	r2, r3
 8002920:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002924:	6093      	str	r3, [r2, #8]
 8002926:	e032      	b.n	800298e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f003 0320 	and.w	r3, r3, #32
 800292e:	2b00      	cmp	r3, #0
 8002930:	d008      	beq.n	8002944 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4413      	add	r3, r2
 800293a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800293e:	461a      	mov	r2, r3
 8002940:	2320      	movs	r3, #32
 8002942:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	b2db      	uxtb	r3, r3
 8002948:	4619      	mov	r1, r3
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f004 f8dc 	bl	8006b08 <HAL_PCD_DataOutStageCallback>
 8002950:	e01d      	b.n	800298e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d114      	bne.n	8002982 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	4613      	mov	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	1a9b      	subs	r3, r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d108      	bne.n	8002982 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800297a:	461a      	mov	r2, r3
 800297c:	2100      	movs	r1, #0
 800297e:	f002 fa37 	bl	8004df0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	4619      	mov	r1, r3
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f004 f8bd 	bl	8006b08 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	4f54300a 	.word	0x4f54300a
 800299c:	4f54310a 	.word	0x4f54310a

080029a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	333c      	adds	r3, #60	; 0x3c
 80029b8:	3304      	adds	r3, #4
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	015a      	lsls	r2, r3, #5
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4a15      	ldr	r2, [pc, #84]	; (8002a28 <PCD_EP_OutSetupPacket_int+0x88>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d90e      	bls.n	80029f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d009      	beq.n	80029f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	015a      	lsls	r2, r3, #5
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ec:	461a      	mov	r2, r3
 80029ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f004 f875 	bl	8006ae4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <PCD_EP_OutSetupPacket_int+0x88>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d90c      	bls.n	8002a1c <PCD_EP_OutSetupPacket_int+0x7c>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d108      	bne.n	8002a1c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6818      	ldr	r0, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a14:	461a      	mov	r2, r3
 8002a16:	2101      	movs	r1, #1
 8002a18:	f002 f9ea 	bl	8004df0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	4f54300a 	.word	0x4f54300a

08002a2c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	70fb      	strb	r3, [r7, #3]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d107      	bne.n	8002a5a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002a4a:	883b      	ldrh	r3, [r7, #0]
 8002a4c:	0419      	lsls	r1, r3, #16
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	629a      	str	r2, [r3, #40]	; 0x28
 8002a58:	e028      	b.n	8002aac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a60:	0c1b      	lsrs	r3, r3, #16
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	4413      	add	r3, r2
 8002a66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a68:	2300      	movs	r3, #0
 8002a6a:	73fb      	strb	r3, [r7, #15]
 8002a6c:	e00d      	b.n	8002a8a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	3340      	adds	r3, #64	; 0x40
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	0c1b      	lsrs	r3, r3, #16
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	4413      	add	r3, r2
 8002a82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	3301      	adds	r3, #1
 8002a88:	73fb      	strb	r3, [r7, #15]
 8002a8a:	7bfa      	ldrb	r2, [r7, #15]
 8002a8c:	78fb      	ldrb	r3, [r7, #3]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d3ec      	bcc.n	8002a6e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002a94:	883b      	ldrh	r3, [r7, #0]
 8002a96:	0418      	lsls	r0, r3, #16
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6819      	ldr	r1, [r3, #0]
 8002a9c:	78fb      	ldrb	r3, [r7, #3]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	4302      	orrs	r2, r0
 8002aa4:	3340      	adds	r3, #64	; 0x40
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	887a      	ldrh	r2, [r7, #2]
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08a      	sub	sp, #40	; 0x28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e237      	b.n	8002f5a <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d050      	beq.n	8002b98 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002af6:	4ba3      	ldr	r3, [pc, #652]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d00c      	beq.n	8002b1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b02:	4ba0      	ldr	r3, [pc, #640]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d112      	bne.n	8002b34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b0e:	4b9d      	ldr	r3, [pc, #628]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b1a:	d10b      	bne.n	8002b34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b1c:	4b99      	ldr	r3, [pc, #612]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d036      	beq.n	8002b96 <HAL_RCC_OscConfig+0xbe>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d132      	bne.n	8002b96 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e212      	b.n	8002f5a <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	4b93      	ldr	r3, [pc, #588]	; (8002d88 <HAL_RCC_OscConfig+0x2b0>)
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d013      	beq.n	8002b6e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b46:	f7fe fb81 	bl	800124c <HAL_GetTick>
 8002b4a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b4e:	f7fe fb7d 	bl	800124c <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b64      	cmp	r3, #100	; 0x64
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e1fc      	b.n	8002f5a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b60:	4b88      	ldr	r3, [pc, #544]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x76>
 8002b6c:	e014      	b.n	8002b98 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6e:	f7fe fb6d 	bl	800124c <HAL_GetTick>
 8002b72:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b76:	f7fe fb69 	bl	800124c <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b64      	cmp	r3, #100	; 0x64
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e1e8      	b.n	8002f5a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b88:	4b7e      	ldr	r3, [pc, #504]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1f0      	bne.n	8002b76 <HAL_RCC_OscConfig+0x9e>
 8002b94:	e000      	b.n	8002b98 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b96:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d077      	beq.n	8002c94 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ba4:	4b77      	ldr	r3, [pc, #476]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00b      	beq.n	8002bc8 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bb0:	4b74      	ldr	r3, [pc, #464]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d126      	bne.n	8002c0a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bbc:	4b71      	ldr	r3, [pc, #452]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d120      	bne.n	8002c0a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc8:	4b6e      	ldr	r3, [pc, #440]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_RCC_OscConfig+0x108>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d001      	beq.n	8002be0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e1bc      	b.n	8002f5a <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be0:	4b68      	ldr	r3, [pc, #416]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	21f8      	movs	r1, #248	; 0xf8
 8002bee:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf0:	69b9      	ldr	r1, [r7, #24]
 8002bf2:	fa91 f1a1 	rbit	r1, r1
 8002bf6:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bf8:	6979      	ldr	r1, [r7, #20]
 8002bfa:	fab1 f181 	clz	r1, r1
 8002bfe:	b2c9      	uxtb	r1, r1
 8002c00:	408b      	lsls	r3, r1
 8002c02:	4960      	ldr	r1, [pc, #384]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c08:	e044      	b.n	8002c94 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d02a      	beq.n	8002c68 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c12:	4b5e      	ldr	r3, [pc, #376]	; (8002d8c <HAL_RCC_OscConfig+0x2b4>)
 8002c14:	2201      	movs	r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c18:	f7fe fb18 	bl	800124c <HAL_GetTick>
 8002c1c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c20:	f7fe fb14 	bl	800124c <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e193      	b.n	8002f5a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c32:	4b54      	ldr	r3, [pc, #336]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0f0      	beq.n	8002c20 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3e:	4b51      	ldr	r3, [pc, #324]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	21f8      	movs	r1, #248	; 0xf8
 8002c4c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	6939      	ldr	r1, [r7, #16]
 8002c50:	fa91 f1a1 	rbit	r1, r1
 8002c54:	60f9      	str	r1, [r7, #12]
  return result;
 8002c56:	68f9      	ldr	r1, [r7, #12]
 8002c58:	fab1 f181 	clz	r1, r1
 8002c5c:	b2c9      	uxtb	r1, r1
 8002c5e:	408b      	lsls	r3, r1
 8002c60:	4948      	ldr	r1, [pc, #288]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]
 8002c66:	e015      	b.n	8002c94 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c68:	4b48      	ldr	r3, [pc, #288]	; (8002d8c <HAL_RCC_OscConfig+0x2b4>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6e:	f7fe faed 	bl	800124c <HAL_GetTick>
 8002c72:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c76:	f7fe fae9 	bl	800124c <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e168      	b.n	8002f5a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c88:	4b3e      	ldr	r3, [pc, #248]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1f0      	bne.n	8002c76 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d030      	beq.n	8002d02 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d016      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ca8:	4b39      	ldr	r3, [pc, #228]	; (8002d90 <HAL_RCC_OscConfig+0x2b8>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cae:	f7fe facd 	bl	800124c <HAL_GetTick>
 8002cb2:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cb6:	f7fe fac9 	bl	800124c <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e148      	b.n	8002f5a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc8:	4b2e      	ldr	r3, [pc, #184]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f0      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x1de>
 8002cd4:	e015      	b.n	8002d02 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd6:	4b2e      	ldr	r3, [pc, #184]	; (8002d90 <HAL_RCC_OscConfig+0x2b8>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cdc:	f7fe fab6 	bl	800124c <HAL_GetTick>
 8002ce0:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ce4:	f7fe fab2 	bl	800124c <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e131      	b.n	8002f5a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf6:	4b23      	ldr	r3, [pc, #140]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f0      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8088 	beq.w	8002e20 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d10:	2300      	movs	r3, #0
 8002d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d16:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d110      	bne.n	8002d44 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	4a16      	ldr	r2, [pc, #88]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d30:	6413      	str	r3, [r2, #64]	; 0x40
 8002d32:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	60bb      	str	r3, [r7, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002d44:	4b13      	ldr	r3, [pc, #76]	; (8002d94 <HAL_RCC_OscConfig+0x2bc>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a12      	ldr	r2, [pc, #72]	; (8002d94 <HAL_RCC_OscConfig+0x2bc>)
 8002d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d50:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <HAL_RCC_OscConfig+0x2bc>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d123      	bne.n	8002da4 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d5c:	4b0d      	ldr	r3, [pc, #52]	; (8002d94 <HAL_RCC_OscConfig+0x2bc>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a0c      	ldr	r2, [pc, #48]	; (8002d94 <HAL_RCC_OscConfig+0x2bc>)
 8002d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d68:	f7fe fa70 	bl	800124c <HAL_GetTick>
 8002d6c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6e:	e013      	b.n	8002d98 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d70:	f7fe fa6c 	bl	800124c <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d90c      	bls.n	8002d98 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e0eb      	b.n	8002f5a <HAL_RCC_OscConfig+0x482>
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40023802 	.word	0x40023802
 8002d8c:	42470000 	.word	0x42470000
 8002d90:	42470e80 	.word	0x42470e80
 8002d94:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d98:	4b72      	ldr	r3, [pc, #456]	; (8002f64 <HAL_RCC_OscConfig+0x48c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0e5      	beq.n	8002d70 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	4b6f      	ldr	r3, [pc, #444]	; (8002f68 <HAL_RCC_OscConfig+0x490>)
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d015      	beq.n	8002de2 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db6:	f7fe fa49 	bl	800124c <HAL_GetTick>
 8002dba:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dbc:	e00a      	b.n	8002dd4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dbe:	f7fe fa45 	bl	800124c <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e0c2      	b.n	8002f5a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd4:	4b65      	ldr	r3, [pc, #404]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0ee      	beq.n	8002dbe <HAL_RCC_OscConfig+0x2e6>
 8002de0:	e014      	b.n	8002e0c <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de2:	f7fe fa33 	bl	800124c <HAL_GetTick>
 8002de6:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de8:	e00a      	b.n	8002e00 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dea:	f7fe fa2f 	bl	800124c <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e0ac      	b.n	8002f5a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e00:	4b5a      	ldr	r3, [pc, #360]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1ee      	bne.n	8002dea <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d105      	bne.n	8002e20 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e14:	4b55      	ldr	r3, [pc, #340]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	4a54      	ldr	r2, [pc, #336]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 8097 	beq.w	8002f58 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e2a:	4b50      	ldr	r3, [pc, #320]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d061      	beq.n	8002efa <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d146      	bne.n	8002ecc <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3e:	4b4c      	ldr	r3, [pc, #304]	; (8002f70 <HAL_RCC_OscConfig+0x498>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e44:	f7fe fa02 	bl	800124c <HAL_GetTick>
 8002e48:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e4c:	f7fe f9fe 	bl	800124c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b64      	cmp	r3, #100	; 0x64
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e07d      	b.n	8002f5a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5e:	4b43      	ldr	r3, [pc, #268]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e6a:	4b40      	ldr	r3, [pc, #256]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	4b41      	ldr	r3, [pc, #260]	; (8002f74 <HAL_RCC_OscConfig+0x49c>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	69d1      	ldr	r1, [r2, #28]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6a12      	ldr	r2, [r2, #32]
 8002e7a:	4311      	orrs	r1, r2
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e80:	0192      	lsls	r2, r2, #6
 8002e82:	4311      	orrs	r1, r2
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e88:	0612      	lsls	r2, r2, #24
 8002e8a:	4311      	orrs	r1, r2
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002e90:	0852      	lsrs	r2, r2, #1
 8002e92:	3a01      	subs	r2, #1
 8002e94:	0412      	lsls	r2, r2, #16
 8002e96:	430a      	orrs	r2, r1
 8002e98:	4934      	ldr	r1, [pc, #208]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e9e:	4b34      	ldr	r3, [pc, #208]	; (8002f70 <HAL_RCC_OscConfig+0x498>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea4:	f7fe f9d2 	bl	800124c <HAL_GetTick>
 8002ea8:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eac:	f7fe f9ce 	bl	800124c <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b64      	cmp	r3, #100	; 0x64
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e04d      	b.n	8002f5a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ebe:	4b2b      	ldr	r3, [pc, #172]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0x3d4>
 8002eca:	e045      	b.n	8002f58 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ecc:	4b28      	ldr	r3, [pc, #160]	; (8002f70 <HAL_RCC_OscConfig+0x498>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed2:	f7fe f9bb 	bl	800124c <HAL_GetTick>
 8002ed6:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eda:	f7fe f9b7 	bl	800124c <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b64      	cmp	r3, #100	; 0x64
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e036      	b.n	8002f5a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eec:	4b1f      	ldr	r3, [pc, #124]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1f0      	bne.n	8002eda <HAL_RCC_OscConfig+0x402>
 8002ef8:	e02e      	b.n	8002f58 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e029      	b.n	8002f5a <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002f06:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d11c      	bne.n	8002f54 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d115      	bne.n	8002f54 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	099b      	lsrs	r3, r3, #6
 8002f2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d10d      	bne.n	8002f54 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d106      	bne.n	8002f54 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3728      	adds	r7, #40	; 0x28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40007000 	.word	0x40007000
 8002f68:	40023870 	.word	0x40023870
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	42470060 	.word	0x42470060
 8002f74:	f0bc8000 	.word	0xf0bc8000

08002f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0d2      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f8c:	4b6b      	ldr	r3, [pc, #428]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 030f 	and.w	r3, r3, #15
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d90c      	bls.n	8002fb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9a:	4b68      	ldr	r3, [pc, #416]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa2:	4b66      	ldr	r3, [pc, #408]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0be      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d020      	beq.n	8003002 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fcc:	4b5c      	ldr	r3, [pc, #368]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	4a5b      	ldr	r2, [pc, #364]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0308 	and.w	r3, r3, #8
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002fe4:	4b56      	ldr	r3, [pc, #344]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	4a55      	ldr	r2, [pc, #340]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8002fea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff0:	4b53      	ldr	r3, [pc, #332]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	4950      	ldr	r1, [pc, #320]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d040      	beq.n	8003090 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d107      	bne.n	8003026 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003016:	4b4a      	ldr	r3, [pc, #296]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d115      	bne.n	800304e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e085      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d107      	bne.n	800303e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302e:	4b44      	ldr	r3, [pc, #272]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d109      	bne.n	800304e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e079      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303e:	4b40      	ldr	r3, [pc, #256]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e071      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800304e:	4b3c      	ldr	r3, [pc, #240]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f023 0203 	bic.w	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4939      	ldr	r1, [pc, #228]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 800305c:	4313      	orrs	r3, r2
 800305e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003060:	f7fe f8f4 	bl	800124c <HAL_GetTick>
 8003064:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003066:	e00a      	b.n	800307e <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003068:	f7fe f8f0 	bl	800124c <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	; 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e059      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307e:	4b30      	ldr	r3, [pc, #192]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 020c 	and.w	r2, r3, #12
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	429a      	cmp	r2, r3
 800308e:	d1eb      	bne.n	8003068 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003090:	4b2a      	ldr	r3, [pc, #168]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d20c      	bcs.n	80030b8 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309e:	4b27      	ldr	r3, [pc, #156]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a6:	4b25      	ldr	r3, [pc, #148]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d001      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e03c      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c4:	4b1e      	ldr	r3, [pc, #120]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	491b      	ldr	r1, [pc, #108]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030e2:	4b17      	ldr	r3, [pc, #92]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4913      	ldr	r1, [pc, #76]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80030f6:	f000 f82b 	bl	8003150 <HAL_RCC_GetSysClockFreq>
 80030fa:	4601      	mov	r1, r0
 80030fc:	4b10      	ldr	r3, [pc, #64]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003104:	22f0      	movs	r2, #240	; 0xf0
 8003106:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	fa92 f2a2 	rbit	r2, r2
 800310e:	60fa      	str	r2, [r7, #12]
  return result;
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	fab2 f282 	clz	r2, r2
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	40d3      	lsrs	r3, r2
 800311a:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <HAL_RCC_ClockConfig+0x1cc>)
 800311c:	5cd3      	ldrb	r3, [r2, r3]
 800311e:	fa21 f303 	lsr.w	r3, r1, r3
 8003122:	4a09      	ldr	r2, [pc, #36]	; (8003148 <HAL_RCC_ClockConfig+0x1d0>)
 8003124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003126:	4b09      	ldr	r3, [pc, #36]	; (800314c <HAL_RCC_ClockConfig+0x1d4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f7fe f84c 	bl	80011c8 <HAL_InitTick>

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40023c00 	.word	0x40023c00
 8003140:	40023800 	.word	0x40023800
 8003144:	080072f0 	.word	0x080072f0
 8003148:	20000000 	.word	0x20000000
 800314c:	20000004 	.word	0x20000004

08003150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	607b      	str	r3, [r7, #4]
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	2300      	movs	r3, #0
 8003160:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003166:	4b63      	ldr	r3, [pc, #396]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b04      	cmp	r3, #4
 8003170:	d007      	beq.n	8003182 <HAL_RCC_GetSysClockFreq+0x32>
 8003172:	2b08      	cmp	r3, #8
 8003174:	d008      	beq.n	8003188 <HAL_RCC_GetSysClockFreq+0x38>
 8003176:	2b00      	cmp	r3, #0
 8003178:	f040 80b4 	bne.w	80032e4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800317c:	4b5e      	ldr	r3, [pc, #376]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800317e:	60bb      	str	r3, [r7, #8]
       break;
 8003180:	e0b3      	b.n	80032ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003182:	4b5e      	ldr	r3, [pc, #376]	; (80032fc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003184:	60bb      	str	r3, [r7, #8]
      break;
 8003186:	e0b0      	b.n	80032ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003188:	4b5a      	ldr	r3, [pc, #360]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003190:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003192:	4b58      	ldr	r3, [pc, #352]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d04a      	beq.n	8003234 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800319e:	4b55      	ldr	r3, [pc, #340]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	099b      	lsrs	r3, r3, #6
 80031a4:	f04f 0400 	mov.w	r4, #0
 80031a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	ea03 0501 	and.w	r5, r3, r1
 80031b4:	ea04 0602 	and.w	r6, r4, r2
 80031b8:	4629      	mov	r1, r5
 80031ba:	4632      	mov	r2, r6
 80031bc:	f04f 0300 	mov.w	r3, #0
 80031c0:	f04f 0400 	mov.w	r4, #0
 80031c4:	0154      	lsls	r4, r2, #5
 80031c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031ca:	014b      	lsls	r3, r1, #5
 80031cc:	4619      	mov	r1, r3
 80031ce:	4622      	mov	r2, r4
 80031d0:	1b49      	subs	r1, r1, r5
 80031d2:	eb62 0206 	sbc.w	r2, r2, r6
 80031d6:	f04f 0300 	mov.w	r3, #0
 80031da:	f04f 0400 	mov.w	r4, #0
 80031de:	0194      	lsls	r4, r2, #6
 80031e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80031e4:	018b      	lsls	r3, r1, #6
 80031e6:	1a5b      	subs	r3, r3, r1
 80031e8:	eb64 0402 	sbc.w	r4, r4, r2
 80031ec:	f04f 0100 	mov.w	r1, #0
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	00e2      	lsls	r2, r4, #3
 80031f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80031fa:	00d9      	lsls	r1, r3, #3
 80031fc:	460b      	mov	r3, r1
 80031fe:	4614      	mov	r4, r2
 8003200:	195b      	adds	r3, r3, r5
 8003202:	eb44 0406 	adc.w	r4, r4, r6
 8003206:	f04f 0100 	mov.w	r1, #0
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	0262      	lsls	r2, r4, #9
 8003210:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003214:	0259      	lsls	r1, r3, #9
 8003216:	460b      	mov	r3, r1
 8003218:	4614      	mov	r4, r2
 800321a:	4618      	mov	r0, r3
 800321c:	4621      	mov	r1, r4
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f04f 0400 	mov.w	r4, #0
 8003224:	461a      	mov	r2, r3
 8003226:	4623      	mov	r3, r4
 8003228:	f7fc ffd4 	bl	80001d4 <__aeabi_uldivmod>
 800322c:	4603      	mov	r3, r0
 800322e:	460c      	mov	r4, r1
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	e049      	b.n	80032c8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003234:	4b2f      	ldr	r3, [pc, #188]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	099b      	lsrs	r3, r3, #6
 800323a:	f04f 0400 	mov.w	r4, #0
 800323e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	ea03 0501 	and.w	r5, r3, r1
 800324a:	ea04 0602 	and.w	r6, r4, r2
 800324e:	4629      	mov	r1, r5
 8003250:	4632      	mov	r2, r6
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	f04f 0400 	mov.w	r4, #0
 800325a:	0154      	lsls	r4, r2, #5
 800325c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003260:	014b      	lsls	r3, r1, #5
 8003262:	4619      	mov	r1, r3
 8003264:	4622      	mov	r2, r4
 8003266:	1b49      	subs	r1, r1, r5
 8003268:	eb62 0206 	sbc.w	r2, r2, r6
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	f04f 0400 	mov.w	r4, #0
 8003274:	0194      	lsls	r4, r2, #6
 8003276:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800327a:	018b      	lsls	r3, r1, #6
 800327c:	1a5b      	subs	r3, r3, r1
 800327e:	eb64 0402 	sbc.w	r4, r4, r2
 8003282:	f04f 0100 	mov.w	r1, #0
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	00e2      	lsls	r2, r4, #3
 800328c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003290:	00d9      	lsls	r1, r3, #3
 8003292:	460b      	mov	r3, r1
 8003294:	4614      	mov	r4, r2
 8003296:	195b      	adds	r3, r3, r5
 8003298:	eb44 0406 	adc.w	r4, r4, r6
 800329c:	f04f 0100 	mov.w	r1, #0
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	02a2      	lsls	r2, r4, #10
 80032a6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80032aa:	0299      	lsls	r1, r3, #10
 80032ac:	460b      	mov	r3, r1
 80032ae:	4614      	mov	r4, r2
 80032b0:	4618      	mov	r0, r3
 80032b2:	4621      	mov	r1, r4
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f04f 0400 	mov.w	r4, #0
 80032ba:	461a      	mov	r2, r3
 80032bc:	4623      	mov	r3, r4
 80032be:	f7fc ff89 	bl	80001d4 <__aeabi_uldivmod>
 80032c2:	4603      	mov	r3, r0
 80032c4:	460c      	mov	r4, r1
 80032c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032c8:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	0c1b      	lsrs	r3, r3, #16
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	3301      	adds	r3, #1
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e0:	60bb      	str	r3, [r7, #8]
      break;
 80032e2:	e002      	b.n	80032ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032e4:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80032e6:	60bb      	str	r3, [r7, #8]
      break;
 80032e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ea:	68bb      	ldr	r3, [r7, #8]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032f4:	40023800 	.word	0x40023800
 80032f8:	00f42400 	.word	0x00f42400
 80032fc:	007a1200 	.word	0x007a1200

08003300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003304:	4b02      	ldr	r3, [pc, #8]	; (8003310 <HAL_RCC_GetHCLKFreq+0x10>)
 8003306:	681b      	ldr	r3, [r3, #0]
}
 8003308:	4618      	mov	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr
 8003310:	20000000 	.word	0x20000000

08003314 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e041      	b.n	80033aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d106      	bne.n	8003340 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7fd fe0c 	bl	8000f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3304      	adds	r3, #4
 8003350:	4619      	mov	r1, r3
 8003352:	4610      	mov	r0, r2
 8003354:	f000 f9d2 	bl	80036fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d001      	beq.n	80033cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e04e      	b.n	800346a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a22      	ldr	r2, [pc, #136]	; (8003474 <HAL_TIM_Base_Start_IT+0xc0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d022      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0x80>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f6:	d01d      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0x80>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1e      	ldr	r2, [pc, #120]	; (8003478 <HAL_TIM_Base_Start_IT+0xc4>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d018      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0x80>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a1d      	ldr	r2, [pc, #116]	; (800347c <HAL_TIM_Base_Start_IT+0xc8>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d013      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0x80>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a1b      	ldr	r2, [pc, #108]	; (8003480 <HAL_TIM_Base_Start_IT+0xcc>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d00e      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0x80>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a1a      	ldr	r2, [pc, #104]	; (8003484 <HAL_TIM_Base_Start_IT+0xd0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d009      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0x80>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a18      	ldr	r2, [pc, #96]	; (8003488 <HAL_TIM_Base_Start_IT+0xd4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d004      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0x80>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a17      	ldr	r2, [pc, #92]	; (800348c <HAL_TIM_Base_Start_IT+0xd8>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d111      	bne.n	8003458 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b06      	cmp	r3, #6
 8003444:	d010      	beq.n	8003468 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 0201 	orr.w	r2, r2, #1
 8003454:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003456:	e007      	b.n	8003468 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0201 	orr.w	r2, r2, #1
 8003466:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr
 8003474:	40010000 	.word	0x40010000
 8003478:	40000400 	.word	0x40000400
 800347c:	40000800 	.word	0x40000800
 8003480:	40000c00 	.word	0x40000c00
 8003484:	40010400 	.word	0x40010400
 8003488:	40014000 	.word	0x40014000
 800348c:	40001800 	.word	0x40001800

08003490 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d122      	bne.n	80034ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d11b      	bne.n	80034ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f06f 0202 	mvn.w	r2, #2
 80034bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f8f6 	bl	80036c4 <HAL_TIM_IC_CaptureCallback>
 80034d8:	e005      	b.n	80034e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f8e9 	bl	80036b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f8f8 	bl	80036d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d122      	bne.n	8003540 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b04      	cmp	r3, #4
 8003506:	d11b      	bne.n	8003540 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f06f 0204 	mvn.w	r2, #4
 8003510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2202      	movs	r2, #2
 8003516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f8cc 	bl	80036c4 <HAL_TIM_IC_CaptureCallback>
 800352c:	e005      	b.n	800353a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f8bf 	bl	80036b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f8ce 	bl	80036d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b08      	cmp	r3, #8
 800354c:	d122      	bne.n	8003594 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b08      	cmp	r3, #8
 800355a:	d11b      	bne.n	8003594 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0208 	mvn.w	r2, #8
 8003564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2204      	movs	r2, #4
 800356a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f8a2 	bl	80036c4 <HAL_TIM_IC_CaptureCallback>
 8003580:	e005      	b.n	800358e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f895 	bl	80036b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f8a4 	bl	80036d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	f003 0310 	and.w	r3, r3, #16
 800359e:	2b10      	cmp	r3, #16
 80035a0:	d122      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f003 0310 	and.w	r3, r3, #16
 80035ac:	2b10      	cmp	r3, #16
 80035ae:	d11b      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f06f 0210 	mvn.w	r2, #16
 80035b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2208      	movs	r2, #8
 80035be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f878 	bl	80036c4 <HAL_TIM_IC_CaptureCallback>
 80035d4:	e005      	b.n	80035e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f86b 	bl	80036b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f87a 	bl	80036d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d10e      	bne.n	8003614 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b01      	cmp	r3, #1
 8003602:	d107      	bne.n	8003614 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f06f 0201 	mvn.w	r2, #1
 800360c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f846 	bl	80036a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361e:	2b80      	cmp	r3, #128	; 0x80
 8003620:	d10e      	bne.n	8003640 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362c:	2b80      	cmp	r3, #128	; 0x80
 800362e:	d107      	bne.n	8003640 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f905 	bl	800384a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364a:	2b40      	cmp	r3, #64	; 0x40
 800364c:	d10e      	bne.n	800366c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003658:	2b40      	cmp	r3, #64	; 0x40
 800365a:	d107      	bne.n	800366c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f83e 	bl	80036e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	2b20      	cmp	r3, #32
 8003678:	d10e      	bne.n	8003698 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f003 0320 	and.w	r3, r3, #32
 8003684:	2b20      	cmp	r3, #32
 8003686:	d107      	bne.n	8003698 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0220 	mvn.w	r2, #32
 8003690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f8d0 	bl	8003838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003698:	bf00      	nop
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr

080036b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr

080036d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr

080036e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr
	...

080036fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a3f      	ldr	r2, [pc, #252]	; (800380c <TIM_Base_SetConfig+0x110>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d013      	beq.n	800373c <TIM_Base_SetConfig+0x40>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371a:	d00f      	beq.n	800373c <TIM_Base_SetConfig+0x40>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a3c      	ldr	r2, [pc, #240]	; (8003810 <TIM_Base_SetConfig+0x114>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d00b      	beq.n	800373c <TIM_Base_SetConfig+0x40>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a3b      	ldr	r2, [pc, #236]	; (8003814 <TIM_Base_SetConfig+0x118>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d007      	beq.n	800373c <TIM_Base_SetConfig+0x40>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a3a      	ldr	r2, [pc, #232]	; (8003818 <TIM_Base_SetConfig+0x11c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d003      	beq.n	800373c <TIM_Base_SetConfig+0x40>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a39      	ldr	r2, [pc, #228]	; (800381c <TIM_Base_SetConfig+0x120>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d108      	bne.n	800374e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003742:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	4313      	orrs	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a2e      	ldr	r2, [pc, #184]	; (800380c <TIM_Base_SetConfig+0x110>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d02b      	beq.n	80037ae <TIM_Base_SetConfig+0xb2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800375c:	d027      	beq.n	80037ae <TIM_Base_SetConfig+0xb2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a2b      	ldr	r2, [pc, #172]	; (8003810 <TIM_Base_SetConfig+0x114>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d023      	beq.n	80037ae <TIM_Base_SetConfig+0xb2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a2a      	ldr	r2, [pc, #168]	; (8003814 <TIM_Base_SetConfig+0x118>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d01f      	beq.n	80037ae <TIM_Base_SetConfig+0xb2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a29      	ldr	r2, [pc, #164]	; (8003818 <TIM_Base_SetConfig+0x11c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d01b      	beq.n	80037ae <TIM_Base_SetConfig+0xb2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a28      	ldr	r2, [pc, #160]	; (800381c <TIM_Base_SetConfig+0x120>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d017      	beq.n	80037ae <TIM_Base_SetConfig+0xb2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a27      	ldr	r2, [pc, #156]	; (8003820 <TIM_Base_SetConfig+0x124>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d013      	beq.n	80037ae <TIM_Base_SetConfig+0xb2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a26      	ldr	r2, [pc, #152]	; (8003824 <TIM_Base_SetConfig+0x128>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00f      	beq.n	80037ae <TIM_Base_SetConfig+0xb2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a25      	ldr	r2, [pc, #148]	; (8003828 <TIM_Base_SetConfig+0x12c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00b      	beq.n	80037ae <TIM_Base_SetConfig+0xb2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a24      	ldr	r2, [pc, #144]	; (800382c <TIM_Base_SetConfig+0x130>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d007      	beq.n	80037ae <TIM_Base_SetConfig+0xb2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a23      	ldr	r2, [pc, #140]	; (8003830 <TIM_Base_SetConfig+0x134>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d003      	beq.n	80037ae <TIM_Base_SetConfig+0xb2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a22      	ldr	r2, [pc, #136]	; (8003834 <TIM_Base_SetConfig+0x138>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d108      	bne.n	80037c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4313      	orrs	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a09      	ldr	r2, [pc, #36]	; (800380c <TIM_Base_SetConfig+0x110>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d003      	beq.n	80037f4 <TIM_Base_SetConfig+0xf8>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a0b      	ldr	r2, [pc, #44]	; (800381c <TIM_Base_SetConfig+0x120>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d103      	bne.n	80037fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	691a      	ldr	r2, [r3, #16]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	615a      	str	r2, [r3, #20]
}
 8003802:	bf00      	nop
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr
 800380c:	40010000 	.word	0x40010000
 8003810:	40000400 	.word	0x40000400
 8003814:	40000800 	.word	0x40000800
 8003818:	40000c00 	.word	0x40000c00
 800381c:	40010400 	.word	0x40010400
 8003820:	40014000 	.word	0x40014000
 8003824:	40014400 	.word	0x40014400
 8003828:	40014800 	.word	0x40014800
 800382c:	40001800 	.word	0x40001800
 8003830:	40001c00 	.word	0x40001c00
 8003834:	40002000 	.word	0x40002000

08003838 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr

0800384a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr

0800385c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800385c:	b084      	sub	sp, #16
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	f107 001c 	add.w	r0, r7, #28
 800386a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800386e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003870:	2b01      	cmp	r3, #1
 8003872:	d122      	bne.n	80038ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003878:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800389c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d105      	bne.n	80038ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f001 fafa 	bl	8004ea8 <USB_CoreReset>
 80038b4:	4603      	mov	r3, r0
 80038b6:	73fb      	strb	r3, [r7, #15]
 80038b8:	e010      	b.n	80038dc <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f001 faee 	bl	8004ea8 <USB_CoreReset>
 80038cc:	4603      	mov	r3, r0
 80038ce:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80038dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d10b      	bne.n	80038fa <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f043 0206 	orr.w	r2, r3, #6
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f043 0220 	orr.w	r2, r3, #32
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003906:	b004      	add	sp, #16
 8003908:	4770      	bx	lr
	...

0800390c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	4613      	mov	r3, r2
 8003918:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	2b02      	cmp	r3, #2
 800391e:	d165      	bne.n	80039ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	4a41      	ldr	r2, [pc, #260]	; (8003a28 <USB_SetTurnaroundTime+0x11c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d906      	bls.n	8003936 <USB_SetTurnaroundTime+0x2a>
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4a40      	ldr	r2, [pc, #256]	; (8003a2c <USB_SetTurnaroundTime+0x120>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d802      	bhi.n	8003936 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003930:	230f      	movs	r3, #15
 8003932:	617b      	str	r3, [r7, #20]
 8003934:	e062      	b.n	80039fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	4a3c      	ldr	r2, [pc, #240]	; (8003a2c <USB_SetTurnaroundTime+0x120>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d906      	bls.n	800394c <USB_SetTurnaroundTime+0x40>
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4a3b      	ldr	r2, [pc, #236]	; (8003a30 <USB_SetTurnaroundTime+0x124>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d802      	bhi.n	800394c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003946:	230e      	movs	r3, #14
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	e057      	b.n	80039fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4a38      	ldr	r2, [pc, #224]	; (8003a30 <USB_SetTurnaroundTime+0x124>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d906      	bls.n	8003962 <USB_SetTurnaroundTime+0x56>
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	4a37      	ldr	r2, [pc, #220]	; (8003a34 <USB_SetTurnaroundTime+0x128>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d802      	bhi.n	8003962 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800395c:	230d      	movs	r3, #13
 800395e:	617b      	str	r3, [r7, #20]
 8003960:	e04c      	b.n	80039fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	4a33      	ldr	r2, [pc, #204]	; (8003a34 <USB_SetTurnaroundTime+0x128>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d906      	bls.n	8003978 <USB_SetTurnaroundTime+0x6c>
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	4a32      	ldr	r2, [pc, #200]	; (8003a38 <USB_SetTurnaroundTime+0x12c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d802      	bhi.n	8003978 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003972:	230c      	movs	r3, #12
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	e041      	b.n	80039fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	4a2f      	ldr	r2, [pc, #188]	; (8003a38 <USB_SetTurnaroundTime+0x12c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d906      	bls.n	800398e <USB_SetTurnaroundTime+0x82>
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4a2e      	ldr	r2, [pc, #184]	; (8003a3c <USB_SetTurnaroundTime+0x130>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d802      	bhi.n	800398e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003988:	230b      	movs	r3, #11
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	e036      	b.n	80039fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	4a2a      	ldr	r2, [pc, #168]	; (8003a3c <USB_SetTurnaroundTime+0x130>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d906      	bls.n	80039a4 <USB_SetTurnaroundTime+0x98>
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	4a29      	ldr	r2, [pc, #164]	; (8003a40 <USB_SetTurnaroundTime+0x134>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d802      	bhi.n	80039a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800399e:	230a      	movs	r3, #10
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	e02b      	b.n	80039fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	4a26      	ldr	r2, [pc, #152]	; (8003a40 <USB_SetTurnaroundTime+0x134>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d906      	bls.n	80039ba <USB_SetTurnaroundTime+0xae>
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	4a25      	ldr	r2, [pc, #148]	; (8003a44 <USB_SetTurnaroundTime+0x138>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d802      	bhi.n	80039ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80039b4:	2309      	movs	r3, #9
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	e020      	b.n	80039fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	4a21      	ldr	r2, [pc, #132]	; (8003a44 <USB_SetTurnaroundTime+0x138>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d906      	bls.n	80039d0 <USB_SetTurnaroundTime+0xc4>
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	4a20      	ldr	r2, [pc, #128]	; (8003a48 <USB_SetTurnaroundTime+0x13c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d802      	bhi.n	80039d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80039ca:	2308      	movs	r3, #8
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	e015      	b.n	80039fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	4a1d      	ldr	r2, [pc, #116]	; (8003a48 <USB_SetTurnaroundTime+0x13c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d906      	bls.n	80039e6 <USB_SetTurnaroundTime+0xda>
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	4a1c      	ldr	r2, [pc, #112]	; (8003a4c <USB_SetTurnaroundTime+0x140>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d802      	bhi.n	80039e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80039e0:	2307      	movs	r3, #7
 80039e2:	617b      	str	r3, [r7, #20]
 80039e4:	e00a      	b.n	80039fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80039e6:	2306      	movs	r3, #6
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	e007      	b.n	80039fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d102      	bne.n	80039f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80039f2:	2309      	movs	r3, #9
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	e001      	b.n	80039fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80039f8:	2309      	movs	r3, #9
 80039fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	029b      	lsls	r3, r3, #10
 8003a10:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003a14:	431a      	orrs	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	371c      	adds	r7, #28
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	00d8acbf 	.word	0x00d8acbf
 8003a2c:	00e4e1bf 	.word	0x00e4e1bf
 8003a30:	00f423ff 	.word	0x00f423ff
 8003a34:	0106737f 	.word	0x0106737f
 8003a38:	011a499f 	.word	0x011a499f
 8003a3c:	01312cff 	.word	0x01312cff
 8003a40:	014ca43f 	.word	0x014ca43f
 8003a44:	016e35ff 	.word	0x016e35ff
 8003a48:	01a6ab1f 	.word	0x01a6ab1f
 8003a4c:	01e847ff 	.word	0x01e847ff

08003a50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f043 0201 	orr.w	r2, r3, #1
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr

08003a70 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f023 0201 	bic.w	r2, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr

08003a90 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d115      	bne.n	8003ade <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003abe:	2001      	movs	r0, #1
 8003ac0:	f7fd fbce 	bl	8001260 <HAL_Delay>
      ms++;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f001 f961 	bl	8004d92 <USB_GetMode>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d01e      	beq.n	8003b14 <USB_SetCurrentMode+0x84>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2b31      	cmp	r3, #49	; 0x31
 8003ada:	d9f0      	bls.n	8003abe <USB_SetCurrentMode+0x2e>
 8003adc:	e01a      	b.n	8003b14 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003ade:	78fb      	ldrb	r3, [r7, #3]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d115      	bne.n	8003b10 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003af0:	2001      	movs	r0, #1
 8003af2:	f7fd fbb5 	bl	8001260 <HAL_Delay>
      ms++;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	3301      	adds	r3, #1
 8003afa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f001 f948 	bl	8004d92 <USB_GetMode>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <USB_SetCurrentMode+0x84>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2b31      	cmp	r3, #49	; 0x31
 8003b0c:	d9f0      	bls.n	8003af0 <USB_SetCurrentMode+0x60>
 8003b0e:	e001      	b.n	8003b14 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e005      	b.n	8003b20 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2b32      	cmp	r3, #50	; 0x32
 8003b18:	d101      	bne.n	8003b1e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b28:	b084      	sub	sp, #16
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b086      	sub	sp, #24
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003b36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003b42:	2300      	movs	r3, #0
 8003b44:	613b      	str	r3, [r7, #16]
 8003b46:	e009      	b.n	8003b5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	3340      	adds	r3, #64	; 0x40
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	2200      	movs	r2, #0
 8003b54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	613b      	str	r3, [r7, #16]
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	2b0e      	cmp	r3, #14
 8003b60:	d9f2      	bls.n	8003b48 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d11c      	bne.n	8003ba2 <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b76:	f043 0302 	orr.w	r3, r3, #2
 8003b7a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b98:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	639a      	str	r2, [r3, #56]	; 0x38
 8003ba0:	e00b      	b.n	8003bba <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bcc:	4619      	mov	r1, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	680b      	ldr	r3, [r1, #0]
 8003bd8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d10c      	bne.n	8003bfa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d104      	bne.n	8003bf0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003be6:	2100      	movs	r1, #0
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f945 	bl	8003e78 <USB_SetDevSpeed>
 8003bee:	e008      	b.n	8003c02 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f940 	bl	8003e78 <USB_SetDevSpeed>
 8003bf8:	e003      	b.n	8003c02 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003bfa:	2103      	movs	r1, #3
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f93b 	bl	8003e78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003c02:	2110      	movs	r1, #16
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f8f3 	bl	8003df0 <USB_FlushTxFifo>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f90f 	bl	8003e38 <USB_FlushRxFifo>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c36:	461a      	mov	r2, r3
 8003c38:	2300      	movs	r3, #0
 8003c3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c42:	461a      	mov	r2, r3
 8003c44:	2300      	movs	r3, #0
 8003c46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c48:	2300      	movs	r3, #0
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	e043      	b.n	8003cd6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c64:	d118      	bne.n	8003c98 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10a      	bne.n	8003c82 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c78:	461a      	mov	r2, r3
 8003c7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c7e:	6013      	str	r3, [r2, #0]
 8003c80:	e013      	b.n	8003caa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	015a      	lsls	r2, r3, #5
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	e008      	b.n	8003caa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	2300      	movs	r3, #0
 8003cba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc8:	461a      	mov	r2, r3
 8003cca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d3b7      	bcc.n	8003c4e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cde:	2300      	movs	r3, #0
 8003ce0:	613b      	str	r3, [r7, #16]
 8003ce2:	e043      	b.n	8003d6c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cfa:	d118      	bne.n	8003d2e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10a      	bne.n	8003d18 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0e:	461a      	mov	r2, r3
 8003d10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	e013      	b.n	8003d40 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d24:	461a      	mov	r2, r3
 8003d26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d2a:	6013      	str	r3, [r2, #0]
 8003d2c:	e008      	b.n	8003d40 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	2300      	movs	r3, #0
 8003d50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5e:	461a      	mov	r2, r3
 8003d60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d3b7      	bcc.n	8003ce4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d86:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003d94:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d105      	bne.n	8003da8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	f043 0210 	orr.w	r2, r3, #16
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699a      	ldr	r2, [r3, #24]
 8003dac:	4b0f      	ldr	r3, [pc, #60]	; (8003dec <USB_DevInit+0x2c4>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d005      	beq.n	8003dc6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	f043 0208 	orr.w	r2, r3, #8
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d107      	bne.n	8003ddc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003dd4:	f043 0304 	orr.w	r3, r3, #4
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003de8:	b004      	add	sp, #16
 8003dea:	4770      	bx	lr
 8003dec:	803c3800 	.word	0x803c3800

08003df0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	019b      	lsls	r3, r3, #6
 8003e02:	f043 0220 	orr.w	r2, r3, #32
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4a08      	ldr	r2, [pc, #32]	; (8003e34 <USB_FlushTxFifo+0x44>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d901      	bls.n	8003e1c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e006      	b.n	8003e2a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	f003 0320 	and.w	r3, r3, #32
 8003e24:	2b20      	cmp	r3, #32
 8003e26:	d0f0      	beq.n	8003e0a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bc80      	pop	{r7}
 8003e32:	4770      	bx	lr
 8003e34:	00030d40 	.word	0x00030d40

08003e38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2210      	movs	r2, #16
 8003e48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4a08      	ldr	r2, [pc, #32]	; (8003e74 <USB_FlushRxFifo+0x3c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d901      	bls.n	8003e5c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e006      	b.n	8003e6a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b10      	cmp	r3, #16
 8003e66:	d0f0      	beq.n	8003e4a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bc80      	pop	{r7}
 8003e72:	4770      	bx	lr
 8003e74:	00030d40 	.word	0x00030d40

08003e78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	68f9      	ldr	r1, [r7, #12]
 8003e94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr

08003ea8 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 0306 	and.w	r3, r3, #6
 8003ec0:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d102      	bne.n	8003ece <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	75fb      	strb	r3, [r7, #23]
 8003ecc:	e00a      	b.n	8003ee4 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d002      	beq.n	8003eda <USB_GetDevSpeed+0x32>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b06      	cmp	r3, #6
 8003ed8:	d102      	bne.n	8003ee0 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003eda:	2302      	movs	r3, #2
 8003edc:	75fb      	strb	r3, [r7, #23]
 8003ede:	e001      	b.n	8003ee4 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003ee0:	230f      	movs	r3, #15
 8003ee2:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	371c      	adds	r7, #28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bc80      	pop	{r7}
 8003eee:	4770      	bx	lr

08003ef0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	785b      	ldrb	r3, [r3, #1]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d13a      	bne.n	8003f82 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f12:	69da      	ldr	r2, [r3, #28]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	f003 030f 	and.w	r3, r3, #15
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	68f9      	ldr	r1, [r7, #12]
 8003f26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d155      	bne.n	8003ff0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	78db      	ldrb	r3, [r3, #3]
 8003f5e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f60:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	059b      	lsls	r3, r3, #22
 8003f66:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	0151      	lsls	r1, r2, #5
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	440a      	add	r2, r1
 8003f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f7e:	6013      	str	r3, [r2, #0]
 8003f80:	e036      	b.n	8003ff0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f88:	69da      	ldr	r2, [r3, #28]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	2101      	movs	r1, #1
 8003f94:	fa01 f303 	lsl.w	r3, r1, r3
 8003f98:	041b      	lsls	r3, r3, #16
 8003f9a:	68f9      	ldr	r1, [r7, #12]
 8003f9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d11a      	bne.n	8003ff0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	78db      	ldrb	r3, [r3, #3]
 8003fd4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003fd6:	430b      	orrs	r3, r1
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	0151      	lsls	r1, r2, #5
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	440a      	add	r2, r1
 8003fe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr

08003ffc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	785b      	ldrb	r3, [r3, #1]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d161      	bne.n	80040dc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4413      	add	r3, r2
 8004020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800402a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800402e:	d11f      	bne.n	8004070 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	0151      	lsls	r1, r2, #5
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	440a      	add	r2, r1
 8004046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800404a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800404e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	0151      	lsls	r1, r2, #5
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	440a      	add	r2, r1
 8004066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800406a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800406e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	f003 030f 	and.w	r3, r3, #15
 8004080:	2101      	movs	r1, #1
 8004082:	fa01 f303 	lsl.w	r3, r1, r3
 8004086:	b29b      	uxth	r3, r3
 8004088:	43db      	mvns	r3, r3
 800408a:	68f9      	ldr	r1, [r7, #12]
 800408c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004090:	4013      	ands	r3, r2
 8004092:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409a:	69da      	ldr	r2, [r3, #28]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	f003 030f 	and.w	r3, r3, #15
 80040a4:	2101      	movs	r1, #1
 80040a6:	fa01 f303 	lsl.w	r3, r1, r3
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	43db      	mvns	r3, r3
 80040ae:	68f9      	ldr	r1, [r7, #12]
 80040b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040b4:	4013      	ands	r3, r2
 80040b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	0159      	lsls	r1, r3, #5
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	440b      	add	r3, r1
 80040ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d2:	4619      	mov	r1, r3
 80040d4:	4b35      	ldr	r3, [pc, #212]	; (80041ac <USB_DeactivateEndpoint+0x1b0>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	600b      	str	r3, [r1, #0]
 80040da:	e060      	b.n	800419e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040f2:	d11f      	bne.n	8004134 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	0151      	lsls	r1, r2, #5
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	440a      	add	r2, r1
 800410a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800410e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004112:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4413      	add	r3, r2
 800411c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	0151      	lsls	r1, r2, #5
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	440a      	add	r2, r1
 800412a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800412e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004132:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	2101      	movs	r1, #1
 8004146:	fa01 f303 	lsl.w	r3, r1, r3
 800414a:	041b      	lsls	r3, r3, #16
 800414c:	43db      	mvns	r3, r3
 800414e:	68f9      	ldr	r1, [r7, #12]
 8004150:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004154:	4013      	ands	r3, r2
 8004156:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800415e:	69da      	ldr	r2, [r3, #28]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	f003 030f 	and.w	r3, r3, #15
 8004168:	2101      	movs	r1, #1
 800416a:	fa01 f303 	lsl.w	r3, r1, r3
 800416e:	041b      	lsls	r3, r3, #16
 8004170:	43db      	mvns	r3, r3
 8004172:	68f9      	ldr	r1, [r7, #12]
 8004174:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004178:	4013      	ands	r3, r2
 800417a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4413      	add	r3, r2
 8004184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	0159      	lsls	r1, r3, #5
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	440b      	add	r3, r1
 8004192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004196:	4619      	mov	r1, r3
 8004198:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <USB_DeactivateEndpoint+0x1b4>)
 800419a:	4013      	ands	r3, r2
 800419c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	ec337800 	.word	0xec337800
 80041b0:	eff37800 	.word	0xeff37800

080041b4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b08a      	sub	sp, #40	; 0x28
 80041b8:	af02      	add	r7, sp, #8
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	4613      	mov	r3, r2
 80041c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	785b      	ldrb	r3, [r3, #1]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	f040 815c 	bne.w	800448e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d132      	bne.n	8004244 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	0151      	lsls	r1, r2, #5
 80041f0:	69fa      	ldr	r2, [r7, #28]
 80041f2:	440a      	add	r2, r1
 80041f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004200:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	0151      	lsls	r1, r2, #5
 8004214:	69fa      	ldr	r2, [r7, #28]
 8004216:	440a      	add	r2, r1
 8004218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800421c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004220:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	4413      	add	r3, r2
 800422a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	0151      	lsls	r1, r2, #5
 8004234:	69fa      	ldr	r2, [r7, #28]
 8004236:	440a      	add	r2, r1
 8004238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800423c:	0cdb      	lsrs	r3, r3, #19
 800423e:	04db      	lsls	r3, r3, #19
 8004240:	6113      	str	r3, [r2, #16]
 8004242:	e074      	b.n	800432e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	0151      	lsls	r1, r2, #5
 8004256:	69fa      	ldr	r2, [r7, #28]
 8004258:	440a      	add	r2, r1
 800425a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800425e:	0cdb      	lsrs	r3, r3, #19
 8004260:	04db      	lsls	r3, r3, #19
 8004262:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	0151      	lsls	r1, r2, #5
 8004276:	69fa      	ldr	r2, [r7, #28]
 8004278:	440a      	add	r2, r1
 800427a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800427e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004282:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004286:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	4413      	add	r3, r2
 8004290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004294:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	6959      	ldr	r1, [r3, #20]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	440b      	add	r3, r1
 80042a0:	1e59      	subs	r1, r3, #1
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80042aa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80042ac:	4b9d      	ldr	r3, [pc, #628]	; (8004524 <USB_EPStartXfer+0x370>)
 80042ae:	400b      	ands	r3, r1
 80042b0:	69b9      	ldr	r1, [r7, #24]
 80042b2:	0148      	lsls	r0, r1, #5
 80042b4:	69f9      	ldr	r1, [r7, #28]
 80042b6:	4401      	add	r1, r0
 80042b8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80042bc:	4313      	orrs	r3, r2
 80042be:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042cc:	691a      	ldr	r2, [r3, #16]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d6:	69b9      	ldr	r1, [r7, #24]
 80042d8:	0148      	lsls	r0, r1, #5
 80042da:	69f9      	ldr	r1, [r7, #28]
 80042dc:	4401      	add	r1, r0
 80042de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80042e2:	4313      	orrs	r3, r2
 80042e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	78db      	ldrb	r3, [r3, #3]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d11f      	bne.n	800432e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	0151      	lsls	r1, r2, #5
 8004300:	69fa      	ldr	r2, [r7, #28]
 8004302:	440a      	add	r2, r1
 8004304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004308:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800430c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	4413      	add	r3, r2
 8004316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	0151      	lsls	r1, r2, #5
 8004320:	69fa      	ldr	r2, [r7, #28]
 8004322:	440a      	add	r2, r1
 8004324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004328:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800432c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800432e:	79fb      	ldrb	r3, [r7, #7]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d14b      	bne.n	80043cc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d009      	beq.n	8004350 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	4413      	add	r3, r2
 8004344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004348:	461a      	mov	r2, r3
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	78db      	ldrb	r3, [r3, #3]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d128      	bne.n	80043aa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004364:	2b00      	cmp	r3, #0
 8004366:	d110      	bne.n	800438a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	0151      	lsls	r1, r2, #5
 800437a:	69fa      	ldr	r2, [r7, #28]
 800437c:	440a      	add	r2, r1
 800437e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004382:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004386:	6013      	str	r3, [r2, #0]
 8004388:	e00f      	b.n	80043aa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	4413      	add	r3, r2
 8004392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	0151      	lsls	r1, r2, #5
 800439c:	69fa      	ldr	r2, [r7, #28]
 800439e:	440a      	add	r2, r1
 80043a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	0151      	lsls	r1, r2, #5
 80043bc:	69fa      	ldr	r2, [r7, #28]
 80043be:	440a      	add	r2, r1
 80043c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	e12f      	b.n	800462c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	0151      	lsls	r1, r2, #5
 80043de:	69fa      	ldr	r2, [r7, #28]
 80043e0:	440a      	add	r2, r1
 80043e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	78db      	ldrb	r3, [r3, #3]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d015      	beq.n	8004420 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 8117 	beq.w	800462c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	2101      	movs	r1, #1
 8004410:	fa01 f303 	lsl.w	r3, r1, r3
 8004414:	69f9      	ldr	r1, [r7, #28]
 8004416:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800441a:	4313      	orrs	r3, r2
 800441c:	634b      	str	r3, [r1, #52]	; 0x34
 800441e:	e105      	b.n	800462c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442c:	2b00      	cmp	r3, #0
 800442e:	d110      	bne.n	8004452 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	0151      	lsls	r1, r2, #5
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	440a      	add	r2, r1
 8004446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800444a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800444e:	6013      	str	r3, [r2, #0]
 8004450:	e00f      	b.n	8004472 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	4413      	add	r3, r2
 800445a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	0151      	lsls	r1, r2, #5
 8004464:	69fa      	ldr	r2, [r7, #28]
 8004466:	440a      	add	r2, r1
 8004468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800446c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004470:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	68d9      	ldr	r1, [r3, #12]
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	781a      	ldrb	r2, [r3, #0]
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	b298      	uxth	r0, r3
 8004480:	79fb      	ldrb	r3, [r7, #7]
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	4603      	mov	r3, r0
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 fa2a 	bl	80048e0 <USB_WritePacket>
 800448c:	e0ce      	b.n	800462c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	015a      	lsls	r2, r3, #5
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	4413      	add	r3, r2
 8004496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	0151      	lsls	r1, r2, #5
 80044a0:	69fa      	ldr	r2, [r7, #28]
 80044a2:	440a      	add	r2, r1
 80044a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044a8:	0cdb      	lsrs	r3, r3, #19
 80044aa:	04db      	lsls	r3, r3, #19
 80044ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	0151      	lsls	r1, r2, #5
 80044c0:	69fa      	ldr	r2, [r7, #28]
 80044c2:	440a      	add	r2, r1
 80044c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044d0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d126      	bne.n	8004528 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044f0:	69b9      	ldr	r1, [r7, #24]
 80044f2:	0148      	lsls	r0, r1, #5
 80044f4:	69f9      	ldr	r1, [r7, #28]
 80044f6:	4401      	add	r1, r0
 80044f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044fc:	4313      	orrs	r3, r2
 80044fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	0151      	lsls	r1, r2, #5
 8004512:	69fa      	ldr	r2, [r7, #28]
 8004514:	440a      	add	r2, r1
 8004516:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800451a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800451e:	6113      	str	r3, [r2, #16]
 8004520:	e036      	b.n	8004590 <USB_EPStartXfer+0x3dc>
 8004522:	bf00      	nop
 8004524:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	695a      	ldr	r2, [r3, #20]
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	4413      	add	r3, r2
 8004532:	1e5a      	subs	r2, r3, #1
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	fbb2 f3f3 	udiv	r3, r2, r3
 800453c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	4413      	add	r3, r2
 8004546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	8afb      	ldrh	r3, [r7, #22]
 800454e:	04d9      	lsls	r1, r3, #19
 8004550:	4b39      	ldr	r3, [pc, #228]	; (8004638 <USB_EPStartXfer+0x484>)
 8004552:	400b      	ands	r3, r1
 8004554:	69b9      	ldr	r1, [r7, #24]
 8004556:	0148      	lsls	r0, r1, #5
 8004558:	69f9      	ldr	r1, [r7, #28]
 800455a:	4401      	add	r1, r0
 800455c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004560:	4313      	orrs	r3, r2
 8004562:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	4413      	add	r3, r2
 800456c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	8af9      	ldrh	r1, [r7, #22]
 8004578:	fb01 f303 	mul.w	r3, r1, r3
 800457c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004580:	69b9      	ldr	r1, [r7, #24]
 8004582:	0148      	lsls	r0, r1, #5
 8004584:	69f9      	ldr	r1, [r7, #28]
 8004586:	4401      	add	r1, r0
 8004588:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800458c:	4313      	orrs	r3, r2
 800458e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004590:	79fb      	ldrb	r3, [r7, #7]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d10d      	bne.n	80045b2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d009      	beq.n	80045b2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	68d9      	ldr	r1, [r3, #12]
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ae:	460a      	mov	r2, r1
 80045b0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	78db      	ldrb	r3, [r3, #3]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d128      	bne.n	800460c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d110      	bne.n	80045ec <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	0151      	lsls	r1, r2, #5
 80045dc:	69fa      	ldr	r2, [r7, #28]
 80045de:	440a      	add	r2, r1
 80045e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	e00f      	b.n	800460c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	0151      	lsls	r1, r2, #5
 80045fe:	69fa      	ldr	r2, [r7, #28]
 8004600:	440a      	add	r2, r1
 8004602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800460a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	0151      	lsls	r1, r2, #5
 800461e:	69fa      	ldr	r2, [r7, #28]
 8004620:	440a      	add	r2, r1
 8004622:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004626:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800462a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3720      	adds	r7, #32
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	1ff80000 	.word	0x1ff80000

0800463c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	4613      	mov	r3, r2
 8004648:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	785b      	ldrb	r3, [r3, #1]
 8004658:	2b01      	cmp	r3, #1
 800465a:	f040 80cd 	bne.w	80047f8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d132      	bne.n	80046cc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	4413      	add	r3, r2
 800466e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	0151      	lsls	r1, r2, #5
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	440a      	add	r2, r1
 800467c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004680:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004684:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004688:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	0151      	lsls	r1, r2, #5
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	440a      	add	r2, r1
 80046a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	0151      	lsls	r1, r2, #5
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	440a      	add	r2, r1
 80046c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046c4:	0cdb      	lsrs	r3, r3, #19
 80046c6:	04db      	lsls	r3, r3, #19
 80046c8:	6113      	str	r3, [r2, #16]
 80046ca:	e04e      	b.n	800476a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	0151      	lsls	r1, r2, #5
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	440a      	add	r2, r1
 80046e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046e6:	0cdb      	lsrs	r3, r3, #19
 80046e8:	04db      	lsls	r3, r3, #19
 80046ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	0151      	lsls	r1, r2, #5
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	440a      	add	r2, r1
 8004702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004706:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800470a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800470e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	695a      	ldr	r2, [r3, #20]
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	429a      	cmp	r2, r3
 800471a:	d903      	bls.n	8004724 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	0151      	lsls	r1, r2, #5
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	440a      	add	r2, r1
 800473a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800473e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004742:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	4413      	add	r3, r2
 800474c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004750:	691a      	ldr	r2, [r3, #16]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800475a:	6939      	ldr	r1, [r7, #16]
 800475c:	0148      	lsls	r0, r1, #5
 800475e:	6979      	ldr	r1, [r7, #20]
 8004760:	4401      	add	r1, r0
 8004762:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004766:	4313      	orrs	r3, r2
 8004768:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800476a:	79fb      	ldrb	r3, [r7, #7]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d11e      	bne.n	80047ae <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d009      	beq.n	800478c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004784:	461a      	mov	r2, r3
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	4413      	add	r3, r2
 8004794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	0151      	lsls	r1, r2, #5
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	440a      	add	r2, r1
 80047a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	e092      	b.n	80048d4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	0151      	lsls	r1, r2, #5
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	440a      	add	r2, r1
 80047c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047cc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d07e      	beq.n	80048d4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	2101      	movs	r1, #1
 80047e8:	fa01 f303 	lsl.w	r3, r1, r3
 80047ec:	6979      	ldr	r1, [r7, #20]
 80047ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047f2:	4313      	orrs	r3, r2
 80047f4:	634b      	str	r3, [r1, #52]	; 0x34
 80047f6:	e06d      	b.n	80048d4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	0151      	lsls	r1, r2, #5
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	440a      	add	r2, r1
 800480e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004812:	0cdb      	lsrs	r3, r3, #19
 8004814:	04db      	lsls	r3, r3, #19
 8004816:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	0151      	lsls	r1, r2, #5
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	440a      	add	r2, r1
 800482e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004832:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004836:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800483a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	0151      	lsls	r1, r2, #5
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	440a      	add	r2, r1
 8004862:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004866:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800486a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	4413      	add	r3, r2
 8004874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004878:	691a      	ldr	r2, [r3, #16]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004882:	6939      	ldr	r1, [r7, #16]
 8004884:	0148      	lsls	r0, r1, #5
 8004886:	6979      	ldr	r1, [r7, #20]
 8004888:	4401      	add	r1, r0
 800488a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800488e:	4313      	orrs	r3, r2
 8004890:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004892:	79fb      	ldrb	r3, [r7, #7]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d10d      	bne.n	80048b4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d009      	beq.n	80048b4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	68d9      	ldr	r1, [r3, #12]
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b0:	460a      	mov	r2, r1
 80048b2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	0151      	lsls	r1, r2, #5
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	440a      	add	r2, r1
 80048ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	371c      	adds	r7, #28
 80048da:	46bd      	mov	sp, r7
 80048dc:	bc80      	pop	{r7}
 80048de:	4770      	bx	lr

080048e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b089      	sub	sp, #36	; 0x24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	4611      	mov	r1, r2
 80048ec:	461a      	mov	r2, r3
 80048ee:	460b      	mov	r3, r1
 80048f0:	71fb      	strb	r3, [r7, #7]
 80048f2:	4613      	mov	r3, r2
 80048f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80048fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004902:	2b00      	cmp	r3, #0
 8004904:	d123      	bne.n	800494e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004906:	88bb      	ldrh	r3, [r7, #4]
 8004908:	3303      	adds	r3, #3
 800490a:	089b      	lsrs	r3, r3, #2
 800490c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800490e:	2300      	movs	r3, #0
 8004910:	61bb      	str	r3, [r7, #24]
 8004912:	e018      	b.n	8004946 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004914:	79fb      	ldrb	r3, [r7, #7]
 8004916:	031a      	lsls	r2, r3, #12
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	4413      	add	r3, r2
 800491c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004920:	461a      	mov	r2, r3
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	3301      	adds	r3, #1
 800492c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	3301      	adds	r3, #1
 8004932:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	3301      	adds	r3, #1
 8004938:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	3301      	adds	r3, #1
 800493e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	3301      	adds	r3, #1
 8004944:	61bb      	str	r3, [r7, #24]
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	429a      	cmp	r2, r3
 800494c:	d3e2      	bcc.n	8004914 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3724      	adds	r7, #36	; 0x24
 8004954:	46bd      	mov	sp, r7
 8004956:	bc80      	pop	{r7}
 8004958:	4770      	bx	lr

0800495a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800495a:	b480      	push	{r7}
 800495c:	b08b      	sub	sp, #44	; 0x2c
 800495e:	af00      	add	r7, sp, #0
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	4613      	mov	r3, r2
 8004966:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004970:	88fb      	ldrh	r3, [r7, #6]
 8004972:	089b      	lsrs	r3, r3, #2
 8004974:	b29b      	uxth	r3, r3
 8004976:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004978:	88fb      	ldrh	r3, [r7, #6]
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004980:	2300      	movs	r3, #0
 8004982:	623b      	str	r3, [r7, #32]
 8004984:	e014      	b.n	80049b0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	601a      	str	r2, [r3, #0]
    pDest++;
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	3301      	adds	r3, #1
 8004996:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	3301      	adds	r3, #1
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	3301      	adds	r3, #1
 80049a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	3301      	adds	r3, #1
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	3301      	adds	r3, #1
 80049ae:	623b      	str	r3, [r7, #32]
 80049b0:	6a3a      	ldr	r2, [r7, #32]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d3e6      	bcc.n	8004986 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80049b8:	8bfb      	ldrh	r3, [r7, #30]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d01e      	beq.n	80049fc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80049be:	2300      	movs	r3, #0
 80049c0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049c8:	461a      	mov	r2, r3
 80049ca:	f107 0310 	add.w	r3, r7, #16
 80049ce:	6812      	ldr	r2, [r2, #0]
 80049d0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	fa22 f303 	lsr.w	r3, r2, r3
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	701a      	strb	r2, [r3, #0]
      i++;
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	3301      	adds	r3, #1
 80049e8:	623b      	str	r3, [r7, #32]
      pDest++;
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	3301      	adds	r3, #1
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80049f0:	8bfb      	ldrh	r3, [r7, #30]
 80049f2:	3b01      	subs	r3, #1
 80049f4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80049f6:	8bfb      	ldrh	r3, [r7, #30]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1ea      	bne.n	80049d2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	372c      	adds	r7, #44	; 0x2c
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bc80      	pop	{r7}
 8004a06:	4770      	bx	lr

08004a08 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	785b      	ldrb	r3, [r3, #1]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d12c      	bne.n	8004a7e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	db12      	blt.n	8004a5c <USB_EPSetStall+0x54>
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00f      	beq.n	8004a5c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	0151      	lsls	r1, r2, #5
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	440a      	add	r2, r1
 8004a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a5a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	0151      	lsls	r1, r2, #5
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	440a      	add	r2, r1
 8004a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a7a:	6013      	str	r3, [r2, #0]
 8004a7c:	e02b      	b.n	8004ad6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	db12      	blt.n	8004ab6 <USB_EPSetStall+0xae>
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00f      	beq.n	8004ab6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	0151      	lsls	r1, r2, #5
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	440a      	add	r2, r1
 8004aac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ab0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ab4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	0151      	lsls	r1, r2, #5
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	440a      	add	r2, r1
 8004acc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ad0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ad4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bc80      	pop	{r7}
 8004ae0:	4770      	bx	lr

08004ae2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b085      	sub	sp, #20
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	785b      	ldrb	r3, [r3, #1]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d128      	bne.n	8004b50 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	015a      	lsls	r2, r3, #5
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	0151      	lsls	r1, r2, #5
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	440a      	add	r2, r1
 8004b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b1c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	78db      	ldrb	r3, [r3, #3]
 8004b22:	2b03      	cmp	r3, #3
 8004b24:	d003      	beq.n	8004b2e <USB_EPClearStall+0x4c>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	78db      	ldrb	r3, [r3, #3]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d138      	bne.n	8004ba0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	0151      	lsls	r1, r2, #5
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	440a      	add	r2, r1
 8004b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	e027      	b.n	8004ba0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	0151      	lsls	r1, r2, #5
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	440a      	add	r2, r1
 8004b66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	78db      	ldrb	r3, [r3, #3]
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d003      	beq.n	8004b80 <USB_EPClearStall+0x9e>
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	78db      	ldrb	r3, [r3, #3]
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d10f      	bne.n	8004ba0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	0151      	lsls	r1, r2, #5
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	440a      	add	r2, r1
 8004b96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bc80      	pop	{r7}
 8004baa:	4770      	bx	lr

08004bac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004bce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	78fb      	ldrb	r3, [r7, #3]
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004be0:	68f9      	ldr	r1, [r7, #12]
 8004be2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004be6:	4313      	orrs	r3, r2
 8004be8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bc80      	pop	{r7}
 8004bf4:	4770      	bx	lr

08004bf6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b085      	sub	sp, #20
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c10:	f023 0303 	bic.w	r3, r3, #3
 8004c14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c24:	f023 0302 	bic.w	r3, r3, #2
 8004c28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bc80      	pop	{r7}
 8004c34:	4770      	bx	lr

08004c36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b085      	sub	sp, #20
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c50:	f023 0303 	bic.w	r3, r3, #3
 8004c54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c64:	f043 0302 	orr.w	r3, r3, #2
 8004c68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bc80      	pop	{r7}
 8004c74:	4770      	bx	lr

08004c76 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b085      	sub	sp, #20
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bc80      	pop	{r7}
 8004c98:	4770      	bx	lr

08004c9a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b085      	sub	sp, #20
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	0c1b      	lsrs	r3, r3, #16
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bc80      	pop	{r7}
 8004cca:	4770      	bx	lr

08004ccc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	4013      	ands	r3, r2
 8004cee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	b29b      	uxth	r3, r3
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bc80      	pop	{r7}
 8004cfc:	4770      	bx	lr

08004cfe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b085      	sub	sp, #20
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	460b      	mov	r3, r1
 8004d08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004d0e:	78fb      	ldrb	r3, [r7, #3]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d2c:	68bb      	ldr	r3, [r7, #8]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr

08004d38 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004d5c:	78fb      	ldrb	r3, [r7, #3]
 8004d5e:	f003 030f 	and.w	r3, r3, #15
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	fa22 f303 	lsr.w	r3, r2, r3
 8004d68:	01db      	lsls	r3, r3, #7
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004d72:	78fb      	ldrb	r3, [r7, #3]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4013      	ands	r3, r2
 8004d84:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d86:	68bb      	ldr	r3, [r7, #8]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	371c      	adds	r7, #28
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bc80      	pop	{r7}
 8004d90:	4770      	bx	lr

08004d92 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bc80      	pop	{r7}
 8004daa:	4770      	bx	lr

08004dac <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004dca:	f023 0307 	bic.w	r3, r3, #7
 8004dce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bc80      	pop	{r7}
 8004dee:	4770      	bx	lr

08004df0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	333c      	adds	r3, #60	; 0x3c
 8004e06:	3304      	adds	r3, #4
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	4a25      	ldr	r2, [pc, #148]	; (8004ea4 <USB_EP0_OutStart+0xb4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d90a      	bls.n	8004e2a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e24:	d101      	bne.n	8004e2a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	e037      	b.n	8004e9a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e30:	461a      	mov	r2, r3
 8004e32:	2300      	movs	r3, #0
 8004e34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e58:	f043 0318 	orr.w	r3, r3, #24
 8004e5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e6c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004e70:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004e72:	7afb      	ldrb	r3, [r7, #11]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d10f      	bne.n	8004e98 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7e:	461a      	mov	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e92:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004e96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	371c      	adds	r7, #28
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc80      	pop	{r7}
 8004ea2:	4770      	bx	lr
 8004ea4:	4f54300a 	.word	0x4f54300a

08004ea8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4a12      	ldr	r2, [pc, #72]	; (8004f08 <USB_CoreReset+0x60>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d901      	bls.n	8004ec6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e01b      	b.n	8004efe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	daf2      	bge.n	8004eb4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f043 0201 	orr.w	r2, r3, #1
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4a08      	ldr	r2, [pc, #32]	; (8004f08 <USB_CoreReset+0x60>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d901      	bls.n	8004ef0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e006      	b.n	8004efe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d0f0      	beq.n	8004ede <USB_CoreReset+0x36>

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr
 8004f08:	00030d40 	.word	0x00030d40

08004f0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	460b      	mov	r3, r1
 8004f16:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	7c1b      	ldrb	r3, [r3, #16]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d115      	bne.n	8004f50 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004f24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f28:	2202      	movs	r2, #2
 8004f2a:	2181      	movs	r1, #129	; 0x81
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f001 ff30 	bl	8006d92 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	2101      	movs	r1, #1
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f001 ff26 	bl	8006d92 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004f4e:	e012      	b.n	8004f76 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004f50:	2340      	movs	r3, #64	; 0x40
 8004f52:	2202      	movs	r2, #2
 8004f54:	2181      	movs	r1, #129	; 0x81
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f001 ff1b 	bl	8006d92 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004f62:	2340      	movs	r3, #64	; 0x40
 8004f64:	2202      	movs	r2, #2
 8004f66:	2101      	movs	r1, #1
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f001 ff12 	bl	8006d92 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004f76:	2308      	movs	r3, #8
 8004f78:	2203      	movs	r2, #3
 8004f7a:	2182      	movs	r1, #130	; 0x82
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f001 ff08 	bl	8006d92 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004f88:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004f8c:	f002 f87e 	bl	800708c <malloc>
 8004f90:	4603      	mov	r3, r0
 8004f92:	461a      	mov	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d102      	bne.n	8004faa <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	73fb      	strb	r3, [r7, #15]
 8004fa8:	e026      	b.n	8004ff8 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fb0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	7c1b      	ldrb	r3, [r3, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d109      	bne.n	8004fe8 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fde:	2101      	movs	r1, #1
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f001 ffc6 	bl	8006f72 <USBD_LL_PrepareReceive>
 8004fe6:	e007      	b.n	8004ff8 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fee:	2340      	movs	r3, #64	; 0x40
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f001 ffbd 	bl	8006f72 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b084      	sub	sp, #16
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	460b      	mov	r3, r1
 800500c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005012:	2181      	movs	r1, #129	; 0x81
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f001 fee2 	bl	8006dde <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005020:	2101      	movs	r1, #1
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f001 fedb 	bl	8006dde <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005030:	2182      	movs	r1, #130	; 0x82
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f001 fed3 	bl	8006dde <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00e      	beq.n	8005066 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005058:	4618      	mov	r0, r3
 800505a:	f002 f81f 	bl	800709c <free>
    pdev->pClassData = NULL;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005066:	7bfb      	ldrb	r3, [r7, #15]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005080:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005082:	2300      	movs	r3, #0
 8005084:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005096:	2b00      	cmp	r3, #0
 8005098:	d039      	beq.n	800510e <USBD_CDC_Setup+0x9e>
 800509a:	2b20      	cmp	r3, #32
 800509c:	d17c      	bne.n	8005198 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	88db      	ldrh	r3, [r3, #6]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d029      	beq.n	80050fa <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	b25b      	sxtb	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	da11      	bge.n	80050d4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80050bc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	88d2      	ldrh	r2, [r2, #6]
 80050c2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80050c4:	6939      	ldr	r1, [r7, #16]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	88db      	ldrh	r3, [r3, #6]
 80050ca:	461a      	mov	r2, r3
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f001 fa31 	bl	8006534 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80050d2:	e068      	b.n	80051a6 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	785a      	ldrb	r2, [r3, #1]
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	88db      	ldrh	r3, [r3, #6]
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80050ea:	6939      	ldr	r1, [r7, #16]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	88db      	ldrh	r3, [r3, #6]
 80050f0:	461a      	mov	r2, r3
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f001 fa4c 	bl	8006590 <USBD_CtlPrepareRx>
      break;
 80050f8:	e055      	b.n	80051a6 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	7850      	ldrb	r0, [r2, #1]
 8005106:	2200      	movs	r2, #0
 8005108:	6839      	ldr	r1, [r7, #0]
 800510a:	4798      	blx	r3
      break;
 800510c:	e04b      	b.n	80051a6 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	785b      	ldrb	r3, [r3, #1]
 8005112:	2b0a      	cmp	r3, #10
 8005114:	d017      	beq.n	8005146 <USBD_CDC_Setup+0xd6>
 8005116:	2b0b      	cmp	r3, #11
 8005118:	d029      	beq.n	800516e <USBD_CDC_Setup+0xfe>
 800511a:	2b00      	cmp	r3, #0
 800511c:	d133      	bne.n	8005186 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005124:	2b03      	cmp	r3, #3
 8005126:	d107      	bne.n	8005138 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005128:	f107 030c 	add.w	r3, r7, #12
 800512c:	2202      	movs	r2, #2
 800512e:	4619      	mov	r1, r3
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f001 f9ff 	bl	8006534 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005136:	e02e      	b.n	8005196 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005138:	6839      	ldr	r1, [r7, #0]
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f001 f990 	bl	8006460 <USBD_CtlError>
            ret = USBD_FAIL;
 8005140:	2302      	movs	r3, #2
 8005142:	75fb      	strb	r3, [r7, #23]
          break;
 8005144:	e027      	b.n	8005196 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800514c:	2b03      	cmp	r3, #3
 800514e:	d107      	bne.n	8005160 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005150:	f107 030f 	add.w	r3, r7, #15
 8005154:	2201      	movs	r2, #1
 8005156:	4619      	mov	r1, r3
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f001 f9eb 	bl	8006534 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800515e:	e01a      	b.n	8005196 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005160:	6839      	ldr	r1, [r7, #0]
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f001 f97c 	bl	8006460 <USBD_CtlError>
            ret = USBD_FAIL;
 8005168:	2302      	movs	r3, #2
 800516a:	75fb      	strb	r3, [r7, #23]
          break;
 800516c:	e013      	b.n	8005196 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005174:	2b03      	cmp	r3, #3
 8005176:	d00d      	beq.n	8005194 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005178:	6839      	ldr	r1, [r7, #0]
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f001 f970 	bl	8006460 <USBD_CtlError>
            ret = USBD_FAIL;
 8005180:	2302      	movs	r3, #2
 8005182:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005184:	e006      	b.n	8005194 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005186:	6839      	ldr	r1, [r7, #0]
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f001 f969 	bl	8006460 <USBD_CtlError>
          ret = USBD_FAIL;
 800518e:	2302      	movs	r3, #2
 8005190:	75fb      	strb	r3, [r7, #23]
          break;
 8005192:	e000      	b.n	8005196 <USBD_CDC_Setup+0x126>
          break;
 8005194:	bf00      	nop
      }
      break;
 8005196:	e006      	b.n	80051a6 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005198:	6839      	ldr	r1, [r7, #0]
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f001 f960 	bl	8006460 <USBD_CtlError>
      ret = USBD_FAIL;
 80051a0:	2302      	movs	r3, #2
 80051a2:	75fb      	strb	r3, [r7, #23]
      break;
 80051a4:	bf00      	nop
  }

  return ret;
 80051a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3718      	adds	r7, #24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	460b      	mov	r3, r1
 80051ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051c2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80051ca:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d03a      	beq.n	800524c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80051d6:	78fa      	ldrb	r2, [r7, #3]
 80051d8:	6879      	ldr	r1, [r7, #4]
 80051da:	4613      	mov	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	440b      	add	r3, r1
 80051e4:	331c      	adds	r3, #28
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d029      	beq.n	8005240 <USBD_CDC_DataIn+0x90>
 80051ec:	78fa      	ldrb	r2, [r7, #3]
 80051ee:	6879      	ldr	r1, [r7, #4]
 80051f0:	4613      	mov	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	440b      	add	r3, r1
 80051fa:	331c      	adds	r3, #28
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	78f9      	ldrb	r1, [r7, #3]
 8005200:	68b8      	ldr	r0, [r7, #8]
 8005202:	460b      	mov	r3, r1
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	1a5b      	subs	r3, r3, r1
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4403      	add	r3, r0
 800520c:	3344      	adds	r3, #68	; 0x44
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	fbb2 f1f3 	udiv	r1, r2, r3
 8005214:	fb03 f301 	mul.w	r3, r3, r1
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d110      	bne.n	8005240 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800521e:	78fa      	ldrb	r2, [r7, #3]
 8005220:	6879      	ldr	r1, [r7, #4]
 8005222:	4613      	mov	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	440b      	add	r3, r1
 800522c:	331c      	adds	r3, #28
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005232:	78f9      	ldrb	r1, [r7, #3]
 8005234:	2300      	movs	r3, #0
 8005236:	2200      	movs	r2, #0
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f001 fe77 	bl	8006f2c <USBD_LL_Transmit>
 800523e:	e003      	b.n	8005248 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	e000      	b.n	800524e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800524c:	2302      	movs	r3, #2
  }
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b084      	sub	sp, #16
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	460b      	mov	r3, r1
 8005260:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005268:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800526a:	78fb      	ldrb	r3, [r7, #3]
 800526c:	4619      	mov	r1, r3
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f001 fea2 	bl	8006fb8 <USBD_LL_GetRxDataSize>
 8005274:	4602      	mov	r2, r0
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00d      	beq.n	80052a2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800529a:	4611      	mov	r1, r2
 800529c:	4798      	blx	r3

    return USBD_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	e000      	b.n	80052a4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80052a2:	2302      	movs	r3, #2
  }
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052ba:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d015      	beq.n	80052f2 <USBD_CDC_EP0_RxReady+0x46>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80052cc:	2bff      	cmp	r3, #255	; 0xff
 80052ce:	d010      	beq.n	80052f2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80052de:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80052e6:	b292      	uxth	r2, r2
 80052e8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	22ff      	movs	r2, #255	; 0xff
 80052ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2243      	movs	r2, #67	; 0x43
 8005308:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800530a:	4b03      	ldr	r3, [pc, #12]	; (8005318 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800530c:	4618      	mov	r0, r3
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	bc80      	pop	{r7}
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	20000094 	.word	0x20000094

0800531c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2243      	movs	r2, #67	; 0x43
 8005328:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800532a:	4b03      	ldr	r3, [pc, #12]	; (8005338 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800532c:	4618      	mov	r0, r3
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	bc80      	pop	{r7}
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	20000050 	.word	0x20000050

0800533c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2243      	movs	r2, #67	; 0x43
 8005348:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800534a:	4b03      	ldr	r3, [pc, #12]	; (8005358 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800534c:	4618      	mov	r0, r3
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	bc80      	pop	{r7}
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	200000d8 	.word	0x200000d8

0800535c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	220a      	movs	r2, #10
 8005368:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800536a:	4b03      	ldr	r3, [pc, #12]	; (8005378 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800536c:	4618      	mov	r0, r3
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	bc80      	pop	{r7}
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	2000000c 	.word	0x2000000c

0800537c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005386:	2302      	movs	r3, #2
 8005388:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d005      	beq.n	800539c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800539c:	7bfb      	ldrb	r3, [r7, #15]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bc80      	pop	{r7}
 80053a6:	4770      	bx	lr

080053a8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	4613      	mov	r3, r2
 80053b4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053bc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80053c6:	88fa      	ldrh	r2, [r7, #6]
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	371c      	adds	r7, #28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bc80      	pop	{r7}
 80053d8:	4770      	bx	lr

080053da <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80053da:	b480      	push	{r7}
 80053dc:	b085      	sub	sp, #20
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
 80053e2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053ea:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bc80      	pop	{r7}
 80053fe:	4770      	bx	lr

08005400 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800540e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005416:	2b00      	cmp	r3, #0
 8005418:	d01c      	beq.n	8005454 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005420:	2b00      	cmp	r3, #0
 8005422:	d115      	bne.n	8005450 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2201      	movs	r2, #1
 8005428:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005442:	b29b      	uxth	r3, r3
 8005444:	2181      	movs	r1, #129	; 0x81
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f001 fd70 	bl	8006f2c <USBD_LL_Transmit>

      return USBD_OK;
 800544c:	2300      	movs	r3, #0
 800544e:	e002      	b.n	8005456 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005450:	2301      	movs	r3, #1
 8005452:	e000      	b.n	8005456 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005454:	2302      	movs	r3, #2
  }
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b084      	sub	sp, #16
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800546c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005474:	2b00      	cmp	r3, #0
 8005476:	d017      	beq.n	80054a8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	7c1b      	ldrb	r3, [r3, #16]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d109      	bne.n	8005494 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005486:	f44f 7300 	mov.w	r3, #512	; 0x200
 800548a:	2101      	movs	r1, #1
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f001 fd70 	bl	8006f72 <USBD_LL_PrepareReceive>
 8005492:	e007      	b.n	80054a4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800549a:	2340      	movs	r3, #64	; 0x40
 800549c:	2101      	movs	r1, #1
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f001 fd67 	bl	8006f72 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80054a4:	2300      	movs	r3, #0
 80054a6:	e000      	b.n	80054aa <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80054a8:	2302      	movs	r3, #2
  }
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b084      	sub	sp, #16
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	60f8      	str	r0, [r7, #12]
 80054ba:	60b9      	str	r1, [r7, #8]
 80054bc:	4613      	mov	r3, r2
 80054be:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80054c6:	2302      	movs	r3, #2
 80054c8:	e01a      	b.n	8005500 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d003      	beq.n	80054dc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	79fa      	ldrb	r2, [r7, #7]
 80054f6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f001 fbe5 	bl	8006cc8 <USBD_LL_Init>

  return USBD_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d006      	beq.n	800552a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005524:	2300      	movs	r3, #0
 8005526:	73fb      	strb	r3, [r7, #15]
 8005528:	e001      	b.n	800552e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800552a:	2302      	movs	r3, #2
 800552c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800552e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	bc80      	pop	{r7}
 8005538:	4770      	bx	lr

0800553a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b082      	sub	sp, #8
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f001 fc0a 	bl	8006d5c <USBD_LL_Start>

  return USBD_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	bc80      	pop	{r7}
 8005564:	4770      	bx	lr

08005566 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b084      	sub	sp, #16
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	460b      	mov	r3, r1
 8005570:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005572:	2302      	movs	r3, #2
 8005574:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00c      	beq.n	800559a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	78fa      	ldrb	r2, [r7, #3]
 800558a:	4611      	mov	r1, r2
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	4798      	blx	r3
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800559a:	7bfb      	ldrb	r3, [r7, #15]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	460b      	mov	r3, r1
 80055ae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	78fa      	ldrb	r2, [r7, #3]
 80055ba:	4611      	mov	r1, r2
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	4798      	blx	r3

  return USBD_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b082      	sub	sp, #8
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
 80055d2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80055da:	6839      	ldr	r1, [r7, #0]
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 ff03 	bl	80063e8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80055f0:	461a      	mov	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80055fe:	f003 031f 	and.w	r3, r3, #31
 8005602:	2b01      	cmp	r3, #1
 8005604:	d00c      	beq.n	8005620 <USBD_LL_SetupStage+0x56>
 8005606:	2b01      	cmp	r3, #1
 8005608:	d302      	bcc.n	8005610 <USBD_LL_SetupStage+0x46>
 800560a:	2b02      	cmp	r3, #2
 800560c:	d010      	beq.n	8005630 <USBD_LL_SetupStage+0x66>
 800560e:	e017      	b.n	8005640 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005616:	4619      	mov	r1, r3
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fa03 	bl	8005a24 <USBD_StdDevReq>
      break;
 800561e:	e01a      	b.n	8005656 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005626:	4619      	mov	r1, r3
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 fa65 	bl	8005af8 <USBD_StdItfReq>
      break;
 800562e:	e012      	b.n	8005656 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005636:	4619      	mov	r1, r3
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 faa3 	bl	8005b84 <USBD_StdEPReq>
      break;
 800563e:	e00a      	b.n	8005656 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005646:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800564a:	b2db      	uxtb	r3, r3
 800564c:	4619      	mov	r1, r3
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f001 fbe4 	bl	8006e1c <USBD_LL_StallEP>
      break;
 8005654:	bf00      	nop
  }

  return USBD_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	460b      	mov	r3, r1
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800566e:	7afb      	ldrb	r3, [r7, #11]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d14b      	bne.n	800570c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800567a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005682:	2b03      	cmp	r3, #3
 8005684:	d134      	bne.n	80056f0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	68da      	ldr	r2, [r3, #12]
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	429a      	cmp	r2, r3
 8005690:	d919      	bls.n	80056c6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	68da      	ldr	r2, [r3, #12]
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	1ad2      	subs	r2, r2, r3
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	68da      	ldr	r2, [r3, #12]
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d203      	bcs.n	80056b4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	e002      	b.n	80056ba <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	461a      	mov	r2, r3
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 ff84 	bl	80065cc <USBD_CtlContinueRx>
 80056c4:	e038      	b.n	8005738 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80056d8:	2b03      	cmp	r3, #3
 80056da:	d105      	bne.n	80056e8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 ff81 	bl	80065f0 <USBD_CtlSendStatus>
 80056ee:	e023      	b.n	8005738 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80056f6:	2b05      	cmp	r3, #5
 80056f8:	d11e      	bne.n	8005738 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005702:	2100      	movs	r1, #0
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f001 fb89 	bl	8006e1c <USBD_LL_StallEP>
 800570a:	e015      	b.n	8005738 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00d      	beq.n	8005734 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800571e:	2b03      	cmp	r3, #3
 8005720:	d108      	bne.n	8005734 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	7afa      	ldrb	r2, [r7, #11]
 800572c:	4611      	mov	r1, r2
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	4798      	blx	r3
 8005732:	e001      	b.n	8005738 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005734:	2302      	movs	r3, #2
 8005736:	e000      	b.n	800573a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b086      	sub	sp, #24
 8005746:	af00      	add	r7, sp, #0
 8005748:	60f8      	str	r0, [r7, #12]
 800574a:	460b      	mov	r3, r1
 800574c:	607a      	str	r2, [r7, #4]
 800574e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005750:	7afb      	ldrb	r3, [r7, #11]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d17f      	bne.n	8005856 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	3314      	adds	r3, #20
 800575a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005762:	2b02      	cmp	r3, #2
 8005764:	d15c      	bne.n	8005820 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	429a      	cmp	r2, r3
 8005770:	d915      	bls.n	800579e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	68da      	ldr	r2, [r3, #12]
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	1ad2      	subs	r2, r2, r3
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	b29b      	uxth	r3, r3
 8005786:	461a      	mov	r2, r3
 8005788:	6879      	ldr	r1, [r7, #4]
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f000 feee 	bl	800656c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005790:	2300      	movs	r3, #0
 8005792:	2200      	movs	r2, #0
 8005794:	2100      	movs	r1, #0
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f001 fbeb 	bl	8006f72 <USBD_LL_PrepareReceive>
 800579c:	e04e      	b.n	800583c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	6912      	ldr	r2, [r2, #16]
 80057a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80057aa:	fb02 f201 	mul.w	r2, r2, r1
 80057ae:	1a9b      	subs	r3, r3, r2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d11c      	bne.n	80057ee <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80057bc:	429a      	cmp	r2, r3
 80057be:	d316      	bcc.n	80057ee <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d20f      	bcs.n	80057ee <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80057ce:	2200      	movs	r2, #0
 80057d0:	2100      	movs	r1, #0
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 feca 	bl	800656c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057e0:	2300      	movs	r3, #0
 80057e2:	2200      	movs	r2, #0
 80057e4:	2100      	movs	r1, #0
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f001 fbc3 	bl	8006f72 <USBD_LL_PrepareReceive>
 80057ec:	e026      	b.n	800583c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005800:	2b03      	cmp	r3, #3
 8005802:	d105      	bne.n	8005810 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005810:	2180      	movs	r1, #128	; 0x80
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f001 fb02 	bl	8006e1c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 fefc 	bl	8006616 <USBD_CtlReceiveStatus>
 800581e:	e00d      	b.n	800583c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005826:	2b04      	cmp	r3, #4
 8005828:	d004      	beq.n	8005834 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005830:	2b00      	cmp	r3, #0
 8005832:	d103      	bne.n	800583c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005834:	2180      	movs	r1, #128	; 0x80
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f001 faf0 	bl	8006e1c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005842:	2b01      	cmp	r3, #1
 8005844:	d11d      	bne.n	8005882 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f7ff fe83 	bl	8005552 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005854:	e015      	b.n	8005882 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00d      	beq.n	800587e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005868:	2b03      	cmp	r3, #3
 800586a:	d108      	bne.n	800587e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	7afa      	ldrb	r2, [r7, #11]
 8005876:	4611      	mov	r1, r2
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	4798      	blx	r3
 800587c:	e001      	b.n	8005882 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800587e:	2302      	movs	r3, #2
 8005880:	e000      	b.n	8005884 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3718      	adds	r7, #24
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005894:	2340      	movs	r3, #64	; 0x40
 8005896:	2200      	movs	r2, #0
 8005898:	2100      	movs	r1, #0
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f001 fa79 	bl	8006d92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2240      	movs	r2, #64	; 0x40
 80058ac:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058b0:	2340      	movs	r3, #64	; 0x40
 80058b2:	2200      	movs	r2, #0
 80058b4:	2180      	movs	r1, #128	; 0x80
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f001 fa6b 	bl	8006d92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2240      	movs	r2, #64	; 0x40
 80058c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d009      	beq.n	8005904 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	6852      	ldr	r2, [r2, #4]
 80058fc:	b2d2      	uxtb	r2, r2
 80058fe:	4611      	mov	r1, r2
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	4798      	blx	r3
  }

  return USBD_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
 8005916:	460b      	mov	r3, r1
 8005918:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	78fa      	ldrb	r2, [r7, #3]
 800591e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	bc80      	pop	{r7}
 800592a:	4770      	bx	lr

0800592c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2204      	movs	r2, #4
 8005944:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	bc80      	pop	{r7}
 8005952:	4770      	bx	lr

08005954 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005962:	2b04      	cmp	r3, #4
 8005964:	d105      	bne.n	8005972 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	bc80      	pop	{r7}
 800597c:	4770      	bx	lr

0800597e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b082      	sub	sp, #8
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800598c:	2b03      	cmp	r3, #3
 800598e:	d10b      	bne.n	80059a8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d005      	beq.n	80059a8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	460b      	mov	r3, r1
 80059bc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bc80      	pop	{r7}
 80059c8:	4770      	bx	lr

080059ca <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b083      	sub	sp, #12
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	460b      	mov	r3, r1
 80059d4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	bc80      	pop	{r7}
 80059e0:	4770      	bx	lr

080059e2 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b083      	sub	sp, #12
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bc80      	pop	{r7}
 80059f4:	4770      	bx	lr

080059f6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b082      	sub	sp, #8
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	6852      	ldr	r2, [r2, #4]
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	4611      	mov	r1, r2
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	4798      	blx	r3

  return USBD_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a3a:	2b20      	cmp	r3, #32
 8005a3c:	d004      	beq.n	8005a48 <USBD_StdDevReq+0x24>
 8005a3e:	2b40      	cmp	r3, #64	; 0x40
 8005a40:	d002      	beq.n	8005a48 <USBD_StdDevReq+0x24>
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d008      	beq.n	8005a58 <USBD_StdDevReq+0x34>
 8005a46:	e04c      	b.n	8005ae2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	6839      	ldr	r1, [r7, #0]
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	4798      	blx	r3
      break;
 8005a56:	e049      	b.n	8005aec <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	785b      	ldrb	r3, [r3, #1]
 8005a5c:	2b09      	cmp	r3, #9
 8005a5e:	d83a      	bhi.n	8005ad6 <USBD_StdDevReq+0xb2>
 8005a60:	a201      	add	r2, pc, #4	; (adr r2, 8005a68 <USBD_StdDevReq+0x44>)
 8005a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a66:	bf00      	nop
 8005a68:	08005ab9 	.word	0x08005ab9
 8005a6c:	08005acd 	.word	0x08005acd
 8005a70:	08005ad7 	.word	0x08005ad7
 8005a74:	08005ac3 	.word	0x08005ac3
 8005a78:	08005ad7 	.word	0x08005ad7
 8005a7c:	08005a9b 	.word	0x08005a9b
 8005a80:	08005a91 	.word	0x08005a91
 8005a84:	08005ad7 	.word	0x08005ad7
 8005a88:	08005aaf 	.word	0x08005aaf
 8005a8c:	08005aa5 	.word	0x08005aa5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005a90:	6839      	ldr	r1, [r7, #0]
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f9d4 	bl	8005e40 <USBD_GetDescriptor>
          break;
 8005a98:	e022      	b.n	8005ae0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005a9a:	6839      	ldr	r1, [r7, #0]
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 fb37 	bl	8006110 <USBD_SetAddress>
          break;
 8005aa2:	e01d      	b.n	8005ae0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005aa4:	6839      	ldr	r1, [r7, #0]
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 fb74 	bl	8006194 <USBD_SetConfig>
          break;
 8005aac:	e018      	b.n	8005ae0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005aae:	6839      	ldr	r1, [r7, #0]
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fbfd 	bl	80062b0 <USBD_GetConfig>
          break;
 8005ab6:	e013      	b.n	8005ae0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005ab8:	6839      	ldr	r1, [r7, #0]
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fc2c 	bl	8006318 <USBD_GetStatus>
          break;
 8005ac0:	e00e      	b.n	8005ae0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005ac2:	6839      	ldr	r1, [r7, #0]
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 fc5a 	bl	800637e <USBD_SetFeature>
          break;
 8005aca:	e009      	b.n	8005ae0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005acc:	6839      	ldr	r1, [r7, #0]
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fc69 	bl	80063a6 <USBD_ClrFeature>
          break;
 8005ad4:	e004      	b.n	8005ae0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005ad6:	6839      	ldr	r1, [r7, #0]
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 fcc1 	bl	8006460 <USBD_CtlError>
          break;
 8005ade:	bf00      	nop
      }
      break;
 8005ae0:	e004      	b.n	8005aec <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005ae2:	6839      	ldr	r1, [r7, #0]
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 fcbb 	bl	8006460 <USBD_CtlError>
      break;
 8005aea:	bf00      	nop
  }

  return ret;
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop

08005af8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b02:	2300      	movs	r3, #0
 8005b04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b0e:	2b20      	cmp	r3, #32
 8005b10:	d003      	beq.n	8005b1a <USBD_StdItfReq+0x22>
 8005b12:	2b40      	cmp	r3, #64	; 0x40
 8005b14:	d001      	beq.n	8005b1a <USBD_StdItfReq+0x22>
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d12a      	bne.n	8005b70 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b20:	3b01      	subs	r3, #1
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d81d      	bhi.n	8005b62 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	889b      	ldrh	r3, [r3, #4]
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d813      	bhi.n	8005b58 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	6839      	ldr	r1, [r7, #0]
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	4798      	blx	r3
 8005b3e:	4603      	mov	r3, r0
 8005b40:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	88db      	ldrh	r3, [r3, #6]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d110      	bne.n	8005b6c <USBD_StdItfReq+0x74>
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10d      	bne.n	8005b6c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fd4d 	bl	80065f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005b56:	e009      	b.n	8005b6c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005b58:	6839      	ldr	r1, [r7, #0]
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fc80 	bl	8006460 <USBD_CtlError>
          break;
 8005b60:	e004      	b.n	8005b6c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005b62:	6839      	ldr	r1, [r7, #0]
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fc7b 	bl	8006460 <USBD_CtlError>
          break;
 8005b6a:	e000      	b.n	8005b6e <USBD_StdItfReq+0x76>
          break;
 8005b6c:	bf00      	nop
      }
      break;
 8005b6e:	e004      	b.n	8005b7a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005b70:	6839      	ldr	r1, [r7, #0]
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 fc74 	bl	8006460 <USBD_CtlError>
      break;
 8005b78:	bf00      	nop
  }

  return USBD_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	889b      	ldrh	r3, [r3, #4]
 8005b96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ba0:	2b20      	cmp	r3, #32
 8005ba2:	d004      	beq.n	8005bae <USBD_StdEPReq+0x2a>
 8005ba4:	2b40      	cmp	r3, #64	; 0x40
 8005ba6:	d002      	beq.n	8005bae <USBD_StdEPReq+0x2a>
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d008      	beq.n	8005bbe <USBD_StdEPReq+0x3a>
 8005bac:	e13d      	b.n	8005e2a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	6839      	ldr	r1, [r7, #0]
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	4798      	blx	r3
      break;
 8005bbc:	e13a      	b.n	8005e34 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bc6:	2b20      	cmp	r3, #32
 8005bc8:	d10a      	bne.n	8005be0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	6839      	ldr	r1, [r7, #0]
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	4798      	blx	r3
 8005bd8:	4603      	mov	r3, r0
 8005bda:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
 8005bde:	e12a      	b.n	8005e36 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	785b      	ldrb	r3, [r3, #1]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d03e      	beq.n	8005c66 <USBD_StdEPReq+0xe2>
 8005be8:	2b03      	cmp	r3, #3
 8005bea:	d002      	beq.n	8005bf2 <USBD_StdEPReq+0x6e>
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d070      	beq.n	8005cd2 <USBD_StdEPReq+0x14e>
 8005bf0:	e115      	b.n	8005e1e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d002      	beq.n	8005c02 <USBD_StdEPReq+0x7e>
 8005bfc:	2b03      	cmp	r3, #3
 8005bfe:	d015      	beq.n	8005c2c <USBD_StdEPReq+0xa8>
 8005c00:	e02b      	b.n	8005c5a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c02:	7bbb      	ldrb	r3, [r7, #14]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00c      	beq.n	8005c22 <USBD_StdEPReq+0x9e>
 8005c08:	7bbb      	ldrb	r3, [r7, #14]
 8005c0a:	2b80      	cmp	r3, #128	; 0x80
 8005c0c:	d009      	beq.n	8005c22 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005c0e:	7bbb      	ldrb	r3, [r7, #14]
 8005c10:	4619      	mov	r1, r3
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f001 f902 	bl	8006e1c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005c18:	2180      	movs	r1, #128	; 0x80
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f001 f8fe 	bl	8006e1c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005c20:	e020      	b.n	8005c64 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005c22:	6839      	ldr	r1, [r7, #0]
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fc1b 	bl	8006460 <USBD_CtlError>
              break;
 8005c2a:	e01b      	b.n	8005c64 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	885b      	ldrh	r3, [r3, #2]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10e      	bne.n	8005c52 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005c34:	7bbb      	ldrb	r3, [r7, #14]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00b      	beq.n	8005c52 <USBD_StdEPReq+0xce>
 8005c3a:	7bbb      	ldrb	r3, [r7, #14]
 8005c3c:	2b80      	cmp	r3, #128	; 0x80
 8005c3e:	d008      	beq.n	8005c52 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	88db      	ldrh	r3, [r3, #6]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d104      	bne.n	8005c52 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005c48:	7bbb      	ldrb	r3, [r7, #14]
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f001 f8e5 	bl	8006e1c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fccc 	bl	80065f0 <USBD_CtlSendStatus>

              break;
 8005c58:	e004      	b.n	8005c64 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005c5a:	6839      	ldr	r1, [r7, #0]
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 fbff 	bl	8006460 <USBD_CtlError>
              break;
 8005c62:	bf00      	nop
          }
          break;
 8005c64:	e0e0      	b.n	8005e28 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d002      	beq.n	8005c76 <USBD_StdEPReq+0xf2>
 8005c70:	2b03      	cmp	r3, #3
 8005c72:	d015      	beq.n	8005ca0 <USBD_StdEPReq+0x11c>
 8005c74:	e026      	b.n	8005cc4 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c76:	7bbb      	ldrb	r3, [r7, #14]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00c      	beq.n	8005c96 <USBD_StdEPReq+0x112>
 8005c7c:	7bbb      	ldrb	r3, [r7, #14]
 8005c7e:	2b80      	cmp	r3, #128	; 0x80
 8005c80:	d009      	beq.n	8005c96 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005c82:	7bbb      	ldrb	r3, [r7, #14]
 8005c84:	4619      	mov	r1, r3
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f001 f8c8 	bl	8006e1c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005c8c:	2180      	movs	r1, #128	; 0x80
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f001 f8c4 	bl	8006e1c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005c94:	e01c      	b.n	8005cd0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005c96:	6839      	ldr	r1, [r7, #0]
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fbe1 	bl	8006460 <USBD_CtlError>
              break;
 8005c9e:	e017      	b.n	8005cd0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	885b      	ldrh	r3, [r3, #2]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d112      	bne.n	8005cce <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005ca8:	7bbb      	ldrb	r3, [r7, #14]
 8005caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d004      	beq.n	8005cbc <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005cb2:	7bbb      	ldrb	r3, [r7, #14]
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f001 f8cf 	bl	8006e5a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 fc97 	bl	80065f0 <USBD_CtlSendStatus>
              }
              break;
 8005cc2:	e004      	b.n	8005cce <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005cc4:	6839      	ldr	r1, [r7, #0]
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fbca 	bl	8006460 <USBD_CtlError>
              break;
 8005ccc:	e000      	b.n	8005cd0 <USBD_StdEPReq+0x14c>
              break;
 8005cce:	bf00      	nop
          }
          break;
 8005cd0:	e0aa      	b.n	8005e28 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d002      	beq.n	8005ce2 <USBD_StdEPReq+0x15e>
 8005cdc:	2b03      	cmp	r3, #3
 8005cde:	d032      	beq.n	8005d46 <USBD_StdEPReq+0x1c2>
 8005ce0:	e097      	b.n	8005e12 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ce2:	7bbb      	ldrb	r3, [r7, #14]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d007      	beq.n	8005cf8 <USBD_StdEPReq+0x174>
 8005ce8:	7bbb      	ldrb	r3, [r7, #14]
 8005cea:	2b80      	cmp	r3, #128	; 0x80
 8005cec:	d004      	beq.n	8005cf8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005cee:	6839      	ldr	r1, [r7, #0]
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fbb5 	bl	8006460 <USBD_CtlError>
                break;
 8005cf6:	e091      	b.n	8005e1c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	da0b      	bge.n	8005d18 <USBD_StdEPReq+0x194>
 8005d00:	7bbb      	ldrb	r3, [r7, #14]
 8005d02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d06:	4613      	mov	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	3310      	adds	r3, #16
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	4413      	add	r3, r2
 8005d14:	3304      	adds	r3, #4
 8005d16:	e00b      	b.n	8005d30 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005d18:	7bbb      	ldrb	r3, [r7, #14]
 8005d1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d1e:	4613      	mov	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	3304      	adds	r3, #4
 8005d30:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	2200      	movs	r2, #0
 8005d36:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fbf8 	bl	8006534 <USBD_CtlSendData>
              break;
 8005d44:	e06a      	b.n	8005e1c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005d46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	da11      	bge.n	8005d72 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005d4e:	7bbb      	ldrb	r3, [r7, #14]
 8005d50:	f003 020f 	and.w	r2, r3, #15
 8005d54:	6879      	ldr	r1, [r7, #4]
 8005d56:	4613      	mov	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	440b      	add	r3, r1
 8005d60:	3318      	adds	r3, #24
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d117      	bne.n	8005d98 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005d68:	6839      	ldr	r1, [r7, #0]
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fb78 	bl	8006460 <USBD_CtlError>
                  break;
 8005d70:	e054      	b.n	8005e1c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005d72:	7bbb      	ldrb	r3, [r7, #14]
 8005d74:	f003 020f 	and.w	r2, r3, #15
 8005d78:	6879      	ldr	r1, [r7, #4]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	440b      	add	r3, r1
 8005d84:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d104      	bne.n	8005d98 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005d8e:	6839      	ldr	r1, [r7, #0]
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fb65 	bl	8006460 <USBD_CtlError>
                  break;
 8005d96:	e041      	b.n	8005e1c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	da0b      	bge.n	8005db8 <USBD_StdEPReq+0x234>
 8005da0:	7bbb      	ldrb	r3, [r7, #14]
 8005da2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005da6:	4613      	mov	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	3310      	adds	r3, #16
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	4413      	add	r3, r2
 8005db4:	3304      	adds	r3, #4
 8005db6:	e00b      	b.n	8005dd0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005db8:	7bbb      	ldrb	r3, [r7, #14]
 8005dba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	4413      	add	r3, r2
 8005dce:	3304      	adds	r3, #4
 8005dd0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005dd2:	7bbb      	ldrb	r3, [r7, #14]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <USBD_StdEPReq+0x25a>
 8005dd8:	7bbb      	ldrb	r3, [r7, #14]
 8005dda:	2b80      	cmp	r3, #128	; 0x80
 8005ddc:	d103      	bne.n	8005de6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2200      	movs	r2, #0
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	e00e      	b.n	8005e04 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005de6:	7bbb      	ldrb	r3, [r7, #14]
 8005de8:	4619      	mov	r1, r3
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f001 f854 	bl	8006e98 <USBD_LL_IsStallEP>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]
 8005dfc:	e002      	b.n	8005e04 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2200      	movs	r2, #0
 8005e02:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2202      	movs	r2, #2
 8005e08:	4619      	mov	r1, r3
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 fb92 	bl	8006534 <USBD_CtlSendData>
              break;
 8005e10:	e004      	b.n	8005e1c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005e12:	6839      	ldr	r1, [r7, #0]
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fb23 	bl	8006460 <USBD_CtlError>
              break;
 8005e1a:	bf00      	nop
          }
          break;
 8005e1c:	e004      	b.n	8005e28 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005e1e:	6839      	ldr	r1, [r7, #0]
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fb1d 	bl	8006460 <USBD_CtlError>
          break;
 8005e26:	bf00      	nop
      }
      break;
 8005e28:	e004      	b.n	8005e34 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005e2a:	6839      	ldr	r1, [r7, #0]
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fb17 	bl	8006460 <USBD_CtlError>
      break;
 8005e32:	bf00      	nop
  }

  return ret;
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
	...

08005e40 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	885b      	ldrh	r3, [r3, #2]
 8005e5a:	0a1b      	lsrs	r3, r3, #8
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	2b06      	cmp	r3, #6
 8005e62:	f200 8128 	bhi.w	80060b6 <USBD_GetDescriptor+0x276>
 8005e66:	a201      	add	r2, pc, #4	; (adr r2, 8005e6c <USBD_GetDescriptor+0x2c>)
 8005e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6c:	08005e89 	.word	0x08005e89
 8005e70:	08005ea1 	.word	0x08005ea1
 8005e74:	08005ee1 	.word	0x08005ee1
 8005e78:	080060b7 	.word	0x080060b7
 8005e7c:	080060b7 	.word	0x080060b7
 8005e80:	08006057 	.word	0x08006057
 8005e84:	08006083 	.word	0x08006083
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	7c12      	ldrb	r2, [r2, #16]
 8005e94:	f107 0108 	add.w	r1, r7, #8
 8005e98:	4610      	mov	r0, r2
 8005e9a:	4798      	blx	r3
 8005e9c:	60f8      	str	r0, [r7, #12]
      break;
 8005e9e:	e112      	b.n	80060c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	7c1b      	ldrb	r3, [r3, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10d      	bne.n	8005ec4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb0:	f107 0208 	add.w	r2, r7, #8
 8005eb4:	4610      	mov	r0, r2
 8005eb6:	4798      	blx	r3
 8005eb8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005ec2:	e100      	b.n	80060c6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ecc:	f107 0208 	add.w	r2, r7, #8
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	4798      	blx	r3
 8005ed4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	2202      	movs	r2, #2
 8005edc:	701a      	strb	r2, [r3, #0]
      break;
 8005ede:	e0f2      	b.n	80060c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	885b      	ldrh	r3, [r3, #2]
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b05      	cmp	r3, #5
 8005ee8:	f200 80ac 	bhi.w	8006044 <USBD_GetDescriptor+0x204>
 8005eec:	a201      	add	r2, pc, #4	; (adr r2, 8005ef4 <USBD_GetDescriptor+0xb4>)
 8005eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef2:	bf00      	nop
 8005ef4:	08005f0d 	.word	0x08005f0d
 8005ef8:	08005f41 	.word	0x08005f41
 8005efc:	08005f75 	.word	0x08005f75
 8005f00:	08005fa9 	.word	0x08005fa9
 8005f04:	08005fdd 	.word	0x08005fdd
 8005f08:	08006011 	.word	0x08006011
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00b      	beq.n	8005f30 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	7c12      	ldrb	r2, [r2, #16]
 8005f24:	f107 0108 	add.w	r1, r7, #8
 8005f28:	4610      	mov	r0, r2
 8005f2a:	4798      	blx	r3
 8005f2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f2e:	e091      	b.n	8006054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f30:	6839      	ldr	r1, [r7, #0]
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fa94 	bl	8006460 <USBD_CtlError>
            err++;
 8005f38:	7afb      	ldrb	r3, [r7, #11]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	72fb      	strb	r3, [r7, #11]
          break;
 8005f3e:	e089      	b.n	8006054 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00b      	beq.n	8005f64 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	7c12      	ldrb	r2, [r2, #16]
 8005f58:	f107 0108 	add.w	r1, r7, #8
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	4798      	blx	r3
 8005f60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f62:	e077      	b.n	8006054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f64:	6839      	ldr	r1, [r7, #0]
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fa7a 	bl	8006460 <USBD_CtlError>
            err++;
 8005f6c:	7afb      	ldrb	r3, [r7, #11]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	72fb      	strb	r3, [r7, #11]
          break;
 8005f72:	e06f      	b.n	8006054 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00b      	beq.n	8005f98 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	7c12      	ldrb	r2, [r2, #16]
 8005f8c:	f107 0108 	add.w	r1, r7, #8
 8005f90:	4610      	mov	r0, r2
 8005f92:	4798      	blx	r3
 8005f94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f96:	e05d      	b.n	8006054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f98:	6839      	ldr	r1, [r7, #0]
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fa60 	bl	8006460 <USBD_CtlError>
            err++;
 8005fa0:	7afb      	ldrb	r3, [r7, #11]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	72fb      	strb	r3, [r7, #11]
          break;
 8005fa6:	e055      	b.n	8006054 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00b      	beq.n	8005fcc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	7c12      	ldrb	r2, [r2, #16]
 8005fc0:	f107 0108 	add.w	r1, r7, #8
 8005fc4:	4610      	mov	r0, r2
 8005fc6:	4798      	blx	r3
 8005fc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fca:	e043      	b.n	8006054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fcc:	6839      	ldr	r1, [r7, #0]
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fa46 	bl	8006460 <USBD_CtlError>
            err++;
 8005fd4:	7afb      	ldrb	r3, [r7, #11]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	72fb      	strb	r3, [r7, #11]
          break;
 8005fda:	e03b      	b.n	8006054 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00b      	beq.n	8006000 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	7c12      	ldrb	r2, [r2, #16]
 8005ff4:	f107 0108 	add.w	r1, r7, #8
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	4798      	blx	r3
 8005ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ffe:	e029      	b.n	8006054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006000:	6839      	ldr	r1, [r7, #0]
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fa2c 	bl	8006460 <USBD_CtlError>
            err++;
 8006008:	7afb      	ldrb	r3, [r7, #11]
 800600a:	3301      	adds	r3, #1
 800600c:	72fb      	strb	r3, [r7, #11]
          break;
 800600e:	e021      	b.n	8006054 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00b      	beq.n	8006034 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	7c12      	ldrb	r2, [r2, #16]
 8006028:	f107 0108 	add.w	r1, r7, #8
 800602c:	4610      	mov	r0, r2
 800602e:	4798      	blx	r3
 8006030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006032:	e00f      	b.n	8006054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006034:	6839      	ldr	r1, [r7, #0]
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fa12 	bl	8006460 <USBD_CtlError>
            err++;
 800603c:	7afb      	ldrb	r3, [r7, #11]
 800603e:	3301      	adds	r3, #1
 8006040:	72fb      	strb	r3, [r7, #11]
          break;
 8006042:	e007      	b.n	8006054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006044:	6839      	ldr	r1, [r7, #0]
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fa0a 	bl	8006460 <USBD_CtlError>
          err++;
 800604c:	7afb      	ldrb	r3, [r7, #11]
 800604e:	3301      	adds	r3, #1
 8006050:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006052:	e038      	b.n	80060c6 <USBD_GetDescriptor+0x286>
 8006054:	e037      	b.n	80060c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	7c1b      	ldrb	r3, [r3, #16]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d109      	bne.n	8006072 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006066:	f107 0208 	add.w	r2, r7, #8
 800606a:	4610      	mov	r0, r2
 800606c:	4798      	blx	r3
 800606e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006070:	e029      	b.n	80060c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006072:	6839      	ldr	r1, [r7, #0]
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 f9f3 	bl	8006460 <USBD_CtlError>
        err++;
 800607a:	7afb      	ldrb	r3, [r7, #11]
 800607c:	3301      	adds	r3, #1
 800607e:	72fb      	strb	r3, [r7, #11]
      break;
 8006080:	e021      	b.n	80060c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	7c1b      	ldrb	r3, [r3, #16]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10d      	bne.n	80060a6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006092:	f107 0208 	add.w	r2, r7, #8
 8006096:	4610      	mov	r0, r2
 8006098:	4798      	blx	r3
 800609a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	3301      	adds	r3, #1
 80060a0:	2207      	movs	r2, #7
 80060a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80060a4:	e00f      	b.n	80060c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80060a6:	6839      	ldr	r1, [r7, #0]
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f9d9 	bl	8006460 <USBD_CtlError>
        err++;
 80060ae:	7afb      	ldrb	r3, [r7, #11]
 80060b0:	3301      	adds	r3, #1
 80060b2:	72fb      	strb	r3, [r7, #11]
      break;
 80060b4:	e007      	b.n	80060c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80060b6:	6839      	ldr	r1, [r7, #0]
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f9d1 	bl	8006460 <USBD_CtlError>
      err++;
 80060be:	7afb      	ldrb	r3, [r7, #11]
 80060c0:	3301      	adds	r3, #1
 80060c2:	72fb      	strb	r3, [r7, #11]
      break;
 80060c4:	bf00      	nop
  }

  if (err != 0U)
 80060c6:	7afb      	ldrb	r3, [r7, #11]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d11c      	bne.n	8006106 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80060cc:	893b      	ldrh	r3, [r7, #8]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d011      	beq.n	80060f6 <USBD_GetDescriptor+0x2b6>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	88db      	ldrh	r3, [r3, #6]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00d      	beq.n	80060f6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	88da      	ldrh	r2, [r3, #6]
 80060de:	893b      	ldrh	r3, [r7, #8]
 80060e0:	4293      	cmp	r3, r2
 80060e2:	bf28      	it	cs
 80060e4:	4613      	movcs	r3, r2
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80060ea:	893b      	ldrh	r3, [r7, #8]
 80060ec:	461a      	mov	r2, r3
 80060ee:	68f9      	ldr	r1, [r7, #12]
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fa1f 	bl	8006534 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	88db      	ldrh	r3, [r3, #6]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d104      	bne.n	8006108 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fa76 	bl	80065f0 <USBD_CtlSendStatus>
 8006104:	e000      	b.n	8006108 <USBD_GetDescriptor+0x2c8>
    return;
 8006106:	bf00      	nop
    }
  }
}
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop

08006110 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	889b      	ldrh	r3, [r3, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d130      	bne.n	8006184 <USBD_SetAddress+0x74>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	88db      	ldrh	r3, [r3, #6]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d12c      	bne.n	8006184 <USBD_SetAddress+0x74>
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	885b      	ldrh	r3, [r3, #2]
 800612e:	2b7f      	cmp	r3, #127	; 0x7f
 8006130:	d828      	bhi.n	8006184 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	885b      	ldrh	r3, [r3, #2]
 8006136:	b2db      	uxtb	r3, r3
 8006138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800613c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006144:	2b03      	cmp	r3, #3
 8006146:	d104      	bne.n	8006152 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f988 	bl	8006460 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006150:	e01c      	b.n	800618c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	7bfa      	ldrb	r2, [r7, #15]
 8006156:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800615a:	7bfb      	ldrb	r3, [r7, #15]
 800615c:	4619      	mov	r1, r3
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fec5 	bl	8006eee <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 fa43 	bl	80065f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800616a:	7bfb      	ldrb	r3, [r7, #15]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d004      	beq.n	800617a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006178:	e008      	b.n	800618c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006182:	e003      	b.n	800618c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006184:	6839      	ldr	r1, [r7, #0]
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 f96a 	bl	8006460 <USBD_CtlError>
  }
}
 800618c:	bf00      	nop
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	885b      	ldrh	r3, [r3, #2]
 80061a2:	b2da      	uxtb	r2, r3
 80061a4:	4b41      	ldr	r3, [pc, #260]	; (80062ac <USBD_SetConfig+0x118>)
 80061a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80061a8:	4b40      	ldr	r3, [pc, #256]	; (80062ac <USBD_SetConfig+0x118>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d904      	bls.n	80061ba <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80061b0:	6839      	ldr	r1, [r7, #0]
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f954 	bl	8006460 <USBD_CtlError>
 80061b8:	e075      	b.n	80062a6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d002      	beq.n	80061ca <USBD_SetConfig+0x36>
 80061c4:	2b03      	cmp	r3, #3
 80061c6:	d023      	beq.n	8006210 <USBD_SetConfig+0x7c>
 80061c8:	e062      	b.n	8006290 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80061ca:	4b38      	ldr	r3, [pc, #224]	; (80062ac <USBD_SetConfig+0x118>)
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d01a      	beq.n	8006208 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80061d2:	4b36      	ldr	r3, [pc, #216]	; (80062ac <USBD_SetConfig+0x118>)
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	461a      	mov	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2203      	movs	r2, #3
 80061e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80061e4:	4b31      	ldr	r3, [pc, #196]	; (80062ac <USBD_SetConfig+0x118>)
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	4619      	mov	r1, r3
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7ff f9bb 	bl	8005566 <USBD_SetClassConfig>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d104      	bne.n	8006200 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80061f6:	6839      	ldr	r1, [r7, #0]
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f931 	bl	8006460 <USBD_CtlError>
            return;
 80061fe:	e052      	b.n	80062a6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f9f5 	bl	80065f0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006206:	e04e      	b.n	80062a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f9f1 	bl	80065f0 <USBD_CtlSendStatus>
        break;
 800620e:	e04a      	b.n	80062a6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006210:	4b26      	ldr	r3, [pc, #152]	; (80062ac <USBD_SetConfig+0x118>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d112      	bne.n	800623e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006220:	4b22      	ldr	r3, [pc, #136]	; (80062ac <USBD_SetConfig+0x118>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	461a      	mov	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800622a:	4b20      	ldr	r3, [pc, #128]	; (80062ac <USBD_SetConfig+0x118>)
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	4619      	mov	r1, r3
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7ff f9b7 	bl	80055a4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f9da 	bl	80065f0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800623c:	e033      	b.n	80062a6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800623e:	4b1b      	ldr	r3, [pc, #108]	; (80062ac <USBD_SetConfig+0x118>)
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	461a      	mov	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	429a      	cmp	r2, r3
 800624a:	d01d      	beq.n	8006288 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	b2db      	uxtb	r3, r3
 8006252:	4619      	mov	r1, r3
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f7ff f9a5 	bl	80055a4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800625a:	4b14      	ldr	r3, [pc, #80]	; (80062ac <USBD_SetConfig+0x118>)
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006264:	4b11      	ldr	r3, [pc, #68]	; (80062ac <USBD_SetConfig+0x118>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	4619      	mov	r1, r3
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7ff f97b 	bl	8005566 <USBD_SetClassConfig>
 8006270:	4603      	mov	r3, r0
 8006272:	2b02      	cmp	r3, #2
 8006274:	d104      	bne.n	8006280 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006276:	6839      	ldr	r1, [r7, #0]
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 f8f1 	bl	8006460 <USBD_CtlError>
            return;
 800627e:	e012      	b.n	80062a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f9b5 	bl	80065f0 <USBD_CtlSendStatus>
        break;
 8006286:	e00e      	b.n	80062a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 f9b1 	bl	80065f0 <USBD_CtlSendStatus>
        break;
 800628e:	e00a      	b.n	80062a6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006290:	6839      	ldr	r1, [r7, #0]
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f8e4 	bl	8006460 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006298:	4b04      	ldr	r3, [pc, #16]	; (80062ac <USBD_SetConfig+0x118>)
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	4619      	mov	r1, r3
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7ff f980 	bl	80055a4 <USBD_ClrClassConfig>
        break;
 80062a4:	bf00      	nop
    }
  }
}
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	20000208 	.word	0x20000208

080062b0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	88db      	ldrh	r3, [r3, #6]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d004      	beq.n	80062cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80062c2:	6839      	ldr	r1, [r7, #0]
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 f8cb 	bl	8006460 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80062ca:	e021      	b.n	8006310 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	db17      	blt.n	8006306 <USBD_GetConfig+0x56>
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	dd02      	ble.n	80062e0 <USBD_GetConfig+0x30>
 80062da:	2b03      	cmp	r3, #3
 80062dc:	d00b      	beq.n	80062f6 <USBD_GetConfig+0x46>
 80062de:	e012      	b.n	8006306 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	3308      	adds	r3, #8
 80062ea:	2201      	movs	r2, #1
 80062ec:	4619      	mov	r1, r3
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f920 	bl	8006534 <USBD_CtlSendData>
        break;
 80062f4:	e00c      	b.n	8006310 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	3304      	adds	r3, #4
 80062fa:	2201      	movs	r2, #1
 80062fc:	4619      	mov	r1, r3
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f918 	bl	8006534 <USBD_CtlSendData>
        break;
 8006304:	e004      	b.n	8006310 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f8a9 	bl	8006460 <USBD_CtlError>
        break;
 800630e:	bf00      	nop
}
 8006310:	bf00      	nop
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006328:	3b01      	subs	r3, #1
 800632a:	2b02      	cmp	r3, #2
 800632c:	d81e      	bhi.n	800636c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	88db      	ldrh	r3, [r3, #6]
 8006332:	2b02      	cmp	r3, #2
 8006334:	d004      	beq.n	8006340 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006336:	6839      	ldr	r1, [r7, #0]
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f891 	bl	8006460 <USBD_CtlError>
        break;
 800633e:	e01a      	b.n	8006376 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800634c:	2b00      	cmp	r3, #0
 800634e:	d005      	beq.n	800635c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f043 0202 	orr.w	r2, r3, #2
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	330c      	adds	r3, #12
 8006360:	2202      	movs	r2, #2
 8006362:	4619      	mov	r1, r3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f8e5 	bl	8006534 <USBD_CtlSendData>
      break;
 800636a:	e004      	b.n	8006376 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800636c:	6839      	ldr	r1, [r7, #0]
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f876 	bl	8006460 <USBD_CtlError>
      break;
 8006374:	bf00      	nop
  }
}
 8006376:	bf00      	nop
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b082      	sub	sp, #8
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	885b      	ldrh	r3, [r3, #2]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d106      	bne.n	800639e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 f929 	bl	80065f0 <USBD_CtlSendStatus>
  }
}
 800639e:	bf00      	nop
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b082      	sub	sp, #8
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063b6:	3b01      	subs	r3, #1
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d80b      	bhi.n	80063d4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	885b      	ldrh	r3, [r3, #2]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d10c      	bne.n	80063de <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f90f 	bl	80065f0 <USBD_CtlSendStatus>
      }
      break;
 80063d2:	e004      	b.n	80063de <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80063d4:	6839      	ldr	r1, [r7, #0]
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f842 	bl	8006460 <USBD_CtlError>
      break;
 80063dc:	e000      	b.n	80063e0 <USBD_ClrFeature+0x3a>
      break;
 80063de:	bf00      	nop
  }
}
 80063e0:	bf00      	nop
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	781a      	ldrb	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	785a      	ldrb	r2, [r3, #1]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	3302      	adds	r3, #2
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	b29a      	uxth	r2, r3
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	3303      	adds	r3, #3
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	b29b      	uxth	r3, r3
 8006412:	021b      	lsls	r3, r3, #8
 8006414:	b29b      	uxth	r3, r3
 8006416:	4413      	add	r3, r2
 8006418:	b29a      	uxth	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	3304      	adds	r3, #4
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	b29a      	uxth	r2, r3
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	3305      	adds	r3, #5
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	b29b      	uxth	r3, r3
 800642e:	021b      	lsls	r3, r3, #8
 8006430:	b29b      	uxth	r3, r3
 8006432:	4413      	add	r3, r2
 8006434:	b29a      	uxth	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	3306      	adds	r3, #6
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	b29a      	uxth	r2, r3
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	3307      	adds	r3, #7
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	b29b      	uxth	r3, r3
 800644a:	021b      	lsls	r3, r3, #8
 800644c:	b29b      	uxth	r3, r3
 800644e:	4413      	add	r3, r2
 8006450:	b29a      	uxth	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	80da      	strh	r2, [r3, #6]

}
 8006456:	bf00      	nop
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	bc80      	pop	{r7}
 800645e:	4770      	bx	lr

08006460 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800646a:	2180      	movs	r1, #128	; 0x80
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fcd5 	bl	8006e1c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006472:	2100      	movs	r1, #0
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fcd1 	bl	8006e1c <USBD_LL_StallEP>
}
 800647a:	bf00      	nop
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b086      	sub	sp, #24
 8006486:	af00      	add	r7, sp, #0
 8006488:	60f8      	str	r0, [r7, #12]
 800648a:	60b9      	str	r1, [r7, #8]
 800648c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800648e:	2300      	movs	r3, #0
 8006490:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d032      	beq.n	80064fe <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 f834 	bl	8006506 <USBD_GetLen>
 800649e:	4603      	mov	r3, r0
 80064a0:	3301      	adds	r3, #1
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80064ac:	7dfb      	ldrb	r3, [r7, #23]
 80064ae:	1c5a      	adds	r2, r3, #1
 80064b0:	75fa      	strb	r2, [r7, #23]
 80064b2:	461a      	mov	r2, r3
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	4413      	add	r3, r2
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	7812      	ldrb	r2, [r2, #0]
 80064bc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80064be:	7dfb      	ldrb	r3, [r7, #23]
 80064c0:	1c5a      	adds	r2, r3, #1
 80064c2:	75fa      	strb	r2, [r7, #23]
 80064c4:	461a      	mov	r2, r3
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	4413      	add	r3, r2
 80064ca:	2203      	movs	r2, #3
 80064cc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80064ce:	e012      	b.n	80064f6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	60fa      	str	r2, [r7, #12]
 80064d6:	7dfa      	ldrb	r2, [r7, #23]
 80064d8:	1c51      	adds	r1, r2, #1
 80064da:	75f9      	strb	r1, [r7, #23]
 80064dc:	4611      	mov	r1, r2
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	440a      	add	r2, r1
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80064e6:	7dfb      	ldrb	r3, [r7, #23]
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	75fa      	strb	r2, [r7, #23]
 80064ec:	461a      	mov	r2, r3
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	4413      	add	r3, r2
 80064f2:	2200      	movs	r2, #0
 80064f4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1e8      	bne.n	80064d0 <USBD_GetString+0x4e>
    }
  }
}
 80064fe:	bf00      	nop
 8006500:	3718      	adds	r7, #24
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006506:	b480      	push	{r7}
 8006508:	b085      	sub	sp, #20
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800650e:	2300      	movs	r3, #0
 8006510:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006512:	e005      	b.n	8006520 <USBD_GetLen+0x1a>
  {
    len++;
 8006514:	7bfb      	ldrb	r3, [r7, #15]
 8006516:	3301      	adds	r3, #1
 8006518:	73fb      	strb	r3, [r7, #15]
    buf++;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	3301      	adds	r3, #1
 800651e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1f5      	bne.n	8006514 <USBD_GetLen+0xe>
  }

  return len;
 8006528:	7bfb      	ldrb	r3, [r7, #15]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	bc80      	pop	{r7}
 8006532:	4770      	bx	lr

08006534 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	4613      	mov	r3, r2
 8006540:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2202      	movs	r2, #2
 8006546:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800654a:	88fa      	ldrh	r2, [r7, #6]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006550:	88fa      	ldrh	r2, [r7, #6]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006556:	88fb      	ldrh	r3, [r7, #6]
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	2100      	movs	r1, #0
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 fce5 	bl	8006f2c <USBD_LL_Transmit>

  return USBD_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	4613      	mov	r3, r2
 8006578:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800657a:	88fb      	ldrh	r3, [r7, #6]
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	2100      	movs	r1, #0
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 fcd3 	bl	8006f2c <USBD_LL_Transmit>

  return USBD_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	4613      	mov	r3, r2
 800659c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2203      	movs	r2, #3
 80065a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80065a6:	88fa      	ldrh	r2, [r7, #6]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80065ae:	88fa      	ldrh	r2, [r7, #6]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80065b6:	88fb      	ldrh	r3, [r7, #6]
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	2100      	movs	r1, #0
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 fcd8 	bl	8006f72 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	4613      	mov	r3, r2
 80065d8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80065da:	88fb      	ldrh	r3, [r7, #6]
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	2100      	movs	r1, #0
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 fcc6 	bl	8006f72 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2204      	movs	r2, #4
 80065fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006600:	2300      	movs	r3, #0
 8006602:	2200      	movs	r2, #0
 8006604:	2100      	movs	r1, #0
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fc90 	bl	8006f2c <USBD_LL_Transmit>

  return USBD_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b082      	sub	sp, #8
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2205      	movs	r2, #5
 8006622:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006626:	2300      	movs	r3, #0
 8006628:	2200      	movs	r2, #0
 800662a:	2100      	movs	r1, #0
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fca0 	bl	8006f72 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006640:	2200      	movs	r2, #0
 8006642:	4912      	ldr	r1, [pc, #72]	; (800668c <MX_USB_DEVICE_Init+0x50>)
 8006644:	4812      	ldr	r0, [pc, #72]	; (8006690 <MX_USB_DEVICE_Init+0x54>)
 8006646:	f7fe ff34 	bl	80054b2 <USBD_Init>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d001      	beq.n	8006654 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006650:	f7fa fc58 	bl	8000f04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006654:	490f      	ldr	r1, [pc, #60]	; (8006694 <MX_USB_DEVICE_Init+0x58>)
 8006656:	480e      	ldr	r0, [pc, #56]	; (8006690 <MX_USB_DEVICE_Init+0x54>)
 8006658:	f7fe ff56 	bl	8005508 <USBD_RegisterClass>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d001      	beq.n	8006666 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006662:	f7fa fc4f 	bl	8000f04 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006666:	490c      	ldr	r1, [pc, #48]	; (8006698 <MX_USB_DEVICE_Init+0x5c>)
 8006668:	4809      	ldr	r0, [pc, #36]	; (8006690 <MX_USB_DEVICE_Init+0x54>)
 800666a:	f7fe fe87 	bl	800537c <USBD_CDC_RegisterInterface>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006674:	f7fa fc46 	bl	8000f04 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006678:	4805      	ldr	r0, [pc, #20]	; (8006690 <MX_USB_DEVICE_Init+0x54>)
 800667a:	f7fe ff5e 	bl	800553a <USBD_Start>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006684:	f7fa fc3e 	bl	8000f04 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006688:	bf00      	nop
 800668a:	bd80      	pop	{r7, pc}
 800668c:	2000012c 	.word	0x2000012c
 8006690:	20000ab0 	.word	0x20000ab0
 8006694:	20000018 	.word	0x20000018
 8006698:	2000011c 	.word	0x2000011c

0800669c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80066a0:	2200      	movs	r2, #0
 80066a2:	4905      	ldr	r1, [pc, #20]	; (80066b8 <CDC_Init_FS+0x1c>)
 80066a4:	4805      	ldr	r0, [pc, #20]	; (80066bc <CDC_Init_FS+0x20>)
 80066a6:	f7fe fe7f 	bl	80053a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80066aa:	4905      	ldr	r1, [pc, #20]	; (80066c0 <CDC_Init_FS+0x24>)
 80066ac:	4803      	ldr	r0, [pc, #12]	; (80066bc <CDC_Init_FS+0x20>)
 80066ae:	f7fe fe94 	bl	80053da <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80066b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	20001574 	.word	0x20001574
 80066bc:	20000ab0 	.word	0x20000ab0
 80066c0:	20000d74 	.word	0x20000d74

080066c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80066c4:	b480      	push	{r7}
 80066c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80066c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bc80      	pop	{r7}
 80066d0:	4770      	bx	lr
	...

080066d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	4603      	mov	r3, r0
 80066dc:	6039      	str	r1, [r7, #0]
 80066de:	71fb      	strb	r3, [r7, #7]
 80066e0:	4613      	mov	r3, r2
 80066e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80066e4:	79fb      	ldrb	r3, [r7, #7]
 80066e6:	2b23      	cmp	r3, #35	; 0x23
 80066e8:	d84a      	bhi.n	8006780 <CDC_Control_FS+0xac>
 80066ea:	a201      	add	r2, pc, #4	; (adr r2, 80066f0 <CDC_Control_FS+0x1c>)
 80066ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f0:	08006781 	.word	0x08006781
 80066f4:	08006781 	.word	0x08006781
 80066f8:	08006781 	.word	0x08006781
 80066fc:	08006781 	.word	0x08006781
 8006700:	08006781 	.word	0x08006781
 8006704:	08006781 	.word	0x08006781
 8006708:	08006781 	.word	0x08006781
 800670c:	08006781 	.word	0x08006781
 8006710:	08006781 	.word	0x08006781
 8006714:	08006781 	.word	0x08006781
 8006718:	08006781 	.word	0x08006781
 800671c:	08006781 	.word	0x08006781
 8006720:	08006781 	.word	0x08006781
 8006724:	08006781 	.word	0x08006781
 8006728:	08006781 	.word	0x08006781
 800672c:	08006781 	.word	0x08006781
 8006730:	08006781 	.word	0x08006781
 8006734:	08006781 	.word	0x08006781
 8006738:	08006781 	.word	0x08006781
 800673c:	08006781 	.word	0x08006781
 8006740:	08006781 	.word	0x08006781
 8006744:	08006781 	.word	0x08006781
 8006748:	08006781 	.word	0x08006781
 800674c:	08006781 	.word	0x08006781
 8006750:	08006781 	.word	0x08006781
 8006754:	08006781 	.word	0x08006781
 8006758:	08006781 	.word	0x08006781
 800675c:	08006781 	.word	0x08006781
 8006760:	08006781 	.word	0x08006781
 8006764:	08006781 	.word	0x08006781
 8006768:	08006781 	.word	0x08006781
 800676c:	08006781 	.word	0x08006781
 8006770:	08006781 	.word	0x08006781
 8006774:	08006781 	.word	0x08006781
 8006778:	08006781 	.word	0x08006781
 800677c:	08006781 	.word	0x08006781
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006780:	bf00      	nop
  }

  return (USBD_OK);
 8006782:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006784:	4618      	mov	r0, r3
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	bc80      	pop	{r7}
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop

08006790 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	// Copy new data to RxBuffer
	struct PROTOCOL_0X55_Data_Type *TmpPointer;
	TmpPointer = Protocol_0x55_GetRxPointer();
 800679a:	f7fa f91f 	bl	80009dc <Protocol_0x55_GetRxPointer>
 800679e:	60f8      	str	r0, [r7, #12]

	strncat((char*)TmpPointer->FIFO_Data, (char*) Buf, *Len);
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	461a      	mov	r2, r3
 80067a8:	6879      	ldr	r1, [r7, #4]
 80067aa:	f000 fd3d 	bl	8007228 <strncat>

	// Set new data flag
	TmpPointer->NewData = 1;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401

	// Prepare next receive
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80067b6:	6879      	ldr	r1, [r7, #4]
 80067b8:	4805      	ldr	r0, [pc, #20]	; (80067d0 <CDC_Receive_FS+0x40>)
 80067ba:	f7fe fe0e 	bl	80053da <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80067be:	4804      	ldr	r0, [pc, #16]	; (80067d0 <CDC_Receive_FS+0x40>)
 80067c0:	f7fe fe4d 	bl	800545e <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 80067c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3710      	adds	r7, #16
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	20000ab0 	.word	0x20000ab0

080067d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80067e0:	2300      	movs	r3, #0
 80067e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80067e4:	4b0d      	ldr	r3, [pc, #52]	; (800681c <CDC_Transmit_FS+0x48>)
 80067e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d001      	beq.n	80067fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e00b      	b.n	8006812 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80067fa:	887b      	ldrh	r3, [r7, #2]
 80067fc:	461a      	mov	r2, r3
 80067fe:	6879      	ldr	r1, [r7, #4]
 8006800:	4806      	ldr	r0, [pc, #24]	; (800681c <CDC_Transmit_FS+0x48>)
 8006802:	f7fe fdd1 	bl	80053a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006806:	4805      	ldr	r0, [pc, #20]	; (800681c <CDC_Transmit_FS+0x48>)
 8006808:	f7fe fdfa 	bl	8005400 <USBD_CDC_TransmitPacket>
 800680c:	4603      	mov	r3, r0
 800680e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006810:	7bfb      	ldrb	r3, [r7, #15]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	20000ab0 	.word	0x20000ab0

08006820 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	4603      	mov	r3, r0
 8006828:	6039      	str	r1, [r7, #0]
 800682a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	2212      	movs	r2, #18
 8006830:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006832:	4b03      	ldr	r3, [pc, #12]	; (8006840 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006834:	4618      	mov	r0, r3
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	bc80      	pop	{r7}
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	20000148 	.word	0x20000148

08006844 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	4603      	mov	r3, r0
 800684c:	6039      	str	r1, [r7, #0]
 800684e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	2204      	movs	r2, #4
 8006854:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006856:	4b03      	ldr	r3, [pc, #12]	; (8006864 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006858:	4618      	mov	r0, r3
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	bc80      	pop	{r7}
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	2000015c 	.word	0x2000015c

08006868 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	4603      	mov	r3, r0
 8006870:	6039      	str	r1, [r7, #0]
 8006872:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006874:	79fb      	ldrb	r3, [r7, #7]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d105      	bne.n	8006886 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	4907      	ldr	r1, [pc, #28]	; (800689c <USBD_FS_ProductStrDescriptor+0x34>)
 800687e:	4808      	ldr	r0, [pc, #32]	; (80068a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006880:	f7ff fdff 	bl	8006482 <USBD_GetString>
 8006884:	e004      	b.n	8006890 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	4904      	ldr	r1, [pc, #16]	; (800689c <USBD_FS_ProductStrDescriptor+0x34>)
 800688a:	4805      	ldr	r0, [pc, #20]	; (80068a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800688c:	f7ff fdf9 	bl	8006482 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006890:	4b02      	ldr	r3, [pc, #8]	; (800689c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006892:	4618      	mov	r0, r3
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	20001d74 	.word	0x20001d74
 80068a0:	080072a8 	.word	0x080072a8

080068a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	4603      	mov	r3, r0
 80068ac:	6039      	str	r1, [r7, #0]
 80068ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	4904      	ldr	r1, [pc, #16]	; (80068c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80068b4:	4804      	ldr	r0, [pc, #16]	; (80068c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80068b6:	f7ff fde4 	bl	8006482 <USBD_GetString>
  return USBD_StrDesc;
 80068ba:	4b02      	ldr	r3, [pc, #8]	; (80068c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	20001d74 	.word	0x20001d74
 80068c8:	080072c0 	.word	0x080072c0

080068cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	4603      	mov	r3, r0
 80068d4:	6039      	str	r1, [r7, #0]
 80068d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	221a      	movs	r2, #26
 80068dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80068de:	f000 f843 	bl	8006968 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80068e2:	4b02      	ldr	r3, [pc, #8]	; (80068ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	20000160 	.word	0x20000160

080068f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	4603      	mov	r3, r0
 80068f8:	6039      	str	r1, [r7, #0]
 80068fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80068fc:	79fb      	ldrb	r3, [r7, #7]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d105      	bne.n	800690e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	4907      	ldr	r1, [pc, #28]	; (8006924 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006906:	4808      	ldr	r0, [pc, #32]	; (8006928 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006908:	f7ff fdbb 	bl	8006482 <USBD_GetString>
 800690c:	e004      	b.n	8006918 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	4904      	ldr	r1, [pc, #16]	; (8006924 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006912:	4805      	ldr	r0, [pc, #20]	; (8006928 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006914:	f7ff fdb5 	bl	8006482 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006918:	4b02      	ldr	r3, [pc, #8]	; (8006924 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800691a:	4618      	mov	r0, r3
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	20001d74 	.word	0x20001d74
 8006928:	080072d4 	.word	0x080072d4

0800692c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	4603      	mov	r3, r0
 8006934:	6039      	str	r1, [r7, #0]
 8006936:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006938:	79fb      	ldrb	r3, [r7, #7]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d105      	bne.n	800694a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	4907      	ldr	r1, [pc, #28]	; (8006960 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006942:	4808      	ldr	r0, [pc, #32]	; (8006964 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006944:	f7ff fd9d 	bl	8006482 <USBD_GetString>
 8006948:	e004      	b.n	8006954 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	4904      	ldr	r1, [pc, #16]	; (8006960 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800694e:	4805      	ldr	r0, [pc, #20]	; (8006964 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006950:	f7ff fd97 	bl	8006482 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006954:	4b02      	ldr	r3, [pc, #8]	; (8006960 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006956:	4618      	mov	r0, r3
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	20001d74 	.word	0x20001d74
 8006964:	080072e0 	.word	0x080072e0

08006968 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800696e:	4b0f      	ldr	r3, [pc, #60]	; (80069ac <Get_SerialNum+0x44>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006974:	4b0e      	ldr	r3, [pc, #56]	; (80069b0 <Get_SerialNum+0x48>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800697a:	4b0e      	ldr	r3, [pc, #56]	; (80069b4 <Get_SerialNum+0x4c>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4413      	add	r3, r2
 8006986:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d009      	beq.n	80069a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800698e:	2208      	movs	r2, #8
 8006990:	4909      	ldr	r1, [pc, #36]	; (80069b8 <Get_SerialNum+0x50>)
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f000 f814 	bl	80069c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006998:	2204      	movs	r2, #4
 800699a:	4908      	ldr	r1, [pc, #32]	; (80069bc <Get_SerialNum+0x54>)
 800699c:	68b8      	ldr	r0, [r7, #8]
 800699e:	f000 f80f 	bl	80069c0 <IntToUnicode>
  }
}
 80069a2:	bf00      	nop
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	1fff7a10 	.word	0x1fff7a10
 80069b0:	1fff7a14 	.word	0x1fff7a14
 80069b4:	1fff7a18 	.word	0x1fff7a18
 80069b8:	20000162 	.word	0x20000162
 80069bc:	20000172 	.word	0x20000172

080069c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b087      	sub	sp, #28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	4613      	mov	r3, r2
 80069cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80069d2:	2300      	movs	r3, #0
 80069d4:	75fb      	strb	r3, [r7, #23]
 80069d6:	e027      	b.n	8006a28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	0f1b      	lsrs	r3, r3, #28
 80069dc:	2b09      	cmp	r3, #9
 80069de:	d80b      	bhi.n	80069f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	0f1b      	lsrs	r3, r3, #28
 80069e4:	b2da      	uxtb	r2, r3
 80069e6:	7dfb      	ldrb	r3, [r7, #23]
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	4619      	mov	r1, r3
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	440b      	add	r3, r1
 80069f0:	3230      	adds	r2, #48	; 0x30
 80069f2:	b2d2      	uxtb	r2, r2
 80069f4:	701a      	strb	r2, [r3, #0]
 80069f6:	e00a      	b.n	8006a0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	0f1b      	lsrs	r3, r3, #28
 80069fc:	b2da      	uxtb	r2, r3
 80069fe:	7dfb      	ldrb	r3, [r7, #23]
 8006a00:	005b      	lsls	r3, r3, #1
 8006a02:	4619      	mov	r1, r3
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	440b      	add	r3, r1
 8006a08:	3237      	adds	r2, #55	; 0x37
 8006a0a:	b2d2      	uxtb	r2, r2
 8006a0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	011b      	lsls	r3, r3, #4
 8006a12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006a14:	7dfb      	ldrb	r3, [r7, #23]
 8006a16:	005b      	lsls	r3, r3, #1
 8006a18:	3301      	adds	r3, #1
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	2200      	movs	r2, #0
 8006a20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006a22:	7dfb      	ldrb	r3, [r7, #23]
 8006a24:	3301      	adds	r3, #1
 8006a26:	75fb      	strb	r3, [r7, #23]
 8006a28:	7dfa      	ldrb	r2, [r7, #23]
 8006a2a:	79fb      	ldrb	r3, [r7, #7]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d3d3      	bcc.n	80069d8 <IntToUnicode+0x18>
  }
}
 8006a30:	bf00      	nop
 8006a32:	371c      	adds	r7, #28
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bc80      	pop	{r7}
 8006a38:	4770      	bx	lr
	...

08006a3c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08a      	sub	sp, #40	; 0x28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a44:	f107 0314 	add.w	r3, r7, #20
 8006a48:	2200      	movs	r2, #0
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	605a      	str	r2, [r3, #4]
 8006a4e:	609a      	str	r2, [r3, #8]
 8006a50:	60da      	str	r2, [r3, #12]
 8006a52:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a5c:	d13a      	bne.n	8006ad4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a5e:	2300      	movs	r3, #0
 8006a60:	613b      	str	r3, [r7, #16]
 8006a62:	4b1e      	ldr	r3, [pc, #120]	; (8006adc <HAL_PCD_MspInit+0xa0>)
 8006a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a66:	4a1d      	ldr	r2, [pc, #116]	; (8006adc <HAL_PCD_MspInit+0xa0>)
 8006a68:	f043 0301 	orr.w	r3, r3, #1
 8006a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8006a6e:	4b1b      	ldr	r3, [pc, #108]	; (8006adc <HAL_PCD_MspInit+0xa0>)
 8006a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	613b      	str	r3, [r7, #16]
 8006a78:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006a7a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a80:	2302      	movs	r3, #2
 8006a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a84:	2300      	movs	r3, #0
 8006a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006a8c:	230a      	movs	r3, #10
 8006a8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a90:	f107 0314 	add.w	r3, r7, #20
 8006a94:	4619      	mov	r1, r3
 8006a96:	4812      	ldr	r0, [pc, #72]	; (8006ae0 <HAL_PCD_MspInit+0xa4>)
 8006a98:	f7fa fd12 	bl	80014c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006a9c:	4b0f      	ldr	r3, [pc, #60]	; (8006adc <HAL_PCD_MspInit+0xa0>)
 8006a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa0:	4a0e      	ldr	r2, [pc, #56]	; (8006adc <HAL_PCD_MspInit+0xa0>)
 8006aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa6:	6353      	str	r3, [r2, #52]	; 0x34
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	60fb      	str	r3, [r7, #12]
 8006aac:	4b0b      	ldr	r3, [pc, #44]	; (8006adc <HAL_PCD_MspInit+0xa0>)
 8006aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab0:	4a0a      	ldr	r2, [pc, #40]	; (8006adc <HAL_PCD_MspInit+0xa0>)
 8006ab2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ab6:	6453      	str	r3, [r2, #68]	; 0x44
 8006ab8:	4b08      	ldr	r3, [pc, #32]	; (8006adc <HAL_PCD_MspInit+0xa0>)
 8006aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ac0:	60fb      	str	r3, [r7, #12]
 8006ac2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	2043      	movs	r0, #67	; 0x43
 8006aca:	f7fa fcc2 	bl	8001452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006ace:	2043      	movs	r0, #67	; 0x43
 8006ad0:	f7fa fcdb 	bl	800148a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006ad4:	bf00      	nop
 8006ad6:	3728      	adds	r7, #40	; 0x28
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	40023800 	.word	0x40023800
 8006ae0:	40020000 	.word	0x40020000

08006ae4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006af8:	4619      	mov	r1, r3
 8006afa:	4610      	mov	r0, r2
 8006afc:	f7fe fd65 	bl	80055ca <USBD_LL_SetupStage>
}
 8006b00:	bf00      	nop
 8006b02:	3708      	adds	r7, #8
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	460b      	mov	r3, r1
 8006b12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8006b1a:	78fa      	ldrb	r2, [r7, #3]
 8006b1c:	6879      	ldr	r1, [r7, #4]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	00db      	lsls	r3, r3, #3
 8006b22:	1a9b      	subs	r3, r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	440b      	add	r3, r1
 8006b28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	78fb      	ldrb	r3, [r7, #3]
 8006b30:	4619      	mov	r1, r3
 8006b32:	f7fe fd95 	bl	8005660 <USBD_LL_DataOutStage>
}
 8006b36:	bf00      	nop
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b082      	sub	sp, #8
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	460b      	mov	r3, r1
 8006b48:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8006b50:	78fa      	ldrb	r2, [r7, #3]
 8006b52:	6879      	ldr	r1, [r7, #4]
 8006b54:	4613      	mov	r3, r2
 8006b56:	00db      	lsls	r3, r3, #3
 8006b58:	1a9b      	subs	r3, r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	440b      	add	r3, r1
 8006b5e:	3348      	adds	r3, #72	; 0x48
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	78fb      	ldrb	r3, [r7, #3]
 8006b64:	4619      	mov	r1, r3
 8006b66:	f7fe fdec 	bl	8005742 <USBD_LL_DataInStage>
}
 8006b6a:	bf00      	nop
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b082      	sub	sp, #8
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7fe fefc 	bl	800597e <USBD_LL_SOF>
}
 8006b86:	bf00      	nop
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b084      	sub	sp, #16
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006b96:	2301      	movs	r3, #1
 8006b98:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d102      	bne.n	8006ba8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	73fb      	strb	r3, [r7, #15]
 8006ba6:	e008      	b.n	8006bba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d102      	bne.n	8006bb6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	73fb      	strb	r3, [r7, #15]
 8006bb4:	e001      	b.n	8006bba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006bb6:	f7fa f9a5 	bl	8000f04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006bc0:	7bfa      	ldrb	r2, [r7, #15]
 8006bc2:	4611      	mov	r1, r2
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7fe fea2 	bl	800590e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7fe fe5b 	bl	800588c <USBD_LL_Reset>
}
 8006bd6:	bf00      	nop
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
	...

08006be0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fe fe9c 	bl	800592c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	6812      	ldr	r2, [r2, #0]
 8006c02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c06:	f043 0301 	orr.w	r3, r3, #1
 8006c0a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d005      	beq.n	8006c20 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006c14:	4b04      	ldr	r3, [pc, #16]	; (8006c28 <HAL_PCD_SuspendCallback+0x48>)
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	4a03      	ldr	r2, [pc, #12]	; (8006c28 <HAL_PCD_SuspendCallback+0x48>)
 8006c1a:	f043 0306 	orr.w	r3, r3, #6
 8006c1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006c20:	bf00      	nop
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	e000ed00 	.word	0xe000ed00

08006c2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7fe fe8a 	bl	8005954 <USBD_LL_Resume>
}
 8006c40:	bf00      	nop
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	460b      	mov	r3, r1
 8006c52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006c5a:	78fa      	ldrb	r2, [r7, #3]
 8006c5c:	4611      	mov	r1, r2
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7fe feb3 	bl	80059ca <USBD_LL_IsoOUTIncomplete>
}
 8006c64:	bf00      	nop
 8006c66:	3708      	adds	r7, #8
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	460b      	mov	r3, r1
 8006c76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006c7e:	78fa      	ldrb	r2, [r7, #3]
 8006c80:	4611      	mov	r1, r2
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fe fe95 	bl	80059b2 <USBD_LL_IsoINIncomplete>
}
 8006c88:	bf00      	nop
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fe fe9f 	bl	80059e2 <USBD_LL_DevConnected>
}
 8006ca4:	bf00      	nop
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fe fe9b 	bl	80059f6 <USBD_LL_DevDisconnected>
}
 8006cc0:	bf00      	nop
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d139      	bne.n	8006d4c <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006cd8:	4a1f      	ldr	r2, [pc, #124]	; (8006d58 <USBD_LL_Init+0x90>)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a1d      	ldr	r2, [pc, #116]	; (8006d58 <USBD_LL_Init+0x90>)
 8006ce4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006ce8:	4b1b      	ldr	r3, [pc, #108]	; (8006d58 <USBD_LL_Init+0x90>)
 8006cea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006cee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006cf0:	4b19      	ldr	r3, [pc, #100]	; (8006d58 <USBD_LL_Init+0x90>)
 8006cf2:	2204      	movs	r2, #4
 8006cf4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006cf6:	4b18      	ldr	r3, [pc, #96]	; (8006d58 <USBD_LL_Init+0x90>)
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006cfc:	4b16      	ldr	r3, [pc, #88]	; (8006d58 <USBD_LL_Init+0x90>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006d02:	4b15      	ldr	r3, [pc, #84]	; (8006d58 <USBD_LL_Init+0x90>)
 8006d04:	2202      	movs	r2, #2
 8006d06:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006d08:	4b13      	ldr	r3, [pc, #76]	; (8006d58 <USBD_LL_Init+0x90>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006d0e:	4b12      	ldr	r3, [pc, #72]	; (8006d58 <USBD_LL_Init+0x90>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006d14:	4b10      	ldr	r3, [pc, #64]	; (8006d58 <USBD_LL_Init+0x90>)
 8006d16:	2200      	movs	r2, #0
 8006d18:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006d1a:	4b0f      	ldr	r3, [pc, #60]	; (8006d58 <USBD_LL_Init+0x90>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006d20:	480d      	ldr	r0, [pc, #52]	; (8006d58 <USBD_LL_Init+0x90>)
 8006d22:	f7fa fd83 	bl	800182c <HAL_PCD_Init>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d001      	beq.n	8006d30 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8006d2c:	f7fa f8ea 	bl	8000f04 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006d30:	2180      	movs	r1, #128	; 0x80
 8006d32:	4809      	ldr	r0, [pc, #36]	; (8006d58 <USBD_LL_Init+0x90>)
 8006d34:	f7fb fec0 	bl	8002ab8 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006d38:	2240      	movs	r2, #64	; 0x40
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	4806      	ldr	r0, [pc, #24]	; (8006d58 <USBD_LL_Init+0x90>)
 8006d3e:	f7fb fe75 	bl	8002a2c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006d42:	2280      	movs	r2, #128	; 0x80
 8006d44:	2101      	movs	r1, #1
 8006d46:	4804      	ldr	r0, [pc, #16]	; (8006d58 <USBD_LL_Init+0x90>)
 8006d48:	f7fb fe70 	bl	8002a2c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	20001f74 	.word	0x20001f74

08006d5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fa fe77 	bl	8001a66 <HAL_PCD_Start>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 f92e 	bl	8006fe0 <USBD_Get_USB_Status>
 8006d84:	4603      	mov	r3, r0
 8006d86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d88:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b084      	sub	sp, #16
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	4608      	mov	r0, r1
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	461a      	mov	r2, r3
 8006da0:	4603      	mov	r3, r0
 8006da2:	70fb      	strb	r3, [r7, #3]
 8006da4:	460b      	mov	r3, r1
 8006da6:	70bb      	strb	r3, [r7, #2]
 8006da8:	4613      	mov	r3, r2
 8006daa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006db0:	2300      	movs	r3, #0
 8006db2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006dba:	78bb      	ldrb	r3, [r7, #2]
 8006dbc:	883a      	ldrh	r2, [r7, #0]
 8006dbe:	78f9      	ldrb	r1, [r7, #3]
 8006dc0:	f7fb fa3c 	bl	800223c <HAL_PCD_EP_Open>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 f908 	bl	8006fe0 <USBD_Get_USB_Status>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006dd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b084      	sub	sp, #16
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
 8006de6:	460b      	mov	r3, r1
 8006de8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dea:	2300      	movs	r3, #0
 8006dec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006df8:	78fa      	ldrb	r2, [r7, #3]
 8006dfa:	4611      	mov	r1, r2
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7fb fa85 	bl	800230c <HAL_PCD_EP_Close>
 8006e02:	4603      	mov	r3, r0
 8006e04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e06:	7bfb      	ldrb	r3, [r7, #15]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 f8e9 	bl	8006fe0 <USBD_Get_USB_Status>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e12:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	460b      	mov	r3, r1
 8006e26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e36:	78fa      	ldrb	r2, [r7, #3]
 8006e38:	4611      	mov	r1, r2
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fb fb5c 	bl	80024f8 <HAL_PCD_EP_SetStall>
 8006e40:	4603      	mov	r3, r0
 8006e42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 f8ca 	bl	8006fe0 <USBD_Get_USB_Status>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e50:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b084      	sub	sp, #16
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	460b      	mov	r3, r1
 8006e64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e74:	78fa      	ldrb	r2, [r7, #3]
 8006e76:	4611      	mov	r1, r2
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7fb fba1 	bl	80025c0 <HAL_PCD_EP_ClrStall>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e82:	7bfb      	ldrb	r3, [r7, #15]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 f8ab 	bl	8006fe0 <USBD_Get_USB_Status>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006eaa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006eac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	da0b      	bge.n	8006ecc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006eb4:	78fb      	ldrb	r3, [r7, #3]
 8006eb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006eba:	68f9      	ldr	r1, [r7, #12]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	00db      	lsls	r3, r3, #3
 8006ec0:	1a9b      	subs	r3, r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	440b      	add	r3, r1
 8006ec6:	333e      	adds	r3, #62	; 0x3e
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	e00b      	b.n	8006ee4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006ecc:	78fb      	ldrb	r3, [r7, #3]
 8006ece:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ed2:	68f9      	ldr	r1, [r7, #12]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	00db      	lsls	r3, r3, #3
 8006ed8:	1a9b      	subs	r3, r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	440b      	add	r3, r1
 8006ede:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006ee2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bc80      	pop	{r7}
 8006eec:	4770      	bx	lr

08006eee <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b084      	sub	sp, #16
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f08:	78fa      	ldrb	r2, [r7, #3]
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fb f970 	bl	80021f2 <HAL_PCD_SetAddress>
 8006f12:	4603      	mov	r3, r0
 8006f14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f000 f861 	bl	8006fe0 <USBD_Get_USB_Status>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	607a      	str	r2, [r7, #4]
 8006f36:	461a      	mov	r2, r3
 8006f38:	460b      	mov	r3, r1
 8006f3a:	72fb      	strb	r3, [r7, #11]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f44:	2300      	movs	r3, #0
 8006f46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f4e:	893b      	ldrh	r3, [r7, #8]
 8006f50:	7af9      	ldrb	r1, [r7, #11]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	f7fb fa86 	bl	8002464 <HAL_PCD_EP_Transmit>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f5c:	7dfb      	ldrb	r3, [r7, #23]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 f83e 	bl	8006fe0 <USBD_Get_USB_Status>
 8006f64:	4603      	mov	r3, r0
 8006f66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006f68:	7dbb      	ldrb	r3, [r7, #22]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3718      	adds	r7, #24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b086      	sub	sp, #24
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	60f8      	str	r0, [r7, #12]
 8006f7a:	607a      	str	r2, [r7, #4]
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	460b      	mov	r3, r1
 8006f80:	72fb      	strb	r3, [r7, #11]
 8006f82:	4613      	mov	r3, r2
 8006f84:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f94:	893b      	ldrh	r3, [r7, #8]
 8006f96:	7af9      	ldrb	r1, [r7, #11]
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	f7fb fa01 	bl	80023a0 <HAL_PCD_EP_Receive>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fa2:	7dfb      	ldrb	r3, [r7, #23]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f000 f81b 	bl	8006fe0 <USBD_Get_USB_Status>
 8006faa:	4603      	mov	r3, r0
 8006fac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006fae:	7dbb      	ldrb	r3, [r7, #22]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3718      	adds	r7, #24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fca:	78fa      	ldrb	r2, [r7, #3]
 8006fcc:	4611      	mov	r1, r2
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7fb fa31 	bl	8002436 <HAL_PCD_EP_GetRxCount>
 8006fd4:	4603      	mov	r3, r0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
	...

08006fe0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006fee:	79fb      	ldrb	r3, [r7, #7]
 8006ff0:	2b03      	cmp	r3, #3
 8006ff2:	d817      	bhi.n	8007024 <USBD_Get_USB_Status+0x44>
 8006ff4:	a201      	add	r2, pc, #4	; (adr r2, 8006ffc <USBD_Get_USB_Status+0x1c>)
 8006ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffa:	bf00      	nop
 8006ffc:	0800700d 	.word	0x0800700d
 8007000:	08007013 	.word	0x08007013
 8007004:	08007019 	.word	0x08007019
 8007008:	0800701f 	.word	0x0800701f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800700c:	2300      	movs	r3, #0
 800700e:	73fb      	strb	r3, [r7, #15]
    break;
 8007010:	e00b      	b.n	800702a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007012:	2302      	movs	r3, #2
 8007014:	73fb      	strb	r3, [r7, #15]
    break;
 8007016:	e008      	b.n	800702a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007018:	2301      	movs	r3, #1
 800701a:	73fb      	strb	r3, [r7, #15]
    break;
 800701c:	e005      	b.n	800702a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800701e:	2302      	movs	r3, #2
 8007020:	73fb      	strb	r3, [r7, #15]
    break;
 8007022:	e002      	b.n	800702a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007024:	2302      	movs	r3, #2
 8007026:	73fb      	strb	r3, [r7, #15]
    break;
 8007028:	bf00      	nop
  }
  return usb_status;
 800702a:	7bfb      	ldrb	r3, [r7, #15]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3714      	adds	r7, #20
 8007030:	46bd      	mov	sp, r7
 8007032:	bc80      	pop	{r7}
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop

08007038 <__errno>:
 8007038:	4b01      	ldr	r3, [pc, #4]	; (8007040 <__errno+0x8>)
 800703a:	6818      	ldr	r0, [r3, #0]
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	2000017c 	.word	0x2000017c

08007044 <__libc_init_array>:
 8007044:	b570      	push	{r4, r5, r6, lr}
 8007046:	2500      	movs	r5, #0
 8007048:	4e0c      	ldr	r6, [pc, #48]	; (800707c <__libc_init_array+0x38>)
 800704a:	4c0d      	ldr	r4, [pc, #52]	; (8007080 <__libc_init_array+0x3c>)
 800704c:	1ba4      	subs	r4, r4, r6
 800704e:	10a4      	asrs	r4, r4, #2
 8007050:	42a5      	cmp	r5, r4
 8007052:	d109      	bne.n	8007068 <__libc_init_array+0x24>
 8007054:	f000 f8fe 	bl	8007254 <_init>
 8007058:	2500      	movs	r5, #0
 800705a:	4e0a      	ldr	r6, [pc, #40]	; (8007084 <__libc_init_array+0x40>)
 800705c:	4c0a      	ldr	r4, [pc, #40]	; (8007088 <__libc_init_array+0x44>)
 800705e:	1ba4      	subs	r4, r4, r6
 8007060:	10a4      	asrs	r4, r4, #2
 8007062:	42a5      	cmp	r5, r4
 8007064:	d105      	bne.n	8007072 <__libc_init_array+0x2e>
 8007066:	bd70      	pop	{r4, r5, r6, pc}
 8007068:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800706c:	4798      	blx	r3
 800706e:	3501      	adds	r5, #1
 8007070:	e7ee      	b.n	8007050 <__libc_init_array+0xc>
 8007072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007076:	4798      	blx	r3
 8007078:	3501      	adds	r5, #1
 800707a:	e7f2      	b.n	8007062 <__libc_init_array+0x1e>
 800707c:	08007308 	.word	0x08007308
 8007080:	08007308 	.word	0x08007308
 8007084:	08007308 	.word	0x08007308
 8007088:	0800730c 	.word	0x0800730c

0800708c <malloc>:
 800708c:	4b02      	ldr	r3, [pc, #8]	; (8007098 <malloc+0xc>)
 800708e:	4601      	mov	r1, r0
 8007090:	6818      	ldr	r0, [r3, #0]
 8007092:	f000 b85f 	b.w	8007154 <_malloc_r>
 8007096:	bf00      	nop
 8007098:	2000017c 	.word	0x2000017c

0800709c <free>:
 800709c:	4b02      	ldr	r3, [pc, #8]	; (80070a8 <free+0xc>)
 800709e:	4601      	mov	r1, r0
 80070a0:	6818      	ldr	r0, [r3, #0]
 80070a2:	f000 b80b 	b.w	80070bc <_free_r>
 80070a6:	bf00      	nop
 80070a8:	2000017c 	.word	0x2000017c

080070ac <memset>:
 80070ac:	4603      	mov	r3, r0
 80070ae:	4402      	add	r2, r0
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d100      	bne.n	80070b6 <memset+0xa>
 80070b4:	4770      	bx	lr
 80070b6:	f803 1b01 	strb.w	r1, [r3], #1
 80070ba:	e7f9      	b.n	80070b0 <memset+0x4>

080070bc <_free_r>:
 80070bc:	b538      	push	{r3, r4, r5, lr}
 80070be:	4605      	mov	r5, r0
 80070c0:	2900      	cmp	r1, #0
 80070c2:	d043      	beq.n	800714c <_free_r+0x90>
 80070c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070c8:	1f0c      	subs	r4, r1, #4
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	bfb8      	it	lt
 80070ce:	18e4      	addlt	r4, r4, r3
 80070d0:	f000 f8be 	bl	8007250 <__malloc_lock>
 80070d4:	4a1e      	ldr	r2, [pc, #120]	; (8007150 <_free_r+0x94>)
 80070d6:	6813      	ldr	r3, [r2, #0]
 80070d8:	4610      	mov	r0, r2
 80070da:	b933      	cbnz	r3, 80070ea <_free_r+0x2e>
 80070dc:	6063      	str	r3, [r4, #4]
 80070de:	6014      	str	r4, [r2, #0]
 80070e0:	4628      	mov	r0, r5
 80070e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070e6:	f000 b8b4 	b.w	8007252 <__malloc_unlock>
 80070ea:	42a3      	cmp	r3, r4
 80070ec:	d90b      	bls.n	8007106 <_free_r+0x4a>
 80070ee:	6821      	ldr	r1, [r4, #0]
 80070f0:	1862      	adds	r2, r4, r1
 80070f2:	4293      	cmp	r3, r2
 80070f4:	bf01      	itttt	eq
 80070f6:	681a      	ldreq	r2, [r3, #0]
 80070f8:	685b      	ldreq	r3, [r3, #4]
 80070fa:	1852      	addeq	r2, r2, r1
 80070fc:	6022      	streq	r2, [r4, #0]
 80070fe:	6063      	str	r3, [r4, #4]
 8007100:	6004      	str	r4, [r0, #0]
 8007102:	e7ed      	b.n	80070e0 <_free_r+0x24>
 8007104:	4613      	mov	r3, r2
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	b10a      	cbz	r2, 800710e <_free_r+0x52>
 800710a:	42a2      	cmp	r2, r4
 800710c:	d9fa      	bls.n	8007104 <_free_r+0x48>
 800710e:	6819      	ldr	r1, [r3, #0]
 8007110:	1858      	adds	r0, r3, r1
 8007112:	42a0      	cmp	r0, r4
 8007114:	d10b      	bne.n	800712e <_free_r+0x72>
 8007116:	6820      	ldr	r0, [r4, #0]
 8007118:	4401      	add	r1, r0
 800711a:	1858      	adds	r0, r3, r1
 800711c:	4282      	cmp	r2, r0
 800711e:	6019      	str	r1, [r3, #0]
 8007120:	d1de      	bne.n	80070e0 <_free_r+0x24>
 8007122:	6810      	ldr	r0, [r2, #0]
 8007124:	6852      	ldr	r2, [r2, #4]
 8007126:	4401      	add	r1, r0
 8007128:	6019      	str	r1, [r3, #0]
 800712a:	605a      	str	r2, [r3, #4]
 800712c:	e7d8      	b.n	80070e0 <_free_r+0x24>
 800712e:	d902      	bls.n	8007136 <_free_r+0x7a>
 8007130:	230c      	movs	r3, #12
 8007132:	602b      	str	r3, [r5, #0]
 8007134:	e7d4      	b.n	80070e0 <_free_r+0x24>
 8007136:	6820      	ldr	r0, [r4, #0]
 8007138:	1821      	adds	r1, r4, r0
 800713a:	428a      	cmp	r2, r1
 800713c:	bf01      	itttt	eq
 800713e:	6811      	ldreq	r1, [r2, #0]
 8007140:	6852      	ldreq	r2, [r2, #4]
 8007142:	1809      	addeq	r1, r1, r0
 8007144:	6021      	streq	r1, [r4, #0]
 8007146:	6062      	str	r2, [r4, #4]
 8007148:	605c      	str	r4, [r3, #4]
 800714a:	e7c9      	b.n	80070e0 <_free_r+0x24>
 800714c:	bd38      	pop	{r3, r4, r5, pc}
 800714e:	bf00      	nop
 8007150:	2000020c 	.word	0x2000020c

08007154 <_malloc_r>:
 8007154:	b570      	push	{r4, r5, r6, lr}
 8007156:	1ccd      	adds	r5, r1, #3
 8007158:	f025 0503 	bic.w	r5, r5, #3
 800715c:	3508      	adds	r5, #8
 800715e:	2d0c      	cmp	r5, #12
 8007160:	bf38      	it	cc
 8007162:	250c      	movcc	r5, #12
 8007164:	2d00      	cmp	r5, #0
 8007166:	4606      	mov	r6, r0
 8007168:	db01      	blt.n	800716e <_malloc_r+0x1a>
 800716a:	42a9      	cmp	r1, r5
 800716c:	d903      	bls.n	8007176 <_malloc_r+0x22>
 800716e:	230c      	movs	r3, #12
 8007170:	6033      	str	r3, [r6, #0]
 8007172:	2000      	movs	r0, #0
 8007174:	bd70      	pop	{r4, r5, r6, pc}
 8007176:	f000 f86b 	bl	8007250 <__malloc_lock>
 800717a:	4a21      	ldr	r2, [pc, #132]	; (8007200 <_malloc_r+0xac>)
 800717c:	6814      	ldr	r4, [r2, #0]
 800717e:	4621      	mov	r1, r4
 8007180:	b991      	cbnz	r1, 80071a8 <_malloc_r+0x54>
 8007182:	4c20      	ldr	r4, [pc, #128]	; (8007204 <_malloc_r+0xb0>)
 8007184:	6823      	ldr	r3, [r4, #0]
 8007186:	b91b      	cbnz	r3, 8007190 <_malloc_r+0x3c>
 8007188:	4630      	mov	r0, r6
 800718a:	f000 f83d 	bl	8007208 <_sbrk_r>
 800718e:	6020      	str	r0, [r4, #0]
 8007190:	4629      	mov	r1, r5
 8007192:	4630      	mov	r0, r6
 8007194:	f000 f838 	bl	8007208 <_sbrk_r>
 8007198:	1c43      	adds	r3, r0, #1
 800719a:	d124      	bne.n	80071e6 <_malloc_r+0x92>
 800719c:	230c      	movs	r3, #12
 800719e:	4630      	mov	r0, r6
 80071a0:	6033      	str	r3, [r6, #0]
 80071a2:	f000 f856 	bl	8007252 <__malloc_unlock>
 80071a6:	e7e4      	b.n	8007172 <_malloc_r+0x1e>
 80071a8:	680b      	ldr	r3, [r1, #0]
 80071aa:	1b5b      	subs	r3, r3, r5
 80071ac:	d418      	bmi.n	80071e0 <_malloc_r+0x8c>
 80071ae:	2b0b      	cmp	r3, #11
 80071b0:	d90f      	bls.n	80071d2 <_malloc_r+0x7e>
 80071b2:	600b      	str	r3, [r1, #0]
 80071b4:	18cc      	adds	r4, r1, r3
 80071b6:	50cd      	str	r5, [r1, r3]
 80071b8:	4630      	mov	r0, r6
 80071ba:	f000 f84a 	bl	8007252 <__malloc_unlock>
 80071be:	f104 000b 	add.w	r0, r4, #11
 80071c2:	1d23      	adds	r3, r4, #4
 80071c4:	f020 0007 	bic.w	r0, r0, #7
 80071c8:	1ac3      	subs	r3, r0, r3
 80071ca:	d0d3      	beq.n	8007174 <_malloc_r+0x20>
 80071cc:	425a      	negs	r2, r3
 80071ce:	50e2      	str	r2, [r4, r3]
 80071d0:	e7d0      	b.n	8007174 <_malloc_r+0x20>
 80071d2:	684b      	ldr	r3, [r1, #4]
 80071d4:	428c      	cmp	r4, r1
 80071d6:	bf16      	itet	ne
 80071d8:	6063      	strne	r3, [r4, #4]
 80071da:	6013      	streq	r3, [r2, #0]
 80071dc:	460c      	movne	r4, r1
 80071de:	e7eb      	b.n	80071b8 <_malloc_r+0x64>
 80071e0:	460c      	mov	r4, r1
 80071e2:	6849      	ldr	r1, [r1, #4]
 80071e4:	e7cc      	b.n	8007180 <_malloc_r+0x2c>
 80071e6:	1cc4      	adds	r4, r0, #3
 80071e8:	f024 0403 	bic.w	r4, r4, #3
 80071ec:	42a0      	cmp	r0, r4
 80071ee:	d005      	beq.n	80071fc <_malloc_r+0xa8>
 80071f0:	1a21      	subs	r1, r4, r0
 80071f2:	4630      	mov	r0, r6
 80071f4:	f000 f808 	bl	8007208 <_sbrk_r>
 80071f8:	3001      	adds	r0, #1
 80071fa:	d0cf      	beq.n	800719c <_malloc_r+0x48>
 80071fc:	6025      	str	r5, [r4, #0]
 80071fe:	e7db      	b.n	80071b8 <_malloc_r+0x64>
 8007200:	2000020c 	.word	0x2000020c
 8007204:	20000210 	.word	0x20000210

08007208 <_sbrk_r>:
 8007208:	b538      	push	{r3, r4, r5, lr}
 800720a:	2300      	movs	r3, #0
 800720c:	4c05      	ldr	r4, [pc, #20]	; (8007224 <_sbrk_r+0x1c>)
 800720e:	4605      	mov	r5, r0
 8007210:	4608      	mov	r0, r1
 8007212:	6023      	str	r3, [r4, #0]
 8007214:	f7f9 ff50 	bl	80010b8 <_sbrk>
 8007218:	1c43      	adds	r3, r0, #1
 800721a:	d102      	bne.n	8007222 <_sbrk_r+0x1a>
 800721c:	6823      	ldr	r3, [r4, #0]
 800721e:	b103      	cbz	r3, 8007222 <_sbrk_r+0x1a>
 8007220:	602b      	str	r3, [r5, #0]
 8007222:	bd38      	pop	{r3, r4, r5, pc}
 8007224:	20002374 	.word	0x20002374

08007228 <strncat>:
 8007228:	4603      	mov	r3, r0
 800722a:	b530      	push	{r4, r5, lr}
 800722c:	781c      	ldrb	r4, [r3, #0]
 800722e:	1c5d      	adds	r5, r3, #1
 8007230:	b944      	cbnz	r4, 8007244 <strncat+0x1c>
 8007232:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 8007236:	d304      	bcc.n	8007242 <strncat+0x1a>
 8007238:	f811 4b01 	ldrb.w	r4, [r1], #1
 800723c:	f803 4b01 	strb.w	r4, [r3], #1
 8007240:	b914      	cbnz	r4, 8007248 <strncat+0x20>
 8007242:	bd30      	pop	{r4, r5, pc}
 8007244:	462b      	mov	r3, r5
 8007246:	e7f1      	b.n	800722c <strncat+0x4>
 8007248:	2a00      	cmp	r2, #0
 800724a:	d1f2      	bne.n	8007232 <strncat+0xa>
 800724c:	701a      	strb	r2, [r3, #0]
 800724e:	e7f0      	b.n	8007232 <strncat+0xa>

08007250 <__malloc_lock>:
 8007250:	4770      	bx	lr

08007252 <__malloc_unlock>:
 8007252:	4770      	bx	lr

08007254 <_init>:
 8007254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007256:	bf00      	nop
 8007258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800725a:	bc08      	pop	{r3}
 800725c:	469e      	mov	lr, r3
 800725e:	4770      	bx	lr

08007260 <_fini>:
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	bf00      	nop
 8007264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007266:	bc08      	pop	{r3}
 8007268:	469e      	mov	lr, r3
 800726a:	4770      	bx	lr
