
Robot_MCU_Down.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000704c  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080071d0  080071d0  000171d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007264  08007264  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007264  08007264  00017264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800726c  0800726c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800726c  0800726c  0001726c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007270  08007270  00017270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000217c  200001e0  08007454  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000235c  08007454  0002235c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e8e  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000349f  00000000  00000000  00038097  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001128  00000000  00000000  0003b538  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa0  00000000  00000000  0003c660  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022fb6  00000000  00000000  0003d600  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010a64  00000000  00000000  000605b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4aa2  00000000  00000000  0007101a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00135abc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047f8  00000000  00000000  00135b38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	200001e0 	.word	0x200001e0
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080071b8 	.word	0x080071b8

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	200001e4 	.word	0x200001e4
 80001c0:	080071b8 	.word	0x080071b8

080001c4 <strlen>:
 80001c4:	4603      	mov	r3, r0
 80001c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ca:	2a00      	cmp	r2, #0
 80001cc:	d1fb      	bne.n	80001c6 <strlen+0x2>
 80001ce:	1a18      	subs	r0, r3, r0
 80001d0:	3801      	subs	r0, #1
 80001d2:	4770      	bx	lr

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	4604      	mov	r4, r0
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0c03 	orr.w	ip, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	fbbc f7fe 	udiv	r7, ip, lr
 800023a:	fa1f f885 	uxth.w	r8, r5
 800023e:	fb0e c317 	mls	r3, lr, r7, ip
 8000242:	fb07 f908 	mul.w	r9, r7, r8
 8000246:	0c21      	lsrs	r1, r4, #16
 8000248:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024c:	4599      	cmp	r9, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8000256:	f080 811c 	bcs.w	8000492 <__udivmoddi4+0x28e>
 800025a:	4599      	cmp	r9, r3
 800025c:	f240 8119 	bls.w	8000492 <__udivmoddi4+0x28e>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	eba3 0309 	sub.w	r3, r3, r9
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	fb00 f108 	mul.w	r1, r0, r8
 8000274:	b2a4      	uxth	r4, r4
 8000276:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027a:	42a1      	cmp	r1, r4
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	192c      	adds	r4, r5, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 8107 	bcs.w	8000496 <__udivmoddi4+0x292>
 8000288:	42a1      	cmp	r1, r4
 800028a:	f240 8104 	bls.w	8000496 <__udivmoddi4+0x292>
 800028e:	3802      	subs	r0, #2
 8000290:	442c      	add	r4, r5
 8000292:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000296:	2700      	movs	r7, #0
 8000298:	1a64      	subs	r4, r4, r1
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	2300      	movs	r3, #0
 800029e:	40d4      	lsrs	r4, r2
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ec 	beq.w	800048c <__udivmoddi4+0x288>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d148      	bne.n	800035c <__udivmoddi4+0x158>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fb 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469c      	mov	ip, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4c00 	strd	r4, ip, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	2701      	movs	r7, #1
 80002f8:	1b49      	subs	r1, r1, r5
 80002fa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002fe:	fa1f f985 	uxth.w	r9, r5
 8000302:	fbb1 fef8 	udiv	lr, r1, r8
 8000306:	fb08 111e 	mls	r1, r8, lr, r1
 800030a:	fb09 f00e 	mul.w	r0, r9, lr
 800030e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000312:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000316:	4298      	cmp	r0, r3
 8000318:	d907      	bls.n	800032a <__udivmoddi4+0x126>
 800031a:	18eb      	adds	r3, r5, r3
 800031c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x124>
 8000322:	4298      	cmp	r0, r3
 8000324:	f200 80cd 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 8000328:	468e      	mov	lr, r1
 800032a:	1a1b      	subs	r3, r3, r0
 800032c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000330:	fb08 3310 	mls	r3, r8, r0, r3
 8000334:	fb09 f900 	mul.w	r9, r9, r0
 8000338:	b2a4      	uxth	r4, r4
 800033a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800033e:	45a1      	cmp	r9, r4
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000342:	192c      	adds	r4, r5, r4
 8000344:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a1      	cmp	r9, r4
 800034c:	f200 80b6 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000350:	4618      	mov	r0, r3
 8000352:	eba4 0409 	sub.w	r4, r4, r9
 8000356:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800035a:	e79e      	b.n	800029a <__udivmoddi4+0x96>
 800035c:	f1c7 0520 	rsb	r5, r7, #32
 8000360:	40bb      	lsls	r3, r7
 8000362:	fa22 fc05 	lsr.w	ip, r2, r5
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa21 f405 	lsr.w	r4, r1, r5
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fbb4 f9fe 	udiv	r9, r4, lr
 8000376:	fa1f f88c 	uxth.w	r8, ip
 800037a:	fb0e 4419 	mls	r4, lr, r9, r4
 800037e:	fa20 f305 	lsr.w	r3, r0, r5
 8000382:	40b9      	lsls	r1, r7
 8000384:	fb09 fa08 	mul.w	sl, r9, r8
 8000388:	4319      	orrs	r1, r3
 800038a:	0c0b      	lsrs	r3, r1, #16
 800038c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000390:	45a2      	cmp	sl, r4
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f307 	lsl.w	r3, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	45a2      	cmp	sl, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	eba4 040a 	sub.w	r4, r4, sl
 80003b8:	fbb4 f0fe 	udiv	r0, r4, lr
 80003bc:	fb0e 4410 	mls	r4, lr, r0, r4
 80003c0:	fb00 fa08 	mul.w	sl, r0, r8
 80003c4:	b289      	uxth	r1, r1
 80003c6:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x1dc>
 80003ce:	eb1c 0404 	adds.w	r4, ip, r4
 80003d2:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003d6:	d26b      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d8:	45a2      	cmp	sl, r4
 80003da:	d969      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003dc:	3802      	subs	r0, #2
 80003de:	4464      	add	r4, ip
 80003e0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e4:	fba0 8902 	umull	r8, r9, r0, r2
 80003e8:	eba4 040a 	sub.w	r4, r4, sl
 80003ec:	454c      	cmp	r4, r9
 80003ee:	4641      	mov	r1, r8
 80003f0:	46ce      	mov	lr, r9
 80003f2:	d354      	bcc.n	800049e <__udivmoddi4+0x29a>
 80003f4:	d051      	beq.n	800049a <__udivmoddi4+0x296>
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d069      	beq.n	80004ce <__udivmoddi4+0x2ca>
 80003fa:	1a5a      	subs	r2, r3, r1
 80003fc:	eb64 040e 	sbc.w	r4, r4, lr
 8000400:	fa04 f505 	lsl.w	r5, r4, r5
 8000404:	fa22 f307 	lsr.w	r3, r2, r7
 8000408:	40fc      	lsrs	r4, r7
 800040a:	431d      	orrs	r5, r3
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	4095      	lsls	r5, r2
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	fa21 f003 	lsr.w	r0, r1, r3
 800041e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000422:	fbb0 f7f8 	udiv	r7, r0, r8
 8000426:	fa1f f985 	uxth.w	r9, r5
 800042a:	fb08 0017 	mls	r0, r8, r7, r0
 800042e:	fa24 f303 	lsr.w	r3, r4, r3
 8000432:	4091      	lsls	r1, r2
 8000434:	fb07 fc09 	mul.w	ip, r7, r9
 8000438:	430b      	orrs	r3, r1
 800043a:	0c19      	lsrs	r1, r3, #16
 800043c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000440:	458c      	cmp	ip, r1
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x254>
 8000448:	1869      	adds	r1, r5, r1
 800044a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800044e:	d231      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000450:	458c      	cmp	ip, r1
 8000452:	d92f      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	3f02      	subs	r7, #2
 8000456:	4429      	add	r1, r5
 8000458:	eba1 010c 	sub.w	r1, r1, ip
 800045c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000460:	fb08 1c10 	mls	ip, r8, r0, r1
 8000464:	fb00 fe09 	mul.w	lr, r0, r9
 8000468:	b299      	uxth	r1, r3
 800046a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000478:	d218      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047a:	458e      	cmp	lr, r1
 800047c:	d916      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	eba1 010e 	sub.w	r1, r1, lr
 8000486:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048a:	e73a      	b.n	8000302 <__udivmoddi4+0xfe>
 800048c:	4637      	mov	r7, r6
 800048e:	4630      	mov	r0, r6
 8000490:	e708      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000492:	460f      	mov	r7, r1
 8000494:	e6e6      	b.n	8000264 <__udivmoddi4+0x60>
 8000496:	4618      	mov	r0, r3
 8000498:	e6fb      	b.n	8000292 <__udivmoddi4+0x8e>
 800049a:	4543      	cmp	r3, r8
 800049c:	d2ab      	bcs.n	80003f6 <__udivmoddi4+0x1f2>
 800049e:	ebb8 0102 	subs.w	r1, r8, r2
 80004a2:	eb69 020c 	sbc.w	r2, r9, ip
 80004a6:	3801      	subs	r0, #1
 80004a8:	4696      	mov	lr, r2
 80004aa:	e7a4      	b.n	80003f6 <__udivmoddi4+0x1f2>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e7e8      	b.n	8000482 <__udivmoddi4+0x27e>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e795      	b.n	80003e0 <__udivmoddi4+0x1dc>
 80004b4:	4607      	mov	r7, r0
 80004b6:	e7cf      	b.n	8000458 <__udivmoddi4+0x254>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	442c      	add	r4, r5
 80004c0:	e747      	b.n	8000352 <__udivmoddi4+0x14e>
 80004c2:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c6:	442b      	add	r3, r5
 80004c8:	e72f      	b.n	800032a <__udivmoddi4+0x126>
 80004ca:	4638      	mov	r0, r7
 80004cc:	e707      	b.n	80002de <__udivmoddi4+0xda>
 80004ce:	4637      	mov	r7, r6
 80004d0:	e6e8      	b.n	80002a4 <__udivmoddi4+0xa0>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <RGBLeds_Init>:

struct RGBLeds_State_Type RGBLeds_State[3];
int SelfTestCounterTmo = 0;

void RGBLeds_Init()
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	RGBLeds_SetColorOff(LeftArm);
 80004dc:	2000      	movs	r0, #0
 80004de:	f000 f8b5 	bl	800064c <RGBLeds_SetColorOff>
	RGBLeds_SetColorOff(RightArm);
 80004e2:	2001      	movs	r0, #1
 80004e4:	f000 f8b2 	bl	800064c <RGBLeds_SetColorOff>
	RGBLeds_SetColorOff(Base);
 80004e8:	2002      	movs	r0, #2
 80004ea:	f000 f8af 	bl	800064c <RGBLeds_SetColorOff>
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
	...

080004f4 <RGBLeds_SetColorOn>:

void RGBLeds_SetColorOn(enum ENUM_BodyParts BodyPart, enum ENUM_RGBLeds_Color Color)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	460a      	mov	r2, r1
 80004fe:	71fb      	strb	r3, [r7, #7]
 8000500:	4613      	mov	r3, r2
 8000502:	71bb      	strb	r3, [r7, #6]
	if (BodyPart == LeftArm)
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d12f      	bne.n	800056a <RGBLeds_SetColorOn+0x76>
	{
		if (Color == Red)   {HAL_GPIO_WritePin(LeftArmRed_GPIO_Port,   LeftArmRed_Pin,   GPIO_PIN_RESET);}
 800050a:	79bb      	ldrb	r3, [r7, #6]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d105      	bne.n	800051c <RGBLeds_SetColorOn+0x28>
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000516:	484a      	ldr	r0, [pc, #296]	; (8000640 <RGBLeds_SetColorOn+0x14c>)
 8000518:	f001 f922 	bl	8001760 <HAL_GPIO_WritePin>
		if (Color == Green) {HAL_GPIO_WritePin(LeftArmGreen_GPIO_Port, LeftArmGreen_Pin, GPIO_PIN_RESET);}
 800051c:	79bb      	ldrb	r3, [r7, #6]
 800051e:	2b01      	cmp	r3, #1
 8000520:	d105      	bne.n	800052e <RGBLeds_SetColorOn+0x3a>
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000528:	4845      	ldr	r0, [pc, #276]	; (8000640 <RGBLeds_SetColorOn+0x14c>)
 800052a:	f001 f919 	bl	8001760 <HAL_GPIO_WritePin>
		if (Color == Blue)  {HAL_GPIO_WritePin(LeftArmBlue_GPIO_Port,  LeftArmBlue_Pin,  GPIO_PIN_RESET);}
 800052e:	79bb      	ldrb	r3, [r7, #6]
 8000530:	2b02      	cmp	r3, #2
 8000532:	d105      	bne.n	8000540 <RGBLeds_SetColorOn+0x4c>
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800053a:	4841      	ldr	r0, [pc, #260]	; (8000640 <RGBLeds_SetColorOn+0x14c>)
 800053c:	f001 f910 	bl	8001760 <HAL_GPIO_WritePin>
		if (Color == White)
 8000540:	79bb      	ldrb	r3, [r7, #6]
 8000542:	2b03      	cmp	r3, #3
 8000544:	d111      	bne.n	800056a <RGBLeds_SetColorOn+0x76>
		{
			HAL_GPIO_WritePin(LeftArmRed_GPIO_Port,   LeftArmRed_Pin,   GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054c:	483c      	ldr	r0, [pc, #240]	; (8000640 <RGBLeds_SetColorOn+0x14c>)
 800054e:	f001 f907 	bl	8001760 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LeftArmGreen_GPIO_Port, LeftArmGreen_Pin, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000558:	4839      	ldr	r0, [pc, #228]	; (8000640 <RGBLeds_SetColorOn+0x14c>)
 800055a:	f001 f901 	bl	8001760 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LeftArmBlue_GPIO_Port,  LeftArmBlue_Pin,  GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000564:	4836      	ldr	r0, [pc, #216]	; (8000640 <RGBLeds_SetColorOn+0x14c>)
 8000566:	f001 f8fb 	bl	8001760 <HAL_GPIO_WritePin>
		}
	}

	if (BodyPart == RightArm)
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d12f      	bne.n	80005d0 <RGBLeds_SetColorOn+0xdc>
	{
		if (Color == Red)   {HAL_GPIO_WritePin(RightArmRed_GPIO_Port,   RightArmRed_Pin,   GPIO_PIN_RESET);}
 8000570:	79bb      	ldrb	r3, [r7, #6]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d105      	bne.n	8000582 <RGBLeds_SetColorOn+0x8e>
 8000576:	2200      	movs	r2, #0
 8000578:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800057c:	4831      	ldr	r0, [pc, #196]	; (8000644 <RGBLeds_SetColorOn+0x150>)
 800057e:	f001 f8ef 	bl	8001760 <HAL_GPIO_WritePin>
		if (Color == Green) {HAL_GPIO_WritePin(RightArmGreen_GPIO_Port, RightArmGreen_Pin, GPIO_PIN_RESET);}
 8000582:	79bb      	ldrb	r3, [r7, #6]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d105      	bne.n	8000594 <RGBLeds_SetColorOn+0xa0>
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800058e:	482d      	ldr	r0, [pc, #180]	; (8000644 <RGBLeds_SetColorOn+0x150>)
 8000590:	f001 f8e6 	bl	8001760 <HAL_GPIO_WritePin>
		if (Color == Blue)  {HAL_GPIO_WritePin(RightArmBlue_GPIO_Port,  RightArmBlue_Pin,  GPIO_PIN_RESET);}
 8000594:	79bb      	ldrb	r3, [r7, #6]
 8000596:	2b02      	cmp	r3, #2
 8000598:	d105      	bne.n	80005a6 <RGBLeds_SetColorOn+0xb2>
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a0:	4828      	ldr	r0, [pc, #160]	; (8000644 <RGBLeds_SetColorOn+0x150>)
 80005a2:	f001 f8dd 	bl	8001760 <HAL_GPIO_WritePin>
		if (Color == White)
 80005a6:	79bb      	ldrb	r3, [r7, #6]
 80005a8:	2b03      	cmp	r3, #3
 80005aa:	d111      	bne.n	80005d0 <RGBLeds_SetColorOn+0xdc>
		{
			HAL_GPIO_WritePin(RightArmRed_GPIO_Port,   RightArmRed_Pin,   GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005b2:	4824      	ldr	r0, [pc, #144]	; (8000644 <RGBLeds_SetColorOn+0x150>)
 80005b4:	f001 f8d4 	bl	8001760 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RightArmGreen_GPIO_Port, RightArmGreen_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005be:	4821      	ldr	r0, [pc, #132]	; (8000644 <RGBLeds_SetColorOn+0x150>)
 80005c0:	f001 f8ce 	bl	8001760 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RightArmBlue_GPIO_Port,  RightArmBlue_Pin,  GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ca:	481e      	ldr	r0, [pc, #120]	; (8000644 <RGBLeds_SetColorOn+0x150>)
 80005cc:	f001 f8c8 	bl	8001760 <HAL_GPIO_WritePin>
		}
	}

	if (BodyPart == Base)
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	d12f      	bne.n	8000636 <RGBLeds_SetColorOn+0x142>
	{
		if (Color == Red)   {HAL_GPIO_WritePin(BaseRed_GPIO_Port,   	BaseRed_Pin,   GPIO_PIN_RESET);}
 80005d6:	79bb      	ldrb	r3, [r7, #6]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d105      	bne.n	80005e8 <RGBLeds_SetColorOn+0xf4>
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e2:	4819      	ldr	r0, [pc, #100]	; (8000648 <RGBLeds_SetColorOn+0x154>)
 80005e4:	f001 f8bc 	bl	8001760 <HAL_GPIO_WritePin>
		if (Color == Green) {HAL_GPIO_WritePin(BaseGreen_GPIO_Port, 	BaseGreen_Pin, GPIO_PIN_RESET);}
 80005e8:	79bb      	ldrb	r3, [r7, #6]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d105      	bne.n	80005fa <RGBLeds_SetColorOn+0x106>
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f4:	4814      	ldr	r0, [pc, #80]	; (8000648 <RGBLeds_SetColorOn+0x154>)
 80005f6:	f001 f8b3 	bl	8001760 <HAL_GPIO_WritePin>
		if (Color == Blue)  {HAL_GPIO_WritePin(BaseBlue_GPIO_Port,  	BaseBlue_Pin,  GPIO_PIN_RESET);}
 80005fa:	79bb      	ldrb	r3, [r7, #6]
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d105      	bne.n	800060c <RGBLeds_SetColorOn+0x118>
 8000600:	2200      	movs	r2, #0
 8000602:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000606:	4810      	ldr	r0, [pc, #64]	; (8000648 <RGBLeds_SetColorOn+0x154>)
 8000608:	f001 f8aa 	bl	8001760 <HAL_GPIO_WritePin>
		if (Color == White)
 800060c:	79bb      	ldrb	r3, [r7, #6]
 800060e:	2b03      	cmp	r3, #3
 8000610:	d111      	bne.n	8000636 <RGBLeds_SetColorOn+0x142>
		{
			HAL_GPIO_WritePin(BaseRed_GPIO_Port,   	BaseRed_Pin,   GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000618:	480b      	ldr	r0, [pc, #44]	; (8000648 <RGBLeds_SetColorOn+0x154>)
 800061a:	f001 f8a1 	bl	8001760 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BaseGreen_GPIO_Port, 	BaseGreen_Pin, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000624:	4808      	ldr	r0, [pc, #32]	; (8000648 <RGBLeds_SetColorOn+0x154>)
 8000626:	f001 f89b 	bl	8001760 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BaseBlue_GPIO_Port,  	BaseBlue_Pin,  GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000630:	4805      	ldr	r0, [pc, #20]	; (8000648 <RGBLeds_SetColorOn+0x154>)
 8000632:	f001 f895 	bl	8001760 <HAL_GPIO_WritePin>
		}
	}
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40021c00 	.word	0x40021c00
 8000644:	40020c00 	.word	0x40020c00
 8000648:	40021800 	.word	0x40021800

0800064c <RGBLeds_SetColorOff>:

void RGBLeds_SetColorOff(enum ENUM_BodyParts BodyPart)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	if (BodyPart == LeftArm)
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d111      	bne.n	8000680 <RGBLeds_SetColorOff+0x34>
	{
		HAL_GPIO_WritePin(LeftArmRed_GPIO_Port, 	LeftArmRed_Pin, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000662:	481e      	ldr	r0, [pc, #120]	; (80006dc <RGBLeds_SetColorOff+0x90>)
 8000664:	f001 f87c 	bl	8001760 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LeftArmGreen_GPIO_Port, 	LeftArmGreen_Pin, GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800066e:	481b      	ldr	r0, [pc, #108]	; (80006dc <RGBLeds_SetColorOff+0x90>)
 8000670:	f001 f876 	bl	8001760 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LeftArmBlue_GPIO_Port, 	LeftArmBlue_Pin, GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800067a:	4818      	ldr	r0, [pc, #96]	; (80006dc <RGBLeds_SetColorOff+0x90>)
 800067c:	f001 f870 	bl	8001760 <HAL_GPIO_WritePin>
	}

	if (BodyPart == RightArm)
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d111      	bne.n	80006aa <RGBLeds_SetColorOff+0x5e>
	{
		HAL_GPIO_WritePin(RightArmRed_GPIO_Port, 	RightArmRed_Pin, GPIO_PIN_SET);
 8000686:	2201      	movs	r2, #1
 8000688:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800068c:	4814      	ldr	r0, [pc, #80]	; (80006e0 <RGBLeds_SetColorOff+0x94>)
 800068e:	f001 f867 	bl	8001760 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RightArmGreen_GPIO_Port,  RightArmGreen_Pin, GPIO_PIN_SET);
 8000692:	2201      	movs	r2, #1
 8000694:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000698:	4811      	ldr	r0, [pc, #68]	; (80006e0 <RGBLeds_SetColorOff+0x94>)
 800069a:	f001 f861 	bl	8001760 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RightArmBlue_GPIO_Port, 	RightArmBlue_Pin, GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006a4:	480e      	ldr	r0, [pc, #56]	; (80006e0 <RGBLeds_SetColorOff+0x94>)
 80006a6:	f001 f85b 	bl	8001760 <HAL_GPIO_WritePin>
	}

	if (BodyPart == Base)
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	2b02      	cmp	r3, #2
 80006ae:	d111      	bne.n	80006d4 <RGBLeds_SetColorOff+0x88>
	{
		HAL_GPIO_WritePin(BaseRed_GPIO_Port, 		BaseRed_Pin, GPIO_PIN_SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006b6:	480b      	ldr	r0, [pc, #44]	; (80006e4 <RGBLeds_SetColorOff+0x98>)
 80006b8:	f001 f852 	bl	8001760 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BaseGreen_GPIO_Port, 		BaseGreen_Pin, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c2:	4808      	ldr	r0, [pc, #32]	; (80006e4 <RGBLeds_SetColorOff+0x98>)
 80006c4:	f001 f84c 	bl	8001760 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BaseBlue_GPIO_Port, 		BaseBlue_Pin, GPIO_PIN_SET);
 80006c8:	2201      	movs	r2, #1
 80006ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <RGBLeds_SetColorOff+0x98>)
 80006d0:	f001 f846 	bl	8001760 <HAL_GPIO_WritePin>
	}
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40021c00 	.word	0x40021c00
 80006e0:	40020c00 	.word	0x40020c00
 80006e4:	40021800 	.word	0x40021800

080006e8 <RGBLeds_BlinkColor>:

void RGBLeds_BlinkColor(enum ENUM_BodyParts BodyPart, enum ENUM_RGBLeds_Color Color, enum ENUM_RGBLeds_Blink Blink)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
 80006f2:	460b      	mov	r3, r1
 80006f4:	71bb      	strb	r3, [r7, #6]
 80006f6:	4613      	mov	r3, r2
 80006f8:	717b      	strb	r3, [r7, #5]
	RGBLeds_State[BodyPart].Color = Color;
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	490a      	ldr	r1, [pc, #40]	; (8000728 <RGBLeds_BlinkColor+0x40>)
 80006fe:	79ba      	ldrb	r2, [r7, #6]
 8000700:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	RGBLeds_State[BodyPart].Blink = Blink;
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	4a08      	ldr	r2, [pc, #32]	; (8000728 <RGBLeds_BlinkColor+0x40>)
 8000708:	00db      	lsls	r3, r3, #3
 800070a:	4413      	add	r3, r2
 800070c:	797a      	ldrb	r2, [r7, #5]
 800070e:	705a      	strb	r2, [r3, #1]
	RGBLeds_State[BodyPart].Counter = 0;
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	4a05      	ldr	r2, [pc, #20]	; (8000728 <RGBLeds_BlinkColor+0x40>)
 8000714:	00db      	lsls	r3, r3, #3
 8000716:	4413      	add	r3, r2
 8000718:	2200      	movs	r2, #0
 800071a:	605a      	str	r2, [r3, #4]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000218 	.word	0x20000218

0800072c <RGBLeds_Update10Hz>:

void RGBLeds_Update10Hz()
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++)
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	e0b3      	b.n	80008a0 <RGBLeds_Update10Hz+0x174>
	{
		if (RGBLeds_State[i].Blink == Blink_Slow)
 8000738:	4a67      	ldr	r2, [pc, #412]	; (80008d8 <RGBLeds_Update10Hz+0x1ac>)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	00db      	lsls	r3, r3, #3
 800073e:	4413      	add	r3, r2
 8000740:	785b      	ldrb	r3, [r3, #1]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d133      	bne.n	80007ae <RGBLeds_Update10Hz+0x82>
		{
			if (RGBLeds_State[i].Counter == 0) { RGBLeds_SetColorOn ((enum ENUM_BodyParts)(i), RGBLeds_State[i].Color);}
 8000746:	4a64      	ldr	r2, [pc, #400]	; (80008d8 <RGBLeds_Update10Hz+0x1ac>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	00db      	lsls	r3, r3, #3
 800074c:	4413      	add	r3, r2
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d108      	bne.n	8000766 <RGBLeds_Update10Hz+0x3a>
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	b2d8      	uxtb	r0, r3
 8000758:	4a5f      	ldr	r2, [pc, #380]	; (80008d8 <RGBLeds_Update10Hz+0x1ac>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000760:	4619      	mov	r1, r3
 8000762:	f7ff fec7 	bl	80004f4 <RGBLeds_SetColorOn>
			if (RGBLeds_State[i].Counter == 5) { RGBLeds_SetColorOff((enum ENUM_BodyParts)(i));}
 8000766:	4a5c      	ldr	r2, [pc, #368]	; (80008d8 <RGBLeds_Update10Hz+0x1ac>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	00db      	lsls	r3, r3, #3
 800076c:	4413      	add	r3, r2
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	2b05      	cmp	r3, #5
 8000772:	d104      	bne.n	800077e <RGBLeds_Update10Hz+0x52>
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	b2db      	uxtb	r3, r3
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ff67 	bl	800064c <RGBLeds_SetColorOff>

			RGBLeds_State[i].Counter += 1;
 800077e:	4a56      	ldr	r2, [pc, #344]	; (80008d8 <RGBLeds_Update10Hz+0x1ac>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	00db      	lsls	r3, r3, #3
 8000784:	4413      	add	r3, r2
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	1c5a      	adds	r2, r3, #1
 800078a:	4953      	ldr	r1, [pc, #332]	; (80008d8 <RGBLeds_Update10Hz+0x1ac>)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	00db      	lsls	r3, r3, #3
 8000790:	440b      	add	r3, r1
 8000792:	605a      	str	r2, [r3, #4]
			if (RGBLeds_State[i].Counter >= 10) {RGBLeds_State[i].Counter = 0;}
 8000794:	4a50      	ldr	r2, [pc, #320]	; (80008d8 <RGBLeds_Update10Hz+0x1ac>)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	00db      	lsls	r3, r3, #3
 800079a:	4413      	add	r3, r2
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	2b09      	cmp	r3, #9
 80007a0:	dd05      	ble.n	80007ae <RGBLeds_Update10Hz+0x82>
 80007a2:	4a4d      	ldr	r2, [pc, #308]	; (80008d8 <RGBLeds_Update10Hz+0x1ac>)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	00db      	lsls	r3, r3, #3
 80007a8:	4413      	add	r3, r2
 80007aa:	2200      	movs	r2, #0
 80007ac:	605a      	str	r2, [r3, #4]
		}

		if (RGBLeds_State[i].Blink == Blink_Fast)
 80007ae:	4a4a      	ldr	r2, [pc, #296]	; (80008d8 <RGBLeds_Update10Hz+0x1ac>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	4413      	add	r3, r2
 80007b6:	785b      	ldrb	r3, [r3, #1]
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d133      	bne.n	8000824 <RGBLeds_Update10Hz+0xf8>
		{
			if (RGBLeds_State[i].Counter == 0) { RGBLeds_SetColorOn ((enum ENUM_BodyParts)(i), RGBLeds_State[i].Color);}
 80007bc:	4a46      	ldr	r2, [pc, #280]	; (80008d8 <RGBLeds_Update10Hz+0x1ac>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	00db      	lsls	r3, r3, #3
 80007c2:	4413      	add	r3, r2
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d108      	bne.n	80007dc <RGBLeds_Update10Hz+0xb0>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	b2d8      	uxtb	r0, r3
 80007ce:	4a42      	ldr	r2, [pc, #264]	; (80008d8 <RGBLeds_Update10Hz+0x1ac>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80007d6:	4619      	mov	r1, r3
 80007d8:	f7ff fe8c 	bl	80004f4 <RGBLeds_SetColorOn>
			if (RGBLeds_State[i].Counter == 3) { RGBLeds_SetColorOff((enum ENUM_BodyParts)(i));}
 80007dc:	4a3e      	ldr	r2, [pc, #248]	; (80008d8 <RGBLeds_Update10Hz+0x1ac>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	00db      	lsls	r3, r3, #3
 80007e2:	4413      	add	r3, r2
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	2b03      	cmp	r3, #3
 80007e8:	d104      	bne.n	80007f4 <RGBLeds_Update10Hz+0xc8>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ff2c 	bl	800064c <RGBLeds_SetColorOff>

			RGBLeds_State[i].Counter += 1;
 80007f4:	4a38      	ldr	r2, [pc, #224]	; (80008d8 <RGBLeds_Update10Hz+0x1ac>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	00db      	lsls	r3, r3, #3
 80007fa:	4413      	add	r3, r2
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	1c5a      	adds	r2, r3, #1
 8000800:	4935      	ldr	r1, [pc, #212]	; (80008d8 <RGBLeds_Update10Hz+0x1ac>)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	440b      	add	r3, r1
 8000808:	605a      	str	r2, [r3, #4]
			if (RGBLeds_State[i].Counter >= 6) {RGBLeds_State[i].Counter = 0;}
 800080a:	4a33      	ldr	r2, [pc, #204]	; (80008d8 <RGBLeds_Update10Hz+0x1ac>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	00db      	lsls	r3, r3, #3
 8000810:	4413      	add	r3, r2
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	2b05      	cmp	r3, #5
 8000816:	dd05      	ble.n	8000824 <RGBLeds_Update10Hz+0xf8>
 8000818:	4a2f      	ldr	r2, [pc, #188]	; (80008d8 <RGBLeds_Update10Hz+0x1ac>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	4413      	add	r3, r2
 8000820:	2200      	movs	r2, #0
 8000822:	605a      	str	r2, [r3, #4]
		}

		if (RGBLeds_State[i].Blink == Blink_VeryFast)
 8000824:	4a2c      	ldr	r2, [pc, #176]	; (80008d8 <RGBLeds_Update10Hz+0x1ac>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	00db      	lsls	r3, r3, #3
 800082a:	4413      	add	r3, r2
 800082c:	785b      	ldrb	r3, [r3, #1]
 800082e:	2b03      	cmp	r3, #3
 8000830:	d133      	bne.n	800089a <RGBLeds_Update10Hz+0x16e>
		{
			if (RGBLeds_State[i].Counter == 0) { RGBLeds_SetColorOn ((enum ENUM_BodyParts)(i), RGBLeds_State[i].Color);}
 8000832:	4a29      	ldr	r2, [pc, #164]	; (80008d8 <RGBLeds_Update10Hz+0x1ac>)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	00db      	lsls	r3, r3, #3
 8000838:	4413      	add	r3, r2
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d108      	bne.n	8000852 <RGBLeds_Update10Hz+0x126>
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	b2d8      	uxtb	r0, r3
 8000844:	4a24      	ldr	r2, [pc, #144]	; (80008d8 <RGBLeds_Update10Hz+0x1ac>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800084c:	4619      	mov	r1, r3
 800084e:	f7ff fe51 	bl	80004f4 <RGBLeds_SetColorOn>
			if (RGBLeds_State[i].Counter == 2) { RGBLeds_SetColorOff((enum ENUM_BodyParts)(i));}
 8000852:	4a21      	ldr	r2, [pc, #132]	; (80008d8 <RGBLeds_Update10Hz+0x1ac>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	00db      	lsls	r3, r3, #3
 8000858:	4413      	add	r3, r2
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	2b02      	cmp	r3, #2
 800085e:	d104      	bne.n	800086a <RGBLeds_Update10Hz+0x13e>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff fef1 	bl	800064c <RGBLeds_SetColorOff>

			RGBLeds_State[i].Counter += 1;
 800086a:	4a1b      	ldr	r2, [pc, #108]	; (80008d8 <RGBLeds_Update10Hz+0x1ac>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	4413      	add	r3, r2
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	4918      	ldr	r1, [pc, #96]	; (80008d8 <RGBLeds_Update10Hz+0x1ac>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	440b      	add	r3, r1
 800087e:	605a      	str	r2, [r3, #4]
			if (RGBLeds_State[i].Counter >= 4) {RGBLeds_State[i].Counter = 0;}
 8000880:	4a15      	ldr	r2, [pc, #84]	; (80008d8 <RGBLeds_Update10Hz+0x1ac>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	4413      	add	r3, r2
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	2b03      	cmp	r3, #3
 800088c:	dd05      	ble.n	800089a <RGBLeds_Update10Hz+0x16e>
 800088e:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <RGBLeds_Update10Hz+0x1ac>)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	00db      	lsls	r3, r3, #3
 8000894:	4413      	add	r3, r2
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 3; i++)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3301      	adds	r3, #1
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	f77f af48 	ble.w	8000738 <RGBLeds_Update10Hz+0xc>
	}

	//---------------------------------------------------------
	// Selftest update
	//---------------------------------------------------------
	SelfTestCounterTmo += 1;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <RGBLeds_Update10Hz+0x1b0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	3301      	adds	r3, #1
 80008ae:	4a0b      	ldr	r2, [pc, #44]	; (80008dc <RGBLeds_Update10Hz+0x1b0>)
 80008b0:	6013      	str	r3, [r2, #0]

	if (SelfTestCounterTmo >= 5 * UPDATE_10HZ)
 80008b2:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <RGBLeds_Update10Hz+0x1b0>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b31      	cmp	r3, #49	; 0x31
 80008b8:	dd0a      	ble.n	80008d0 <RGBLeds_Update10Hz+0x1a4>
	{
		RGBLeds_SelfTest(False);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f000 f810 	bl	80008e0 <RGBLeds_SelfTest>

		RGBLeds_SetColorOn(LeftArm, White);
 80008c0:	2103      	movs	r1, #3
 80008c2:	2000      	movs	r0, #0
 80008c4:	f7ff fe16 	bl	80004f4 <RGBLeds_SetColorOn>
		RGBLeds_SetColorOn(RightArm, White);
 80008c8:	2103      	movs	r1, #3
 80008ca:	2001      	movs	r0, #1
 80008cc:	f7ff fe12 	bl	80004f4 <RGBLeds_SetColorOn>
	}
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000218 	.word	0x20000218
 80008dc:	200001fc 	.word	0x200001fc

080008e0 <RGBLeds_SelfTest>:

void RGBLeds_SelfTest(enum ENUM_Booleans Enabled)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
	if (Enabled == True)
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d112      	bne.n	8000916 <RGBLeds_SelfTest+0x36>
	{
		SelfTestCounterTmo = 0;
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <RGBLeds_SelfTest+0x70>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]

		RGBLeds_BlinkColor(LeftArm, Red, Blink_Slow);
 80008f6:	2201      	movs	r2, #1
 80008f8:	2100      	movs	r1, #0
 80008fa:	2000      	movs	r0, #0
 80008fc:	f7ff fef4 	bl	80006e8 <RGBLeds_BlinkColor>
		RGBLeds_BlinkColor(RightArm, Green, Blink_Fast);
 8000900:	2202      	movs	r2, #2
 8000902:	2101      	movs	r1, #1
 8000904:	2001      	movs	r0, #1
 8000906:	f7ff feef 	bl	80006e8 <RGBLeds_BlinkColor>
		RGBLeds_BlinkColor(Base, White, Blink_VeryFast);
 800090a:	2203      	movs	r2, #3
 800090c:	2103      	movs	r1, #3
 800090e:	2002      	movs	r0, #2
 8000910:	f7ff feea 	bl	80006e8 <RGBLeds_BlinkColor>
		RGBLeds_SetColorOff(RightArm);

		RGBLeds_BlinkColor(Base, White, Blink_Off);
		RGBLeds_SetColorOff(Base);
	}
}
 8000914:	e017      	b.n	8000946 <RGBLeds_SelfTest+0x66>
		RGBLeds_BlinkColor(LeftArm, Red, Blink_Off);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	2000      	movs	r0, #0
 800091c:	f7ff fee4 	bl	80006e8 <RGBLeds_BlinkColor>
		RGBLeds_SetColorOff(LeftArm);
 8000920:	2000      	movs	r0, #0
 8000922:	f7ff fe93 	bl	800064c <RGBLeds_SetColorOff>
		RGBLeds_BlinkColor(RightArm, Green, Blink_Off);
 8000926:	2200      	movs	r2, #0
 8000928:	2101      	movs	r1, #1
 800092a:	2001      	movs	r0, #1
 800092c:	f7ff fedc 	bl	80006e8 <RGBLeds_BlinkColor>
		RGBLeds_SetColorOff(RightArm);
 8000930:	2001      	movs	r0, #1
 8000932:	f7ff fe8b 	bl	800064c <RGBLeds_SetColorOff>
		RGBLeds_BlinkColor(Base, White, Blink_Off);
 8000936:	2200      	movs	r2, #0
 8000938:	2103      	movs	r1, #3
 800093a:	2002      	movs	r0, #2
 800093c:	f7ff fed4 	bl	80006e8 <RGBLeds_BlinkColor>
		RGBLeds_SetColorOff(Base);
 8000940:	2002      	movs	r0, #2
 8000942:	f7ff fe83 	bl	800064c <RGBLeds_SetColorOff>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200001fc 	.word	0x200001fc

08000954 <Protocol_0x55_GetRxPointer>:
struct PROTOCOL_0X55_Data_Type PROTOCOL_0X55_RxData;
struct PROTOCOL_0X55_Data_Type PROTOCOL_0X55_TxData;

// Allow other modules to retreive the Rx pointer
struct PROTOCOL_0X55_Data_Type* Protocol_0x55_GetRxPointer()
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
	return (&PROTOCOL_0X55_RxData);
 8000958:	4b02      	ldr	r3, [pc, #8]	; (8000964 <Protocol_0x55_GetRxPointer+0x10>)
}
 800095a:	4618      	mov	r0, r3
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	20000240 	.word	0x20000240

08000968 <Protocol_0x55_CheckFifo>:
	PROTOCOL_0X55_RxData.NewData = 0;
	PROTOCOL_0X55_TxData.NewData = 0;
}

uint8_t Protocol_0x55_CheckFifo()
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
	return PROTOCOL_0X55_RxData.NewData;
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <Protocol_0x55_CheckFifo+0x14>)
 800096e:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
}
 8000972:	4618      	mov	r0, r3
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000240 	.word	0x20000240

08000980 <Protocol_0x55_ProcessRxCommand>:

void Protocol_0x55_ProcessRxCommand()
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	PROTOCOL_0X55_RxData.NewData = 0;
 8000984:	4b04      	ldr	r3, [pc, #16]	; (8000998 <Protocol_0x55_ProcessRxCommand+0x18>)
 8000986:	2200      	movs	r2, #0
 8000988:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401

	Protocol_0x55_SendVersion((char *) &PROTOCOL_0X55_TxData.FIFO_Data[0]);
 800098c:	4803      	ldr	r0, [pc, #12]	; (800099c <Protocol_0x55_ProcessRxCommand+0x1c>)
 800098e:	f000 f807 	bl	80009a0 <Protocol_0x55_SendVersion>
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000240 	.word	0x20000240
 800099c:	20000644 	.word	0x20000644

080009a0 <Protocol_0x55_SendVersion>:

void Protocol_0x55_SendVersion(char *Buffer)
{
 80009a0:	b5b0      	push	{r4, r5, r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	Protocol_0x55_PrepareNewMessage(Buffer, CMD_VERSION, RESPONSE_TRUE);
 80009a8:	2201      	movs	r2, #1
 80009aa:	2101      	movs	r1, #1
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f000 f867 	bl	8000a80 <Protocol_0x55_PrepareNewMessage>

	sprintf(&Buffer[3], "STM32F207 - Sanbot - Matthijs ");
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	3303      	adds	r3, #3
 80009b6:	4a2e      	ldr	r2, [pc, #184]	; (8000a70 <Protocol_0x55_SendVersion+0xd0>)
 80009b8:	461d      	mov	r5, r3
 80009ba:	4614      	mov	r4, r2
 80009bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009be:	6028      	str	r0, [r5, #0]
 80009c0:	6069      	str	r1, [r5, #4]
 80009c2:	60aa      	str	r2, [r5, #8]
 80009c4:	60eb      	str	r3, [r5, #12]
 80009c6:	cc07      	ldmia	r4!, {r0, r1, r2}
 80009c8:	6128      	str	r0, [r5, #16]
 80009ca:	6169      	str	r1, [r5, #20]
 80009cc:	61aa      	str	r2, [r5, #24]
 80009ce:	8823      	ldrh	r3, [r4, #0]
 80009d0:	78a2      	ldrb	r2, [r4, #2]
 80009d2:	83ab      	strh	r3, [r5, #28]
 80009d4:	4613      	mov	r3, r2
 80009d6:	77ab      	strb	r3, [r5, #30]
	sprintf(&Buffer[3 + strlen(&Buffer[3])], __TIME__);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3303      	adds	r3, #3
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fbf1 	bl	80001c4 <strlen>
 80009e2:	4603      	mov	r3, r0
 80009e4:	3303      	adds	r3, #3
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	4922      	ldr	r1, [pc, #136]	; (8000a74 <Protocol_0x55_SendVersion+0xd4>)
 80009ec:	461a      	mov	r2, r3
 80009ee:	460b      	mov	r3, r1
 80009f0:	cb03      	ldmia	r3!, {r0, r1}
 80009f2:	6010      	str	r0, [r2, #0]
 80009f4:	6051      	str	r1, [r2, #4]
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	7213      	strb	r3, [r2, #8]
	sprintf(&Buffer[3 + strlen(&Buffer[3])], " ");
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	3303      	adds	r3, #3
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fbe0 	bl	80001c4 <strlen>
 8000a04:	4603      	mov	r3, r0
 8000a06:	3303      	adds	r3, #3
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	491a      	ldr	r1, [pc, #104]	; (8000a78 <Protocol_0x55_SendVersion+0xd8>)
 8000a0e:	461a      	mov	r2, r3
 8000a10:	460b      	mov	r3, r1
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	8013      	strh	r3, [r2, #0]
	sprintf(&Buffer[3 + strlen(&Buffer[3])], __DATE__);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3303      	adds	r3, #3
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fbd2 	bl	80001c4 <strlen>
 8000a20:	4603      	mov	r3, r0
 8000a22:	3303      	adds	r3, #3
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	4413      	add	r3, r2
 8000a28:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <Protocol_0x55_SendVersion+0xdc>)
 8000a2a:	461c      	mov	r4, r3
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a30:	6020      	str	r0, [r4, #0]
 8000a32:	6061      	str	r1, [r4, #4]
 8000a34:	60a2      	str	r2, [r4, #8]

	int datalen = strlen(&Buffer[3]);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3303      	adds	r3, #3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fbc2 	bl	80001c4 <strlen>
 8000a40:	4603      	mov	r3, r0
 8000a42:	60fb      	str	r3, [r7, #12]

	Protocol_0x55_SetLength(Buffer, datalen);
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	4619      	mov	r1, r3
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f000 f83f 	bl	8000ace <Protocol_0x55_SetLength>
	Protocol_0x55_AddCRC(Buffer, datalen);
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	4619      	mov	r1, r3
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f000 f848 	bl	8000aec <Protocol_0x55_AddCRC>
	Protocol_0x55_Send(Buffer, datalen);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	4619      	mov	r1, r3
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f000 f8a5 	bl	8000bb2 <Protocol_0x55_Send>
}
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bdb0      	pop	{r4, r5, r7, pc}
 8000a70:	080071d0 	.word	0x080071d0
 8000a74:	080071f0 	.word	0x080071f0
 8000a78:	080071fc 	.word	0x080071fc
 8000a7c:	08007200 	.word	0x08007200

08000a80 <Protocol_0x55_PrepareNewMessage>:

void Protocol_0x55_PrepareNewMessage(char *Buffer, char Command, char Response)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	70fb      	strb	r3, [r7, #3]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	70bb      	strb	r3, [r7, #2]
	memset((uint8_t*)Buffer, 0, sizeof(Buffer));
 8000a90:	2204      	movs	r2, #4
 8000a92:	2100      	movs	r1, #0
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f006 fabb 	bl	8007010 <memset>

	Buffer[0] = 0x55;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2255      	movs	r2, #85	; 0x55
 8000a9e:	701a      	strb	r2, [r3, #0]
	Buffer[1] = (Command & 0x7f);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	78fa      	ldrb	r2, [r7, #3]
 8000aa6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	701a      	strb	r2, [r3, #0]

	if (Response == 1) {Buffer[1] = Buffer[1] | 0x80;}		// Set high bit
 8000aae:	78bb      	ldrb	r3, [r7, #2]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d108      	bne.n	8000ac6 <Protocol_0x55_PrepareNewMessage+0x46>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	781a      	ldrb	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	3301      	adds	r3, #1
 8000abe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000ac2:	b2d2      	uxtb	r2, r2
 8000ac4:	701a      	strb	r2, [r3, #0]
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <Protocol_0x55_SetLength>:

void Protocol_0x55_SetLength(char *Buffer, uint8_t datalen)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	70fb      	strb	r3, [r7, #3]
	Buffer[2] = datalen;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	3302      	adds	r3, #2
 8000ade:	78fa      	ldrb	r2, [r7, #3]
 8000ae0:	701a      	strb	r2, [r3, #0]
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <Protocol_0x55_AddCRC>:

void Protocol_0x55_AddCRC(char *Buffer, uint8_t datalen)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	460b      	mov	r3, r1
 8000af6:	70fb      	strb	r3, [r7, #3]
	// 0x55 CMD LEN + datalen
	uint16_t Result = Protocol_0x55_CalculateCRC16(Buffer, datalen);
 8000af8:	78fb      	ldrb	r3, [r7, #3]
 8000afa:	4619      	mov	r1, r3
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f000 f816 	bl	8000b2e <Protocol_0x55_CalculateCRC16>
 8000b02:	4603      	mov	r3, r0
 8000b04:	81fb      	strh	r3, [r7, #14]

	Buffer[datalen+3] 	= (Result & 0xff);
 8000b06:	78fb      	ldrb	r3, [r7, #3]
 8000b08:	3303      	adds	r3, #3
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	89fa      	ldrh	r2, [r7, #14]
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	701a      	strb	r2, [r3, #0]
	Buffer[datalen+4]	= ((Result >> 8) & 0xff);
 8000b14:	89fb      	ldrh	r3, [r7, #14]
 8000b16:	0a1b      	lsrs	r3, r3, #8
 8000b18:	b299      	uxth	r1, r3
 8000b1a:	78fb      	ldrb	r3, [r7, #3]
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	b2ca      	uxtb	r2, r1
 8000b24:	701a      	strb	r2, [r3, #0]
}
 8000b26:	bf00      	nop
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <Protocol_0x55_CalculateCRC16>:
//------------------------------------------------------------------------
// CRC-16 / Modbus version. start at 0xFFFF, 0x8005 reversed
// Reversed because CRC is shifted right instead of left.
//------------------------------------------------------------------------
uint16_t Protocol_0x55_CalculateCRC16(char *data, uint8_t msgSize)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b085      	sub	sp, #20
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	460b      	mov	r3, r1
 8000b38:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0xFFFF; // Initial value of CRC
 8000b3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b3e:	81fb      	strh	r3, [r7, #14]
	uint16_t crclen = msgSize - 2;	// Substract 2 CRC bytes
 8000b40:	78fb      	ldrb	r3, [r7, #3]
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	3b02      	subs	r3, #2
 8000b46:	817b      	strh	r3, [r7, #10]

	for (uint8_t i = 0; i < crclen; i++) {
 8000b48:	2300      	movs	r3, #0
 8000b4a:	737b      	strb	r3, [r7, #13]
 8000b4c:	e026      	b.n	8000b9c <Protocol_0x55_CalculateCRC16+0x6e>
		crc ^= data[i]; // XOR the next data byte
 8000b4e:	7b7b      	ldrb	r3, [r7, #13]
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	4413      	add	r3, r2
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	89fb      	ldrh	r3, [r7, #14]
 8000b5a:	4053      	eors	r3, r2
 8000b5c:	81fb      	strh	r3, [r7, #14]

		for (uint8_t j = 0; j < 8; j++) {
 8000b5e:	2300      	movs	r3, #0
 8000b60:	733b      	strb	r3, [r7, #12]
 8000b62:	e015      	b.n	8000b90 <Protocol_0x55_CalculateCRC16+0x62>
			if (crc & 0x0001) {
 8000b64:	89fb      	ldrh	r3, [r7, #14]
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d00a      	beq.n	8000b84 <Protocol_0x55_CalculateCRC16+0x56>
				crc >>= 1;
 8000b6e:	89fb      	ldrh	r3, [r7, #14]
 8000b70:	085b      	lsrs	r3, r3, #1
 8000b72:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001; // Polynomial for CRC-16/MODBUS (0x8005 reversed)
 8000b74:	89fb      	ldrh	r3, [r7, #14]
 8000b76:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8000b7a:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	81fb      	strh	r3, [r7, #14]
 8000b82:	e002      	b.n	8000b8a <Protocol_0x55_CalculateCRC16+0x5c>
			} else {
				crc >>= 1;
 8000b84:	89fb      	ldrh	r3, [r7, #14]
 8000b86:	085b      	lsrs	r3, r3, #1
 8000b88:	81fb      	strh	r3, [r7, #14]
		for (uint8_t j = 0; j < 8; j++) {
 8000b8a:	7b3b      	ldrb	r3, [r7, #12]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	733b      	strb	r3, [r7, #12]
 8000b90:	7b3b      	ldrb	r3, [r7, #12]
 8000b92:	2b07      	cmp	r3, #7
 8000b94:	d9e6      	bls.n	8000b64 <Protocol_0x55_CalculateCRC16+0x36>
	for (uint8_t i = 0; i < crclen; i++) {
 8000b96:	7b7b      	ldrb	r3, [r7, #13]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	737b      	strb	r3, [r7, #13]
 8000b9c:	7b7b      	ldrb	r3, [r7, #13]
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	897a      	ldrh	r2, [r7, #10]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d8d3      	bhi.n	8000b4e <Protocol_0x55_CalculateCRC16+0x20>
			}
		}
	}

	return crc;
 8000ba6:	89fb      	ldrh	r3, [r7, #14]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr

08000bb2 <Protocol_0x55_Send>:

void Protocol_0x55_Send(char *data, uint8_t datalen)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	70fb      	strb	r3, [r7, #3]
	CDC_Transmit_FS((uint8_t*)data, 3 + datalen + 2);
 8000bbe:	78fb      	ldrb	r3, [r7, #3]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	3305      	adds	r3, #5
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f005 fdb5 	bl	8006738 <CDC_Transmit_FS>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <System_Initialize>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void System_Initialize()
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim14);
 8000bdc:	4803      	ldr	r0, [pc, #12]	; (8000bec <System_Initialize+0x14>)
 8000bde:	f002 fb9b 	bl	8003318 <HAL_TIM_Base_Start_IT>

	RGBLeds_Init();
 8000be2:	f7ff fc79 	bl	80004d8 <RGBLeds_Init>
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000a48 	.word	0x20000a48

08000bf0 <System_SelfTest>:

void System_SelfTest()
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	RGBLeds_SelfTest(True);
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f7ff fe73 	bl	80008e0 <RGBLeds_SelfTest>
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <Check_USB_Communication>:

void Check_USB_Communication()
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	af00      	add	r7, sp, #0
	if (Protocol_0x55_CheckFifo() > 0)
 8000c02:	f7ff feb1 	bl	8000968 <Protocol_0x55_CheckFifo>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <Check_USB_Communication+0x12>
	{
		Protocol_0x55_ProcessRxCommand();
 8000c0c:	f7ff feb8 	bl	8000980 <Protocol_0x55_ProcessRxCommand>

		// if (valid) --> find module to handle command
	}
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c18:	f000 fa66 	bl	80010e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c1c:	f000 f82a 	bl	8000c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c20:	f000 f894 	bl	8000d4c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000c24:	f005 fcbc 	bl	80065a0 <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 8000c28:	f000 f86c 	bl	8000d04 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  System_Initialize();
 8000c2c:	f7ff ffd4 	bl	8000bd8 <System_Initialize>
  System_SelfTest();
 8000c30:	f7ff ffde 	bl	8000bf0 <System_SelfTest>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (Update_10Hz)
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <main+0x54>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d004      	beq.n	8000c46 <main+0x32>
	  {
		  Update_10Hz = 0;
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <main+0x54>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
		  RGBLeds_Update10Hz();
 8000c42:	f7ff fd73 	bl	800072c <RGBLeds_Update10Hz>
	  }

	  if (Update_5Hz)
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <main+0x58>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d002      	beq.n	8000c54 <main+0x40>
	  {
		  Update_5Hz = 0;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <main+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
	  }

	  if (Update_2Hz)
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <main+0x5c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d002      	beq.n	8000c62 <main+0x4e>
	  {
		  Update_2Hz = 0;
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <main+0x5c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
	  }

	  Check_USB_Communication();
 8000c62:	f7ff ffcc 	bl	8000bfe <Check_USB_Communication>
	  if (Update_10Hz)
 8000c66:	e7e5      	b.n	8000c34 <main+0x20>
 8000c68:	20000238 	.word	0x20000238
 8000c6c:	20000230 	.word	0x20000230
 8000c70:	2000023c 	.word	0x2000023c

08000c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b092      	sub	sp, #72	; 0x48
 8000c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7a:	f107 0318 	add.w	r3, r7, #24
 8000c7e:	2230      	movs	r2, #48	; 0x30
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f006 f9c4 	bl	8007010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
 8000c94:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c96:	2303      	movs	r3, #3
 8000c98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca2:	2310      	movs	r3, #16
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000caa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000cb4:	23c0      	movs	r3, #192	; 0xc0
 8000cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc0:	f107 0318 	add.w	r3, r7, #24
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f001 feb9 	bl	8002a3c <HAL_RCC_OscConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000cd0:	f000 f8ca 	bl	8000e68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2100      	movs	r1, #0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f002 f8f5 	bl	8002edc <HAL_RCC_ClockConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000cf8:	f000 f8b6 	bl	8000e68 <Error_Handler>
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	3748      	adds	r7, #72	; 0x48
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000d08:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MX_TIM14_Init+0x40>)
 8000d0a:	4a0f      	ldr	r2, [pc, #60]	; (8000d48 <MX_TIM14_Init+0x44>)
 8000d0c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1599;
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <MX_TIM14_Init+0x40>)
 8000d10:	f240 623f 	movw	r2, #1599	; 0x63f
 8000d14:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <MX_TIM14_Init+0x40>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_TIM14_Init+0x40>)
 8000d1e:	2263      	movs	r2, #99	; 0x63
 8000d20:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d22:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <MX_TIM14_Init+0x40>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_TIM14_Init+0x40>)
 8000d2a:	2280      	movs	r2, #128	; 0x80
 8000d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <MX_TIM14_Init+0x40>)
 8000d30:	f002 faa2 	bl	8003278 <HAL_TIM_Base_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000d3a:	f000 f895 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000a48 	.word	0x20000a48
 8000d48:	40002000 	.word	0x40002000

08000d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	4b3c      	ldr	r3, [pc, #240]	; (8000e58 <MX_GPIO_Init+0x10c>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a3b      	ldr	r2, [pc, #236]	; (8000e58 <MX_GPIO_Init+0x10c>)
 8000d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b39      	ldr	r3, [pc, #228]	; (8000e58 <MX_GPIO_Init+0x10c>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b35      	ldr	r3, [pc, #212]	; (8000e58 <MX_GPIO_Init+0x10c>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a34      	ldr	r2, [pc, #208]	; (8000e58 <MX_GPIO_Init+0x10c>)
 8000d88:	f043 0308 	orr.w	r3, r3, #8
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b32      	ldr	r3, [pc, #200]	; (8000e58 <MX_GPIO_Init+0x10c>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0308 	and.w	r3, r3, #8
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	4b2e      	ldr	r3, [pc, #184]	; (8000e58 <MX_GPIO_Init+0x10c>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a2d      	ldr	r2, [pc, #180]	; (8000e58 <MX_GPIO_Init+0x10c>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <MX_GPIO_Init+0x10c>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <MX_GPIO_Init+0x10c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a26      	ldr	r2, [pc, #152]	; (8000e58 <MX_GPIO_Init+0x10c>)
 8000dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <MX_GPIO_Init+0x10c>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RightArmRed_Pin|RightArmGreen_Pin|RightArmBlue_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8000dd8:	4820      	ldr	r0, [pc, #128]	; (8000e5c <MX_GPIO_Init+0x110>)
 8000dda:	f000 fcc1 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LeftArmRed_Pin|LeftArmGreen_Pin|LeftArmBlue_Pin, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000de4:	481e      	ldr	r0, [pc, #120]	; (8000e60 <MX_GPIO_Init+0x114>)
 8000de6:	f000 fcbb 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BaseRed_Pin|BaseGreen_Pin|BaseBlue_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 8000df0:	481c      	ldr	r0, [pc, #112]	; (8000e64 <MX_GPIO_Init+0x118>)
 8000df2:	f000 fcb5 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WingRightRed_Pin WingRightGreen_Pin WingRightBlue_Pin */
  GPIO_InitStruct.Pin = RightArmRed_Pin|RightArmGreen_Pin|RightArmBlue_Pin;
 8000df6:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e00:	2302      	movs	r3, #2
 8000e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4813      	ldr	r0, [pc, #76]	; (8000e5c <MX_GPIO_Init+0x110>)
 8000e10:	f000 fb08 	bl	8001424 <HAL_GPIO_Init>

  /*Configure GPIO pins : WingLeftRed_Pin WingLeftGreen_Pin WingLeftBlue_Pin */
  GPIO_InitStruct.Pin = LeftArmRed_Pin|LeftArmGreen_Pin|LeftArmBlue_Pin;
 8000e14:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	480c      	ldr	r0, [pc, #48]	; (8000e60 <MX_GPIO_Init+0x114>)
 8000e2e:	f000 faf9 	bl	8001424 <HAL_GPIO_Init>

  /*Configure GPIO pins : BaseRed_Pin BaseGreen_Pin BaseBlue_Pin */
  GPIO_InitStruct.Pin = BaseRed_Pin|BaseGreen_Pin|BaseBlue_Pin;
 8000e32:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4806      	ldr	r0, [pc, #24]	; (8000e64 <MX_GPIO_Init+0x118>)
 8000e4c:	f000 faea 	bl	8001424 <HAL_GPIO_Init>

}
 8000e50:	bf00      	nop
 8000e52:	3728      	adds	r7, #40	; 0x28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020c00 	.word	0x40020c00
 8000e60:	40021c00 	.word	0x40021c00
 8000e64:	40021800 	.word	0x40021800

08000e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e6c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <Error_Handler+0x6>

08000e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <HAL_MspInit+0x48>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <HAL_MspInit+0x48>)
 8000e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e84:	6453      	str	r3, [r2, #68]	; 0x44
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <HAL_MspInit+0x48>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	603b      	str	r3, [r7, #0]
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <HAL_MspInit+0x48>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <HAL_MspInit+0x48>)
 8000e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea2:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <HAL_MspInit+0x48>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	40023800 	.word	0x40023800

08000ebc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <HAL_TIM_Base_MspInit+0x48>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d115      	bne.n	8000efa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <HAL_TIM_Base_MspInit+0x4c>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	4a0c      	ldr	r2, [pc, #48]	; (8000f08 <HAL_TIM_Base_MspInit+0x4c>)
 8000ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000edc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_TIM_Base_MspInit+0x4c>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	202d      	movs	r0, #45	; 0x2d
 8000ef0:	f000 fa61 	bl	80013b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000ef4:	202d      	movs	r0, #45	; 0x2d
 8000ef6:	f000 fa7a 	bl	80013ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40002000 	.word	0x40002000
 8000f08:	40023800 	.word	0x40023800

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <NMI_Handler+0x4>

08000f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <HardFault_Handler+0x4>

08000f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <MemManage_Handler+0x4>

08000f1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <BusFault_Handler+0x4>

08000f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <UsageFault_Handler+0x4>

08000f2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr

08000f36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr

08000f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr

08000f4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f52:	f000 f91b 	bl	800118c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

	// 100 Hz counter for various purposes
	TIM14_Counter += 1;
 8000f60:	4b22      	ldr	r3, [pc, #136]	; (8000fec <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	3301      	adds	r3, #1
 8000f66:	4a21      	ldr	r2, [pc, #132]	; (8000fec <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8000f68:	6013      	str	r3, [r2, #0]

	// 1 Hz overflow
	if (TIM14_Counter == 100)
 8000f6a:	4b20      	ldr	r3, [pc, #128]	; (8000fec <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2b64      	cmp	r3, #100	; 0x64
 8000f70:	d102      	bne.n	8000f78 <TIM8_TRG_COM_TIM14_IRQHandler+0x1c>
	{
		TIM14_Counter = 0;
 8000f72:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
	}

	if ((TIM14_Counter % 10) == 0)
 8000f78:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8000f7a:	6819      	ldr	r1, [r3, #0]
 8000f7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 8000f7e:	fb83 2301 	smull	r2, r3, r3, r1
 8000f82:	109a      	asrs	r2, r3, #2
 8000f84:	17cb      	asrs	r3, r1, #31
 8000f86:	1ad2      	subs	r2, r2, r3
 8000f88:	4613      	mov	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4413      	add	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	1aca      	subs	r2, r1, r3
 8000f92:	2a00      	cmp	r2, #0
 8000f94:	d102      	bne.n	8000f9c <TIM8_TRG_COM_TIM14_IRQHandler+0x40>
	{
		Update_10Hz = 1;
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	601a      	str	r2, [r3, #0]
	}

	if ((TIM14_Counter % 20) == 0)
 8000f9c:	4b13      	ldr	r3, [pc, #76]	; (8000fec <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8000f9e:	6819      	ldr	r1, [r3, #0]
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 8000fa2:	fb83 2301 	smull	r2, r3, r3, r1
 8000fa6:	10da      	asrs	r2, r3, #3
 8000fa8:	17cb      	asrs	r3, r1, #31
 8000faa:	1ad2      	subs	r2, r2, r3
 8000fac:	4613      	mov	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	1aca      	subs	r2, r1, r3
 8000fb6:	2a00      	cmp	r2, #0
 8000fb8:	d102      	bne.n	8000fc0 <TIM8_TRG_COM_TIM14_IRQHandler+0x64>
	{
		Update_5Hz = 1;
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	601a      	str	r2, [r3, #0]
	}

	if ((TIM14_Counter % 50) == 0)
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <TIM8_TRG_COM_TIM14_IRQHandler+0xa0>)
 8000fc6:	fb83 1302 	smull	r1, r3, r3, r2
 8000fca:	1119      	asrs	r1, r3, #4
 8000fcc:	17d3      	asrs	r3, r2, #31
 8000fce:	1acb      	subs	r3, r1, r3
 8000fd0:	2132      	movs	r1, #50	; 0x32
 8000fd2:	fb01 f303 	mul.w	r3, r1, r3
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d102      	bne.n	8000fe2 <TIM8_TRG_COM_TIM14_IRQHandler+0x86>
	{
		Update_2Hz = 1;
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <TIM8_TRG_COM_TIM14_IRQHandler+0xa4>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000fe2:	4808      	ldr	r0, [pc, #32]	; (8001004 <TIM8_TRG_COM_TIM14_IRQHandler+0xa8>)
 8000fe4:	f002 fa06 	bl	80033f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000200 	.word	0x20000200
 8000ff0:	66666667 	.word	0x66666667
 8000ff4:	20000238 	.word	0x20000238
 8000ff8:	20000230 	.word	0x20000230
 8000ffc:	51eb851f 	.word	0x51eb851f
 8001000:	2000023c 	.word	0x2000023c
 8001004:	20000a48 	.word	0x20000a48

08001008 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800100c:	4802      	ldr	r0, [pc, #8]	; (8001018 <OTG_FS_IRQHandler+0x10>)
 800100e:	f000 fcfe 	bl	8001a0e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20001f58 	.word	0x20001f58

0800101c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001024:	4a14      	ldr	r2, [pc, #80]	; (8001078 <_sbrk+0x5c>)
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <_sbrk+0x60>)
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001030:	4b13      	ldr	r3, [pc, #76]	; (8001080 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d102      	bne.n	800103e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001038:	4b11      	ldr	r3, [pc, #68]	; (8001080 <_sbrk+0x64>)
 800103a:	4a12      	ldr	r2, [pc, #72]	; (8001084 <_sbrk+0x68>)
 800103c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <_sbrk+0x64>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	429a      	cmp	r2, r3
 800104a:	d207      	bcs.n	800105c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800104c:	f005 ffa6 	bl	8006f9c <__errno>
 8001050:	4602      	mov	r2, r0
 8001052:	230c      	movs	r3, #12
 8001054:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800105a:	e009      	b.n	8001070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <_sbrk+0x64>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001062:	4b07      	ldr	r3, [pc, #28]	; (8001080 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	4a05      	ldr	r2, [pc, #20]	; (8001080 <_sbrk+0x64>)
 800106c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20020000 	.word	0x20020000
 800107c:	00000400 	.word	0x00000400
 8001080:	20000204 	.word	0x20000204
 8001084:	20002360 	.word	0x20002360

08001088 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr

08001094 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001094:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001098:	480d      	ldr	r0, [pc, #52]	; (80010d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800109a:	490e      	ldr	r1, [pc, #56]	; (80010d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800109c:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a0:	e002      	b.n	80010a8 <LoopCopyDataInit>

080010a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a6:	3304      	adds	r3, #4

080010a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ac:	d3f9      	bcc.n	80010a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ae:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010b0:	4c0b      	ldr	r4, [pc, #44]	; (80010e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b4:	e001      	b.n	80010ba <LoopFillZerobss>

080010b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b8:	3204      	adds	r2, #4

080010ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010bc:	d3fb      	bcc.n	80010b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010be:	f7ff ffe3 	bl	8001088 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010c2:	f005 ff71 	bl	8006fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010c6:	f7ff fda5 	bl	8000c14 <main>
  bx  lr
 80010ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80010d8:	08007274 	.word	0x08007274
  ldr r2, =_sbss
 80010dc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80010e0:	2000235c 	.word	0x2000235c

080010e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e4:	e7fe      	b.n	80010e4 <ADC_IRQHandler>
	...

080010e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <HAL_Init+0x40>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <HAL_Init+0x40>)
 80010f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <HAL_Init+0x40>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <HAL_Init+0x40>)
 80010fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001102:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <HAL_Init+0x40>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a07      	ldr	r2, [pc, #28]	; (8001128 <HAL_Init+0x40>)
 800110a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800110e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001110:	2003      	movs	r0, #3
 8001112:	f000 f945 	bl	80013a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001116:	2000      	movs	r0, #0
 8001118:	f000 f808 	bl	800112c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800111c:	f7ff fea8 	bl	8000e70 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023c00 	.word	0x40023c00

0800112c <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_InitTick+0x54>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_InitTick+0x58>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001142:	fbb3 f3f1 	udiv	r3, r3, r1
 8001146:	fbb2 f3f3 	udiv	r3, r2, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f95d 	bl	800140a <HAL_SYSTICK_Config>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e00e      	b.n	8001178 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b0f      	cmp	r3, #15
 800115e:	d80a      	bhi.n	8001176 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001160:	2200      	movs	r2, #0
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001168:	f000 f925 	bl	80013b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800116c:	4a06      	ldr	r2, [pc, #24]	; (8001188 <HAL_InitTick+0x5c>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	e000      	b.n	8001178 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000000 	.word	0x20000000
 8001184:	20000008 	.word	0x20000008
 8001188:	20000004 	.word	0x20000004

0800118c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <HAL_IncTick+0x1c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b05      	ldr	r3, [pc, #20]	; (80011ac <HAL_IncTick+0x20>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	4a03      	ldr	r2, [pc, #12]	; (80011ac <HAL_IncTick+0x20>)
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	20000008 	.word	0x20000008
 80011ac:	20000a90 	.word	0x20000a90

080011b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return uwTick;
 80011b4:	4b02      	ldr	r3, [pc, #8]	; (80011c0 <HAL_GetTick+0x10>)
 80011b6:	681b      	ldr	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	20000a90 	.word	0x20000a90

080011c4 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011cc:	f7ff fff0 	bl	80011b0 <HAL_GetTick>
 80011d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011dc:	d005      	beq.n	80011ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <HAL_Delay+0x40>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	461a      	mov	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4413      	add	r3, r2
 80011e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ea:	bf00      	nop
 80011ec:	f7ff ffe0 	bl	80011b0 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d8f7      	bhi.n	80011ec <HAL_Delay+0x28>
  {
  }
}
 80011fc:	bf00      	nop
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000008 	.word	0x20000008

08001208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <__NVIC_SetPriorityGrouping+0x44>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001224:	4013      	ands	r3, r2
 8001226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001230:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800123a:	4a04      	ldr	r2, [pc, #16]	; (800124c <__NVIC_SetPriorityGrouping+0x44>)
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	60d3      	str	r3, [r2, #12]
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <__NVIC_GetPriorityGrouping+0x18>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	f003 0307 	and.w	r3, r3, #7
}
 800125e:	4618      	mov	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	2b00      	cmp	r3, #0
 800127c:	db0b      	blt.n	8001296 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	f003 021f 	and.w	r2, r3, #31
 8001284:	4906      	ldr	r1, [pc, #24]	; (80012a0 <__NVIC_EnableIRQ+0x34>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	095b      	lsrs	r3, r3, #5
 800128c:	2001      	movs	r0, #1
 800128e:	fa00 f202 	lsl.w	r2, r0, r2
 8001292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	e000e100 	.word	0xe000e100

080012a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	db0a      	blt.n	80012ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	490c      	ldr	r1, [pc, #48]	; (80012f0 <__NVIC_SetPriority+0x4c>)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	0112      	lsls	r2, r2, #4
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	440b      	add	r3, r1
 80012c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012cc:	e00a      	b.n	80012e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4908      	ldr	r1, [pc, #32]	; (80012f4 <__NVIC_SetPriority+0x50>)
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	3b04      	subs	r3, #4
 80012dc:	0112      	lsls	r2, r2, #4
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	440b      	add	r3, r1
 80012e2:	761a      	strb	r2, [r3, #24]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000e100 	.word	0xe000e100
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	; 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f1c3 0307 	rsb	r3, r3, #7
 8001312:	2b04      	cmp	r3, #4
 8001314:	bf28      	it	cs
 8001316:	2304      	movcs	r3, #4
 8001318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3304      	adds	r3, #4
 800131e:	2b06      	cmp	r3, #6
 8001320:	d902      	bls.n	8001328 <NVIC_EncodePriority+0x30>
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3b03      	subs	r3, #3
 8001326:	e000      	b.n	800132a <NVIC_EncodePriority+0x32>
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43da      	mvns	r2, r3
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	401a      	ands	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001340:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	fa01 f303 	lsl.w	r3, r1, r3
 800134a:	43d9      	mvns	r1, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	4313      	orrs	r3, r2
         );
}
 8001352:	4618      	mov	r0, r3
 8001354:	3724      	adds	r7, #36	; 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr

0800135c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800136c:	d301      	bcc.n	8001372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136e:	2301      	movs	r3, #1
 8001370:	e00f      	b.n	8001392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001372:	4a0a      	ldr	r2, [pc, #40]	; (800139c <SysTick_Config+0x40>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137a:	210f      	movs	r1, #15
 800137c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001380:	f7ff ff90 	bl	80012a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <SysTick_Config+0x40>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138a:	4b04      	ldr	r3, [pc, #16]	; (800139c <SysTick_Config+0x40>)
 800138c:	2207      	movs	r2, #7
 800138e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	e000e010 	.word	0xe000e010

080013a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff ff2d 	bl	8001208 <__NVIC_SetPriorityGrouping>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b086      	sub	sp, #24
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
 80013c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c8:	f7ff ff42 	bl	8001250 <__NVIC_GetPriorityGrouping>
 80013cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	68b9      	ldr	r1, [r7, #8]
 80013d2:	6978      	ldr	r0, [r7, #20]
 80013d4:	f7ff ff90 	bl	80012f8 <NVIC_EncodePriority>
 80013d8:	4602      	mov	r2, r0
 80013da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff5f 	bl	80012a4 <__NVIC_SetPriority>
}
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff35 	bl	800126c <__NVIC_EnableIRQ>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff ffa2 	bl	800135c <SysTick_Config>
 8001418:	4603      	mov	r3, r0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001424:	b480      	push	{r7}
 8001426:	b087      	sub	sp, #28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001432:	e16f      	b.n	8001714 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	2101      	movs	r1, #1
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	fa01 f303 	lsl.w	r3, r1, r3
 8001440:	4013      	ands	r3, r2
 8001442:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 8161 	beq.w	800170e <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b01      	cmp	r3, #1
 8001456:	d005      	beq.n	8001464 <HAL_GPIO_Init+0x40>
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d130      	bne.n	80014c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	2203      	movs	r2, #3
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	68da      	ldr	r2, [r3, #12]
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	4313      	orrs	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800149a:	2201      	movs	r2, #1
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	091b      	lsrs	r3, r3, #4
 80014b0:	f003 0201 	and.w	r2, r3, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	d017      	beq.n	8001502 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	2203      	movs	r2, #3
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d123      	bne.n	8001556 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	08da      	lsrs	r2, r3, #3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3208      	adds	r2, #8
 8001516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800151a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	220f      	movs	r2, #15
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	691a      	ldr	r2, [r3, #16]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f003 0307 	and.w	r3, r3, #7
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	08da      	lsrs	r2, r3, #3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3208      	adds	r2, #8
 8001550:	6939      	ldr	r1, [r7, #16]
 8001552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	2203      	movs	r2, #3
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 0203 	and.w	r2, r3, #3
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 80bb 	beq.w	800170e <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	4b64      	ldr	r3, [pc, #400]	; (8001730 <HAL_GPIO_Init+0x30c>)
 800159e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a0:	4a63      	ldr	r2, [pc, #396]	; (8001730 <HAL_GPIO_Init+0x30c>)
 80015a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a6:	6453      	str	r3, [r2, #68]	; 0x44
 80015a8:	4b61      	ldr	r3, [pc, #388]	; (8001730 <HAL_GPIO_Init+0x30c>)
 80015aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015b4:	4a5f      	ldr	r2, [pc, #380]	; (8001734 <HAL_GPIO_Init+0x310>)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	3302      	adds	r3, #2
 80015bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	220f      	movs	r2, #15
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a57      	ldr	r2, [pc, #348]	; (8001738 <HAL_GPIO_Init+0x314>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d031      	beq.n	8001644 <HAL_GPIO_Init+0x220>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a56      	ldr	r2, [pc, #344]	; (800173c <HAL_GPIO_Init+0x318>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d02b      	beq.n	8001640 <HAL_GPIO_Init+0x21c>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a55      	ldr	r2, [pc, #340]	; (8001740 <HAL_GPIO_Init+0x31c>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d025      	beq.n	800163c <HAL_GPIO_Init+0x218>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a54      	ldr	r2, [pc, #336]	; (8001744 <HAL_GPIO_Init+0x320>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d01f      	beq.n	8001638 <HAL_GPIO_Init+0x214>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a53      	ldr	r2, [pc, #332]	; (8001748 <HAL_GPIO_Init+0x324>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d019      	beq.n	8001634 <HAL_GPIO_Init+0x210>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a52      	ldr	r2, [pc, #328]	; (800174c <HAL_GPIO_Init+0x328>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d013      	beq.n	8001630 <HAL_GPIO_Init+0x20c>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a51      	ldr	r2, [pc, #324]	; (8001750 <HAL_GPIO_Init+0x32c>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d00d      	beq.n	800162c <HAL_GPIO_Init+0x208>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a50      	ldr	r2, [pc, #320]	; (8001754 <HAL_GPIO_Init+0x330>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d007      	beq.n	8001628 <HAL_GPIO_Init+0x204>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a4f      	ldr	r2, [pc, #316]	; (8001758 <HAL_GPIO_Init+0x334>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d101      	bne.n	8001624 <HAL_GPIO_Init+0x200>
 8001620:	2308      	movs	r3, #8
 8001622:	e010      	b.n	8001646 <HAL_GPIO_Init+0x222>
 8001624:	2309      	movs	r3, #9
 8001626:	e00e      	b.n	8001646 <HAL_GPIO_Init+0x222>
 8001628:	2307      	movs	r3, #7
 800162a:	e00c      	b.n	8001646 <HAL_GPIO_Init+0x222>
 800162c:	2306      	movs	r3, #6
 800162e:	e00a      	b.n	8001646 <HAL_GPIO_Init+0x222>
 8001630:	2305      	movs	r3, #5
 8001632:	e008      	b.n	8001646 <HAL_GPIO_Init+0x222>
 8001634:	2304      	movs	r3, #4
 8001636:	e006      	b.n	8001646 <HAL_GPIO_Init+0x222>
 8001638:	2303      	movs	r3, #3
 800163a:	e004      	b.n	8001646 <HAL_GPIO_Init+0x222>
 800163c:	2302      	movs	r3, #2
 800163e:	e002      	b.n	8001646 <HAL_GPIO_Init+0x222>
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <HAL_GPIO_Init+0x222>
 8001644:	2300      	movs	r3, #0
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	f002 0203 	and.w	r2, r2, #3
 800164c:	0092      	lsls	r2, r2, #2
 800164e:	4093      	lsls	r3, r2
 8001650:	461a      	mov	r2, r3
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001658:	4936      	ldr	r1, [pc, #216]	; (8001734 <HAL_GPIO_Init+0x310>)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	089b      	lsrs	r3, r3, #2
 800165e:	3302      	adds	r3, #2
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001666:	4b3d      	ldr	r3, [pc, #244]	; (800175c <HAL_GPIO_Init+0x338>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	43db      	mvns	r3, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4313      	orrs	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800168a:	4a34      	ldr	r2, [pc, #208]	; (800175c <HAL_GPIO_Init+0x338>)
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001690:	4b32      	ldr	r3, [pc, #200]	; (800175c <HAL_GPIO_Init+0x338>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	43db      	mvns	r3, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4013      	ands	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016b4:	4a29      	ldr	r2, [pc, #164]	; (800175c <HAL_GPIO_Init+0x338>)
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ba:	4b28      	ldr	r3, [pc, #160]	; (800175c <HAL_GPIO_Init+0x338>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4013      	ands	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016de:	4a1f      	ldr	r2, [pc, #124]	; (800175c <HAL_GPIO_Init+0x338>)
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016e4:	4b1d      	ldr	r3, [pc, #116]	; (800175c <HAL_GPIO_Init+0x338>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001708:	4a14      	ldr	r2, [pc, #80]	; (800175c <HAL_GPIO_Init+0x338>)
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	3301      	adds	r3, #1
 8001712:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	fa22 f303 	lsr.w	r3, r2, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	f47f ae88 	bne.w	8001434 <HAL_GPIO_Init+0x10>
  }
}
 8001724:	bf00      	nop
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800
 8001734:	40013800 	.word	0x40013800
 8001738:	40020000 	.word	0x40020000
 800173c:	40020400 	.word	0x40020400
 8001740:	40020800 	.word	0x40020800
 8001744:	40020c00 	.word	0x40020c00
 8001748:	40021000 	.word	0x40021000
 800174c:	40021400 	.word	0x40021400
 8001750:	40021800 	.word	0x40021800
 8001754:	40021c00 	.word	0x40021c00
 8001758:	40022000 	.word	0x40022000
 800175c:	40013c00 	.word	0x40013c00

08001760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
 800176c:	4613      	mov	r3, r2
 800176e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001770:	787b      	ldrb	r3, [r7, #1]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001776:	887a      	ldrh	r2, [r7, #2]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800177c:	e003      	b.n	8001786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800177e:	887b      	ldrh	r3, [r7, #2]
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	619a      	str	r2, [r3, #24]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001792:	b08f      	sub	sp, #60	; 0x3c
 8001794:	af0a      	add	r7, sp, #40	; 0x28
 8001796:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e10f      	b.n	80019c2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d106      	bne.n	80017c2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f005 f8ef 	bl	80069a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2203      	movs	r2, #3
 80017c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d102      	bne.n	80017dc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f002 f8f7 	bl	80039d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	603b      	str	r3, [r7, #0]
 80017ec:	687e      	ldr	r6, [r7, #4]
 80017ee:	466d      	mov	r5, sp
 80017f0:	f106 0410 	add.w	r4, r6, #16
 80017f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001800:	e885 0003 	stmia.w	r5, {r0, r1}
 8001804:	1d33      	adds	r3, r6, #4
 8001806:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001808:	6838      	ldr	r0, [r7, #0]
 800180a:	f001 ffd9 	bl	80037c0 <USB_CoreInit>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2202      	movs	r2, #2
 8001818:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e0d0      	b.n	80019c2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f002 f8e4 	bl	80039f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800182c:	2300      	movs	r3, #0
 800182e:	73fb      	strb	r3, [r7, #15]
 8001830:	e04a      	b.n	80018c8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001832:	7bfa      	ldrb	r2, [r7, #15]
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	1a9b      	subs	r3, r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	440b      	add	r3, r1
 8001840:	333d      	adds	r3, #61	; 0x3d
 8001842:	2201      	movs	r2, #1
 8001844:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001846:	7bfa      	ldrb	r2, [r7, #15]
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	1a9b      	subs	r3, r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	440b      	add	r3, r1
 8001854:	333c      	adds	r3, #60	; 0x3c
 8001856:	7bfa      	ldrb	r2, [r7, #15]
 8001858:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800185a:	7bfa      	ldrb	r2, [r7, #15]
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	b298      	uxth	r0, r3
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	1a9b      	subs	r3, r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	3342      	adds	r3, #66	; 0x42
 800186e:	4602      	mov	r2, r0
 8001870:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001872:	7bfa      	ldrb	r2, [r7, #15]
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	1a9b      	subs	r3, r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	440b      	add	r3, r1
 8001880:	333f      	adds	r3, #63	; 0x3f
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001886:	7bfa      	ldrb	r2, [r7, #15]
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	1a9b      	subs	r3, r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	440b      	add	r3, r1
 8001894:	3344      	adds	r3, #68	; 0x44
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800189a:	7bfa      	ldrb	r2, [r7, #15]
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	1a9b      	subs	r3, r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	3348      	adds	r3, #72	; 0x48
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018ae:	7bfa      	ldrb	r2, [r7, #15]
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	1a9b      	subs	r3, r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	3350      	adds	r3, #80	; 0x50
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	3301      	adds	r3, #1
 80018c6:	73fb      	strb	r3, [r7, #15]
 80018c8:	7bfa      	ldrb	r2, [r7, #15]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d3af      	bcc.n	8001832 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018d2:	2300      	movs	r3, #0
 80018d4:	73fb      	strb	r3, [r7, #15]
 80018d6:	e044      	b.n	8001962 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018d8:	7bfa      	ldrb	r2, [r7, #15]
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	1a9b      	subs	r3, r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018ee:	7bfa      	ldrb	r2, [r7, #15]
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	1a9b      	subs	r3, r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	440b      	add	r3, r1
 80018fc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001900:	7bfa      	ldrb	r2, [r7, #15]
 8001902:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001904:	7bfa      	ldrb	r2, [r7, #15]
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	4613      	mov	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	1a9b      	subs	r3, r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800191a:	7bfa      	ldrb	r2, [r7, #15]
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	1a9b      	subs	r3, r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001930:	7bfa      	ldrb	r2, [r7, #15]
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	1a9b      	subs	r3, r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001946:	7bfa      	ldrb	r2, [r7, #15]
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	1a9b      	subs	r3, r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	3301      	adds	r3, #1
 8001960:	73fb      	strb	r3, [r7, #15]
 8001962:	7bfa      	ldrb	r2, [r7, #15]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	429a      	cmp	r2, r3
 800196a:	d3b5      	bcc.n	80018d8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	603b      	str	r3, [r7, #0]
 8001972:	687e      	ldr	r6, [r7, #4]
 8001974:	466d      	mov	r5, sp
 8001976:	f106 0410 	add.w	r4, r6, #16
 800197a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800197c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800197e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001980:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001982:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001986:	e885 0003 	stmia.w	r5, {r0, r1}
 800198a:	1d33      	adds	r3, r6, #4
 800198c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800198e:	6838      	ldr	r0, [r7, #0]
 8001990:	f002 f87c 	bl	8003a8c <USB_DevInit>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d005      	beq.n	80019a6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2202      	movs	r2, #2
 800199e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00d      	b.n	80019c2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f003 f8ed 	bl	8004b9a <USB_DevDisconnect>

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019ca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <HAL_PCD_Start+0x16>
 80019dc:	2302      	movs	r3, #2
 80019de:	e012      	b.n	8001a06 <HAL_PCD_Start+0x3c>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f001 ffe1 	bl	80039b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 f8af 	bl	8004b5a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a0e:	b590      	push	{r4, r7, lr}
 8001a10:	b08d      	sub	sp, #52	; 0x34
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f003 f966 	bl	8004cf6 <USB_GetMode>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f040 838f 	bne.w	8002150 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 f8cf 	bl	8004bda <USB_ReadInterrupts>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 8385 	beq.w	800214e <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f003 f8c6 	bl	8004bda <USB_ReadInterrupts>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d107      	bne.n	8001a68 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	695a      	ldr	r2, [r3, #20]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f002 0202 	and.w	r2, r2, #2
 8001a66:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f003 f8b4 	bl	8004bda <USB_ReadInterrupts>
 8001a72:	4603      	mov	r3, r0
 8001a74:	f003 0310 	and.w	r3, r3, #16
 8001a78:	2b10      	cmp	r3, #16
 8001a7a:	d161      	bne.n	8001b40 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699a      	ldr	r2, [r3, #24]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0210 	bic.w	r2, r2, #16
 8001a8a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	f003 020f 	and.w	r2, r3, #15
 8001a98:	4613      	mov	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	1a9b      	subs	r3, r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	0c5b      	lsrs	r3, r3, #17
 8001ab0:	f003 030f 	and.w	r3, r3, #15
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d124      	bne.n	8001b02 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d035      	beq.n	8001b30 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	091b      	lsrs	r3, r3, #4
 8001acc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ace:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	6a38      	ldr	r0, [r7, #32]
 8001ad8:	f002 fef1 	bl	80048be <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	091b      	lsrs	r3, r3, #4
 8001ae4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ae8:	441a      	add	r2, r3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	699a      	ldr	r2, [r3, #24]
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001afa:	441a      	add	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	619a      	str	r2, [r3, #24]
 8001b00:	e016      	b.n	8001b30 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	0c5b      	lsrs	r3, r3, #17
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	2b06      	cmp	r3, #6
 8001b0c:	d110      	bne.n	8001b30 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b14:	2208      	movs	r2, #8
 8001b16:	4619      	mov	r1, r3
 8001b18:	6a38      	ldr	r0, [r7, #32]
 8001b1a:	f002 fed0 	bl	80048be <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	699a      	ldr	r2, [r3, #24]
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b2a:	441a      	add	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699a      	ldr	r2, [r3, #24]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0210 	orr.w	r2, r2, #16
 8001b3e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f003 f848 	bl	8004bda <USB_ReadInterrupts>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001b54:	d16e      	bne.n	8001c34 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f003 f84d 	bl	8004bfe <USB_ReadDevAllOutEpInterrupt>
 8001b64:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001b66:	e062      	b.n	8001c2e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d057      	beq.n	8001c22 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f003 f870 	bl	8004c62 <USB_ReadDevOutEPInterrupt>
 8001b82:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00c      	beq.n	8001ba8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	015a      	lsls	r2, r3, #5
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	4413      	add	r3, r2
 8001b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001ba0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 fda2 	bl	80026ec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00c      	beq.n	8001bcc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	015a      	lsls	r2, r3, #5
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	4413      	add	r3, r2
 8001bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	2308      	movs	r3, #8
 8001bc2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001bc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 fe9c 	bl	8002904 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d008      	beq.n	8001be8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	015a      	lsls	r2, r3, #5
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	4413      	add	r3, r2
 8001bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001be2:	461a      	mov	r2, r3
 8001be4:	2310      	movs	r3, #16
 8001be6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	f003 0320 	and.w	r3, r3, #32
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d008      	beq.n	8001c04 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	015a      	lsls	r2, r3, #5
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bfe:	461a      	mov	r2, r3
 8001c00:	2320      	movs	r3, #32
 8001c02:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d009      	beq.n	8001c22 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	015a      	lsls	r2, r3, #5
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	4413      	add	r3, r2
 8001c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c20:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	3301      	adds	r3, #1
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2a:	085b      	lsrs	r3, r3, #1
 8001c2c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d199      	bne.n	8001b68 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f002 ffce 	bl	8004bda <USB_ReadInterrupts>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c48:	f040 80c0 	bne.w	8001dcc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f002 ffed 	bl	8004c30 <USB_ReadDevAllInEpInterrupt>
 8001c56:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001c5c:	e0b2      	b.n	8001dc4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 80a7 	beq.w	8001db8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f003 f811 	bl	8004c9c <USB_ReadDevInEPInterrupt>
 8001c7a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d057      	beq.n	8001d36 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	f003 030f 	and.w	r3, r3, #15
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69f9      	ldr	r1, [r7, #28]
 8001ca2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	015a      	lsls	r2, r3, #5
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	2301      	movs	r3, #1
 8001cba:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d132      	bne.n	8001d2a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc8:	4613      	mov	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	1a9b      	subs	r3, r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	3348      	adds	r3, #72	; 0x48
 8001cd4:	6819      	ldr	r1, [r3, #0]
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cda:	4613      	mov	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	1a9b      	subs	r3, r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4403      	add	r3, r0
 8001ce4:	3344      	adds	r3, #68	; 0x44
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4419      	add	r1, r3
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	1a9b      	subs	r3, r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4403      	add	r3, r0
 8001cf8:	3348      	adds	r3, #72	; 0x48
 8001cfa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d113      	bne.n	8001d2a <HAL_PCD_IRQHandler+0x31c>
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d06:	4613      	mov	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	1a9b      	subs	r3, r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	440b      	add	r3, r1
 8001d10:	3350      	adds	r3, #80	; 0x50
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d108      	bne.n	8001d2a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6818      	ldr	r0, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d22:	461a      	mov	r2, r3
 8001d24:	2101      	movs	r1, #1
 8001d26:	f003 f815 	bl	8004d54 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	4619      	mov	r1, r3
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f004 feb6 	bl	8006aa2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	f003 0308 	and.w	r3, r3, #8
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	015a      	lsls	r2, r3, #5
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	4413      	add	r3, r2
 8001d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	2308      	movs	r3, #8
 8001d50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d008      	beq.n	8001d6e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	015a      	lsls	r2, r3, #5
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	4413      	add	r3, r2
 8001d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d68:	461a      	mov	r2, r3
 8001d6a:	2310      	movs	r3, #16
 8001d6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d008      	beq.n	8001d8a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	015a      	lsls	r2, r3, #5
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	4413      	add	r3, r2
 8001d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d84:	461a      	mov	r2, r3
 8001d86:	2340      	movs	r3, #64	; 0x40
 8001d88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d008      	beq.n	8001da6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	015a      	lsls	r2, r3, #5
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001da0:	461a      	mov	r2, r3
 8001da2:	2302      	movs	r3, #2
 8001da4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001db0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 fc0c 	bl	80025d0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	3301      	adds	r3, #1
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc0:	085b      	lsrs	r3, r3, #1
 8001dc2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f47f af49 	bne.w	8001c5e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f002 ff02 	bl	8004bda <USB_ReadInterrupts>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ddc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001de0:	d114      	bne.n	8001e0c <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	69fa      	ldr	r2, [r7, #28]
 8001dec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001df0:	f023 0301 	bic.w	r3, r3, #1
 8001df4:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f004 feca 	bl	8006b90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	695a      	ldr	r2, [r3, #20]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001e0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f002 fee2 	bl	8004bda <USB_ReadInterrupts>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e20:	d112      	bne.n	8001e48 <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d102      	bne.n	8001e38 <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f004 fe86 	bl	8006b44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	695a      	ldr	r2, [r3, #20]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001e46:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f002 fec4 	bl	8004bda <USB_ReadInterrupts>
 8001e52:	4603      	mov	r3, r0
 8001e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e5c:	f040 80c7 	bne.w	8001fee <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	69fa      	ldr	r2, [r7, #28]
 8001e6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e6e:	f023 0301 	bic.w	r3, r3, #1
 8001e72:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2110      	movs	r1, #16
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f001 ff6a 	bl	8003d54 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e80:	2300      	movs	r3, #0
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e84:	e056      	b.n	8001f34 <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e88:	015a      	lsls	r2, r3, #5
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e92:	461a      	mov	r2, r3
 8001e94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001e98:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9c:	015a      	lsls	r2, r3, #5
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eaa:	0151      	lsls	r1, r2, #5
 8001eac:	69fa      	ldr	r2, [r7, #28]
 8001eae:	440a      	add	r2, r1
 8001eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001eb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001eb8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ebc:	015a      	lsls	r2, r3, #5
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eca:	0151      	lsls	r1, r2, #5
 8001ecc:	69fa      	ldr	r2, [r7, #28]
 8001ece:	440a      	add	r2, r1
 8001ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001ed4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ed8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001edc:	015a      	lsls	r2, r3, #5
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001eec:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef0:	015a      	lsls	r2, r3, #5
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001efe:	0151      	lsls	r1, r2, #5
 8001f00:	69fa      	ldr	r2, [r7, #28]
 8001f02:	440a      	add	r2, r1
 8001f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f0c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f10:	015a      	lsls	r2, r3, #5
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	4413      	add	r3, r2
 8001f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f1e:	0151      	lsls	r1, r2, #5
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	440a      	add	r2, r1
 8001f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f2c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f30:	3301      	adds	r3, #1
 8001f32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d3a3      	bcc.n	8001e86 <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	69fa      	ldr	r2, [r7, #28]
 8001f48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f4c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001f50:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d016      	beq.n	8001f88 <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f64:	69fa      	ldr	r2, [r7, #28]
 8001f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f6a:	f043 030b 	orr.w	r3, r3, #11
 8001f6e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	69fa      	ldr	r2, [r7, #28]
 8001f7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f80:	f043 030b 	orr.w	r3, r3, #11
 8001f84:	6453      	str	r3, [r2, #68]	; 0x44
 8001f86:	e015      	b.n	8001fb4 <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	69fa      	ldr	r2, [r7, #28]
 8001f92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f9a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001f9e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	69fa      	ldr	r2, [r7, #28]
 8001faa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fae:	f043 030b 	orr.w	r3, r3, #11
 8001fb2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	69fa      	ldr	r2, [r7, #28]
 8001fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fc2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001fc6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6818      	ldr	r0, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001fd8:	461a      	mov	r2, r3
 8001fda:	f002 febb 	bl	8004d54 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	695a      	ldr	r2, [r3, #20]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001fec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f002 fdf1 	bl	8004bda <USB_ReadInterrupts>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002002:	d124      	bne.n	800204e <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f002 fe81 	bl	8004d10 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f001 fefa 	bl	8003e0c <USB_GetDevSpeed>
 8002018:	4603      	mov	r3, r0
 800201a:	461a      	mov	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681c      	ldr	r4, [r3, #0]
 8002024:	f001 f91e 	bl	8003264 <HAL_RCC_GetHCLKFreq>
 8002028:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800202e:	b2db      	uxtb	r3, r3
 8002030:	461a      	mov	r2, r3
 8002032:	4620      	mov	r0, r4
 8002034:	f001 fc1c 	bl	8003870 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f004 fd5a 	bl	8006af2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695a      	ldr	r2, [r3, #20]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800204c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f002 fdc1 	bl	8004bda <USB_ReadInterrupts>
 8002058:	4603      	mov	r3, r0
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b08      	cmp	r3, #8
 8002060:	d10a      	bne.n	8002078 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f004 fd37 	bl	8006ad6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695a      	ldr	r2, [r3, #20]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f002 0208 	and.w	r2, r2, #8
 8002076:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f002 fdac 	bl	8004bda <USB_ReadInterrupts>
 8002082:	4603      	mov	r3, r0
 8002084:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002088:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800208c:	d10f      	bne.n	80020ae <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	b2db      	uxtb	r3, r3
 8002096:	4619      	mov	r1, r3
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f004 fd99 	bl	8006bd0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	695a      	ldr	r2, [r3, #20]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80020ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f002 fd91 	bl	8004bda <USB_ReadInterrupts>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020c2:	d10f      	bne.n	80020e4 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	4619      	mov	r1, r3
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f004 fd6c 	bl	8006bac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	695a      	ldr	r2, [r3, #20]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80020e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f002 fd76 	bl	8004bda <USB_ReadInterrupts>
 80020ee:	4603      	mov	r3, r0
 80020f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80020f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f8:	d10a      	bne.n	8002110 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f004 fd7a 	bl	8006bf4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800210e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f002 fd60 	bl	8004bda <USB_ReadInterrupts>
 800211a:	4603      	mov	r3, r0
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b04      	cmp	r3, #4
 8002122:	d115      	bne.n	8002150 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	2b00      	cmp	r3, #0
 8002134:	d002      	beq.n	800213c <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f004 fd6a 	bl	8006c10 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6859      	ldr	r1, [r3, #4]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	430a      	orrs	r2, r1
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	e000      	b.n	8002150 <HAL_PCD_IRQHandler+0x742>
      return;
 800214e:	bf00      	nop
    }
  }
}
 8002150:	3734      	adds	r7, #52	; 0x34
 8002152:	46bd      	mov	sp, r7
 8002154:	bd90      	pop	{r4, r7, pc}

08002156 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	460b      	mov	r3, r1
 8002160:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_PCD_SetAddress+0x1a>
 800216c:	2302      	movs	r3, #2
 800216e:	e013      	b.n	8002198 <HAL_PCD_SetAddress+0x42>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	78fa      	ldrb	r2, [r7, #3]
 800217c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	4611      	mov	r1, r2
 8002188:	4618      	mov	r0, r3
 800218a:	f002 fcc1 	bl	8004b10 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	4608      	mov	r0, r1
 80021aa:	4611      	mov	r1, r2
 80021ac:	461a      	mov	r2, r3
 80021ae:	4603      	mov	r3, r0
 80021b0:	70fb      	strb	r3, [r7, #3]
 80021b2:	460b      	mov	r3, r1
 80021b4:	803b      	strh	r3, [r7, #0]
 80021b6:	4613      	mov	r3, r2
 80021b8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	da0f      	bge.n	80021e6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021c6:	78fb      	ldrb	r3, [r7, #3]
 80021c8:	f003 020f 	and.w	r2, r3, #15
 80021cc:	4613      	mov	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	3338      	adds	r3, #56	; 0x38
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	3304      	adds	r3, #4
 80021dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2201      	movs	r2, #1
 80021e2:	705a      	strb	r2, [r3, #1]
 80021e4:	e00f      	b.n	8002206 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021e6:	78fb      	ldrb	r3, [r7, #3]
 80021e8:	f003 020f 	and.w	r2, r3, #15
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	4413      	add	r3, r2
 80021fc:	3304      	adds	r3, #4
 80021fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002206:	78fb      	ldrb	r3, [r7, #3]
 8002208:	f003 030f 	and.w	r3, r3, #15
 800220c:	b2da      	uxtb	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002212:	883a      	ldrh	r2, [r7, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	78ba      	ldrb	r2, [r7, #2]
 800221c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	785b      	ldrb	r3, [r3, #1]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d004      	beq.n	8002230 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	b29a      	uxth	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002230:	78bb      	ldrb	r3, [r7, #2]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d102      	bne.n	800223c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_PCD_EP_Open+0xaa>
 8002246:	2302      	movs	r3, #2
 8002248:	e00e      	b.n	8002268 <HAL_PCD_EP_Open+0xc8>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68f9      	ldr	r1, [r7, #12]
 8002258:	4618      	mov	r0, r3
 800225a:	f001 fdfb 	bl	8003e54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002266:	7afb      	ldrb	r3, [r7, #11]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800227c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002280:	2b00      	cmp	r3, #0
 8002282:	da0f      	bge.n	80022a4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	f003 020f 	and.w	r2, r3, #15
 800228a:	4613      	mov	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	1a9b      	subs	r3, r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	3338      	adds	r3, #56	; 0x38
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	4413      	add	r3, r2
 8002298:	3304      	adds	r3, #4
 800229a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2201      	movs	r2, #1
 80022a0:	705a      	strb	r2, [r3, #1]
 80022a2:	e00f      	b.n	80022c4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	f003 020f 	and.w	r2, r3, #15
 80022aa:	4613      	mov	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	4413      	add	r3, r2
 80022ba:	3304      	adds	r3, #4
 80022bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_PCD_EP_Close+0x6e>
 80022da:	2302      	movs	r3, #2
 80022dc:	e00e      	b.n	80022fc <HAL_PCD_EP_Close+0x8c>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68f9      	ldr	r1, [r7, #12]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f001 fe37 	bl	8003f60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	460b      	mov	r3, r1
 8002312:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002314:	7afb      	ldrb	r3, [r7, #11]
 8002316:	f003 020f 	and.w	r2, r3, #15
 800231a:	4613      	mov	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	1a9b      	subs	r3, r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4413      	add	r3, r2
 800232a:	3304      	adds	r3, #4
 800232c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	2200      	movs	r2, #0
 8002344:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002346:	7afb      	ldrb	r3, [r7, #11]
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	b2da      	uxtb	r2, r3
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d102      	bne.n	8002360 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002360:	7afb      	ldrb	r3, [r7, #11]
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	2b00      	cmp	r3, #0
 8002368:	d109      	bne.n	800237e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6818      	ldr	r0, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	461a      	mov	r2, r3
 8002376:	6979      	ldr	r1, [r7, #20]
 8002378:	f002 f912 	bl	80045a0 <USB_EP0StartXfer>
 800237c:	e008      	b.n	8002390 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6818      	ldr	r0, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	461a      	mov	r2, r3
 800238a:	6979      	ldr	r1, [r7, #20]
 800238c:	f001 fec4 	bl	8004118 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80023a6:	78fb      	ldrb	r3, [r7, #3]
 80023a8:	f003 020f 	and.w	r2, r3, #15
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	1a9b      	subs	r3, r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80023bc:	681b      	ldr	r3, [r3, #0]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr

080023c8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	607a      	str	r2, [r7, #4]
 80023d2:	603b      	str	r3, [r7, #0]
 80023d4:	460b      	mov	r3, r1
 80023d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023d8:	7afb      	ldrb	r3, [r7, #11]
 80023da:	f003 020f 	and.w	r2, r3, #15
 80023de:	4613      	mov	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	1a9b      	subs	r3, r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	3338      	adds	r3, #56	; 0x38
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4413      	add	r3, r2
 80023ec:	3304      	adds	r3, #4
 80023ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	2200      	movs	r2, #0
 8002400:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	2201      	movs	r2, #1
 8002406:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002408:	7afb      	ldrb	r3, [r7, #11]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	b2da      	uxtb	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d102      	bne.n	8002422 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002422:	7afb      	ldrb	r3, [r7, #11]
 8002424:	f003 030f 	and.w	r3, r3, #15
 8002428:	2b00      	cmp	r3, #0
 800242a:	d109      	bne.n	8002440 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	461a      	mov	r2, r3
 8002438:	6979      	ldr	r1, [r7, #20]
 800243a:	f002 f8b1 	bl	80045a0 <USB_EP0StartXfer>
 800243e:	e008      	b.n	8002452 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6818      	ldr	r0, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	461a      	mov	r2, r3
 800244c:	6979      	ldr	r1, [r7, #20]
 800244e:	f001 fe63 	bl	8004118 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	f003 020f 	and.w	r2, r3, #15
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	429a      	cmp	r2, r3
 8002474:	d901      	bls.n	800247a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e050      	b.n	800251c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800247a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800247e:	2b00      	cmp	r3, #0
 8002480:	da0f      	bge.n	80024a2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002482:	78fb      	ldrb	r3, [r7, #3]
 8002484:	f003 020f 	and.w	r2, r3, #15
 8002488:	4613      	mov	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	3338      	adds	r3, #56	; 0x38
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	3304      	adds	r3, #4
 8002498:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2201      	movs	r2, #1
 800249e:	705a      	strb	r2, [r3, #1]
 80024a0:	e00d      	b.n	80024be <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80024a2:	78fa      	ldrb	r2, [r7, #3]
 80024a4:	4613      	mov	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	1a9b      	subs	r3, r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	4413      	add	r3, r2
 80024b4:	3304      	adds	r3, #4
 80024b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <HAL_PCD_EP_SetStall+0x82>
 80024da:	2302      	movs	r3, #2
 80024dc:	e01e      	b.n	800251c <HAL_PCD_EP_SetStall+0xc0>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68f9      	ldr	r1, [r7, #12]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f002 fa3d 	bl	800496c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	f003 030f 	and.w	r3, r3, #15
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10a      	bne.n	8002512 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	b2d9      	uxtb	r1, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800250c:	461a      	mov	r2, r3
 800250e:	f002 fc21 	bl	8004d54 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	f003 020f 	and.w	r2, r3, #15
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	429a      	cmp	r2, r3
 800253c:	d901      	bls.n	8002542 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e042      	b.n	80025c8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002542:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002546:	2b00      	cmp	r3, #0
 8002548:	da0f      	bge.n	800256a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800254a:	78fb      	ldrb	r3, [r7, #3]
 800254c:	f003 020f 	and.w	r2, r3, #15
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	3338      	adds	r3, #56	; 0x38
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	4413      	add	r3, r2
 800255e:	3304      	adds	r3, #4
 8002560:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2201      	movs	r2, #1
 8002566:	705a      	strb	r2, [r3, #1]
 8002568:	e00f      	b.n	800258a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800256a:	78fb      	ldrb	r3, [r7, #3]
 800256c:	f003 020f 	and.w	r2, r3, #15
 8002570:	4613      	mov	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	4413      	add	r3, r2
 8002580:	3304      	adds	r3, #4
 8002582:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	b2da      	uxtb	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <HAL_PCD_EP_ClrStall+0x86>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e00e      	b.n	80025c8 <HAL_PCD_EP_ClrStall+0xa4>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68f9      	ldr	r1, [r7, #12]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f002 fa44 	bl	8004a46 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08a      	sub	sp, #40	; 0x28
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	4613      	mov	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	1a9b      	subs	r3, r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	3338      	adds	r3, #56	; 0x38
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	4413      	add	r3, r2
 80025f4:	3304      	adds	r3, #4
 80025f6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	699a      	ldr	r2, [r3, #24]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	429a      	cmp	r2, r3
 8002602:	d901      	bls.n	8002608 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e06c      	b.n	80026e2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	695a      	ldr	r2, [r3, #20]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	69fa      	ldr	r2, [r7, #28]
 800261a:	429a      	cmp	r2, r3
 800261c:	d902      	bls.n	8002624 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	3303      	adds	r3, #3
 8002628:	089b      	lsrs	r3, r3, #2
 800262a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800262c:	e02b      	b.n	8002686 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	695a      	ldr	r2, [r3, #20]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	69fa      	ldr	r2, [r7, #28]
 8002640:	429a      	cmp	r2, r3
 8002642:	d902      	bls.n	800264a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3303      	adds	r3, #3
 800264e:	089b      	lsrs	r3, r3, #2
 8002650:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	68d9      	ldr	r1, [r3, #12]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	b2da      	uxtb	r2, r3
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002662:	b2db      	uxtb	r3, r3
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	4603      	mov	r3, r0
 8002668:	6978      	ldr	r0, [r7, #20]
 800266a:	f002 f8eb 	bl	8004844 <USB_WritePacket>

    ep->xfer_buff  += len;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	441a      	add	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	699a      	ldr	r2, [r3, #24]
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	441a      	add	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4413      	add	r3, r2
 800268e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	b29b      	uxth	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	429a      	cmp	r2, r3
 800269a:	d809      	bhi.n	80026b0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	699a      	ldr	r2, [r3, #24]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d203      	bcs.n	80026b0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1be      	bne.n	800262e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	695a      	ldr	r2, [r3, #20]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d811      	bhi.n	80026e0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	2201      	movs	r2, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	6939      	ldr	r1, [r7, #16]
 80026d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80026dc:	4013      	ands	r3, r2
 80026de:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3720      	adds	r7, #32
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	333c      	adds	r3, #60	; 0x3c
 8002704:	3304      	adds	r3, #4
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4413      	add	r3, r2
 8002712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	2b01      	cmp	r3, #1
 8002720:	f040 80a0 	bne.w	8002864 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d015      	beq.n	800275a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4a72      	ldr	r2, [pc, #456]	; (80028fc <PCD_EP_OutXfrComplete_int+0x210>)
 8002732:	4293      	cmp	r3, r2
 8002734:	f240 80dd 	bls.w	80028f2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 80d7 	beq.w	80028f2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4413      	add	r3, r2
 800274c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002750:	461a      	mov	r2, r3
 8002752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002756:	6093      	str	r3, [r2, #8]
 8002758:	e0cb      	b.n	80028f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b00      	cmp	r3, #0
 8002762:	d009      	beq.n	8002778 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4413      	add	r3, r2
 800276c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002770:	461a      	mov	r2, r3
 8002772:	2320      	movs	r3, #32
 8002774:	6093      	str	r3, [r2, #8]
 8002776:	e0bc      	b.n	80028f2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800277e:	2b00      	cmp	r3, #0
 8002780:	f040 80b7 	bne.w	80028f2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4a5d      	ldr	r2, [pc, #372]	; (80028fc <PCD_EP_OutXfrComplete_int+0x210>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d90f      	bls.n	80027ac <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00a      	beq.n	80027ac <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	015a      	lsls	r2, r3, #5
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4413      	add	r3, r2
 800279e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027a2:	461a      	mov	r2, r3
 80027a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027a8:	6093      	str	r3, [r2, #8]
 80027aa:	e0a2      	b.n	80028f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	4613      	mov	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80027be:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	0159      	lsls	r1, r3, #5
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	440b      	add	r3, r1
 80027c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80027d2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	4613      	mov	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	1a9b      	subs	r3, r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4403      	add	r3, r0
 80027e2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80027e6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	4613      	mov	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	1a9b      	subs	r3, r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027fa:	6819      	ldr	r1, [r3, #0]
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	4613      	mov	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4403      	add	r3, r0
 800280a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4419      	add	r1, r3
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	4613      	mov	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4403      	add	r3, r0
 8002820:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002824:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d114      	bne.n	8002856 <PCD_EP_OutXfrComplete_int+0x16a>
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	4613      	mov	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d108      	bne.n	8002856 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800284e:	461a      	mov	r2, r3
 8002850:	2101      	movs	r1, #1
 8002852:	f002 fa7f 	bl	8004d54 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	4619      	mov	r1, r3
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f004 f905 	bl	8006a6c <HAL_PCD_DataOutStageCallback>
 8002862:	e046      	b.n	80028f2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4a26      	ldr	r2, [pc, #152]	; (8002900 <PCD_EP_OutXfrComplete_int+0x214>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d124      	bne.n	80028b6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4413      	add	r3, r2
 800287e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002882:	461a      	mov	r2, r3
 8002884:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002888:	6093      	str	r3, [r2, #8]
 800288a:	e032      	b.n	80028f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f003 0320 	and.w	r3, r3, #32
 8002892:	2b00      	cmp	r3, #0
 8002894:	d008      	beq.n	80028a8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4413      	add	r3, r2
 800289e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a2:	461a      	mov	r2, r3
 80028a4:	2320      	movs	r3, #32
 80028a6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	4619      	mov	r1, r3
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f004 f8dc 	bl	8006a6c <HAL_PCD_DataOutStageCallback>
 80028b4:	e01d      	b.n	80028f2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d114      	bne.n	80028e6 <PCD_EP_OutXfrComplete_int+0x1fa>
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	4613      	mov	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d108      	bne.n	80028e6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028de:	461a      	mov	r2, r3
 80028e0:	2100      	movs	r1, #0
 80028e2:	f002 fa37 	bl	8004d54 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	4619      	mov	r1, r3
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f004 f8bd 	bl	8006a6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	4f54300a 	.word	0x4f54300a
 8002900:	4f54310a 	.word	0x4f54310a

08002904 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	333c      	adds	r3, #60	; 0x3c
 800291c:	3304      	adds	r3, #4
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	015a      	lsls	r2, r3, #5
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4413      	add	r3, r2
 800292a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4a15      	ldr	r2, [pc, #84]	; (800298c <PCD_EP_OutSetupPacket_int+0x88>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d90e      	bls.n	8002958 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002940:	2b00      	cmp	r3, #0
 8002942:	d009      	beq.n	8002958 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4413      	add	r3, r2
 800294c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002950:	461a      	mov	r2, r3
 8002952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002956:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f004 f875 	bl	8006a48 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4a0a      	ldr	r2, [pc, #40]	; (800298c <PCD_EP_OutSetupPacket_int+0x88>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d90c      	bls.n	8002980 <PCD_EP_OutSetupPacket_int+0x7c>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d108      	bne.n	8002980 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6818      	ldr	r0, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002978:	461a      	mov	r2, r3
 800297a:	2101      	movs	r1, #1
 800297c:	f002 f9ea 	bl	8004d54 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	4f54300a 	.word	0x4f54300a

08002990 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	70fb      	strb	r3, [r7, #3]
 800299c:	4613      	mov	r3, r2
 800299e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d107      	bne.n	80029be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80029ae:	883b      	ldrh	r3, [r7, #0]
 80029b0:	0419      	lsls	r1, r3, #16
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	629a      	str	r2, [r3, #40]	; 0x28
 80029bc:	e028      	b.n	8002a10 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	0c1b      	lsrs	r3, r3, #16
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	4413      	add	r3, r2
 80029ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80029cc:	2300      	movs	r3, #0
 80029ce:	73fb      	strb	r3, [r7, #15]
 80029d0:	e00d      	b.n	80029ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
 80029d8:	3340      	adds	r3, #64	; 0x40
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	0c1b      	lsrs	r3, r3, #16
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	4413      	add	r3, r2
 80029e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
 80029ea:	3301      	adds	r3, #1
 80029ec:	73fb      	strb	r3, [r7, #15]
 80029ee:	7bfa      	ldrb	r2, [r7, #15]
 80029f0:	78fb      	ldrb	r3, [r7, #3]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d3ec      	bcc.n	80029d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80029f8:	883b      	ldrh	r3, [r7, #0]
 80029fa:	0418      	lsls	r0, r3, #16
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6819      	ldr	r1, [r3, #0]
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	4302      	orrs	r2, r0
 8002a08:	3340      	adds	r3, #64	; 0x40
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	887a      	ldrh	r2, [r7, #2]
 8002a2e:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08a      	sub	sp, #40	; 0x28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e237      	b.n	8002ebe <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d050      	beq.n	8002afc <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a5a:	4ba3      	ldr	r3, [pc, #652]	; (8002ce8 <HAL_RCC_OscConfig+0x2ac>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d00c      	beq.n	8002a80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a66:	4ba0      	ldr	r3, [pc, #640]	; (8002ce8 <HAL_RCC_OscConfig+0x2ac>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d112      	bne.n	8002a98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a72:	4b9d      	ldr	r3, [pc, #628]	; (8002ce8 <HAL_RCC_OscConfig+0x2ac>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a7e:	d10b      	bne.n	8002a98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a80:	4b99      	ldr	r3, [pc, #612]	; (8002ce8 <HAL_RCC_OscConfig+0x2ac>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d036      	beq.n	8002afa <HAL_RCC_OscConfig+0xbe>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d132      	bne.n	8002afa <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e212      	b.n	8002ebe <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	4b93      	ldr	r3, [pc, #588]	; (8002cec <HAL_RCC_OscConfig+0x2b0>)
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d013      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aaa:	f7fe fb81 	bl	80011b0 <HAL_GetTick>
 8002aae:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ab2:	f7fe fb7d 	bl	80011b0 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b64      	cmp	r3, #100	; 0x64
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e1fc      	b.n	8002ebe <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac4:	4b88      	ldr	r3, [pc, #544]	; (8002ce8 <HAL_RCC_OscConfig+0x2ac>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x76>
 8002ad0:	e014      	b.n	8002afc <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad2:	f7fe fb6d 	bl	80011b0 <HAL_GetTick>
 8002ad6:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ada:	f7fe fb69 	bl	80011b0 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b64      	cmp	r3, #100	; 0x64
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e1e8      	b.n	8002ebe <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aec:	4b7e      	ldr	r3, [pc, #504]	; (8002ce8 <HAL_RCC_OscConfig+0x2ac>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1f0      	bne.n	8002ada <HAL_RCC_OscConfig+0x9e>
 8002af8:	e000      	b.n	8002afc <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002afa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d077      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b08:	4b77      	ldr	r3, [pc, #476]	; (8002ce8 <HAL_RCC_OscConfig+0x2ac>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 030c 	and.w	r3, r3, #12
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00b      	beq.n	8002b2c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b14:	4b74      	ldr	r3, [pc, #464]	; (8002ce8 <HAL_RCC_OscConfig+0x2ac>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d126      	bne.n	8002b6e <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b20:	4b71      	ldr	r3, [pc, #452]	; (8002ce8 <HAL_RCC_OscConfig+0x2ac>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d120      	bne.n	8002b6e <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2c:	4b6e      	ldr	r3, [pc, #440]	; (8002ce8 <HAL_RCC_OscConfig+0x2ac>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <HAL_RCC_OscConfig+0x108>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e1bc      	b.n	8002ebe <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b44:	4b68      	ldr	r3, [pc, #416]	; (8002ce8 <HAL_RCC_OscConfig+0x2ac>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	21f8      	movs	r1, #248	; 0xf8
 8002b52:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	69b9      	ldr	r1, [r7, #24]
 8002b56:	fa91 f1a1 	rbit	r1, r1
 8002b5a:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b5c:	6979      	ldr	r1, [r7, #20]
 8002b5e:	fab1 f181 	clz	r1, r1
 8002b62:	b2c9      	uxtb	r1, r1
 8002b64:	408b      	lsls	r3, r1
 8002b66:	4960      	ldr	r1, [pc, #384]	; (8002ce8 <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6c:	e044      	b.n	8002bf8 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d02a      	beq.n	8002bcc <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b76:	4b5e      	ldr	r3, [pc, #376]	; (8002cf0 <HAL_RCC_OscConfig+0x2b4>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7fe fb18 	bl	80011b0 <HAL_GetTick>
 8002b80:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b84:	f7fe fb14 	bl	80011b0 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e193      	b.n	8002ebe <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b96:	4b54      	ldr	r3, [pc, #336]	; (8002ce8 <HAL_RCC_OscConfig+0x2ac>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba2:	4b51      	ldr	r3, [pc, #324]	; (8002ce8 <HAL_RCC_OscConfig+0x2ac>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	21f8      	movs	r1, #248	; 0xf8
 8002bb0:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	6939      	ldr	r1, [r7, #16]
 8002bb4:	fa91 f1a1 	rbit	r1, r1
 8002bb8:	60f9      	str	r1, [r7, #12]
  return result;
 8002bba:	68f9      	ldr	r1, [r7, #12]
 8002bbc:	fab1 f181 	clz	r1, r1
 8002bc0:	b2c9      	uxtb	r1, r1
 8002bc2:	408b      	lsls	r3, r1
 8002bc4:	4948      	ldr	r1, [pc, #288]	; (8002ce8 <HAL_RCC_OscConfig+0x2ac>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]
 8002bca:	e015      	b.n	8002bf8 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bcc:	4b48      	ldr	r3, [pc, #288]	; (8002cf0 <HAL_RCC_OscConfig+0x2b4>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd2:	f7fe faed 	bl	80011b0 <HAL_GetTick>
 8002bd6:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bda:	f7fe fae9 	bl	80011b0 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e168      	b.n	8002ebe <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bec:	4b3e      	ldr	r3, [pc, #248]	; (8002ce8 <HAL_RCC_OscConfig+0x2ac>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1f0      	bne.n	8002bda <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d030      	beq.n	8002c66 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d016      	beq.n	8002c3a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c0c:	4b39      	ldr	r3, [pc, #228]	; (8002cf4 <HAL_RCC_OscConfig+0x2b8>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c12:	f7fe facd 	bl	80011b0 <HAL_GetTick>
 8002c16:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c1a:	f7fe fac9 	bl	80011b0 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e148      	b.n	8002ebe <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2c:	4b2e      	ldr	r3, [pc, #184]	; (8002ce8 <HAL_RCC_OscConfig+0x2ac>)
 8002c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f0      	beq.n	8002c1a <HAL_RCC_OscConfig+0x1de>
 8002c38:	e015      	b.n	8002c66 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c3a:	4b2e      	ldr	r3, [pc, #184]	; (8002cf4 <HAL_RCC_OscConfig+0x2b8>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c40:	f7fe fab6 	bl	80011b0 <HAL_GetTick>
 8002c44:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c48:	f7fe fab2 	bl	80011b0 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e131      	b.n	8002ebe <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c5a:	4b23      	ldr	r3, [pc, #140]	; (8002ce8 <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 8088 	beq.w	8002d84 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c74:	2300      	movs	r3, #0
 8002c76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <HAL_RCC_OscConfig+0x2ac>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d110      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	4b17      	ldr	r3, [pc, #92]	; (8002ce8 <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	4a16      	ldr	r2, [pc, #88]	; (8002ce8 <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c94:	6413      	str	r3, [r2, #64]	; 0x40
 8002c96:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002ca8:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <HAL_RCC_OscConfig+0x2bc>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a12      	ldr	r2, [pc, #72]	; (8002cf8 <HAL_RCC_OscConfig+0x2bc>)
 8002cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb2:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb4:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <HAL_RCC_OscConfig+0x2bc>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d123      	bne.n	8002d08 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cc0:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <HAL_RCC_OscConfig+0x2bc>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a0c      	ldr	r2, [pc, #48]	; (8002cf8 <HAL_RCC_OscConfig+0x2bc>)
 8002cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ccc:	f7fe fa70 	bl	80011b0 <HAL_GetTick>
 8002cd0:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd2:	e013      	b.n	8002cfc <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd4:	f7fe fa6c 	bl	80011b0 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d90c      	bls.n	8002cfc <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e0eb      	b.n	8002ebe <HAL_RCC_OscConfig+0x482>
 8002ce6:	bf00      	nop
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40023802 	.word	0x40023802
 8002cf0:	42470000 	.word	0x42470000
 8002cf4:	42470e80 	.word	0x42470e80
 8002cf8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfc:	4b72      	ldr	r3, [pc, #456]	; (8002ec8 <HAL_RCC_OscConfig+0x48c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0e5      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	4b6f      	ldr	r3, [pc, #444]	; (8002ecc <HAL_RCC_OscConfig+0x490>)
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d015      	beq.n	8002d46 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1a:	f7fe fa49 	bl	80011b0 <HAL_GetTick>
 8002d1e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d20:	e00a      	b.n	8002d38 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d22:	f7fe fa45 	bl	80011b0 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e0c2      	b.n	8002ebe <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d38:	4b65      	ldr	r3, [pc, #404]	; (8002ed0 <HAL_RCC_OscConfig+0x494>)
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0ee      	beq.n	8002d22 <HAL_RCC_OscConfig+0x2e6>
 8002d44:	e014      	b.n	8002d70 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d46:	f7fe fa33 	bl	80011b0 <HAL_GetTick>
 8002d4a:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d4c:	e00a      	b.n	8002d64 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d4e:	f7fe fa2f 	bl	80011b0 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e0ac      	b.n	8002ebe <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d64:	4b5a      	ldr	r3, [pc, #360]	; (8002ed0 <HAL_RCC_OscConfig+0x494>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1ee      	bne.n	8002d4e <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d105      	bne.n	8002d84 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d78:	4b55      	ldr	r3, [pc, #340]	; (8002ed0 <HAL_RCC_OscConfig+0x494>)
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	4a54      	ldr	r2, [pc, #336]	; (8002ed0 <HAL_RCC_OscConfig+0x494>)
 8002d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 8097 	beq.w	8002ebc <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d8e:	4b50      	ldr	r3, [pc, #320]	; (8002ed0 <HAL_RCC_OscConfig+0x494>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d061      	beq.n	8002e5e <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d146      	bne.n	8002e30 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da2:	4b4c      	ldr	r3, [pc, #304]	; (8002ed4 <HAL_RCC_OscConfig+0x498>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7fe fa02 	bl	80011b0 <HAL_GetTick>
 8002dac:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db0:	f7fe f9fe 	bl	80011b0 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b64      	cmp	r3, #100	; 0x64
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e07d      	b.n	8002ebe <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc2:	4b43      	ldr	r3, [pc, #268]	; (8002ed0 <HAL_RCC_OscConfig+0x494>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dce:	4b40      	ldr	r3, [pc, #256]	; (8002ed0 <HAL_RCC_OscConfig+0x494>)
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	4b41      	ldr	r3, [pc, #260]	; (8002ed8 <HAL_RCC_OscConfig+0x49c>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	69d1      	ldr	r1, [r2, #28]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6a12      	ldr	r2, [r2, #32]
 8002dde:	4311      	orrs	r1, r2
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002de4:	0192      	lsls	r2, r2, #6
 8002de6:	4311      	orrs	r1, r2
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002dec:	0612      	lsls	r2, r2, #24
 8002dee:	4311      	orrs	r1, r2
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002df4:	0852      	lsrs	r2, r2, #1
 8002df6:	3a01      	subs	r2, #1
 8002df8:	0412      	lsls	r2, r2, #16
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	4934      	ldr	r1, [pc, #208]	; (8002ed0 <HAL_RCC_OscConfig+0x494>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e02:	4b34      	ldr	r3, [pc, #208]	; (8002ed4 <HAL_RCC_OscConfig+0x498>)
 8002e04:	2201      	movs	r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e08:	f7fe f9d2 	bl	80011b0 <HAL_GetTick>
 8002e0c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e10:	f7fe f9ce 	bl	80011b0 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b64      	cmp	r3, #100	; 0x64
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e04d      	b.n	8002ebe <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e22:	4b2b      	ldr	r3, [pc, #172]	; (8002ed0 <HAL_RCC_OscConfig+0x494>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCC_OscConfig+0x3d4>
 8002e2e:	e045      	b.n	8002ebc <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e30:	4b28      	ldr	r3, [pc, #160]	; (8002ed4 <HAL_RCC_OscConfig+0x498>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e36:	f7fe f9bb 	bl	80011b0 <HAL_GetTick>
 8002e3a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e3e:	f7fe f9b7 	bl	80011b0 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b64      	cmp	r3, #100	; 0x64
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e036      	b.n	8002ebe <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e50:	4b1f      	ldr	r3, [pc, #124]	; (8002ed0 <HAL_RCC_OscConfig+0x494>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1f0      	bne.n	8002e3e <HAL_RCC_OscConfig+0x402>
 8002e5c:	e02e      	b.n	8002ebc <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e029      	b.n	8002ebe <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002e6a:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <HAL_RCC_OscConfig+0x494>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d11c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d115      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	099b      	lsrs	r3, r3, #6
 8002e90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d10d      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d106      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3728      	adds	r7, #40	; 0x28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40007000 	.word	0x40007000
 8002ecc:	40023870 	.word	0x40023870
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	42470060 	.word	0x42470060
 8002ed8:	f0bc8000 	.word	0xf0bc8000

08002edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e0d2      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef0:	4b6b      	ldr	r3, [pc, #428]	; (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 030f 	and.w	r3, r3, #15
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d90c      	bls.n	8002f18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efe:	4b68      	ldr	r3, [pc, #416]	; (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f06:	4b66      	ldr	r3, [pc, #408]	; (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d001      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0be      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d020      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d005      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f30:	4b5c      	ldr	r3, [pc, #368]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	4a5b      	ldr	r2, [pc, #364]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002f48:	4b56      	ldr	r3, [pc, #344]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	4a55      	ldr	r2, [pc, #340]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f54:	4b53      	ldr	r3, [pc, #332]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	4950      	ldr	r1, [pc, #320]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d040      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d107      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7a:	4b4a      	ldr	r3, [pc, #296]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d115      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e085      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d107      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f92:	4b44      	ldr	r3, [pc, #272]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d109      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e079      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa2:	4b40      	ldr	r3, [pc, #256]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e071      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fb2:	4b3c      	ldr	r3, [pc, #240]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f023 0203 	bic.w	r2, r3, #3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	4939      	ldr	r1, [pc, #228]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc4:	f7fe f8f4 	bl	80011b0 <HAL_GetTick>
 8002fc8:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fca:	e00a      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fcc:	f7fe f8f0 	bl	80011b0 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e059      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe2:	4b30      	ldr	r3, [pc, #192]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 020c 	and.w	r2, r3, #12
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d1eb      	bne.n	8002fcc <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff4:	4b2a      	ldr	r3, [pc, #168]	; (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 030f 	and.w	r3, r3, #15
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d20c      	bcs.n	800301c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003002:	4b27      	ldr	r3, [pc, #156]	; (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800300a:	4b25      	ldr	r3, [pc, #148]	; (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d001      	beq.n	800301c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e03c      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d008      	beq.n	800303a <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003028:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	491b      	ldr	r1, [pc, #108]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003036:	4313      	orrs	r3, r2
 8003038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d009      	beq.n	800305a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003046:	4b17      	ldr	r3, [pc, #92]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	4913      	ldr	r1, [pc, #76]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003056:	4313      	orrs	r3, r2
 8003058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800305a:	f000 f82b 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 800305e:	4601      	mov	r1, r0
 8003060:	4b10      	ldr	r3, [pc, #64]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003068:	22f0      	movs	r2, #240	; 0xf0
 800306a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	fa92 f2a2 	rbit	r2, r2
 8003072:	60fa      	str	r2, [r7, #12]
  return result;
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	fab2 f282 	clz	r2, r2
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	40d3      	lsrs	r3, r2
 800307e:	4a0a      	ldr	r2, [pc, #40]	; (80030a8 <HAL_RCC_ClockConfig+0x1cc>)
 8003080:	5cd3      	ldrb	r3, [r2, r3]
 8003082:	fa21 f303 	lsr.w	r3, r1, r3
 8003086:	4a09      	ldr	r2, [pc, #36]	; (80030ac <HAL_RCC_ClockConfig+0x1d0>)
 8003088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800308a:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <HAL_RCC_ClockConfig+0x1d4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f7fe f84c 	bl	800112c <HAL_InitTick>

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40023c00 	.word	0x40023c00
 80030a4:	40023800 	.word	0x40023800
 80030a8:	08007254 	.word	0x08007254
 80030ac:	20000000 	.word	0x20000000
 80030b0:	20000004 	.word	0x20000004

080030b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	607b      	str	r3, [r7, #4]
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	2300      	movs	r3, #0
 80030c4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030ca:	4b63      	ldr	r3, [pc, #396]	; (8003258 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 030c 	and.w	r3, r3, #12
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d007      	beq.n	80030e6 <HAL_RCC_GetSysClockFreq+0x32>
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d008      	beq.n	80030ec <HAL_RCC_GetSysClockFreq+0x38>
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f040 80b4 	bne.w	8003248 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030e0:	4b5e      	ldr	r3, [pc, #376]	; (800325c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80030e2:	60bb      	str	r3, [r7, #8]
       break;
 80030e4:	e0b3      	b.n	800324e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030e6:	4b5e      	ldr	r3, [pc, #376]	; (8003260 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80030e8:	60bb      	str	r3, [r7, #8]
      break;
 80030ea:	e0b0      	b.n	800324e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030ec:	4b5a      	ldr	r3, [pc, #360]	; (8003258 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030f6:	4b58      	ldr	r3, [pc, #352]	; (8003258 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d04a      	beq.n	8003198 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003102:	4b55      	ldr	r3, [pc, #340]	; (8003258 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	099b      	lsrs	r3, r3, #6
 8003108:	f04f 0400 	mov.w	r4, #0
 800310c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	ea03 0501 	and.w	r5, r3, r1
 8003118:	ea04 0602 	and.w	r6, r4, r2
 800311c:	4629      	mov	r1, r5
 800311e:	4632      	mov	r2, r6
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	f04f 0400 	mov.w	r4, #0
 8003128:	0154      	lsls	r4, r2, #5
 800312a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800312e:	014b      	lsls	r3, r1, #5
 8003130:	4619      	mov	r1, r3
 8003132:	4622      	mov	r2, r4
 8003134:	1b49      	subs	r1, r1, r5
 8003136:	eb62 0206 	sbc.w	r2, r2, r6
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	f04f 0400 	mov.w	r4, #0
 8003142:	0194      	lsls	r4, r2, #6
 8003144:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003148:	018b      	lsls	r3, r1, #6
 800314a:	1a5b      	subs	r3, r3, r1
 800314c:	eb64 0402 	sbc.w	r4, r4, r2
 8003150:	f04f 0100 	mov.w	r1, #0
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	00e2      	lsls	r2, r4, #3
 800315a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800315e:	00d9      	lsls	r1, r3, #3
 8003160:	460b      	mov	r3, r1
 8003162:	4614      	mov	r4, r2
 8003164:	195b      	adds	r3, r3, r5
 8003166:	eb44 0406 	adc.w	r4, r4, r6
 800316a:	f04f 0100 	mov.w	r1, #0
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	0262      	lsls	r2, r4, #9
 8003174:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003178:	0259      	lsls	r1, r3, #9
 800317a:	460b      	mov	r3, r1
 800317c:	4614      	mov	r4, r2
 800317e:	4618      	mov	r0, r3
 8003180:	4621      	mov	r1, r4
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f04f 0400 	mov.w	r4, #0
 8003188:	461a      	mov	r2, r3
 800318a:	4623      	mov	r3, r4
 800318c:	f7fd f822 	bl	80001d4 <__aeabi_uldivmod>
 8003190:	4603      	mov	r3, r0
 8003192:	460c      	mov	r4, r1
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	e049      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003198:	4b2f      	ldr	r3, [pc, #188]	; (8003258 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	099b      	lsrs	r3, r3, #6
 800319e:	f04f 0400 	mov.w	r4, #0
 80031a2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	ea03 0501 	and.w	r5, r3, r1
 80031ae:	ea04 0602 	and.w	r6, r4, r2
 80031b2:	4629      	mov	r1, r5
 80031b4:	4632      	mov	r2, r6
 80031b6:	f04f 0300 	mov.w	r3, #0
 80031ba:	f04f 0400 	mov.w	r4, #0
 80031be:	0154      	lsls	r4, r2, #5
 80031c0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031c4:	014b      	lsls	r3, r1, #5
 80031c6:	4619      	mov	r1, r3
 80031c8:	4622      	mov	r2, r4
 80031ca:	1b49      	subs	r1, r1, r5
 80031cc:	eb62 0206 	sbc.w	r2, r2, r6
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	f04f 0400 	mov.w	r4, #0
 80031d8:	0194      	lsls	r4, r2, #6
 80031da:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80031de:	018b      	lsls	r3, r1, #6
 80031e0:	1a5b      	subs	r3, r3, r1
 80031e2:	eb64 0402 	sbc.w	r4, r4, r2
 80031e6:	f04f 0100 	mov.w	r1, #0
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	00e2      	lsls	r2, r4, #3
 80031f0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80031f4:	00d9      	lsls	r1, r3, #3
 80031f6:	460b      	mov	r3, r1
 80031f8:	4614      	mov	r4, r2
 80031fa:	195b      	adds	r3, r3, r5
 80031fc:	eb44 0406 	adc.w	r4, r4, r6
 8003200:	f04f 0100 	mov.w	r1, #0
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	02a2      	lsls	r2, r4, #10
 800320a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800320e:	0299      	lsls	r1, r3, #10
 8003210:	460b      	mov	r3, r1
 8003212:	4614      	mov	r4, r2
 8003214:	4618      	mov	r0, r3
 8003216:	4621      	mov	r1, r4
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f04f 0400 	mov.w	r4, #0
 800321e:	461a      	mov	r2, r3
 8003220:	4623      	mov	r3, r4
 8003222:	f7fc ffd7 	bl	80001d4 <__aeabi_uldivmod>
 8003226:	4603      	mov	r3, r0
 8003228:	460c      	mov	r4, r1
 800322a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800322c:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	0c1b      	lsrs	r3, r3, #16
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	3301      	adds	r3, #1
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	fbb2 f3f3 	udiv	r3, r2, r3
 8003244:	60bb      	str	r3, [r7, #8]
      break;
 8003246:	e002      	b.n	800324e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003248:	4b04      	ldr	r3, [pc, #16]	; (800325c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800324a:	60bb      	str	r3, [r7, #8]
      break;
 800324c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800324e:	68bb      	ldr	r3, [r7, #8]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003258:	40023800 	.word	0x40023800
 800325c:	00f42400 	.word	0x00f42400
 8003260:	007a1200 	.word	0x007a1200

08003264 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003268:	4b02      	ldr	r3, [pc, #8]	; (8003274 <HAL_RCC_GetHCLKFreq+0x10>)
 800326a:	681b      	ldr	r3, [r3, #0]
}
 800326c:	4618      	mov	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr
 8003274:	20000000 	.word	0x20000000

08003278 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e041      	b.n	800330e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7fd fe0c 	bl	8000ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3304      	adds	r3, #4
 80032b4:	4619      	mov	r1, r3
 80032b6:	4610      	mov	r0, r2
 80032b8:	f000 f9d2 	bl	8003660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b01      	cmp	r3, #1
 800332a:	d001      	beq.n	8003330 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e04e      	b.n	80033ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0201 	orr.w	r2, r2, #1
 8003346:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a22      	ldr	r2, [pc, #136]	; (80033d8 <HAL_TIM_Base_Start_IT+0xc0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d022      	beq.n	8003398 <HAL_TIM_Base_Start_IT+0x80>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800335a:	d01d      	beq.n	8003398 <HAL_TIM_Base_Start_IT+0x80>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1e      	ldr	r2, [pc, #120]	; (80033dc <HAL_TIM_Base_Start_IT+0xc4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d018      	beq.n	8003398 <HAL_TIM_Base_Start_IT+0x80>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a1d      	ldr	r2, [pc, #116]	; (80033e0 <HAL_TIM_Base_Start_IT+0xc8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d013      	beq.n	8003398 <HAL_TIM_Base_Start_IT+0x80>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a1b      	ldr	r2, [pc, #108]	; (80033e4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00e      	beq.n	8003398 <HAL_TIM_Base_Start_IT+0x80>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a1a      	ldr	r2, [pc, #104]	; (80033e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d009      	beq.n	8003398 <HAL_TIM_Base_Start_IT+0x80>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a18      	ldr	r2, [pc, #96]	; (80033ec <HAL_TIM_Base_Start_IT+0xd4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d004      	beq.n	8003398 <HAL_TIM_Base_Start_IT+0x80>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a17      	ldr	r2, [pc, #92]	; (80033f0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d111      	bne.n	80033bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2b06      	cmp	r3, #6
 80033a8:	d010      	beq.n	80033cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0201 	orr.w	r2, r2, #1
 80033b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ba:	e007      	b.n	80033cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0201 	orr.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr
 80033d8:	40010000 	.word	0x40010000
 80033dc:	40000400 	.word	0x40000400
 80033e0:	40000800 	.word	0x40000800
 80033e4:	40000c00 	.word	0x40000c00
 80033e8:	40010400 	.word	0x40010400
 80033ec:	40014000 	.word	0x40014000
 80033f0:	40001800 	.word	0x40001800

080033f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b02      	cmp	r3, #2
 8003408:	d122      	bne.n	8003450 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b02      	cmp	r3, #2
 8003416:	d11b      	bne.n	8003450 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f06f 0202 	mvn.w	r2, #2
 8003420:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f8f6 	bl	8003628 <HAL_TIM_IC_CaptureCallback>
 800343c:	e005      	b.n	800344a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f8e9 	bl	8003616 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f8f8 	bl	800363a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f003 0304 	and.w	r3, r3, #4
 800345a:	2b04      	cmp	r3, #4
 800345c:	d122      	bne.n	80034a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b04      	cmp	r3, #4
 800346a:	d11b      	bne.n	80034a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f06f 0204 	mvn.w	r2, #4
 8003474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2202      	movs	r2, #2
 800347a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f8cc 	bl	8003628 <HAL_TIM_IC_CaptureCallback>
 8003490:	e005      	b.n	800349e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f8bf 	bl	8003616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 f8ce 	bl	800363a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b08      	cmp	r3, #8
 80034b0:	d122      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d11b      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0208 	mvn.w	r2, #8
 80034c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2204      	movs	r2, #4
 80034ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f8a2 	bl	8003628 <HAL_TIM_IC_CaptureCallback>
 80034e4:	e005      	b.n	80034f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f895 	bl	8003616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f8a4 	bl	800363a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f003 0310 	and.w	r3, r3, #16
 8003502:	2b10      	cmp	r3, #16
 8003504:	d122      	bne.n	800354c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0310 	and.w	r3, r3, #16
 8003510:	2b10      	cmp	r3, #16
 8003512:	d11b      	bne.n	800354c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0210 	mvn.w	r2, #16
 800351c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2208      	movs	r2, #8
 8003522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f878 	bl	8003628 <HAL_TIM_IC_CaptureCallback>
 8003538:	e005      	b.n	8003546 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f86b 	bl	8003616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f87a 	bl	800363a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b01      	cmp	r3, #1
 8003558:	d10e      	bne.n	8003578 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b01      	cmp	r3, #1
 8003566:	d107      	bne.n	8003578 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f06f 0201 	mvn.w	r2, #1
 8003570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f846 	bl	8003604 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003582:	2b80      	cmp	r3, #128	; 0x80
 8003584:	d10e      	bne.n	80035a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003590:	2b80      	cmp	r3, #128	; 0x80
 8003592:	d107      	bne.n	80035a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800359c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f905 	bl	80037ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ae:	2b40      	cmp	r3, #64	; 0x40
 80035b0:	d10e      	bne.n	80035d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035bc:	2b40      	cmp	r3, #64	; 0x40
 80035be:	d107      	bne.n	80035d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f83e 	bl	800364c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	f003 0320 	and.w	r3, r3, #32
 80035da:	2b20      	cmp	r3, #32
 80035dc:	d10e      	bne.n	80035fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f003 0320 	and.w	r3, r3, #32
 80035e8:	2b20      	cmp	r3, #32
 80035ea:	d107      	bne.n	80035fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f06f 0220 	mvn.w	r2, #32
 80035f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f8d0 	bl	800379c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035fc:	bf00      	nop
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	4770      	bx	lr

08003616 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr

08003628 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr

0800363a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr

0800364c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr
	...

08003660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a3f      	ldr	r2, [pc, #252]	; (8003770 <TIM_Base_SetConfig+0x110>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d013      	beq.n	80036a0 <TIM_Base_SetConfig+0x40>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367e:	d00f      	beq.n	80036a0 <TIM_Base_SetConfig+0x40>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a3c      	ldr	r2, [pc, #240]	; (8003774 <TIM_Base_SetConfig+0x114>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00b      	beq.n	80036a0 <TIM_Base_SetConfig+0x40>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a3b      	ldr	r2, [pc, #236]	; (8003778 <TIM_Base_SetConfig+0x118>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d007      	beq.n	80036a0 <TIM_Base_SetConfig+0x40>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a3a      	ldr	r2, [pc, #232]	; (800377c <TIM_Base_SetConfig+0x11c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d003      	beq.n	80036a0 <TIM_Base_SetConfig+0x40>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a39      	ldr	r2, [pc, #228]	; (8003780 <TIM_Base_SetConfig+0x120>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d108      	bne.n	80036b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a2e      	ldr	r2, [pc, #184]	; (8003770 <TIM_Base_SetConfig+0x110>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d02b      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c0:	d027      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a2b      	ldr	r2, [pc, #172]	; (8003774 <TIM_Base_SetConfig+0x114>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d023      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a2a      	ldr	r2, [pc, #168]	; (8003778 <TIM_Base_SetConfig+0x118>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d01f      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a29      	ldr	r2, [pc, #164]	; (800377c <TIM_Base_SetConfig+0x11c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d01b      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a28      	ldr	r2, [pc, #160]	; (8003780 <TIM_Base_SetConfig+0x120>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d017      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a27      	ldr	r2, [pc, #156]	; (8003784 <TIM_Base_SetConfig+0x124>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d013      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a26      	ldr	r2, [pc, #152]	; (8003788 <TIM_Base_SetConfig+0x128>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00f      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a25      	ldr	r2, [pc, #148]	; (800378c <TIM_Base_SetConfig+0x12c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d00b      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a24      	ldr	r2, [pc, #144]	; (8003790 <TIM_Base_SetConfig+0x130>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d007      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a23      	ldr	r2, [pc, #140]	; (8003794 <TIM_Base_SetConfig+0x134>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d003      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a22      	ldr	r2, [pc, #136]	; (8003798 <TIM_Base_SetConfig+0x138>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d108      	bne.n	8003724 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4313      	orrs	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	4313      	orrs	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a09      	ldr	r2, [pc, #36]	; (8003770 <TIM_Base_SetConfig+0x110>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d003      	beq.n	8003758 <TIM_Base_SetConfig+0xf8>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a0b      	ldr	r2, [pc, #44]	; (8003780 <TIM_Base_SetConfig+0x120>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d103      	bne.n	8003760 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	615a      	str	r2, [r3, #20]
}
 8003766:	bf00      	nop
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr
 8003770:	40010000 	.word	0x40010000
 8003774:	40000400 	.word	0x40000400
 8003778:	40000800 	.word	0x40000800
 800377c:	40000c00 	.word	0x40000c00
 8003780:	40010400 	.word	0x40010400
 8003784:	40014000 	.word	0x40014000
 8003788:	40014400 	.word	0x40014400
 800378c:	40014800 	.word	0x40014800
 8003790:	40001800 	.word	0x40001800
 8003794:	40001c00 	.word	0x40001c00
 8003798:	40002000 	.word	0x40002000

0800379c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr

080037ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr

080037c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037c0:	b084      	sub	sp, #16
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b084      	sub	sp, #16
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
 80037ca:	f107 001c 	add.w	r0, r7, #28
 80037ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d122      	bne.n	800381e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80037ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003802:	2b01      	cmp	r3, #1
 8003804:	d105      	bne.n	8003812 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f001 fafa 	bl	8004e0c <USB_CoreReset>
 8003818:	4603      	mov	r3, r0
 800381a:	73fb      	strb	r3, [r7, #15]
 800381c:	e010      	b.n	8003840 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f001 faee 	bl	8004e0c <USB_CoreReset>
 8003830:	4603      	mov	r3, r0
 8003832:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003838:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003842:	2b01      	cmp	r3, #1
 8003844:	d10b      	bne.n	800385e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f043 0206 	orr.w	r2, r3, #6
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f043 0220 	orr.w	r2, r3, #32
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800385e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800386a:	b004      	add	sp, #16
 800386c:	4770      	bx	lr
	...

08003870 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	4613      	mov	r3, r2
 800387c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800387e:	79fb      	ldrb	r3, [r7, #7]
 8003880:	2b02      	cmp	r3, #2
 8003882:	d165      	bne.n	8003950 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4a41      	ldr	r2, [pc, #260]	; (800398c <USB_SetTurnaroundTime+0x11c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d906      	bls.n	800389a <USB_SetTurnaroundTime+0x2a>
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4a40      	ldr	r2, [pc, #256]	; (8003990 <USB_SetTurnaroundTime+0x120>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d802      	bhi.n	800389a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003894:	230f      	movs	r3, #15
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	e062      	b.n	8003960 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	4a3c      	ldr	r2, [pc, #240]	; (8003990 <USB_SetTurnaroundTime+0x120>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d906      	bls.n	80038b0 <USB_SetTurnaroundTime+0x40>
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	4a3b      	ldr	r2, [pc, #236]	; (8003994 <USB_SetTurnaroundTime+0x124>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d802      	bhi.n	80038b0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80038aa:	230e      	movs	r3, #14
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	e057      	b.n	8003960 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	4a38      	ldr	r2, [pc, #224]	; (8003994 <USB_SetTurnaroundTime+0x124>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d906      	bls.n	80038c6 <USB_SetTurnaroundTime+0x56>
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	4a37      	ldr	r2, [pc, #220]	; (8003998 <USB_SetTurnaroundTime+0x128>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d802      	bhi.n	80038c6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80038c0:	230d      	movs	r3, #13
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	e04c      	b.n	8003960 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	4a33      	ldr	r2, [pc, #204]	; (8003998 <USB_SetTurnaroundTime+0x128>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d906      	bls.n	80038dc <USB_SetTurnaroundTime+0x6c>
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	4a32      	ldr	r2, [pc, #200]	; (800399c <USB_SetTurnaroundTime+0x12c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d802      	bhi.n	80038dc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80038d6:	230c      	movs	r3, #12
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	e041      	b.n	8003960 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	4a2f      	ldr	r2, [pc, #188]	; (800399c <USB_SetTurnaroundTime+0x12c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d906      	bls.n	80038f2 <USB_SetTurnaroundTime+0x82>
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	4a2e      	ldr	r2, [pc, #184]	; (80039a0 <USB_SetTurnaroundTime+0x130>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d802      	bhi.n	80038f2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80038ec:	230b      	movs	r3, #11
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	e036      	b.n	8003960 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	4a2a      	ldr	r2, [pc, #168]	; (80039a0 <USB_SetTurnaroundTime+0x130>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d906      	bls.n	8003908 <USB_SetTurnaroundTime+0x98>
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	4a29      	ldr	r2, [pc, #164]	; (80039a4 <USB_SetTurnaroundTime+0x134>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d802      	bhi.n	8003908 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003902:	230a      	movs	r3, #10
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	e02b      	b.n	8003960 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4a26      	ldr	r2, [pc, #152]	; (80039a4 <USB_SetTurnaroundTime+0x134>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d906      	bls.n	800391e <USB_SetTurnaroundTime+0xae>
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	4a25      	ldr	r2, [pc, #148]	; (80039a8 <USB_SetTurnaroundTime+0x138>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d802      	bhi.n	800391e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003918:	2309      	movs	r3, #9
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	e020      	b.n	8003960 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	4a21      	ldr	r2, [pc, #132]	; (80039a8 <USB_SetTurnaroundTime+0x138>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d906      	bls.n	8003934 <USB_SetTurnaroundTime+0xc4>
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	4a20      	ldr	r2, [pc, #128]	; (80039ac <USB_SetTurnaroundTime+0x13c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d802      	bhi.n	8003934 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800392e:	2308      	movs	r3, #8
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	e015      	b.n	8003960 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	4a1d      	ldr	r2, [pc, #116]	; (80039ac <USB_SetTurnaroundTime+0x13c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d906      	bls.n	800394a <USB_SetTurnaroundTime+0xda>
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	4a1c      	ldr	r2, [pc, #112]	; (80039b0 <USB_SetTurnaroundTime+0x140>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d802      	bhi.n	800394a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003944:	2307      	movs	r3, #7
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	e00a      	b.n	8003960 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800394a:	2306      	movs	r3, #6
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	e007      	b.n	8003960 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d102      	bne.n	800395c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003956:	2309      	movs	r3, #9
 8003958:	617b      	str	r3, [r7, #20]
 800395a:	e001      	b.n	8003960 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800395c:	2309      	movs	r3, #9
 800395e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	029b      	lsls	r3, r3, #10
 8003974:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003978:	431a      	orrs	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	371c      	adds	r7, #28
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	00d8acbf 	.word	0x00d8acbf
 8003990:	00e4e1bf 	.word	0x00e4e1bf
 8003994:	00f423ff 	.word	0x00f423ff
 8003998:	0106737f 	.word	0x0106737f
 800399c:	011a499f 	.word	0x011a499f
 80039a0:	01312cff 	.word	0x01312cff
 80039a4:	014ca43f 	.word	0x014ca43f
 80039a8:	016e35ff 	.word	0x016e35ff
 80039ac:	01a6ab1f 	.word	0x01a6ab1f
 80039b0:	01e847ff 	.word	0x01e847ff

080039b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f043 0201 	orr.w	r2, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc80      	pop	{r7}
 80039d2:	4770      	bx	lr

080039d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f023 0201 	bic.w	r2, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr

080039f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	460b      	mov	r3, r1
 80039fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d115      	bne.n	8003a42 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a22:	2001      	movs	r0, #1
 8003a24:	f7fd fbce 	bl	80011c4 <HAL_Delay>
      ms++;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f001 f961 	bl	8004cf6 <USB_GetMode>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d01e      	beq.n	8003a78 <USB_SetCurrentMode+0x84>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2b31      	cmp	r3, #49	; 0x31
 8003a3e:	d9f0      	bls.n	8003a22 <USB_SetCurrentMode+0x2e>
 8003a40:	e01a      	b.n	8003a78 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a42:	78fb      	ldrb	r3, [r7, #3]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d115      	bne.n	8003a74 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a54:	2001      	movs	r0, #1
 8003a56:	f7fd fbb5 	bl	80011c4 <HAL_Delay>
      ms++;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f001 f948 	bl	8004cf6 <USB_GetMode>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <USB_SetCurrentMode+0x84>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2b31      	cmp	r3, #49	; 0x31
 8003a70:	d9f0      	bls.n	8003a54 <USB_SetCurrentMode+0x60>
 8003a72:	e001      	b.n	8003a78 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e005      	b.n	8003a84 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b32      	cmp	r3, #50	; 0x32
 8003a7c:	d101      	bne.n	8003a82 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b086      	sub	sp, #24
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003a9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	e009      	b.n	8003ac0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	3340      	adds	r3, #64	; 0x40
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	3301      	adds	r3, #1
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	2b0e      	cmp	r3, #14
 8003ac4:	d9f2      	bls.n	8003aac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d11c      	bne.n	8003b06 <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ada:	f043 0302 	orr.w	r3, r3, #2
 8003ade:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	639a      	str	r2, [r3, #56]	; 0x38
 8003b04:	e00b      	b.n	8003b1e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b16:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b24:	461a      	mov	r2, r3
 8003b26:	2300      	movs	r3, #0
 8003b28:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b30:	4619      	mov	r1, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b38:	461a      	mov	r2, r3
 8003b3a:	680b      	ldr	r3, [r1, #0]
 8003b3c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d10c      	bne.n	8003b5e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d104      	bne.n	8003b54 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f945 	bl	8003ddc <USB_SetDevSpeed>
 8003b52:	e008      	b.n	8003b66 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b54:	2101      	movs	r1, #1
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f940 	bl	8003ddc <USB_SetDevSpeed>
 8003b5c:	e003      	b.n	8003b66 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b5e:	2103      	movs	r1, #3
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f93b 	bl	8003ddc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b66:	2110      	movs	r1, #16
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f8f3 	bl	8003d54 <USB_FlushTxFifo>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f90f 	bl	8003d9c <USB_FlushRxFifo>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b8e:	461a      	mov	r2, r3
 8003b90:	2300      	movs	r3, #0
 8003b92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	2300      	movs	r3, #0
 8003baa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bac:	2300      	movs	r3, #0
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	e043      	b.n	8003c3a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bc8:	d118      	bne.n	8003bfc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10a      	bne.n	8003be6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bdc:	461a      	mov	r2, r3
 8003bde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	e013      	b.n	8003c0e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	e008      	b.n	8003c0e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c08:	461a      	mov	r2, r3
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	3301      	adds	r3, #1
 8003c38:	613b      	str	r3, [r7, #16]
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d3b7      	bcc.n	8003bb2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c42:	2300      	movs	r3, #0
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	e043      	b.n	8003cd0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c5e:	d118      	bne.n	8003c92 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10a      	bne.n	8003c7c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	015a      	lsls	r2, r3, #5
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c72:	461a      	mov	r2, r3
 8003c74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	e013      	b.n	8003ca4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c88:	461a      	mov	r2, r3
 8003c8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	e008      	b.n	8003ca4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	015a      	lsls	r2, r3, #5
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	015a      	lsls	r2, r3, #5
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	015a      	lsls	r2, r3, #5
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d3b7      	bcc.n	8003c48 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ce6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003cf8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d105      	bne.n	8003d0c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	f043 0210 	orr.w	r2, r3, #16
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699a      	ldr	r2, [r3, #24]
 8003d10:	4b0f      	ldr	r3, [pc, #60]	; (8003d50 <USB_DevInit+0x2c4>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	f043 0208 	orr.w	r2, r3, #8
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d107      	bne.n	8003d40 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d38:	f043 0304 	orr.w	r3, r3, #4
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3718      	adds	r7, #24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d4c:	b004      	add	sp, #16
 8003d4e:	4770      	bx	lr
 8003d50:	803c3800 	.word	0x803c3800

08003d54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	019b      	lsls	r3, r3, #6
 8003d66:	f043 0220 	orr.w	r2, r3, #32
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	3301      	adds	r3, #1
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4a08      	ldr	r2, [pc, #32]	; (8003d98 <USB_FlushTxFifo+0x44>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d901      	bls.n	8003d80 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e006      	b.n	8003d8e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b20      	cmp	r3, #32
 8003d8a:	d0f0      	beq.n	8003d6e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr
 8003d98:	00030d40 	.word	0x00030d40

08003d9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003da4:	2300      	movs	r3, #0
 8003da6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2210      	movs	r2, #16
 8003dac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	3301      	adds	r3, #1
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4a08      	ldr	r2, [pc, #32]	; (8003dd8 <USB_FlushRxFifo+0x3c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d901      	bls.n	8003dc0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e006      	b.n	8003dce <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b10      	cmp	r3, #16
 8003dca:	d0f0      	beq.n	8003dae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr
 8003dd8:	00030d40 	.word	0x00030d40

08003ddc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	460b      	mov	r3, r1
 8003de6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	78fb      	ldrb	r3, [r7, #3]
 8003df6:	68f9      	ldr	r1, [r7, #12]
 8003df8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bc80      	pop	{r7}
 8003e0a:	4770      	bx	lr

08003e0c <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 0306 	and.w	r3, r3, #6
 8003e24:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d102      	bne.n	8003e32 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	75fb      	strb	r3, [r7, #23]
 8003e30:	e00a      	b.n	8003e48 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d002      	beq.n	8003e3e <USB_GetDevSpeed+0x32>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2b06      	cmp	r3, #6
 8003e3c:	d102      	bne.n	8003e44 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003e3e:	2302      	movs	r3, #2
 8003e40:	75fb      	strb	r3, [r7, #23]
 8003e42:	e001      	b.n	8003e48 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003e44:	230f      	movs	r3, #15
 8003e46:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	371c      	adds	r7, #28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr

08003e54 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	785b      	ldrb	r3, [r3, #1]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d13a      	bne.n	8003ee6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e76:	69da      	ldr	r2, [r3, #28]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	2101      	movs	r1, #1
 8003e82:	fa01 f303 	lsl.w	r3, r1, r3
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	68f9      	ldr	r1, [r7, #12]
 8003e8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d155      	bne.n	8003f54 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	78db      	ldrb	r3, [r3, #3]
 8003ec2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ec4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	059b      	lsls	r3, r3, #22
 8003eca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	0151      	lsls	r1, r2, #5
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	440a      	add	r2, r1
 8003ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	e036      	b.n	8003f54 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eec:	69da      	ldr	r2, [r3, #28]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8003efc:	041b      	lsls	r3, r3, #16
 8003efe:	68f9      	ldr	r1, [r7, #12]
 8003f00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f04:	4313      	orrs	r3, r2
 8003f06:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d11a      	bne.n	8003f54 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	78db      	ldrb	r3, [r3, #3]
 8003f38:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f3a:	430b      	orrs	r3, r1
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	0151      	lsls	r1, r2, #5
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	440a      	add	r2, r1
 8003f46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f52:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr

08003f60 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	785b      	ldrb	r3, [r3, #1]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d161      	bne.n	8004040 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f92:	d11f      	bne.n	8003fd4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	0151      	lsls	r1, r2, #5
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	440a      	add	r2, r1
 8003faa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fb2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	0151      	lsls	r1, r2, #5
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	440a      	add	r2, r1
 8003fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fd2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	f003 030f 	and.w	r3, r3, #15
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	43db      	mvns	r3, r3
 8003fee:	68f9      	ldr	r1, [r7, #12]
 8003ff0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffe:	69da      	ldr	r2, [r3, #28]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	f003 030f 	and.w	r3, r3, #15
 8004008:	2101      	movs	r1, #1
 800400a:	fa01 f303 	lsl.w	r3, r1, r3
 800400e:	b29b      	uxth	r3, r3
 8004010:	43db      	mvns	r3, r3
 8004012:	68f9      	ldr	r1, [r7, #12]
 8004014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004018:	4013      	ands	r3, r2
 800401a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4413      	add	r3, r2
 8004024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	0159      	lsls	r1, r3, #5
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	440b      	add	r3, r1
 8004032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004036:	4619      	mov	r1, r3
 8004038:	4b35      	ldr	r3, [pc, #212]	; (8004110 <USB_DeactivateEndpoint+0x1b0>)
 800403a:	4013      	ands	r3, r2
 800403c:	600b      	str	r3, [r1, #0]
 800403e:	e060      	b.n	8004102 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4413      	add	r3, r2
 8004048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004052:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004056:	d11f      	bne.n	8004098 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	0151      	lsls	r1, r2, #5
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	440a      	add	r2, r1
 800406e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004072:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004076:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4413      	add	r3, r2
 8004080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	0151      	lsls	r1, r2, #5
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	440a      	add	r2, r1
 800408e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004092:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004096:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	f003 030f 	and.w	r3, r3, #15
 80040a8:	2101      	movs	r1, #1
 80040aa:	fa01 f303 	lsl.w	r3, r1, r3
 80040ae:	041b      	lsls	r3, r3, #16
 80040b0:	43db      	mvns	r3, r3
 80040b2:	68f9      	ldr	r1, [r7, #12]
 80040b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040b8:	4013      	ands	r3, r2
 80040ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c2:	69da      	ldr	r2, [r3, #28]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	2101      	movs	r1, #1
 80040ce:	fa01 f303 	lsl.w	r3, r1, r3
 80040d2:	041b      	lsls	r3, r3, #16
 80040d4:	43db      	mvns	r3, r3
 80040d6:	68f9      	ldr	r1, [r7, #12]
 80040d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040dc:	4013      	ands	r3, r2
 80040de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	0159      	lsls	r1, r3, #5
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	440b      	add	r3, r1
 80040f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040fa:	4619      	mov	r1, r3
 80040fc:	4b05      	ldr	r3, [pc, #20]	; (8004114 <USB_DeactivateEndpoint+0x1b4>)
 80040fe:	4013      	ands	r3, r2
 8004100:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	ec337800 	.word	0xec337800
 8004114:	eff37800 	.word	0xeff37800

08004118 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b08a      	sub	sp, #40	; 0x28
 800411c:	af02      	add	r7, sp, #8
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	4613      	mov	r3, r2
 8004124:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	785b      	ldrb	r3, [r3, #1]
 8004134:	2b01      	cmp	r3, #1
 8004136:	f040 815c 	bne.w	80043f2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d132      	bne.n	80041a8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	0151      	lsls	r1, r2, #5
 8004154:	69fa      	ldr	r2, [r7, #28]
 8004156:	440a      	add	r2, r1
 8004158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800415c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004160:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004164:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	4413      	add	r3, r2
 800416e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	0151      	lsls	r1, r2, #5
 8004178:	69fa      	ldr	r2, [r7, #28]
 800417a:	440a      	add	r2, r1
 800417c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004180:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004184:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	0151      	lsls	r1, r2, #5
 8004198:	69fa      	ldr	r2, [r7, #28]
 800419a:	440a      	add	r2, r1
 800419c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041a0:	0cdb      	lsrs	r3, r3, #19
 80041a2:	04db      	lsls	r3, r3, #19
 80041a4:	6113      	str	r3, [r2, #16]
 80041a6:	e074      	b.n	8004292 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	0151      	lsls	r1, r2, #5
 80041ba:	69fa      	ldr	r2, [r7, #28]
 80041bc:	440a      	add	r2, r1
 80041be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041c2:	0cdb      	lsrs	r3, r3, #19
 80041c4:	04db      	lsls	r3, r3, #19
 80041c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	0151      	lsls	r1, r2, #5
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	440a      	add	r2, r1
 80041de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	6959      	ldr	r1, [r3, #20]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	440b      	add	r3, r1
 8004204:	1e59      	subs	r1, r3, #1
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	fbb1 f3f3 	udiv	r3, r1, r3
 800420e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004210:	4b9d      	ldr	r3, [pc, #628]	; (8004488 <USB_EPStartXfer+0x370>)
 8004212:	400b      	ands	r3, r1
 8004214:	69b9      	ldr	r1, [r7, #24]
 8004216:	0148      	lsls	r0, r1, #5
 8004218:	69f9      	ldr	r1, [r7, #28]
 800421a:	4401      	add	r1, r0
 800421c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004220:	4313      	orrs	r3, r2
 8004222:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800423a:	69b9      	ldr	r1, [r7, #24]
 800423c:	0148      	lsls	r0, r1, #5
 800423e:	69f9      	ldr	r1, [r7, #28]
 8004240:	4401      	add	r1, r0
 8004242:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004246:	4313      	orrs	r3, r2
 8004248:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	78db      	ldrb	r3, [r3, #3]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d11f      	bne.n	8004292 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	4413      	add	r3, r2
 800425a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	0151      	lsls	r1, r2, #5
 8004264:	69fa      	ldr	r2, [r7, #28]
 8004266:	440a      	add	r2, r1
 8004268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800426c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004270:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	4413      	add	r3, r2
 800427a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	0151      	lsls	r1, r2, #5
 8004284:	69fa      	ldr	r2, [r7, #28]
 8004286:	440a      	add	r2, r1
 8004288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800428c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004290:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004292:	79fb      	ldrb	r3, [r7, #7]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d14b      	bne.n	8004330 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d009      	beq.n	80042b4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ac:	461a      	mov	r2, r3
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	78db      	ldrb	r3, [r3, #3]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d128      	bne.n	800430e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d110      	bne.n	80042ee <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	0151      	lsls	r1, r2, #5
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	440a      	add	r2, r1
 80042e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	e00f      	b.n	800430e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	0151      	lsls	r1, r2, #5
 8004300:	69fa      	ldr	r2, [r7, #28]
 8004302:	440a      	add	r2, r1
 8004304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800430c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	4413      	add	r3, r2
 8004316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	0151      	lsls	r1, r2, #5
 8004320:	69fa      	ldr	r2, [r7, #28]
 8004322:	440a      	add	r2, r1
 8004324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004328:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	e12f      	b.n	8004590 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	0151      	lsls	r1, r2, #5
 8004342:	69fa      	ldr	r2, [r7, #28]
 8004344:	440a      	add	r2, r1
 8004346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800434a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800434e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	78db      	ldrb	r3, [r3, #3]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d015      	beq.n	8004384 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 8117 	beq.w	8004590 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	2101      	movs	r1, #1
 8004374:	fa01 f303 	lsl.w	r3, r1, r3
 8004378:	69f9      	ldr	r1, [r7, #28]
 800437a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800437e:	4313      	orrs	r3, r2
 8004380:	634b      	str	r3, [r1, #52]	; 0x34
 8004382:	e105      	b.n	8004590 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004390:	2b00      	cmp	r3, #0
 8004392:	d110      	bne.n	80043b6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	0151      	lsls	r1, r2, #5
 80043a6:	69fa      	ldr	r2, [r7, #28]
 80043a8:	440a      	add	r2, r1
 80043aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043b2:	6013      	str	r3, [r2, #0]
 80043b4:	e00f      	b.n	80043d6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	0151      	lsls	r1, r2, #5
 80043c8:	69fa      	ldr	r2, [r7, #28]
 80043ca:	440a      	add	r2, r1
 80043cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	68d9      	ldr	r1, [r3, #12]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	781a      	ldrb	r2, [r3, #0]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	b298      	uxth	r0, r3
 80043e4:	79fb      	ldrb	r3, [r7, #7]
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	4603      	mov	r3, r0
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 fa2a 	bl	8004844 <USB_WritePacket>
 80043f0:	e0ce      	b.n	8004590 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	0151      	lsls	r1, r2, #5
 8004404:	69fa      	ldr	r2, [r7, #28]
 8004406:	440a      	add	r2, r1
 8004408:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800440c:	0cdb      	lsrs	r3, r3, #19
 800440e:	04db      	lsls	r3, r3, #19
 8004410:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	0151      	lsls	r1, r2, #5
 8004424:	69fa      	ldr	r2, [r7, #28]
 8004426:	440a      	add	r2, r1
 8004428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800442c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004430:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004434:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d126      	bne.n	800448c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444a:	691a      	ldr	r2, [r3, #16]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004454:	69b9      	ldr	r1, [r7, #24]
 8004456:	0148      	lsls	r0, r1, #5
 8004458:	69f9      	ldr	r1, [r7, #28]
 800445a:	4401      	add	r1, r0
 800445c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004460:	4313      	orrs	r3, r2
 8004462:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	0151      	lsls	r1, r2, #5
 8004476:	69fa      	ldr	r2, [r7, #28]
 8004478:	440a      	add	r2, r1
 800447a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800447e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004482:	6113      	str	r3, [r2, #16]
 8004484:	e036      	b.n	80044f4 <USB_EPStartXfer+0x3dc>
 8004486:	bf00      	nop
 8004488:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	695a      	ldr	r2, [r3, #20]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	4413      	add	r3, r2
 8004496:	1e5a      	subs	r2, r3, #1
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ae:	691a      	ldr	r2, [r3, #16]
 80044b0:	8afb      	ldrh	r3, [r7, #22]
 80044b2:	04d9      	lsls	r1, r3, #19
 80044b4:	4b39      	ldr	r3, [pc, #228]	; (800459c <USB_EPStartXfer+0x484>)
 80044b6:	400b      	ands	r3, r1
 80044b8:	69b9      	ldr	r1, [r7, #24]
 80044ba:	0148      	lsls	r0, r1, #5
 80044bc:	69f9      	ldr	r1, [r7, #28]
 80044be:	4401      	add	r1, r0
 80044c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044c4:	4313      	orrs	r3, r2
 80044c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	8af9      	ldrh	r1, [r7, #22]
 80044dc:	fb01 f303 	mul.w	r3, r1, r3
 80044e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044e4:	69b9      	ldr	r1, [r7, #24]
 80044e6:	0148      	lsls	r0, r1, #5
 80044e8:	69f9      	ldr	r1, [r7, #28]
 80044ea:	4401      	add	r1, r0
 80044ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044f0:	4313      	orrs	r3, r2
 80044f2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80044f4:	79fb      	ldrb	r3, [r7, #7]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d10d      	bne.n	8004516 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d009      	beq.n	8004516 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	68d9      	ldr	r1, [r3, #12]
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	4413      	add	r3, r2
 800450e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004512:	460a      	mov	r2, r1
 8004514:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	78db      	ldrb	r3, [r3, #3]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d128      	bne.n	8004570 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452a:	2b00      	cmp	r3, #0
 800452c:	d110      	bne.n	8004550 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	4413      	add	r3, r2
 8004536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	0151      	lsls	r1, r2, #5
 8004540:	69fa      	ldr	r2, [r7, #28]
 8004542:	440a      	add	r2, r1
 8004544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004548:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	e00f      	b.n	8004570 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	4413      	add	r3, r2
 8004558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	0151      	lsls	r1, r2, #5
 8004562:	69fa      	ldr	r2, [r7, #28]
 8004564:	440a      	add	r2, r1
 8004566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800456a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800456e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	4413      	add	r3, r2
 8004578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	0151      	lsls	r1, r2, #5
 8004582:	69fa      	ldr	r2, [r7, #28]
 8004584:	440a      	add	r2, r1
 8004586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800458a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800458e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3720      	adds	r7, #32
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	1ff80000 	.word	0x1ff80000

080045a0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	4613      	mov	r3, r2
 80045ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	785b      	ldrb	r3, [r3, #1]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	f040 80cd 	bne.w	800475c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d132      	bne.n	8004630 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	0151      	lsls	r1, r2, #5
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	440a      	add	r2, r1
 80045e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	0151      	lsls	r1, r2, #5
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	440a      	add	r2, r1
 8004604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004608:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800460c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	0151      	lsls	r1, r2, #5
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	440a      	add	r2, r1
 8004624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004628:	0cdb      	lsrs	r3, r3, #19
 800462a:	04db      	lsls	r3, r3, #19
 800462c:	6113      	str	r3, [r2, #16]
 800462e:	e04e      	b.n	80046ce <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	0151      	lsls	r1, r2, #5
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	440a      	add	r2, r1
 8004646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800464a:	0cdb      	lsrs	r3, r3, #19
 800464c:	04db      	lsls	r3, r3, #19
 800464e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	0151      	lsls	r1, r2, #5
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	440a      	add	r2, r1
 8004666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800466a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800466e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004672:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	695a      	ldr	r2, [r3, #20]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	429a      	cmp	r2, r3
 800467e:	d903      	bls.n	8004688 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	0151      	lsls	r1, r2, #5
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	440a      	add	r2, r1
 800469e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046be:	6939      	ldr	r1, [r7, #16]
 80046c0:	0148      	lsls	r0, r1, #5
 80046c2:	6979      	ldr	r1, [r7, #20]
 80046c4:	4401      	add	r1, r0
 80046c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80046ca:	4313      	orrs	r3, r2
 80046cc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d11e      	bne.n	8004712 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d009      	beq.n	80046f0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e8:	461a      	mov	r2, r3
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	0151      	lsls	r1, r2, #5
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	440a      	add	r2, r1
 8004706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800470a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	e092      	b.n	8004838 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	0151      	lsls	r1, r2, #5
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	440a      	add	r2, r1
 8004728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800472c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004730:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d07e      	beq.n	8004838 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	2101      	movs	r1, #1
 800474c:	fa01 f303 	lsl.w	r3, r1, r3
 8004750:	6979      	ldr	r1, [r7, #20]
 8004752:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004756:	4313      	orrs	r3, r2
 8004758:	634b      	str	r3, [r1, #52]	; 0x34
 800475a:	e06d      	b.n	8004838 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	0151      	lsls	r1, r2, #5
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	440a      	add	r2, r1
 8004772:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004776:	0cdb      	lsrs	r3, r3, #19
 8004778:	04db      	lsls	r3, r3, #19
 800477a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	0151      	lsls	r1, r2, #5
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	440a      	add	r2, r1
 8004792:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004796:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800479a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800479e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	0151      	lsls	r1, r2, #5
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	440a      	add	r2, r1
 80047c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047dc:	691a      	ldr	r2, [r3, #16]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047e6:	6939      	ldr	r1, [r7, #16]
 80047e8:	0148      	lsls	r0, r1, #5
 80047ea:	6979      	ldr	r1, [r7, #20]
 80047ec:	4401      	add	r1, r0
 80047ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80047f2:	4313      	orrs	r3, r2
 80047f4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80047f6:	79fb      	ldrb	r3, [r7, #7]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d10d      	bne.n	8004818 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d009      	beq.n	8004818 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	68d9      	ldr	r1, [r3, #12]
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004814:	460a      	mov	r2, r1
 8004816:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	0151      	lsls	r1, r2, #5
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	440a      	add	r2, r1
 800482e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004832:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004836:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	bc80      	pop	{r7}
 8004842:	4770      	bx	lr

08004844 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004844:	b480      	push	{r7}
 8004846:	b089      	sub	sp, #36	; 0x24
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	4611      	mov	r1, r2
 8004850:	461a      	mov	r2, r3
 8004852:	460b      	mov	r3, r1
 8004854:	71fb      	strb	r3, [r7, #7]
 8004856:	4613      	mov	r3, r2
 8004858:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004862:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004866:	2b00      	cmp	r3, #0
 8004868:	d123      	bne.n	80048b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800486a:	88bb      	ldrh	r3, [r7, #4]
 800486c:	3303      	adds	r3, #3
 800486e:	089b      	lsrs	r3, r3, #2
 8004870:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004872:	2300      	movs	r3, #0
 8004874:	61bb      	str	r3, [r7, #24]
 8004876:	e018      	b.n	80048aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004878:	79fb      	ldrb	r3, [r7, #7]
 800487a:	031a      	lsls	r2, r3, #12
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	4413      	add	r3, r2
 8004880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004884:	461a      	mov	r2, r3
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	3301      	adds	r3, #1
 8004890:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	3301      	adds	r3, #1
 8004896:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	3301      	adds	r3, #1
 800489c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	3301      	adds	r3, #1
 80048a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	3301      	adds	r3, #1
 80048a8:	61bb      	str	r3, [r7, #24]
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d3e2      	bcc.n	8004878 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3724      	adds	r7, #36	; 0x24
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bc80      	pop	{r7}
 80048bc:	4770      	bx	lr

080048be <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80048be:	b480      	push	{r7}
 80048c0:	b08b      	sub	sp, #44	; 0x2c
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	60f8      	str	r0, [r7, #12]
 80048c6:	60b9      	str	r1, [r7, #8]
 80048c8:	4613      	mov	r3, r2
 80048ca:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80048d4:	88fb      	ldrh	r3, [r7, #6]
 80048d6:	089b      	lsrs	r3, r3, #2
 80048d8:	b29b      	uxth	r3, r3
 80048da:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80048dc:	88fb      	ldrh	r3, [r7, #6]
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80048e4:	2300      	movs	r3, #0
 80048e6:	623b      	str	r3, [r7, #32]
 80048e8:	e014      	b.n	8004914 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	601a      	str	r2, [r3, #0]
    pDest++;
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	3301      	adds	r3, #1
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	3301      	adds	r3, #1
 8004900:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	3301      	adds	r3, #1
 8004906:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	3301      	adds	r3, #1
 800490c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	3301      	adds	r3, #1
 8004912:	623b      	str	r3, [r7, #32]
 8004914:	6a3a      	ldr	r2, [r7, #32]
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	429a      	cmp	r2, r3
 800491a:	d3e6      	bcc.n	80048ea <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800491c:	8bfb      	ldrh	r3, [r7, #30]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d01e      	beq.n	8004960 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004922:	2300      	movs	r3, #0
 8004924:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800492c:	461a      	mov	r2, r3
 800492e:	f107 0310 	add.w	r3, r7, #16
 8004932:	6812      	ldr	r2, [r2, #0]
 8004934:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	b2db      	uxtb	r3, r3
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	fa22 f303 	lsr.w	r3, r2, r3
 8004942:	b2da      	uxtb	r2, r3
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	701a      	strb	r2, [r3, #0]
      i++;
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	3301      	adds	r3, #1
 800494c:	623b      	str	r3, [r7, #32]
      pDest++;
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	3301      	adds	r3, #1
 8004952:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004954:	8bfb      	ldrh	r3, [r7, #30]
 8004956:	3b01      	subs	r3, #1
 8004958:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800495a:	8bfb      	ldrh	r3, [r7, #30]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1ea      	bne.n	8004936 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004962:	4618      	mov	r0, r3
 8004964:	372c      	adds	r7, #44	; 0x2c
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr

0800496c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	785b      	ldrb	r3, [r3, #1]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d12c      	bne.n	80049e2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	db12      	blt.n	80049c0 <USB_EPSetStall+0x54>
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00f      	beq.n	80049c0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	0151      	lsls	r1, r2, #5
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	440a      	add	r2, r1
 80049b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049be:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	0151      	lsls	r1, r2, #5
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	440a      	add	r2, r1
 80049d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	e02b      	b.n	8004a3a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	db12      	blt.n	8004a1a <USB_EPSetStall+0xae>
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00f      	beq.n	8004a1a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	0151      	lsls	r1, r2, #5
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	440a      	add	r2, r1
 8004a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a18:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	0151      	lsls	r1, r2, #5
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	440a      	add	r2, r1
 8004a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a38:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bc80      	pop	{r7}
 8004a44:	4770      	bx	lr

08004a46 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b085      	sub	sp, #20
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
 8004a4e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	785b      	ldrb	r3, [r3, #1]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d128      	bne.n	8004ab4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	0151      	lsls	r1, r2, #5
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	440a      	add	r2, r1
 8004a78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a80:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	78db      	ldrb	r3, [r3, #3]
 8004a86:	2b03      	cmp	r3, #3
 8004a88:	d003      	beq.n	8004a92 <USB_EPClearStall+0x4c>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	78db      	ldrb	r3, [r3, #3]
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d138      	bne.n	8004b04 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	0151      	lsls	r1, r2, #5
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	440a      	add	r2, r1
 8004aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	e027      	b.n	8004b04 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	0151      	lsls	r1, r2, #5
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	440a      	add	r2, r1
 8004aca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ace:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ad2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	78db      	ldrb	r3, [r3, #3]
 8004ad8:	2b03      	cmp	r3, #3
 8004ada:	d003      	beq.n	8004ae4 <USB_EPClearStall+0x9e>
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	78db      	ldrb	r3, [r3, #3]
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d10f      	bne.n	8004b04 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	0151      	lsls	r1, r2, #5
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	440a      	add	r2, r1
 8004afa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b02:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr

08004b10 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b2e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004b32:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	78fb      	ldrb	r3, [r7, #3]
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004b44:	68f9      	ldr	r1, [r7, #12]
 8004b46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bc80      	pop	{r7}
 8004b58:	4770      	bx	lr

08004b5a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b085      	sub	sp, #20
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b74:	f023 0303 	bic.w	r3, r3, #3
 8004b78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b88:	f023 0302 	bic.w	r3, r3, #2
 8004b8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bc80      	pop	{r7}
 8004b98:	4770      	bx	lr

08004b9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b085      	sub	sp, #20
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004bb4:	f023 0303 	bic.w	r3, r3, #3
 8004bb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bc8:	f043 0302 	orr.w	r3, r3, #2
 8004bcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bc80      	pop	{r7}
 8004bd8:	4770      	bx	lr

08004bda <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b085      	sub	sp, #20
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bc80      	pop	{r7}
 8004bfc:	4770      	bx	lr

08004bfe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b085      	sub	sp, #20
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	0c1b      	lsrs	r3, r3, #16
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bc80      	pop	{r7}
 8004c2e:	4770      	bx	lr

08004c30 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	4013      	ands	r3, r2
 8004c52:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	b29b      	uxth	r3, r3
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bc80      	pop	{r7}
 8004c60:	4770      	bx	lr

08004c62 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b085      	sub	sp, #20
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004c72:	78fb      	ldrb	r3, [r7, #3]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c90:	68bb      	ldr	r3, [r7, #8]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bc80      	pop	{r7}
 8004c9a:	4770      	bx	lr

08004c9c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cbe:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004cc0:	78fb      	ldrb	r3, [r7, #3]
 8004cc2:	f003 030f 	and.w	r3, r3, #15
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ccc:	01db      	lsls	r3, r3, #7
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004cd6:	78fb      	ldrb	r3, [r7, #3]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004cea:	68bb      	ldr	r3, [r7, #8]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	371c      	adds	r7, #28
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bc80      	pop	{r7}
 8004cf4:	4770      	bx	lr

08004cf6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	f003 0301 	and.w	r3, r3, #1
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bc80      	pop	{r7}
 8004d0e:	4770      	bx	lr

08004d10 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d2a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004d2e:	f023 0307 	bic.w	r3, r3, #7
 8004d32:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d46:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc80      	pop	{r7}
 8004d52:	4770      	bx	lr

08004d54 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	333c      	adds	r3, #60	; 0x3c
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	4a25      	ldr	r2, [pc, #148]	; (8004e08 <USB_EP0_OutStart+0xb4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d90a      	bls.n	8004d8e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d88:	d101      	bne.n	8004d8e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	e037      	b.n	8004dfe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d94:	461a      	mov	r2, r3
 8004d96:	2300      	movs	r3, #0
 8004d98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004da8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dbc:	f043 0318 	orr.w	r3, r3, #24
 8004dc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dd0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004dd4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004dd6:	7afb      	ldrb	r3, [r7, #11]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d10f      	bne.n	8004dfc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de2:	461a      	mov	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004df6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004dfa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	371c      	adds	r7, #28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bc80      	pop	{r7}
 8004e06:	4770      	bx	lr
 8004e08:	4f54300a 	.word	0x4f54300a

08004e0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	60fb      	str	r3, [r7, #12]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	4a12      	ldr	r2, [pc, #72]	; (8004e6c <USB_CoreReset+0x60>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d901      	bls.n	8004e2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e01b      	b.n	8004e62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	daf2      	bge.n	8004e18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	f043 0201 	orr.w	r2, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	3301      	adds	r3, #1
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4a08      	ldr	r2, [pc, #32]	; (8004e6c <USB_CoreReset+0x60>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d901      	bls.n	8004e54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e006      	b.n	8004e62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d0f0      	beq.n	8004e42 <USB_CoreReset+0x36>

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bc80      	pop	{r7}
 8004e6a:	4770      	bx	lr
 8004e6c:	00030d40 	.word	0x00030d40

08004e70 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	7c1b      	ldrb	r3, [r3, #16]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d115      	bne.n	8004eb4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004e88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	2181      	movs	r1, #129	; 0x81
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f001 ff30 	bl	8006cf6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f001 ff26 	bl	8006cf6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004eb2:	e012      	b.n	8004eda <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004eb4:	2340      	movs	r3, #64	; 0x40
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	2181      	movs	r1, #129	; 0x81
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f001 ff1b 	bl	8006cf6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004ec6:	2340      	movs	r3, #64	; 0x40
 8004ec8:	2202      	movs	r2, #2
 8004eca:	2101      	movs	r1, #1
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f001 ff12 	bl	8006cf6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004eda:	2308      	movs	r3, #8
 8004edc:	2203      	movs	r2, #3
 8004ede:	2182      	movs	r1, #130	; 0x82
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f001 ff08 	bl	8006cf6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004eec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004ef0:	f002 f87e 	bl	8006ff0 <malloc>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d102      	bne.n	8004f0e <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	73fb      	strb	r3, [r7, #15]
 8004f0c:	e026      	b.n	8004f5c <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f14:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	7c1b      	ldrb	r3, [r3, #16]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d109      	bne.n	8004f4c <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f42:	2101      	movs	r1, #1
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f001 ffc6 	bl	8006ed6 <USBD_LL_PrepareReceive>
 8004f4a:	e007      	b.n	8004f5c <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f52:	2340      	movs	r3, #64	; 0x40
 8004f54:	2101      	movs	r1, #1
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f001 ffbd 	bl	8006ed6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b084      	sub	sp, #16
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	460b      	mov	r3, r1
 8004f70:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004f76:	2181      	movs	r1, #129	; 0x81
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f001 fee2 	bl	8006d42 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004f84:	2101      	movs	r1, #1
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f001 fedb 	bl	8006d42 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004f94:	2182      	movs	r1, #130	; 0x82
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f001 fed3 	bl	8006d42 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00e      	beq.n	8004fca <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f002 f81f 	bl	8007000 <free>
    pdev->pClassData = NULL;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fe4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d039      	beq.n	8005072 <USBD_CDC_Setup+0x9e>
 8004ffe:	2b20      	cmp	r3, #32
 8005000:	d17c      	bne.n	80050fc <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	88db      	ldrh	r3, [r3, #6]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d029      	beq.n	800505e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	b25b      	sxtb	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	da11      	bge.n	8005038 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005020:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	88d2      	ldrh	r2, [r2, #6]
 8005026:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005028:	6939      	ldr	r1, [r7, #16]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	88db      	ldrh	r3, [r3, #6]
 800502e:	461a      	mov	r2, r3
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f001 fa31 	bl	8006498 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005036:	e068      	b.n	800510a <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	785a      	ldrb	r2, [r3, #1]
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	88db      	ldrh	r3, [r3, #6]
 8005046:	b2da      	uxtb	r2, r3
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800504e:	6939      	ldr	r1, [r7, #16]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	88db      	ldrh	r3, [r3, #6]
 8005054:	461a      	mov	r2, r3
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f001 fa4c 	bl	80064f4 <USBD_CtlPrepareRx>
      break;
 800505c:	e055      	b.n	800510a <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	7850      	ldrb	r0, [r2, #1]
 800506a:	2200      	movs	r2, #0
 800506c:	6839      	ldr	r1, [r7, #0]
 800506e:	4798      	blx	r3
      break;
 8005070:	e04b      	b.n	800510a <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	785b      	ldrb	r3, [r3, #1]
 8005076:	2b0a      	cmp	r3, #10
 8005078:	d017      	beq.n	80050aa <USBD_CDC_Setup+0xd6>
 800507a:	2b0b      	cmp	r3, #11
 800507c:	d029      	beq.n	80050d2 <USBD_CDC_Setup+0xfe>
 800507e:	2b00      	cmp	r3, #0
 8005080:	d133      	bne.n	80050ea <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005088:	2b03      	cmp	r3, #3
 800508a:	d107      	bne.n	800509c <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800508c:	f107 030c 	add.w	r3, r7, #12
 8005090:	2202      	movs	r2, #2
 8005092:	4619      	mov	r1, r3
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f001 f9ff 	bl	8006498 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800509a:	e02e      	b.n	80050fa <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800509c:	6839      	ldr	r1, [r7, #0]
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f001 f990 	bl	80063c4 <USBD_CtlError>
            ret = USBD_FAIL;
 80050a4:	2302      	movs	r3, #2
 80050a6:	75fb      	strb	r3, [r7, #23]
          break;
 80050a8:	e027      	b.n	80050fa <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050b0:	2b03      	cmp	r3, #3
 80050b2:	d107      	bne.n	80050c4 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80050b4:	f107 030f 	add.w	r3, r7, #15
 80050b8:	2201      	movs	r2, #1
 80050ba:	4619      	mov	r1, r3
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f001 f9eb 	bl	8006498 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80050c2:	e01a      	b.n	80050fa <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80050c4:	6839      	ldr	r1, [r7, #0]
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f001 f97c 	bl	80063c4 <USBD_CtlError>
            ret = USBD_FAIL;
 80050cc:	2302      	movs	r3, #2
 80050ce:	75fb      	strb	r3, [r7, #23]
          break;
 80050d0:	e013      	b.n	80050fa <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050d8:	2b03      	cmp	r3, #3
 80050da:	d00d      	beq.n	80050f8 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80050dc:	6839      	ldr	r1, [r7, #0]
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f001 f970 	bl	80063c4 <USBD_CtlError>
            ret = USBD_FAIL;
 80050e4:	2302      	movs	r3, #2
 80050e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80050e8:	e006      	b.n	80050f8 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80050ea:	6839      	ldr	r1, [r7, #0]
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f001 f969 	bl	80063c4 <USBD_CtlError>
          ret = USBD_FAIL;
 80050f2:	2302      	movs	r3, #2
 80050f4:	75fb      	strb	r3, [r7, #23]
          break;
 80050f6:	e000      	b.n	80050fa <USBD_CDC_Setup+0x126>
          break;
 80050f8:	bf00      	nop
      }
      break;
 80050fa:	e006      	b.n	800510a <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80050fc:	6839      	ldr	r1, [r7, #0]
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f001 f960 	bl	80063c4 <USBD_CtlError>
      ret = USBD_FAIL;
 8005104:	2302      	movs	r3, #2
 8005106:	75fb      	strb	r3, [r7, #23]
      break;
 8005108:	bf00      	nop
  }

  return ret;
 800510a:	7dfb      	ldrb	r3, [r7, #23]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3718      	adds	r7, #24
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	460b      	mov	r3, r1
 800511e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005126:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800512e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005136:	2b00      	cmp	r3, #0
 8005138:	d03a      	beq.n	80051b0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800513a:	78fa      	ldrb	r2, [r7, #3]
 800513c:	6879      	ldr	r1, [r7, #4]
 800513e:	4613      	mov	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	440b      	add	r3, r1
 8005148:	331c      	adds	r3, #28
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d029      	beq.n	80051a4 <USBD_CDC_DataIn+0x90>
 8005150:	78fa      	ldrb	r2, [r7, #3]
 8005152:	6879      	ldr	r1, [r7, #4]
 8005154:	4613      	mov	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	440b      	add	r3, r1
 800515e:	331c      	adds	r3, #28
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	78f9      	ldrb	r1, [r7, #3]
 8005164:	68b8      	ldr	r0, [r7, #8]
 8005166:	460b      	mov	r3, r1
 8005168:	00db      	lsls	r3, r3, #3
 800516a:	1a5b      	subs	r3, r3, r1
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4403      	add	r3, r0
 8005170:	3344      	adds	r3, #68	; 0x44
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	fbb2 f1f3 	udiv	r1, r2, r3
 8005178:	fb03 f301 	mul.w	r3, r3, r1
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d110      	bne.n	80051a4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005182:	78fa      	ldrb	r2, [r7, #3]
 8005184:	6879      	ldr	r1, [r7, #4]
 8005186:	4613      	mov	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	440b      	add	r3, r1
 8005190:	331c      	adds	r3, #28
 8005192:	2200      	movs	r2, #0
 8005194:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005196:	78f9      	ldrb	r1, [r7, #3]
 8005198:	2300      	movs	r3, #0
 800519a:	2200      	movs	r2, #0
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f001 fe77 	bl	8006e90 <USBD_LL_Transmit>
 80051a2:	e003      	b.n	80051ac <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80051ac:	2300      	movs	r3, #0
 80051ae:	e000      	b.n	80051b2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80051b0:	2302      	movs	r3, #2
  }
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b084      	sub	sp, #16
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
 80051c2:	460b      	mov	r3, r1
 80051c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051cc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80051ce:	78fb      	ldrb	r3, [r7, #3]
 80051d0:	4619      	mov	r1, r3
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f001 fea2 	bl	8006f1c <USBD_LL_GetRxDataSize>
 80051d8:	4602      	mov	r2, r0
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00d      	beq.n	8005206 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80051fe:	4611      	mov	r1, r2
 8005200:	4798      	blx	r3

    return USBD_OK;
 8005202:	2300      	movs	r3, #0
 8005204:	e000      	b.n	8005208 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005206:	2302      	movs	r3, #2
  }
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800521e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005226:	2b00      	cmp	r3, #0
 8005228:	d015      	beq.n	8005256 <USBD_CDC_EP0_RxReady+0x46>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005230:	2bff      	cmp	r3, #255	; 0xff
 8005232:	d010      	beq.n	8005256 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005242:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800524a:	b292      	uxth	r2, r2
 800524c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	22ff      	movs	r2, #255	; 0xff
 8005252:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2243      	movs	r2, #67	; 0x43
 800526c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800526e:	4b03      	ldr	r3, [pc, #12]	; (800527c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005270:	4618      	mov	r0, r3
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	bc80      	pop	{r7}
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	20000094 	.word	0x20000094

08005280 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2243      	movs	r2, #67	; 0x43
 800528c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800528e:	4b03      	ldr	r3, [pc, #12]	; (800529c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005290:	4618      	mov	r0, r3
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	bc80      	pop	{r7}
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	20000050 	.word	0x20000050

080052a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2243      	movs	r2, #67	; 0x43
 80052ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80052ae:	4b03      	ldr	r3, [pc, #12]	; (80052bc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bc80      	pop	{r7}
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	200000d8 	.word	0x200000d8

080052c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	220a      	movs	r2, #10
 80052cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80052ce:	4b03      	ldr	r3, [pc, #12]	; (80052dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bc80      	pop	{r7}
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	2000000c 	.word	0x2000000c

080052e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80052ea:	2302      	movs	r3, #2
 80052ec:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d005      	beq.n	8005300 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80052fc:	2300      	movs	r3, #0
 80052fe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005300:	7bfb      	ldrb	r3, [r7, #15]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	bc80      	pop	{r7}
 800530a:	4770      	bx	lr

0800530c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	4613      	mov	r3, r2
 8005318:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005320:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800532a:	88fa      	ldrh	r2, [r7, #6]
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	371c      	adds	r7, #28
 8005338:	46bd      	mov	sp, r7
 800533a:	bc80      	pop	{r7}
 800533c:	4770      	bx	lr

0800533e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800533e:	b480      	push	{r7}
 8005340:	b085      	sub	sp, #20
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800534e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	bc80      	pop	{r7}
 8005362:	4770      	bx	lr

08005364 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005372:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800537a:	2b00      	cmp	r3, #0
 800537c:	d01c      	beq.n	80053b8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005384:	2b00      	cmp	r3, #0
 8005386:	d115      	bne.n	80053b4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2201      	movs	r2, #1
 800538c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	2181      	movs	r1, #129	; 0x81
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f001 fd70 	bl	8006e90 <USBD_LL_Transmit>

      return USBD_OK;
 80053b0:	2300      	movs	r3, #0
 80053b2:	e002      	b.n	80053ba <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e000      	b.n	80053ba <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80053b8:	2302      	movs	r3, #2
  }
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b084      	sub	sp, #16
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053d0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d017      	beq.n	800540c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	7c1b      	ldrb	r3, [r3, #16]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d109      	bne.n	80053f8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053ee:	2101      	movs	r1, #1
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f001 fd70 	bl	8006ed6 <USBD_LL_PrepareReceive>
 80053f6:	e007      	b.n	8005408 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053fe:	2340      	movs	r3, #64	; 0x40
 8005400:	2101      	movs	r1, #1
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f001 fd67 	bl	8006ed6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005408:	2300      	movs	r3, #0
 800540a:	e000      	b.n	800540e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800540c:	2302      	movs	r3, #2
  }
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b084      	sub	sp, #16
 800541a:	af00      	add	r7, sp, #0
 800541c:	60f8      	str	r0, [r7, #12]
 800541e:	60b9      	str	r1, [r7, #8]
 8005420:	4613      	mov	r3, r2
 8005422:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800542a:	2302      	movs	r3, #2
 800542c:	e01a      	b.n	8005464 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005434:	2b00      	cmp	r3, #0
 8005436:	d003      	beq.n	8005440 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	79fa      	ldrb	r2, [r7, #7]
 800545a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f001 fbe5 	bl	8006c2c <USBD_LL_Init>

  return USBD_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d006      	beq.n	800548e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	73fb      	strb	r3, [r7, #15]
 800548c:	e001      	b.n	8005492 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800548e:	2302      	movs	r3, #2
 8005490:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005492:	7bfb      	ldrb	r3, [r7, #15]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	bc80      	pop	{r7}
 800549c:	4770      	bx	lr

0800549e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b082      	sub	sp, #8
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f001 fc0a 	bl	8006cc0 <USBD_LL_Start>

  return USBD_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bc80      	pop	{r7}
 80054c8:	4770      	bx	lr

080054ca <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b084      	sub	sp, #16
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
 80054d2:	460b      	mov	r3, r1
 80054d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80054d6:	2302      	movs	r3, #2
 80054d8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00c      	beq.n	80054fe <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	78fa      	ldrb	r2, [r7, #3]
 80054ee:	4611      	mov	r1, r2
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	4798      	blx	r3
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	460b      	mov	r3, r1
 8005512:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	78fa      	ldrb	r2, [r7, #3]
 800551e:	4611      	mov	r1, r2
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	4798      	blx	r3

  return USBD_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b082      	sub	sp, #8
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
 8005536:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800553e:	6839      	ldr	r1, [r7, #0]
 8005540:	4618      	mov	r0, r3
 8005542:	f000 ff03 	bl	800634c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005554:	461a      	mov	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005562:	f003 031f 	and.w	r3, r3, #31
 8005566:	2b01      	cmp	r3, #1
 8005568:	d00c      	beq.n	8005584 <USBD_LL_SetupStage+0x56>
 800556a:	2b01      	cmp	r3, #1
 800556c:	d302      	bcc.n	8005574 <USBD_LL_SetupStage+0x46>
 800556e:	2b02      	cmp	r3, #2
 8005570:	d010      	beq.n	8005594 <USBD_LL_SetupStage+0x66>
 8005572:	e017      	b.n	80055a4 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800557a:	4619      	mov	r1, r3
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 fa03 	bl	8005988 <USBD_StdDevReq>
      break;
 8005582:	e01a      	b.n	80055ba <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800558a:	4619      	mov	r1, r3
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 fa65 	bl	8005a5c <USBD_StdItfReq>
      break;
 8005592:	e012      	b.n	80055ba <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800559a:	4619      	mov	r1, r3
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 faa3 	bl	8005ae8 <USBD_StdEPReq>
      break;
 80055a2:	e00a      	b.n	80055ba <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80055aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	4619      	mov	r1, r3
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f001 fbe4 	bl	8006d80 <USBD_LL_StallEP>
      break;
 80055b8:	bf00      	nop
  }

  return USBD_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	460b      	mov	r3, r1
 80055ce:	607a      	str	r2, [r7, #4]
 80055d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80055d2:	7afb      	ldrb	r3, [r7, #11]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d14b      	bne.n	8005670 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80055de:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80055e6:	2b03      	cmp	r3, #3
 80055e8:	d134      	bne.n	8005654 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	68da      	ldr	r2, [r3, #12]
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d919      	bls.n	800562a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	1ad2      	subs	r2, r2, r3
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800560c:	429a      	cmp	r2, r3
 800560e:	d203      	bcs.n	8005618 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005614:	b29b      	uxth	r3, r3
 8005616:	e002      	b.n	800561e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800561c:	b29b      	uxth	r3, r3
 800561e:	461a      	mov	r2, r3
 8005620:	6879      	ldr	r1, [r7, #4]
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 ff84 	bl	8006530 <USBD_CtlContinueRx>
 8005628:	e038      	b.n	800569c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800563c:	2b03      	cmp	r3, #3
 800563e:	d105      	bne.n	800564c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 ff81 	bl	8006554 <USBD_CtlSendStatus>
 8005652:	e023      	b.n	800569c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800565a:	2b05      	cmp	r3, #5
 800565c:	d11e      	bne.n	800569c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005666:	2100      	movs	r1, #0
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f001 fb89 	bl	8006d80 <USBD_LL_StallEP>
 800566e:	e015      	b.n	800569c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00d      	beq.n	8005698 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005682:	2b03      	cmp	r3, #3
 8005684:	d108      	bne.n	8005698 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	7afa      	ldrb	r2, [r7, #11]
 8005690:	4611      	mov	r1, r2
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	4798      	blx	r3
 8005696:	e001      	b.n	800569c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005698:	2302      	movs	r3, #2
 800569a:	e000      	b.n	800569e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b086      	sub	sp, #24
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	60f8      	str	r0, [r7, #12]
 80056ae:	460b      	mov	r3, r1
 80056b0:	607a      	str	r2, [r7, #4]
 80056b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80056b4:	7afb      	ldrb	r3, [r7, #11]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d17f      	bne.n	80057ba <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	3314      	adds	r3, #20
 80056be:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d15c      	bne.n	8005784 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d915      	bls.n	8005702 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	1ad2      	subs	r2, r2, r3
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	461a      	mov	r2, r3
 80056ec:	6879      	ldr	r1, [r7, #4]
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 feee 	bl	80064d0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80056f4:	2300      	movs	r3, #0
 80056f6:	2200      	movs	r2, #0
 80056f8:	2100      	movs	r1, #0
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f001 fbeb 	bl	8006ed6 <USBD_LL_PrepareReceive>
 8005700:	e04e      	b.n	80057a0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	6912      	ldr	r2, [r2, #16]
 800570a:	fbb3 f1f2 	udiv	r1, r3, r2
 800570e:	fb02 f201 	mul.w	r2, r2, r1
 8005712:	1a9b      	subs	r3, r3, r2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d11c      	bne.n	8005752 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	689a      	ldr	r2, [r3, #8]
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005720:	429a      	cmp	r2, r3
 8005722:	d316      	bcc.n	8005752 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800572e:	429a      	cmp	r2, r3
 8005730:	d20f      	bcs.n	8005752 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005732:	2200      	movs	r2, #0
 8005734:	2100      	movs	r1, #0
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 feca 	bl	80064d0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005744:	2300      	movs	r3, #0
 8005746:	2200      	movs	r2, #0
 8005748:	2100      	movs	r1, #0
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f001 fbc3 	bl	8006ed6 <USBD_LL_PrepareReceive>
 8005750:	e026      	b.n	80057a0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00a      	beq.n	8005774 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005764:	2b03      	cmp	r3, #3
 8005766:	d105      	bne.n	8005774 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005774:	2180      	movs	r1, #128	; 0x80
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f001 fb02 	bl	8006d80 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 fefc 	bl	800657a <USBD_CtlReceiveStatus>
 8005782:	e00d      	b.n	80057a0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800578a:	2b04      	cmp	r3, #4
 800578c:	d004      	beq.n	8005798 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005794:	2b00      	cmp	r3, #0
 8005796:	d103      	bne.n	80057a0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005798:	2180      	movs	r1, #128	; 0x80
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f001 faf0 	bl	8006d80 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d11d      	bne.n	80057e6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f7ff fe83 	bl	80054b6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80057b8:	e015      	b.n	80057e6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00d      	beq.n	80057e2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	d108      	bne.n	80057e2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	7afa      	ldrb	r2, [r7, #11]
 80057da:	4611      	mov	r1, r2
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	4798      	blx	r3
 80057e0:	e001      	b.n	80057e6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80057e2:	2302      	movs	r3, #2
 80057e4:	e000      	b.n	80057e8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3718      	adds	r7, #24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80057f8:	2340      	movs	r3, #64	; 0x40
 80057fa:	2200      	movs	r2, #0
 80057fc:	2100      	movs	r1, #0
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f001 fa79 	bl	8006cf6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2240      	movs	r2, #64	; 0x40
 8005810:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005814:	2340      	movs	r3, #64	; 0x40
 8005816:	2200      	movs	r2, #0
 8005818:	2180      	movs	r1, #128	; 0x80
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f001 fa6b 	bl	8006cf6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2240      	movs	r2, #64	; 0x40
 800582a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005850:	2b00      	cmp	r3, #0
 8005852:	d009      	beq.n	8005868 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	6852      	ldr	r2, [r2, #4]
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	4611      	mov	r1, r2
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	4798      	blx	r3
  }

  return USBD_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005872:	b480      	push	{r7}
 8005874:	b083      	sub	sp, #12
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	460b      	mov	r3, r1
 800587c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	78fa      	ldrb	r2, [r7, #3]
 8005882:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	bc80      	pop	{r7}
 800588e:	4770      	bx	lr

08005890 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2204      	movs	r2, #4
 80058a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bc80      	pop	{r7}
 80058b6:	4770      	bx	lr

080058b8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	d105      	bne.n	80058d6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	bc80      	pop	{r7}
 80058e0:	4770      	bx	lr

080058e2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b082      	sub	sp, #8
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058f0:	2b03      	cmp	r3, #3
 80058f2:	d10b      	bne.n	800590c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058fa:	69db      	ldr	r3, [r3, #28]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005906:	69db      	ldr	r3, [r3, #28]
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	460b      	mov	r3, r1
 8005920:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	bc80      	pop	{r7}
 800592c:	4770      	bx	lr

0800592e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800592e:	b480      	push	{r7}
 8005930:	b083      	sub	sp, #12
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
 8005936:	460b      	mov	r3, r1
 8005938:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	bc80      	pop	{r7}
 8005944:	4770      	bx	lr

08005946 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005946:	b480      	push	{r7}
 8005948:	b083      	sub	sp, #12
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	bc80      	pop	{r7}
 8005958:	4770      	bx	lr

0800595a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b082      	sub	sp, #8
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	6852      	ldr	r2, [r2, #4]
 8005976:	b2d2      	uxtb	r2, r2
 8005978:	4611      	mov	r1, r2
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	4798      	blx	r3

  return USBD_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800599e:	2b20      	cmp	r3, #32
 80059a0:	d004      	beq.n	80059ac <USBD_StdDevReq+0x24>
 80059a2:	2b40      	cmp	r3, #64	; 0x40
 80059a4:	d002      	beq.n	80059ac <USBD_StdDevReq+0x24>
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d008      	beq.n	80059bc <USBD_StdDevReq+0x34>
 80059aa:	e04c      	b.n	8005a46 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	6839      	ldr	r1, [r7, #0]
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	4798      	blx	r3
      break;
 80059ba:	e049      	b.n	8005a50 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	785b      	ldrb	r3, [r3, #1]
 80059c0:	2b09      	cmp	r3, #9
 80059c2:	d83a      	bhi.n	8005a3a <USBD_StdDevReq+0xb2>
 80059c4:	a201      	add	r2, pc, #4	; (adr r2, 80059cc <USBD_StdDevReq+0x44>)
 80059c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ca:	bf00      	nop
 80059cc:	08005a1d 	.word	0x08005a1d
 80059d0:	08005a31 	.word	0x08005a31
 80059d4:	08005a3b 	.word	0x08005a3b
 80059d8:	08005a27 	.word	0x08005a27
 80059dc:	08005a3b 	.word	0x08005a3b
 80059e0:	080059ff 	.word	0x080059ff
 80059e4:	080059f5 	.word	0x080059f5
 80059e8:	08005a3b 	.word	0x08005a3b
 80059ec:	08005a13 	.word	0x08005a13
 80059f0:	08005a09 	.word	0x08005a09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80059f4:	6839      	ldr	r1, [r7, #0]
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f9d4 	bl	8005da4 <USBD_GetDescriptor>
          break;
 80059fc:	e022      	b.n	8005a44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80059fe:	6839      	ldr	r1, [r7, #0]
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fb37 	bl	8006074 <USBD_SetAddress>
          break;
 8005a06:	e01d      	b.n	8005a44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005a08:	6839      	ldr	r1, [r7, #0]
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fb74 	bl	80060f8 <USBD_SetConfig>
          break;
 8005a10:	e018      	b.n	8005a44 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005a12:	6839      	ldr	r1, [r7, #0]
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fbfd 	bl	8006214 <USBD_GetConfig>
          break;
 8005a1a:	e013      	b.n	8005a44 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005a1c:	6839      	ldr	r1, [r7, #0]
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fc2c 	bl	800627c <USBD_GetStatus>
          break;
 8005a24:	e00e      	b.n	8005a44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005a26:	6839      	ldr	r1, [r7, #0]
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fc5a 	bl	80062e2 <USBD_SetFeature>
          break;
 8005a2e:	e009      	b.n	8005a44 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005a30:	6839      	ldr	r1, [r7, #0]
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fc69 	bl	800630a <USBD_ClrFeature>
          break;
 8005a38:	e004      	b.n	8005a44 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005a3a:	6839      	ldr	r1, [r7, #0]
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 fcc1 	bl	80063c4 <USBD_CtlError>
          break;
 8005a42:	bf00      	nop
      }
      break;
 8005a44:	e004      	b.n	8005a50 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005a46:	6839      	ldr	r1, [r7, #0]
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 fcbb 	bl	80063c4 <USBD_CtlError>
      break;
 8005a4e:	bf00      	nop
  }

  return ret;
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop

08005a5c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	d003      	beq.n	8005a7e <USBD_StdItfReq+0x22>
 8005a76:	2b40      	cmp	r3, #64	; 0x40
 8005a78:	d001      	beq.n	8005a7e <USBD_StdItfReq+0x22>
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d12a      	bne.n	8005ad4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a84:	3b01      	subs	r3, #1
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d81d      	bhi.n	8005ac6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	889b      	ldrh	r3, [r3, #4]
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d813      	bhi.n	8005abc <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	6839      	ldr	r1, [r7, #0]
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	4798      	blx	r3
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	88db      	ldrh	r3, [r3, #6]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d110      	bne.n	8005ad0 <USBD_StdItfReq+0x74>
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10d      	bne.n	8005ad0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fd4d 	bl	8006554 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005aba:	e009      	b.n	8005ad0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005abc:	6839      	ldr	r1, [r7, #0]
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fc80 	bl	80063c4 <USBD_CtlError>
          break;
 8005ac4:	e004      	b.n	8005ad0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005ac6:	6839      	ldr	r1, [r7, #0]
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fc7b 	bl	80063c4 <USBD_CtlError>
          break;
 8005ace:	e000      	b.n	8005ad2 <USBD_StdItfReq+0x76>
          break;
 8005ad0:	bf00      	nop
      }
      break;
 8005ad2:	e004      	b.n	8005ade <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005ad4:	6839      	ldr	r1, [r7, #0]
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fc74 	bl	80063c4 <USBD_CtlError>
      break;
 8005adc:	bf00      	nop
  }

  return USBD_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005af2:	2300      	movs	r3, #0
 8005af4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	889b      	ldrh	r3, [r3, #4]
 8005afa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b04:	2b20      	cmp	r3, #32
 8005b06:	d004      	beq.n	8005b12 <USBD_StdEPReq+0x2a>
 8005b08:	2b40      	cmp	r3, #64	; 0x40
 8005b0a:	d002      	beq.n	8005b12 <USBD_StdEPReq+0x2a>
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d008      	beq.n	8005b22 <USBD_StdEPReq+0x3a>
 8005b10:	e13d      	b.n	8005d8e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	6839      	ldr	r1, [r7, #0]
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	4798      	blx	r3
      break;
 8005b20:	e13a      	b.n	8005d98 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b2a:	2b20      	cmp	r3, #32
 8005b2c:	d10a      	bne.n	8005b44 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	6839      	ldr	r1, [r7, #0]
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	4798      	blx	r3
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
 8005b42:	e12a      	b.n	8005d9a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	785b      	ldrb	r3, [r3, #1]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d03e      	beq.n	8005bca <USBD_StdEPReq+0xe2>
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d002      	beq.n	8005b56 <USBD_StdEPReq+0x6e>
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d070      	beq.n	8005c36 <USBD_StdEPReq+0x14e>
 8005b54:	e115      	b.n	8005d82 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d002      	beq.n	8005b66 <USBD_StdEPReq+0x7e>
 8005b60:	2b03      	cmp	r3, #3
 8005b62:	d015      	beq.n	8005b90 <USBD_StdEPReq+0xa8>
 8005b64:	e02b      	b.n	8005bbe <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b66:	7bbb      	ldrb	r3, [r7, #14]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00c      	beq.n	8005b86 <USBD_StdEPReq+0x9e>
 8005b6c:	7bbb      	ldrb	r3, [r7, #14]
 8005b6e:	2b80      	cmp	r3, #128	; 0x80
 8005b70:	d009      	beq.n	8005b86 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005b72:	7bbb      	ldrb	r3, [r7, #14]
 8005b74:	4619      	mov	r1, r3
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f001 f902 	bl	8006d80 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005b7c:	2180      	movs	r1, #128	; 0x80
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f001 f8fe 	bl	8006d80 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005b84:	e020      	b.n	8005bc8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005b86:	6839      	ldr	r1, [r7, #0]
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 fc1b 	bl	80063c4 <USBD_CtlError>
              break;
 8005b8e:	e01b      	b.n	8005bc8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	885b      	ldrh	r3, [r3, #2]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10e      	bne.n	8005bb6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005b98:	7bbb      	ldrb	r3, [r7, #14]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00b      	beq.n	8005bb6 <USBD_StdEPReq+0xce>
 8005b9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ba0:	2b80      	cmp	r3, #128	; 0x80
 8005ba2:	d008      	beq.n	8005bb6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	88db      	ldrh	r3, [r3, #6]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d104      	bne.n	8005bb6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005bac:	7bbb      	ldrb	r3, [r7, #14]
 8005bae:	4619      	mov	r1, r3
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f001 f8e5 	bl	8006d80 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fccc 	bl	8006554 <USBD_CtlSendStatus>

              break;
 8005bbc:	e004      	b.n	8005bc8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005bbe:	6839      	ldr	r1, [r7, #0]
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 fbff 	bl	80063c4 <USBD_CtlError>
              break;
 8005bc6:	bf00      	nop
          }
          break;
 8005bc8:	e0e0      	b.n	8005d8c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d002      	beq.n	8005bda <USBD_StdEPReq+0xf2>
 8005bd4:	2b03      	cmp	r3, #3
 8005bd6:	d015      	beq.n	8005c04 <USBD_StdEPReq+0x11c>
 8005bd8:	e026      	b.n	8005c28 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bda:	7bbb      	ldrb	r3, [r7, #14]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00c      	beq.n	8005bfa <USBD_StdEPReq+0x112>
 8005be0:	7bbb      	ldrb	r3, [r7, #14]
 8005be2:	2b80      	cmp	r3, #128	; 0x80
 8005be4:	d009      	beq.n	8005bfa <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005be6:	7bbb      	ldrb	r3, [r7, #14]
 8005be8:	4619      	mov	r1, r3
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f001 f8c8 	bl	8006d80 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005bf0:	2180      	movs	r1, #128	; 0x80
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f001 f8c4 	bl	8006d80 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005bf8:	e01c      	b.n	8005c34 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005bfa:	6839      	ldr	r1, [r7, #0]
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 fbe1 	bl	80063c4 <USBD_CtlError>
              break;
 8005c02:	e017      	b.n	8005c34 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	885b      	ldrh	r3, [r3, #2]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d112      	bne.n	8005c32 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005c0c:	7bbb      	ldrb	r3, [r7, #14]
 8005c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d004      	beq.n	8005c20 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005c16:	7bbb      	ldrb	r3, [r7, #14]
 8005c18:	4619      	mov	r1, r3
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f001 f8cf 	bl	8006dbe <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fc97 	bl	8006554 <USBD_CtlSendStatus>
              }
              break;
 8005c26:	e004      	b.n	8005c32 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005c28:	6839      	ldr	r1, [r7, #0]
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fbca 	bl	80063c4 <USBD_CtlError>
              break;
 8005c30:	e000      	b.n	8005c34 <USBD_StdEPReq+0x14c>
              break;
 8005c32:	bf00      	nop
          }
          break;
 8005c34:	e0aa      	b.n	8005d8c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d002      	beq.n	8005c46 <USBD_StdEPReq+0x15e>
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d032      	beq.n	8005caa <USBD_StdEPReq+0x1c2>
 8005c44:	e097      	b.n	8005d76 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c46:	7bbb      	ldrb	r3, [r7, #14]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d007      	beq.n	8005c5c <USBD_StdEPReq+0x174>
 8005c4c:	7bbb      	ldrb	r3, [r7, #14]
 8005c4e:	2b80      	cmp	r3, #128	; 0x80
 8005c50:	d004      	beq.n	8005c5c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005c52:	6839      	ldr	r1, [r7, #0]
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fbb5 	bl	80063c4 <USBD_CtlError>
                break;
 8005c5a:	e091      	b.n	8005d80 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	da0b      	bge.n	8005c7c <USBD_StdEPReq+0x194>
 8005c64:	7bbb      	ldrb	r3, [r7, #14]
 8005c66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	3310      	adds	r3, #16
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	4413      	add	r3, r2
 8005c78:	3304      	adds	r3, #4
 8005c7a:	e00b      	b.n	8005c94 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c7c:	7bbb      	ldrb	r3, [r7, #14]
 8005c7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c82:	4613      	mov	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	4413      	add	r3, r2
 8005c92:	3304      	adds	r3, #4
 8005c94:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 fbf8 	bl	8006498 <USBD_CtlSendData>
              break;
 8005ca8:	e06a      	b.n	8005d80 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005caa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	da11      	bge.n	8005cd6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005cb2:	7bbb      	ldrb	r3, [r7, #14]
 8005cb4:	f003 020f 	and.w	r2, r3, #15
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	440b      	add	r3, r1
 8005cc4:	3318      	adds	r3, #24
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d117      	bne.n	8005cfc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005ccc:	6839      	ldr	r1, [r7, #0]
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 fb78 	bl	80063c4 <USBD_CtlError>
                  break;
 8005cd4:	e054      	b.n	8005d80 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005cd6:	7bbb      	ldrb	r3, [r7, #14]
 8005cd8:	f003 020f 	and.w	r2, r3, #15
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	440b      	add	r3, r1
 8005ce8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d104      	bne.n	8005cfc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005cf2:	6839      	ldr	r1, [r7, #0]
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fb65 	bl	80063c4 <USBD_CtlError>
                  break;
 8005cfa:	e041      	b.n	8005d80 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	da0b      	bge.n	8005d1c <USBD_StdEPReq+0x234>
 8005d04:	7bbb      	ldrb	r3, [r7, #14]
 8005d06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	3310      	adds	r3, #16
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	4413      	add	r3, r2
 8005d18:	3304      	adds	r3, #4
 8005d1a:	e00b      	b.n	8005d34 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005d1c:	7bbb      	ldrb	r3, [r7, #14]
 8005d1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d22:	4613      	mov	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	4413      	add	r3, r2
 8005d32:	3304      	adds	r3, #4
 8005d34:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005d36:	7bbb      	ldrb	r3, [r7, #14]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d002      	beq.n	8005d42 <USBD_StdEPReq+0x25a>
 8005d3c:	7bbb      	ldrb	r3, [r7, #14]
 8005d3e:	2b80      	cmp	r3, #128	; 0x80
 8005d40:	d103      	bne.n	8005d4a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2200      	movs	r2, #0
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	e00e      	b.n	8005d68 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005d4a:	7bbb      	ldrb	r3, [r7, #14]
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f001 f854 	bl	8006dfc <USBD_LL_IsStallEP>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	e002      	b.n	8005d68 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2200      	movs	r2, #0
 8005d66:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fb92 	bl	8006498 <USBD_CtlSendData>
              break;
 8005d74:	e004      	b.n	8005d80 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005d76:	6839      	ldr	r1, [r7, #0]
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 fb23 	bl	80063c4 <USBD_CtlError>
              break;
 8005d7e:	bf00      	nop
          }
          break;
 8005d80:	e004      	b.n	8005d8c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005d82:	6839      	ldr	r1, [r7, #0]
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fb1d 	bl	80063c4 <USBD_CtlError>
          break;
 8005d8a:	bf00      	nop
      }
      break;
 8005d8c:	e004      	b.n	8005d98 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005d8e:	6839      	ldr	r1, [r7, #0]
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fb17 	bl	80063c4 <USBD_CtlError>
      break;
 8005d96:	bf00      	nop
  }

  return ret;
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
	...

08005da4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005db2:	2300      	movs	r3, #0
 8005db4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	885b      	ldrh	r3, [r3, #2]
 8005dbe:	0a1b      	lsrs	r3, r3, #8
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	2b06      	cmp	r3, #6
 8005dc6:	f200 8128 	bhi.w	800601a <USBD_GetDescriptor+0x276>
 8005dca:	a201      	add	r2, pc, #4	; (adr r2, 8005dd0 <USBD_GetDescriptor+0x2c>)
 8005dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd0:	08005ded 	.word	0x08005ded
 8005dd4:	08005e05 	.word	0x08005e05
 8005dd8:	08005e45 	.word	0x08005e45
 8005ddc:	0800601b 	.word	0x0800601b
 8005de0:	0800601b 	.word	0x0800601b
 8005de4:	08005fbb 	.word	0x08005fbb
 8005de8:	08005fe7 	.word	0x08005fe7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	7c12      	ldrb	r2, [r2, #16]
 8005df8:	f107 0108 	add.w	r1, r7, #8
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	4798      	blx	r3
 8005e00:	60f8      	str	r0, [r7, #12]
      break;
 8005e02:	e112      	b.n	800602a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	7c1b      	ldrb	r3, [r3, #16]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10d      	bne.n	8005e28 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e14:	f107 0208 	add.w	r2, r7, #8
 8005e18:	4610      	mov	r0, r2
 8005e1a:	4798      	blx	r3
 8005e1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3301      	adds	r3, #1
 8005e22:	2202      	movs	r2, #2
 8005e24:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005e26:	e100      	b.n	800602a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e30:	f107 0208 	add.w	r2, r7, #8
 8005e34:	4610      	mov	r0, r2
 8005e36:	4798      	blx	r3
 8005e38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	2202      	movs	r2, #2
 8005e40:	701a      	strb	r2, [r3, #0]
      break;
 8005e42:	e0f2      	b.n	800602a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	885b      	ldrh	r3, [r3, #2]
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b05      	cmp	r3, #5
 8005e4c:	f200 80ac 	bhi.w	8005fa8 <USBD_GetDescriptor+0x204>
 8005e50:	a201      	add	r2, pc, #4	; (adr r2, 8005e58 <USBD_GetDescriptor+0xb4>)
 8005e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e56:	bf00      	nop
 8005e58:	08005e71 	.word	0x08005e71
 8005e5c:	08005ea5 	.word	0x08005ea5
 8005e60:	08005ed9 	.word	0x08005ed9
 8005e64:	08005f0d 	.word	0x08005f0d
 8005e68:	08005f41 	.word	0x08005f41
 8005e6c:	08005f75 	.word	0x08005f75
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00b      	beq.n	8005e94 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	7c12      	ldrb	r2, [r2, #16]
 8005e88:	f107 0108 	add.w	r1, r7, #8
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	4798      	blx	r3
 8005e90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e92:	e091      	b.n	8005fb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e94:	6839      	ldr	r1, [r7, #0]
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fa94 	bl	80063c4 <USBD_CtlError>
            err++;
 8005e9c:	7afb      	ldrb	r3, [r7, #11]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	72fb      	strb	r3, [r7, #11]
          break;
 8005ea2:	e089      	b.n	8005fb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00b      	beq.n	8005ec8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	7c12      	ldrb	r2, [r2, #16]
 8005ebc:	f107 0108 	add.w	r1, r7, #8
 8005ec0:	4610      	mov	r0, r2
 8005ec2:	4798      	blx	r3
 8005ec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ec6:	e077      	b.n	8005fb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ec8:	6839      	ldr	r1, [r7, #0]
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fa7a 	bl	80063c4 <USBD_CtlError>
            err++;
 8005ed0:	7afb      	ldrb	r3, [r7, #11]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	72fb      	strb	r3, [r7, #11]
          break;
 8005ed6:	e06f      	b.n	8005fb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00b      	beq.n	8005efc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	7c12      	ldrb	r2, [r2, #16]
 8005ef0:	f107 0108 	add.w	r1, r7, #8
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	4798      	blx	r3
 8005ef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005efa:	e05d      	b.n	8005fb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005efc:	6839      	ldr	r1, [r7, #0]
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fa60 	bl	80063c4 <USBD_CtlError>
            err++;
 8005f04:	7afb      	ldrb	r3, [r7, #11]
 8005f06:	3301      	adds	r3, #1
 8005f08:	72fb      	strb	r3, [r7, #11]
          break;
 8005f0a:	e055      	b.n	8005fb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00b      	beq.n	8005f30 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	7c12      	ldrb	r2, [r2, #16]
 8005f24:	f107 0108 	add.w	r1, r7, #8
 8005f28:	4610      	mov	r0, r2
 8005f2a:	4798      	blx	r3
 8005f2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f2e:	e043      	b.n	8005fb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f30:	6839      	ldr	r1, [r7, #0]
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fa46 	bl	80063c4 <USBD_CtlError>
            err++;
 8005f38:	7afb      	ldrb	r3, [r7, #11]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	72fb      	strb	r3, [r7, #11]
          break;
 8005f3e:	e03b      	b.n	8005fb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00b      	beq.n	8005f64 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	7c12      	ldrb	r2, [r2, #16]
 8005f58:	f107 0108 	add.w	r1, r7, #8
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	4798      	blx	r3
 8005f60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f62:	e029      	b.n	8005fb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f64:	6839      	ldr	r1, [r7, #0]
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fa2c 	bl	80063c4 <USBD_CtlError>
            err++;
 8005f6c:	7afb      	ldrb	r3, [r7, #11]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	72fb      	strb	r3, [r7, #11]
          break;
 8005f72:	e021      	b.n	8005fb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00b      	beq.n	8005f98 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	7c12      	ldrb	r2, [r2, #16]
 8005f8c:	f107 0108 	add.w	r1, r7, #8
 8005f90:	4610      	mov	r0, r2
 8005f92:	4798      	blx	r3
 8005f94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f96:	e00f      	b.n	8005fb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f98:	6839      	ldr	r1, [r7, #0]
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fa12 	bl	80063c4 <USBD_CtlError>
            err++;
 8005fa0:	7afb      	ldrb	r3, [r7, #11]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	72fb      	strb	r3, [r7, #11]
          break;
 8005fa6:	e007      	b.n	8005fb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005fa8:	6839      	ldr	r1, [r7, #0]
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fa0a 	bl	80063c4 <USBD_CtlError>
          err++;
 8005fb0:	7afb      	ldrb	r3, [r7, #11]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005fb6:	e038      	b.n	800602a <USBD_GetDescriptor+0x286>
 8005fb8:	e037      	b.n	800602a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	7c1b      	ldrb	r3, [r3, #16]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d109      	bne.n	8005fd6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fca:	f107 0208 	add.w	r2, r7, #8
 8005fce:	4610      	mov	r0, r2
 8005fd0:	4798      	blx	r3
 8005fd2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005fd4:	e029      	b.n	800602a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005fd6:	6839      	ldr	r1, [r7, #0]
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f9f3 	bl	80063c4 <USBD_CtlError>
        err++;
 8005fde:	7afb      	ldrb	r3, [r7, #11]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	72fb      	strb	r3, [r7, #11]
      break;
 8005fe4:	e021      	b.n	800602a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	7c1b      	ldrb	r3, [r3, #16]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10d      	bne.n	800600a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff6:	f107 0208 	add.w	r2, r7, #8
 8005ffa:	4610      	mov	r0, r2
 8005ffc:	4798      	blx	r3
 8005ffe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	3301      	adds	r3, #1
 8006004:	2207      	movs	r2, #7
 8006006:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006008:	e00f      	b.n	800602a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800600a:	6839      	ldr	r1, [r7, #0]
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f9d9 	bl	80063c4 <USBD_CtlError>
        err++;
 8006012:	7afb      	ldrb	r3, [r7, #11]
 8006014:	3301      	adds	r3, #1
 8006016:	72fb      	strb	r3, [r7, #11]
      break;
 8006018:	e007      	b.n	800602a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800601a:	6839      	ldr	r1, [r7, #0]
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f9d1 	bl	80063c4 <USBD_CtlError>
      err++;
 8006022:	7afb      	ldrb	r3, [r7, #11]
 8006024:	3301      	adds	r3, #1
 8006026:	72fb      	strb	r3, [r7, #11]
      break;
 8006028:	bf00      	nop
  }

  if (err != 0U)
 800602a:	7afb      	ldrb	r3, [r7, #11]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d11c      	bne.n	800606a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006030:	893b      	ldrh	r3, [r7, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d011      	beq.n	800605a <USBD_GetDescriptor+0x2b6>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	88db      	ldrh	r3, [r3, #6]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00d      	beq.n	800605a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	88da      	ldrh	r2, [r3, #6]
 8006042:	893b      	ldrh	r3, [r7, #8]
 8006044:	4293      	cmp	r3, r2
 8006046:	bf28      	it	cs
 8006048:	4613      	movcs	r3, r2
 800604a:	b29b      	uxth	r3, r3
 800604c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800604e:	893b      	ldrh	r3, [r7, #8]
 8006050:	461a      	mov	r2, r3
 8006052:	68f9      	ldr	r1, [r7, #12]
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fa1f 	bl	8006498 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	88db      	ldrh	r3, [r3, #6]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d104      	bne.n	800606c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fa76 	bl	8006554 <USBD_CtlSendStatus>
 8006068:	e000      	b.n	800606c <USBD_GetDescriptor+0x2c8>
    return;
 800606a:	bf00      	nop
    }
  }
}
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop

08006074 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	889b      	ldrh	r3, [r3, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d130      	bne.n	80060e8 <USBD_SetAddress+0x74>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	88db      	ldrh	r3, [r3, #6]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d12c      	bne.n	80060e8 <USBD_SetAddress+0x74>
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	885b      	ldrh	r3, [r3, #2]
 8006092:	2b7f      	cmp	r3, #127	; 0x7f
 8006094:	d828      	bhi.n	80060e8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	885b      	ldrh	r3, [r3, #2]
 800609a:	b2db      	uxtb	r3, r3
 800609c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060a8:	2b03      	cmp	r3, #3
 80060aa:	d104      	bne.n	80060b6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80060ac:	6839      	ldr	r1, [r7, #0]
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f988 	bl	80063c4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060b4:	e01c      	b.n	80060f0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	7bfa      	ldrb	r2, [r7, #15]
 80060ba:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80060be:	7bfb      	ldrb	r3, [r7, #15]
 80060c0:	4619      	mov	r1, r3
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fec5 	bl	8006e52 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fa43 	bl	8006554 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d004      	beq.n	80060de <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2202      	movs	r2, #2
 80060d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060dc:	e008      	b.n	80060f0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060e6:	e003      	b.n	80060f0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80060e8:	6839      	ldr	r1, [r7, #0]
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f96a 	bl	80063c4 <USBD_CtlError>
  }
}
 80060f0:	bf00      	nop
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	885b      	ldrh	r3, [r3, #2]
 8006106:	b2da      	uxtb	r2, r3
 8006108:	4b41      	ldr	r3, [pc, #260]	; (8006210 <USBD_SetConfig+0x118>)
 800610a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800610c:	4b40      	ldr	r3, [pc, #256]	; (8006210 <USBD_SetConfig+0x118>)
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d904      	bls.n	800611e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f954 	bl	80063c4 <USBD_CtlError>
 800611c:	e075      	b.n	800620a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006124:	2b02      	cmp	r3, #2
 8006126:	d002      	beq.n	800612e <USBD_SetConfig+0x36>
 8006128:	2b03      	cmp	r3, #3
 800612a:	d023      	beq.n	8006174 <USBD_SetConfig+0x7c>
 800612c:	e062      	b.n	80061f4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800612e:	4b38      	ldr	r3, [pc, #224]	; (8006210 <USBD_SetConfig+0x118>)
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d01a      	beq.n	800616c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006136:	4b36      	ldr	r3, [pc, #216]	; (8006210 <USBD_SetConfig+0x118>)
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	461a      	mov	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2203      	movs	r2, #3
 8006144:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006148:	4b31      	ldr	r3, [pc, #196]	; (8006210 <USBD_SetConfig+0x118>)
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	4619      	mov	r1, r3
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7ff f9bb 	bl	80054ca <USBD_SetClassConfig>
 8006154:	4603      	mov	r3, r0
 8006156:	2b02      	cmp	r3, #2
 8006158:	d104      	bne.n	8006164 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800615a:	6839      	ldr	r1, [r7, #0]
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f931 	bl	80063c4 <USBD_CtlError>
            return;
 8006162:	e052      	b.n	800620a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f9f5 	bl	8006554 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800616a:	e04e      	b.n	800620a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f9f1 	bl	8006554 <USBD_CtlSendStatus>
        break;
 8006172:	e04a      	b.n	800620a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006174:	4b26      	ldr	r3, [pc, #152]	; (8006210 <USBD_SetConfig+0x118>)
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d112      	bne.n	80061a2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2202      	movs	r2, #2
 8006180:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006184:	4b22      	ldr	r3, [pc, #136]	; (8006210 <USBD_SetConfig+0x118>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	461a      	mov	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800618e:	4b20      	ldr	r3, [pc, #128]	; (8006210 <USBD_SetConfig+0x118>)
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	4619      	mov	r1, r3
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f7ff f9b7 	bl	8005508 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f9da 	bl	8006554 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80061a0:	e033      	b.n	800620a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80061a2:	4b1b      	ldr	r3, [pc, #108]	; (8006210 <USBD_SetConfig+0x118>)
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	461a      	mov	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d01d      	beq.n	80061ec <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	4619      	mov	r1, r3
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7ff f9a5 	bl	8005508 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80061be:	4b14      	ldr	r3, [pc, #80]	; (8006210 <USBD_SetConfig+0x118>)
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80061c8:	4b11      	ldr	r3, [pc, #68]	; (8006210 <USBD_SetConfig+0x118>)
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	4619      	mov	r1, r3
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7ff f97b 	bl	80054ca <USBD_SetClassConfig>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d104      	bne.n	80061e4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80061da:	6839      	ldr	r1, [r7, #0]
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f8f1 	bl	80063c4 <USBD_CtlError>
            return;
 80061e2:	e012      	b.n	800620a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 f9b5 	bl	8006554 <USBD_CtlSendStatus>
        break;
 80061ea:	e00e      	b.n	800620a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f9b1 	bl	8006554 <USBD_CtlSendStatus>
        break;
 80061f2:	e00a      	b.n	800620a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80061f4:	6839      	ldr	r1, [r7, #0]
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f8e4 	bl	80063c4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80061fc:	4b04      	ldr	r3, [pc, #16]	; (8006210 <USBD_SetConfig+0x118>)
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	4619      	mov	r1, r3
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7ff f980 	bl	8005508 <USBD_ClrClassConfig>
        break;
 8006208:	bf00      	nop
    }
  }
}
 800620a:	3708      	adds	r7, #8
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	20000208 	.word	0x20000208

08006214 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	88db      	ldrh	r3, [r3, #6]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d004      	beq.n	8006230 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006226:	6839      	ldr	r1, [r7, #0]
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 f8cb 	bl	80063c4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800622e:	e021      	b.n	8006274 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006236:	2b01      	cmp	r3, #1
 8006238:	db17      	blt.n	800626a <USBD_GetConfig+0x56>
 800623a:	2b02      	cmp	r3, #2
 800623c:	dd02      	ble.n	8006244 <USBD_GetConfig+0x30>
 800623e:	2b03      	cmp	r3, #3
 8006240:	d00b      	beq.n	800625a <USBD_GetConfig+0x46>
 8006242:	e012      	b.n	800626a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	3308      	adds	r3, #8
 800624e:	2201      	movs	r2, #1
 8006250:	4619      	mov	r1, r3
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f920 	bl	8006498 <USBD_CtlSendData>
        break;
 8006258:	e00c      	b.n	8006274 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	3304      	adds	r3, #4
 800625e:	2201      	movs	r2, #1
 8006260:	4619      	mov	r1, r3
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f918 	bl	8006498 <USBD_CtlSendData>
        break;
 8006268:	e004      	b.n	8006274 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800626a:	6839      	ldr	r1, [r7, #0]
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f8a9 	bl	80063c4 <USBD_CtlError>
        break;
 8006272:	bf00      	nop
}
 8006274:	bf00      	nop
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800628c:	3b01      	subs	r3, #1
 800628e:	2b02      	cmp	r3, #2
 8006290:	d81e      	bhi.n	80062d0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	88db      	ldrh	r3, [r3, #6]
 8006296:	2b02      	cmp	r3, #2
 8006298:	d004      	beq.n	80062a4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800629a:	6839      	ldr	r1, [r7, #0]
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 f891 	bl	80063c4 <USBD_CtlError>
        break;
 80062a2:	e01a      	b.n	80062da <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d005      	beq.n	80062c0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f043 0202 	orr.w	r2, r3, #2
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	330c      	adds	r3, #12
 80062c4:	2202      	movs	r2, #2
 80062c6:	4619      	mov	r1, r3
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 f8e5 	bl	8006498 <USBD_CtlSendData>
      break;
 80062ce:	e004      	b.n	80062da <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80062d0:	6839      	ldr	r1, [r7, #0]
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f876 	bl	80063c4 <USBD_CtlError>
      break;
 80062d8:	bf00      	nop
  }
}
 80062da:	bf00      	nop
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b082      	sub	sp, #8
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	885b      	ldrh	r3, [r3, #2]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d106      	bne.n	8006302 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f929 	bl	8006554 <USBD_CtlSendStatus>
  }
}
 8006302:	bf00      	nop
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b082      	sub	sp, #8
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
 8006312:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800631a:	3b01      	subs	r3, #1
 800631c:	2b02      	cmp	r3, #2
 800631e:	d80b      	bhi.n	8006338 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	885b      	ldrh	r3, [r3, #2]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d10c      	bne.n	8006342 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 f90f 	bl	8006554 <USBD_CtlSendStatus>
      }
      break;
 8006336:	e004      	b.n	8006342 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006338:	6839      	ldr	r1, [r7, #0]
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f842 	bl	80063c4 <USBD_CtlError>
      break;
 8006340:	e000      	b.n	8006344 <USBD_ClrFeature+0x3a>
      break;
 8006342:	bf00      	nop
  }
}
 8006344:	bf00      	nop
 8006346:	3708      	adds	r7, #8
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	781a      	ldrb	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	785a      	ldrb	r2, [r3, #1]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	3302      	adds	r3, #2
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	b29a      	uxth	r2, r3
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	3303      	adds	r3, #3
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	b29b      	uxth	r3, r3
 8006376:	021b      	lsls	r3, r3, #8
 8006378:	b29b      	uxth	r3, r3
 800637a:	4413      	add	r3, r2
 800637c:	b29a      	uxth	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	3304      	adds	r3, #4
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	b29a      	uxth	r2, r3
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	3305      	adds	r3, #5
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	b29b      	uxth	r3, r3
 8006392:	021b      	lsls	r3, r3, #8
 8006394:	b29b      	uxth	r3, r3
 8006396:	4413      	add	r3, r2
 8006398:	b29a      	uxth	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	3306      	adds	r3, #6
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	3307      	adds	r3, #7
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	021b      	lsls	r3, r3, #8
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	4413      	add	r3, r2
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	80da      	strh	r2, [r3, #6]

}
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	bc80      	pop	{r7}
 80063c2:	4770      	bx	lr

080063c4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80063ce:	2180      	movs	r1, #128	; 0x80
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 fcd5 	bl	8006d80 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80063d6:	2100      	movs	r1, #0
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fcd1 	bl	8006d80 <USBD_LL_StallEP>
}
 80063de:	bf00      	nop
 80063e0:	3708      	adds	r7, #8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b086      	sub	sp, #24
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	60f8      	str	r0, [r7, #12]
 80063ee:	60b9      	str	r1, [r7, #8]
 80063f0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d032      	beq.n	8006462 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 f834 	bl	800646a <USBD_GetLen>
 8006402:	4603      	mov	r3, r0
 8006404:	3301      	adds	r3, #1
 8006406:	b29b      	uxth	r3, r3
 8006408:	005b      	lsls	r3, r3, #1
 800640a:	b29a      	uxth	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006410:	7dfb      	ldrb	r3, [r7, #23]
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	75fa      	strb	r2, [r7, #23]
 8006416:	461a      	mov	r2, r3
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	4413      	add	r3, r2
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	7812      	ldrb	r2, [r2, #0]
 8006420:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006422:	7dfb      	ldrb	r3, [r7, #23]
 8006424:	1c5a      	adds	r2, r3, #1
 8006426:	75fa      	strb	r2, [r7, #23]
 8006428:	461a      	mov	r2, r3
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	4413      	add	r3, r2
 800642e:	2203      	movs	r2, #3
 8006430:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006432:	e012      	b.n	800645a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	1c5a      	adds	r2, r3, #1
 8006438:	60fa      	str	r2, [r7, #12]
 800643a:	7dfa      	ldrb	r2, [r7, #23]
 800643c:	1c51      	adds	r1, r2, #1
 800643e:	75f9      	strb	r1, [r7, #23]
 8006440:	4611      	mov	r1, r2
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	440a      	add	r2, r1
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800644a:	7dfb      	ldrb	r3, [r7, #23]
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	75fa      	strb	r2, [r7, #23]
 8006450:	461a      	mov	r2, r3
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	4413      	add	r3, r2
 8006456:	2200      	movs	r2, #0
 8006458:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1e8      	bne.n	8006434 <USBD_GetString+0x4e>
    }
  }
}
 8006462:	bf00      	nop
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800646a:	b480      	push	{r7}
 800646c:	b085      	sub	sp, #20
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006476:	e005      	b.n	8006484 <USBD_GetLen+0x1a>
  {
    len++;
 8006478:	7bfb      	ldrb	r3, [r7, #15]
 800647a:	3301      	adds	r3, #1
 800647c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	3301      	adds	r3, #1
 8006482:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1f5      	bne.n	8006478 <USBD_GetLen+0xe>
  }

  return len;
 800648c:	7bfb      	ldrb	r3, [r7, #15]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	bc80      	pop	{r7}
 8006496:	4770      	bx	lr

08006498 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	4613      	mov	r3, r2
 80064a4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2202      	movs	r2, #2
 80064aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80064ae:	88fa      	ldrh	r2, [r7, #6]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80064b4:	88fa      	ldrh	r2, [r7, #6]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80064ba:	88fb      	ldrh	r3, [r7, #6]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	2100      	movs	r1, #0
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 fce5 	bl	8006e90 <USBD_LL_Transmit>

  return USBD_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	4613      	mov	r3, r2
 80064dc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80064de:	88fb      	ldrh	r3, [r7, #6]
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	2100      	movs	r1, #0
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 fcd3 	bl	8006e90 <USBD_LL_Transmit>

  return USBD_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	4613      	mov	r3, r2
 8006500:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2203      	movs	r2, #3
 8006506:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800650a:	88fa      	ldrh	r2, [r7, #6]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006512:	88fa      	ldrh	r2, [r7, #6]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800651a:	88fb      	ldrh	r3, [r7, #6]
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	2100      	movs	r1, #0
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 fcd8 	bl	8006ed6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	4613      	mov	r3, r2
 800653c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800653e:	88fb      	ldrh	r3, [r7, #6]
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	2100      	movs	r1, #0
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 fcc6 	bl	8006ed6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2204      	movs	r2, #4
 8006560:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006564:	2300      	movs	r3, #0
 8006566:	2200      	movs	r2, #0
 8006568:	2100      	movs	r1, #0
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fc90 	bl	8006e90 <USBD_LL_Transmit>

  return USBD_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b082      	sub	sp, #8
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2205      	movs	r2, #5
 8006586:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800658a:	2300      	movs	r3, #0
 800658c:	2200      	movs	r2, #0
 800658e:	2100      	movs	r1, #0
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fca0 	bl	8006ed6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80065a4:	2200      	movs	r2, #0
 80065a6:	4912      	ldr	r1, [pc, #72]	; (80065f0 <MX_USB_DEVICE_Init+0x50>)
 80065a8:	4812      	ldr	r0, [pc, #72]	; (80065f4 <MX_USB_DEVICE_Init+0x54>)
 80065aa:	f7fe ff34 	bl	8005416 <USBD_Init>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d001      	beq.n	80065b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80065b4:	f7fa fc58 	bl	8000e68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80065b8:	490f      	ldr	r1, [pc, #60]	; (80065f8 <MX_USB_DEVICE_Init+0x58>)
 80065ba:	480e      	ldr	r0, [pc, #56]	; (80065f4 <MX_USB_DEVICE_Init+0x54>)
 80065bc:	f7fe ff56 	bl	800546c <USBD_RegisterClass>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80065c6:	f7fa fc4f 	bl	8000e68 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80065ca:	490c      	ldr	r1, [pc, #48]	; (80065fc <MX_USB_DEVICE_Init+0x5c>)
 80065cc:	4809      	ldr	r0, [pc, #36]	; (80065f4 <MX_USB_DEVICE_Init+0x54>)
 80065ce:	f7fe fe87 	bl	80052e0 <USBD_CDC_RegisterInterface>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80065d8:	f7fa fc46 	bl	8000e68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80065dc:	4805      	ldr	r0, [pc, #20]	; (80065f4 <MX_USB_DEVICE_Init+0x54>)
 80065de:	f7fe ff5e 	bl	800549e <USBD_Start>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d001      	beq.n	80065ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80065e8:	f7fa fc3e 	bl	8000e68 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80065ec:	bf00      	nop
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	2000012c 	.word	0x2000012c
 80065f4:	20000a94 	.word	0x20000a94
 80065f8:	20000018 	.word	0x20000018
 80065fc:	2000011c 	.word	0x2000011c

08006600 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006604:	2200      	movs	r2, #0
 8006606:	4905      	ldr	r1, [pc, #20]	; (800661c <CDC_Init_FS+0x1c>)
 8006608:	4805      	ldr	r0, [pc, #20]	; (8006620 <CDC_Init_FS+0x20>)
 800660a:	f7fe fe7f 	bl	800530c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800660e:	4905      	ldr	r1, [pc, #20]	; (8006624 <CDC_Init_FS+0x24>)
 8006610:	4803      	ldr	r0, [pc, #12]	; (8006620 <CDC_Init_FS+0x20>)
 8006612:	f7fe fe94 	bl	800533e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006616:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006618:	4618      	mov	r0, r3
 800661a:	bd80      	pop	{r7, pc}
 800661c:	20001558 	.word	0x20001558
 8006620:	20000a94 	.word	0x20000a94
 8006624:	20000d58 	.word	0x20000d58

08006628 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006628:	b480      	push	{r7}
 800662a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800662c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800662e:	4618      	mov	r0, r3
 8006630:	46bd      	mov	sp, r7
 8006632:	bc80      	pop	{r7}
 8006634:	4770      	bx	lr
	...

08006638 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	4603      	mov	r3, r0
 8006640:	6039      	str	r1, [r7, #0]
 8006642:	71fb      	strb	r3, [r7, #7]
 8006644:	4613      	mov	r3, r2
 8006646:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006648:	79fb      	ldrb	r3, [r7, #7]
 800664a:	2b23      	cmp	r3, #35	; 0x23
 800664c:	d84a      	bhi.n	80066e4 <CDC_Control_FS+0xac>
 800664e:	a201      	add	r2, pc, #4	; (adr r2, 8006654 <CDC_Control_FS+0x1c>)
 8006650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006654:	080066e5 	.word	0x080066e5
 8006658:	080066e5 	.word	0x080066e5
 800665c:	080066e5 	.word	0x080066e5
 8006660:	080066e5 	.word	0x080066e5
 8006664:	080066e5 	.word	0x080066e5
 8006668:	080066e5 	.word	0x080066e5
 800666c:	080066e5 	.word	0x080066e5
 8006670:	080066e5 	.word	0x080066e5
 8006674:	080066e5 	.word	0x080066e5
 8006678:	080066e5 	.word	0x080066e5
 800667c:	080066e5 	.word	0x080066e5
 8006680:	080066e5 	.word	0x080066e5
 8006684:	080066e5 	.word	0x080066e5
 8006688:	080066e5 	.word	0x080066e5
 800668c:	080066e5 	.word	0x080066e5
 8006690:	080066e5 	.word	0x080066e5
 8006694:	080066e5 	.word	0x080066e5
 8006698:	080066e5 	.word	0x080066e5
 800669c:	080066e5 	.word	0x080066e5
 80066a0:	080066e5 	.word	0x080066e5
 80066a4:	080066e5 	.word	0x080066e5
 80066a8:	080066e5 	.word	0x080066e5
 80066ac:	080066e5 	.word	0x080066e5
 80066b0:	080066e5 	.word	0x080066e5
 80066b4:	080066e5 	.word	0x080066e5
 80066b8:	080066e5 	.word	0x080066e5
 80066bc:	080066e5 	.word	0x080066e5
 80066c0:	080066e5 	.word	0x080066e5
 80066c4:	080066e5 	.word	0x080066e5
 80066c8:	080066e5 	.word	0x080066e5
 80066cc:	080066e5 	.word	0x080066e5
 80066d0:	080066e5 	.word	0x080066e5
 80066d4:	080066e5 	.word	0x080066e5
 80066d8:	080066e5 	.word	0x080066e5
 80066dc:	080066e5 	.word	0x080066e5
 80066e0:	080066e5 	.word	0x080066e5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80066e4:	bf00      	nop
  }

  return (USBD_OK);
 80066e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bc80      	pop	{r7}
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop

080066f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	// Copy new data to RxBuffer
	struct PROTOCOL_0X55_Data_Type *TmpPointer;
	TmpPointer = Protocol_0x55_GetRxPointer();
 80066fe:	f7fa f929 	bl	8000954 <Protocol_0x55_GetRxPointer>
 8006702:	60f8      	str	r0, [r7, #12]

	strncat((char*)TmpPointer->FIFO_Data, (char*) Buf, *Len);
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	6879      	ldr	r1, [r7, #4]
 800670e:	f000 fd3d 	bl	800718c <strncat>

	// Set new data flag
	TmpPointer->NewData = 1;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401

	// Prepare next receive
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800671a:	6879      	ldr	r1, [r7, #4]
 800671c:	4805      	ldr	r0, [pc, #20]	; (8006734 <CDC_Receive_FS+0x40>)
 800671e:	f7fe fe0e 	bl	800533e <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006722:	4804      	ldr	r0, [pc, #16]	; (8006734 <CDC_Receive_FS+0x40>)
 8006724:	f7fe fe4d 	bl	80053c2 <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 8006728:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	20000a94 	.word	0x20000a94

08006738 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	460b      	mov	r3, r1
 8006742:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006744:	2300      	movs	r3, #0
 8006746:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006748:	4b0d      	ldr	r3, [pc, #52]	; (8006780 <CDC_Transmit_FS+0x48>)
 800674a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800674e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800675a:	2301      	movs	r3, #1
 800675c:	e00b      	b.n	8006776 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800675e:	887b      	ldrh	r3, [r7, #2]
 8006760:	461a      	mov	r2, r3
 8006762:	6879      	ldr	r1, [r7, #4]
 8006764:	4806      	ldr	r0, [pc, #24]	; (8006780 <CDC_Transmit_FS+0x48>)
 8006766:	f7fe fdd1 	bl	800530c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800676a:	4805      	ldr	r0, [pc, #20]	; (8006780 <CDC_Transmit_FS+0x48>)
 800676c:	f7fe fdfa 	bl	8005364 <USBD_CDC_TransmitPacket>
 8006770:	4603      	mov	r3, r0
 8006772:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006774:	7bfb      	ldrb	r3, [r7, #15]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	20000a94 	.word	0x20000a94

08006784 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	4603      	mov	r3, r0
 800678c:	6039      	str	r1, [r7, #0]
 800678e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	2212      	movs	r2, #18
 8006794:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006796:	4b03      	ldr	r3, [pc, #12]	; (80067a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006798:	4618      	mov	r0, r3
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	bc80      	pop	{r7}
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	20000148 	.word	0x20000148

080067a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	4603      	mov	r3, r0
 80067b0:	6039      	str	r1, [r7, #0]
 80067b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	2204      	movs	r2, #4
 80067b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80067ba:	4b03      	ldr	r3, [pc, #12]	; (80067c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80067bc:	4618      	mov	r0, r3
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bc80      	pop	{r7}
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	2000015c 	.word	0x2000015c

080067cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	4603      	mov	r3, r0
 80067d4:	6039      	str	r1, [r7, #0]
 80067d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80067d8:	79fb      	ldrb	r3, [r7, #7]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d105      	bne.n	80067ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	4907      	ldr	r1, [pc, #28]	; (8006800 <USBD_FS_ProductStrDescriptor+0x34>)
 80067e2:	4808      	ldr	r0, [pc, #32]	; (8006804 <USBD_FS_ProductStrDescriptor+0x38>)
 80067e4:	f7ff fdff 	bl	80063e6 <USBD_GetString>
 80067e8:	e004      	b.n	80067f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	4904      	ldr	r1, [pc, #16]	; (8006800 <USBD_FS_ProductStrDescriptor+0x34>)
 80067ee:	4805      	ldr	r0, [pc, #20]	; (8006804 <USBD_FS_ProductStrDescriptor+0x38>)
 80067f0:	f7ff fdf9 	bl	80063e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80067f4:	4b02      	ldr	r3, [pc, #8]	; (8006800 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	20001d58 	.word	0x20001d58
 8006804:	0800720c 	.word	0x0800720c

08006808 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	4603      	mov	r3, r0
 8006810:	6039      	str	r1, [r7, #0]
 8006812:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	4904      	ldr	r1, [pc, #16]	; (8006828 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006818:	4804      	ldr	r0, [pc, #16]	; (800682c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800681a:	f7ff fde4 	bl	80063e6 <USBD_GetString>
  return USBD_StrDesc;
 800681e:	4b02      	ldr	r3, [pc, #8]	; (8006828 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	20001d58 	.word	0x20001d58
 800682c:	08007224 	.word	0x08007224

08006830 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	4603      	mov	r3, r0
 8006838:	6039      	str	r1, [r7, #0]
 800683a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	221a      	movs	r2, #26
 8006840:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006842:	f000 f843 	bl	80068cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006846:	4b02      	ldr	r3, [pc, #8]	; (8006850 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006848:	4618      	mov	r0, r3
 800684a:	3708      	adds	r7, #8
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	20000160 	.word	0x20000160

08006854 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	4603      	mov	r3, r0
 800685c:	6039      	str	r1, [r7, #0]
 800685e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006860:	79fb      	ldrb	r3, [r7, #7]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d105      	bne.n	8006872 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	4907      	ldr	r1, [pc, #28]	; (8006888 <USBD_FS_ConfigStrDescriptor+0x34>)
 800686a:	4808      	ldr	r0, [pc, #32]	; (800688c <USBD_FS_ConfigStrDescriptor+0x38>)
 800686c:	f7ff fdbb 	bl	80063e6 <USBD_GetString>
 8006870:	e004      	b.n	800687c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	4904      	ldr	r1, [pc, #16]	; (8006888 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006876:	4805      	ldr	r0, [pc, #20]	; (800688c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006878:	f7ff fdb5 	bl	80063e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800687c:	4b02      	ldr	r3, [pc, #8]	; (8006888 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800687e:	4618      	mov	r0, r3
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20001d58 	.word	0x20001d58
 800688c:	08007238 	.word	0x08007238

08006890 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	4603      	mov	r3, r0
 8006898:	6039      	str	r1, [r7, #0]
 800689a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800689c:	79fb      	ldrb	r3, [r7, #7]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d105      	bne.n	80068ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	4907      	ldr	r1, [pc, #28]	; (80068c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80068a6:	4808      	ldr	r0, [pc, #32]	; (80068c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80068a8:	f7ff fd9d 	bl	80063e6 <USBD_GetString>
 80068ac:	e004      	b.n	80068b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80068ae:	683a      	ldr	r2, [r7, #0]
 80068b0:	4904      	ldr	r1, [pc, #16]	; (80068c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80068b2:	4805      	ldr	r0, [pc, #20]	; (80068c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80068b4:	f7ff fd97 	bl	80063e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80068b8:	4b02      	ldr	r3, [pc, #8]	; (80068c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	20001d58 	.word	0x20001d58
 80068c8:	08007244 	.word	0x08007244

080068cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80068d2:	4b0f      	ldr	r3, [pc, #60]	; (8006910 <Get_SerialNum+0x44>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80068d8:	4b0e      	ldr	r3, [pc, #56]	; (8006914 <Get_SerialNum+0x48>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80068de:	4b0e      	ldr	r3, [pc, #56]	; (8006918 <Get_SerialNum+0x4c>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4413      	add	r3, r2
 80068ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d009      	beq.n	8006906 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80068f2:	2208      	movs	r2, #8
 80068f4:	4909      	ldr	r1, [pc, #36]	; (800691c <Get_SerialNum+0x50>)
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f000 f814 	bl	8006924 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80068fc:	2204      	movs	r2, #4
 80068fe:	4908      	ldr	r1, [pc, #32]	; (8006920 <Get_SerialNum+0x54>)
 8006900:	68b8      	ldr	r0, [r7, #8]
 8006902:	f000 f80f 	bl	8006924 <IntToUnicode>
  }
}
 8006906:	bf00      	nop
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	1fff7a10 	.word	0x1fff7a10
 8006914:	1fff7a14 	.word	0x1fff7a14
 8006918:	1fff7a18 	.word	0x1fff7a18
 800691c:	20000162 	.word	0x20000162
 8006920:	20000172 	.word	0x20000172

08006924 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006924:	b480      	push	{r7}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	4613      	mov	r3, r2
 8006930:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006932:	2300      	movs	r3, #0
 8006934:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006936:	2300      	movs	r3, #0
 8006938:	75fb      	strb	r3, [r7, #23]
 800693a:	e027      	b.n	800698c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	0f1b      	lsrs	r3, r3, #28
 8006940:	2b09      	cmp	r3, #9
 8006942:	d80b      	bhi.n	800695c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	0f1b      	lsrs	r3, r3, #28
 8006948:	b2da      	uxtb	r2, r3
 800694a:	7dfb      	ldrb	r3, [r7, #23]
 800694c:	005b      	lsls	r3, r3, #1
 800694e:	4619      	mov	r1, r3
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	440b      	add	r3, r1
 8006954:	3230      	adds	r2, #48	; 0x30
 8006956:	b2d2      	uxtb	r2, r2
 8006958:	701a      	strb	r2, [r3, #0]
 800695a:	e00a      	b.n	8006972 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	0f1b      	lsrs	r3, r3, #28
 8006960:	b2da      	uxtb	r2, r3
 8006962:	7dfb      	ldrb	r3, [r7, #23]
 8006964:	005b      	lsls	r3, r3, #1
 8006966:	4619      	mov	r1, r3
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	440b      	add	r3, r1
 800696c:	3237      	adds	r2, #55	; 0x37
 800696e:	b2d2      	uxtb	r2, r2
 8006970:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	011b      	lsls	r3, r3, #4
 8006976:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006978:	7dfb      	ldrb	r3, [r7, #23]
 800697a:	005b      	lsls	r3, r3, #1
 800697c:	3301      	adds	r3, #1
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	4413      	add	r3, r2
 8006982:	2200      	movs	r2, #0
 8006984:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006986:	7dfb      	ldrb	r3, [r7, #23]
 8006988:	3301      	adds	r3, #1
 800698a:	75fb      	strb	r3, [r7, #23]
 800698c:	7dfa      	ldrb	r2, [r7, #23]
 800698e:	79fb      	ldrb	r3, [r7, #7]
 8006990:	429a      	cmp	r2, r3
 8006992:	d3d3      	bcc.n	800693c <IntToUnicode+0x18>
  }
}
 8006994:	bf00      	nop
 8006996:	371c      	adds	r7, #28
 8006998:	46bd      	mov	sp, r7
 800699a:	bc80      	pop	{r7}
 800699c:	4770      	bx	lr
	...

080069a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b08a      	sub	sp, #40	; 0x28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069a8:	f107 0314 	add.w	r3, r7, #20
 80069ac:	2200      	movs	r2, #0
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	605a      	str	r2, [r3, #4]
 80069b2:	609a      	str	r2, [r3, #8]
 80069b4:	60da      	str	r2, [r3, #12]
 80069b6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069c0:	d13a      	bne.n	8006a38 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069c2:	2300      	movs	r3, #0
 80069c4:	613b      	str	r3, [r7, #16]
 80069c6:	4b1e      	ldr	r3, [pc, #120]	; (8006a40 <HAL_PCD_MspInit+0xa0>)
 80069c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ca:	4a1d      	ldr	r2, [pc, #116]	; (8006a40 <HAL_PCD_MspInit+0xa0>)
 80069cc:	f043 0301 	orr.w	r3, r3, #1
 80069d0:	6313      	str	r3, [r2, #48]	; 0x30
 80069d2:	4b1b      	ldr	r3, [pc, #108]	; (8006a40 <HAL_PCD_MspInit+0xa0>)
 80069d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	613b      	str	r3, [r7, #16]
 80069dc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80069de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80069e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069e4:	2302      	movs	r3, #2
 80069e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069e8:	2300      	movs	r3, #0
 80069ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069ec:	2303      	movs	r3, #3
 80069ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80069f0:	230a      	movs	r3, #10
 80069f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069f4:	f107 0314 	add.w	r3, r7, #20
 80069f8:	4619      	mov	r1, r3
 80069fa:	4812      	ldr	r0, [pc, #72]	; (8006a44 <HAL_PCD_MspInit+0xa4>)
 80069fc:	f7fa fd12 	bl	8001424 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006a00:	4b0f      	ldr	r3, [pc, #60]	; (8006a40 <HAL_PCD_MspInit+0xa0>)
 8006a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a04:	4a0e      	ldr	r2, [pc, #56]	; (8006a40 <HAL_PCD_MspInit+0xa0>)
 8006a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a0a:	6353      	str	r3, [r2, #52]	; 0x34
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	4b0b      	ldr	r3, [pc, #44]	; (8006a40 <HAL_PCD_MspInit+0xa0>)
 8006a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a14:	4a0a      	ldr	r2, [pc, #40]	; (8006a40 <HAL_PCD_MspInit+0xa0>)
 8006a16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a1a:	6453      	str	r3, [r2, #68]	; 0x44
 8006a1c:	4b08      	ldr	r3, [pc, #32]	; (8006a40 <HAL_PCD_MspInit+0xa0>)
 8006a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a24:	60fb      	str	r3, [r7, #12]
 8006a26:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006a28:	2200      	movs	r2, #0
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	2043      	movs	r0, #67	; 0x43
 8006a2e:	f7fa fcc2 	bl	80013b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006a32:	2043      	movs	r0, #67	; 0x43
 8006a34:	f7fa fcdb 	bl	80013ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006a38:	bf00      	nop
 8006a3a:	3728      	adds	r7, #40	; 0x28
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	40023800 	.word	0x40023800
 8006a44:	40020000 	.word	0x40020000

08006a48 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	4610      	mov	r0, r2
 8006a60:	f7fe fd65 	bl	800552e <USBD_LL_SetupStage>
}
 8006a64:	bf00      	nop
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	460b      	mov	r3, r1
 8006a76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8006a7e:	78fa      	ldrb	r2, [r7, #3]
 8006a80:	6879      	ldr	r1, [r7, #4]
 8006a82:	4613      	mov	r3, r2
 8006a84:	00db      	lsls	r3, r3, #3
 8006a86:	1a9b      	subs	r3, r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	440b      	add	r3, r1
 8006a8c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	78fb      	ldrb	r3, [r7, #3]
 8006a94:	4619      	mov	r1, r3
 8006a96:	f7fe fd95 	bl	80055c4 <USBD_LL_DataOutStage>
}
 8006a9a:	bf00      	nop
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b082      	sub	sp, #8
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	460b      	mov	r3, r1
 8006aac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8006ab4:	78fa      	ldrb	r2, [r7, #3]
 8006ab6:	6879      	ldr	r1, [r7, #4]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	00db      	lsls	r3, r3, #3
 8006abc:	1a9b      	subs	r3, r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	440b      	add	r3, r1
 8006ac2:	3348      	adds	r3, #72	; 0x48
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	78fb      	ldrb	r3, [r7, #3]
 8006ac8:	4619      	mov	r1, r3
 8006aca:	f7fe fdec 	bl	80056a6 <USBD_LL_DataInStage>
}
 8006ace:	bf00      	nop
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b082      	sub	sp, #8
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fe fefc 	bl	80058e2 <USBD_LL_SOF>
}
 8006aea:	bf00      	nop
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b084      	sub	sp, #16
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006afa:	2301      	movs	r3, #1
 8006afc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d102      	bne.n	8006b0c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006b06:	2300      	movs	r3, #0
 8006b08:	73fb      	strb	r3, [r7, #15]
 8006b0a:	e008      	b.n	8006b1e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d102      	bne.n	8006b1a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006b14:	2301      	movs	r3, #1
 8006b16:	73fb      	strb	r3, [r7, #15]
 8006b18:	e001      	b.n	8006b1e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006b1a:	f7fa f9a5 	bl	8000e68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006b24:	7bfa      	ldrb	r2, [r7, #15]
 8006b26:	4611      	mov	r1, r2
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7fe fea2 	bl	8005872 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7fe fe5b 	bl	80057f0 <USBD_LL_Reset>
}
 8006b3a:	bf00      	nop
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
	...

08006b44 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7fe fe9c 	bl	8005890 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	6812      	ldr	r2, [r2, #0]
 8006b66:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b6a:	f043 0301 	orr.w	r3, r3, #1
 8006b6e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a1b      	ldr	r3, [r3, #32]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d005      	beq.n	8006b84 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006b78:	4b04      	ldr	r3, [pc, #16]	; (8006b8c <HAL_PCD_SuspendCallback+0x48>)
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	4a03      	ldr	r2, [pc, #12]	; (8006b8c <HAL_PCD_SuspendCallback+0x48>)
 8006b7e:	f043 0306 	orr.w	r3, r3, #6
 8006b82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006b84:	bf00      	nop
 8006b86:	3708      	adds	r7, #8
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	e000ed00 	.word	0xe000ed00

08006b90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fe fe8a 	bl	80058b8 <USBD_LL_Resume>
}
 8006ba4:	bf00      	nop
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006bbe:	78fa      	ldrb	r2, [r7, #3]
 8006bc0:	4611      	mov	r1, r2
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fe feb3 	bl	800592e <USBD_LL_IsoOUTIncomplete>
}
 8006bc8:	bf00      	nop
 8006bca:	3708      	adds	r7, #8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	460b      	mov	r3, r1
 8006bda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006be2:	78fa      	ldrb	r2, [r7, #3]
 8006be4:	4611      	mov	r1, r2
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fe fe95 	bl	8005916 <USBD_LL_IsoINIncomplete>
}
 8006bec:	bf00      	nop
 8006bee:	3708      	adds	r7, #8
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fe fe9f 	bl	8005946 <USBD_LL_DevConnected>
}
 8006c08:	bf00      	nop
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fe fe9b 	bl	800595a <USBD_LL_DevDisconnected>
}
 8006c24:	bf00      	nop
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d139      	bne.n	8006cb0 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006c3c:	4a1f      	ldr	r2, [pc, #124]	; (8006cbc <USBD_LL_Init+0x90>)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a1d      	ldr	r2, [pc, #116]	; (8006cbc <USBD_LL_Init+0x90>)
 8006c48:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006c4c:	4b1b      	ldr	r3, [pc, #108]	; (8006cbc <USBD_LL_Init+0x90>)
 8006c4e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006c52:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006c54:	4b19      	ldr	r3, [pc, #100]	; (8006cbc <USBD_LL_Init+0x90>)
 8006c56:	2204      	movs	r2, #4
 8006c58:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006c5a:	4b18      	ldr	r3, [pc, #96]	; (8006cbc <USBD_LL_Init+0x90>)
 8006c5c:	2202      	movs	r2, #2
 8006c5e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006c60:	4b16      	ldr	r3, [pc, #88]	; (8006cbc <USBD_LL_Init+0x90>)
 8006c62:	2200      	movs	r2, #0
 8006c64:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006c66:	4b15      	ldr	r3, [pc, #84]	; (8006cbc <USBD_LL_Init+0x90>)
 8006c68:	2202      	movs	r2, #2
 8006c6a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006c6c:	4b13      	ldr	r3, [pc, #76]	; (8006cbc <USBD_LL_Init+0x90>)
 8006c6e:	2200      	movs	r2, #0
 8006c70:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006c72:	4b12      	ldr	r3, [pc, #72]	; (8006cbc <USBD_LL_Init+0x90>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006c78:	4b10      	ldr	r3, [pc, #64]	; (8006cbc <USBD_LL_Init+0x90>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006c7e:	4b0f      	ldr	r3, [pc, #60]	; (8006cbc <USBD_LL_Init+0x90>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006c84:	480d      	ldr	r0, [pc, #52]	; (8006cbc <USBD_LL_Init+0x90>)
 8006c86:	f7fa fd83 	bl	8001790 <HAL_PCD_Init>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d001      	beq.n	8006c94 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8006c90:	f7fa f8ea 	bl	8000e68 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006c94:	2180      	movs	r1, #128	; 0x80
 8006c96:	4809      	ldr	r0, [pc, #36]	; (8006cbc <USBD_LL_Init+0x90>)
 8006c98:	f7fb fec0 	bl	8002a1c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006c9c:	2240      	movs	r2, #64	; 0x40
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	4806      	ldr	r0, [pc, #24]	; (8006cbc <USBD_LL_Init+0x90>)
 8006ca2:	f7fb fe75 	bl	8002990 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006ca6:	2280      	movs	r2, #128	; 0x80
 8006ca8:	2101      	movs	r1, #1
 8006caa:	4804      	ldr	r0, [pc, #16]	; (8006cbc <USBD_LL_Init+0x90>)
 8006cac:	f7fb fe70 	bl	8002990 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	20001f58 	.word	0x20001f58

08006cc0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fa fe77 	bl	80019ca <HAL_PCD_Start>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f000 f92e 	bl	8006f44 <USBD_Get_USB_Status>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006cec:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b084      	sub	sp, #16
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
 8006cfe:	4608      	mov	r0, r1
 8006d00:	4611      	mov	r1, r2
 8006d02:	461a      	mov	r2, r3
 8006d04:	4603      	mov	r3, r0
 8006d06:	70fb      	strb	r3, [r7, #3]
 8006d08:	460b      	mov	r3, r1
 8006d0a:	70bb      	strb	r3, [r7, #2]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d10:	2300      	movs	r3, #0
 8006d12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d14:	2300      	movs	r3, #0
 8006d16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006d1e:	78bb      	ldrb	r3, [r7, #2]
 8006d20:	883a      	ldrh	r2, [r7, #0]
 8006d22:	78f9      	ldrb	r1, [r7, #3]
 8006d24:	f7fb fa3c 	bl	80021a0 <HAL_PCD_EP_Open>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d2c:	7bfb      	ldrb	r3, [r7, #15]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 f908 	bl	8006f44 <USBD_Get_USB_Status>
 8006d34:	4603      	mov	r3, r0
 8006d36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d38:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b084      	sub	sp, #16
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d5c:	78fa      	ldrb	r2, [r7, #3]
 8006d5e:	4611      	mov	r1, r2
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7fb fa85 	bl	8002270 <HAL_PCD_EP_Close>
 8006d66:	4603      	mov	r3, r0
 8006d68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d6a:	7bfb      	ldrb	r3, [r7, #15]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 f8e9 	bl	8006f44 <USBD_Get_USB_Status>
 8006d72:	4603      	mov	r3, r0
 8006d74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d76:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	460b      	mov	r3, r1
 8006d8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d90:	2300      	movs	r3, #0
 8006d92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d9a:	78fa      	ldrb	r2, [r7, #3]
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7fb fb5c 	bl	800245c <HAL_PCD_EP_SetStall>
 8006da4:	4603      	mov	r3, r0
 8006da6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
 8006daa:	4618      	mov	r0, r3
 8006dac:	f000 f8ca 	bl	8006f44 <USBD_Get_USB_Status>
 8006db0:	4603      	mov	r3, r0
 8006db2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006db4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b084      	sub	sp, #16
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006dd8:	78fa      	ldrb	r2, [r7, #3]
 8006dda:	4611      	mov	r1, r2
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7fb fba1 	bl	8002524 <HAL_PCD_EP_ClrStall>
 8006de2:	4603      	mov	r3, r0
 8006de4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
 8006de8:	4618      	mov	r0, r3
 8006dea:	f000 f8ab 	bl	8006f44 <USBD_Get_USB_Status>
 8006dee:	4603      	mov	r3, r0
 8006df0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006df2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	460b      	mov	r3, r1
 8006e06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006e10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	da0b      	bge.n	8006e30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006e18:	78fb      	ldrb	r3, [r7, #3]
 8006e1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e1e:	68f9      	ldr	r1, [r7, #12]
 8006e20:	4613      	mov	r3, r2
 8006e22:	00db      	lsls	r3, r3, #3
 8006e24:	1a9b      	subs	r3, r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	440b      	add	r3, r1
 8006e2a:	333e      	adds	r3, #62	; 0x3e
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	e00b      	b.n	8006e48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006e30:	78fb      	ldrb	r3, [r7, #3]
 8006e32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e36:	68f9      	ldr	r1, [r7, #12]
 8006e38:	4613      	mov	r3, r2
 8006e3a:	00db      	lsls	r3, r3, #3
 8006e3c:	1a9b      	subs	r3, r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	440b      	add	r3, r1
 8006e42:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006e46:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3714      	adds	r7, #20
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bc80      	pop	{r7}
 8006e50:	4770      	bx	lr

08006e52 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b084      	sub	sp, #16
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e6c:	78fa      	ldrb	r2, [r7, #3]
 8006e6e:	4611      	mov	r1, r2
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fb f970 	bl	8002156 <HAL_PCD_SetAddress>
 8006e76:	4603      	mov	r3, r0
 8006e78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e7a:	7bfb      	ldrb	r3, [r7, #15]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 f861 	bl	8006f44 <USBD_Get_USB_Status>
 8006e82:	4603      	mov	r3, r0
 8006e84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e86:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	607a      	str	r2, [r7, #4]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	72fb      	strb	r3, [r7, #11]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006eb2:	893b      	ldrh	r3, [r7, #8]
 8006eb4:	7af9      	ldrb	r1, [r7, #11]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	f7fb fa86 	bl	80023c8 <HAL_PCD_EP_Transmit>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ec0:	7dfb      	ldrb	r3, [r7, #23]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f000 f83e 	bl	8006f44 <USBD_Get_USB_Status>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006ecc:	7dbb      	ldrb	r3, [r7, #22]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b086      	sub	sp, #24
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	60f8      	str	r0, [r7, #12]
 8006ede:	607a      	str	r2, [r7, #4]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	72fb      	strb	r3, [r7, #11]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006ef8:	893b      	ldrh	r3, [r7, #8]
 8006efa:	7af9      	ldrb	r1, [r7, #11]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	f7fb fa01 	bl	8002304 <HAL_PCD_EP_Receive>
 8006f02:	4603      	mov	r3, r0
 8006f04:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f06:	7dfb      	ldrb	r3, [r7, #23]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f000 f81b 	bl	8006f44 <USBD_Get_USB_Status>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006f12:	7dbb      	ldrb	r3, [r7, #22]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3718      	adds	r7, #24
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	460b      	mov	r3, r1
 8006f26:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f2e:	78fa      	ldrb	r2, [r7, #3]
 8006f30:	4611      	mov	r1, r2
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7fb fa31 	bl	800239a <HAL_PCD_EP_GetRxCount>
 8006f38:	4603      	mov	r3, r0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
	...

08006f44 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006f52:	79fb      	ldrb	r3, [r7, #7]
 8006f54:	2b03      	cmp	r3, #3
 8006f56:	d817      	bhi.n	8006f88 <USBD_Get_USB_Status+0x44>
 8006f58:	a201      	add	r2, pc, #4	; (adr r2, 8006f60 <USBD_Get_USB_Status+0x1c>)
 8006f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5e:	bf00      	nop
 8006f60:	08006f71 	.word	0x08006f71
 8006f64:	08006f77 	.word	0x08006f77
 8006f68:	08006f7d 	.word	0x08006f7d
 8006f6c:	08006f83 	.word	0x08006f83
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006f70:	2300      	movs	r3, #0
 8006f72:	73fb      	strb	r3, [r7, #15]
    break;
 8006f74:	e00b      	b.n	8006f8e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006f76:	2302      	movs	r3, #2
 8006f78:	73fb      	strb	r3, [r7, #15]
    break;
 8006f7a:	e008      	b.n	8006f8e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8006f80:	e005      	b.n	8006f8e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006f82:	2302      	movs	r3, #2
 8006f84:	73fb      	strb	r3, [r7, #15]
    break;
 8006f86:	e002      	b.n	8006f8e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006f88:	2302      	movs	r3, #2
 8006f8a:	73fb      	strb	r3, [r7, #15]
    break;
 8006f8c:	bf00      	nop
  }
  return usb_status;
 8006f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bc80      	pop	{r7}
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop

08006f9c <__errno>:
 8006f9c:	4b01      	ldr	r3, [pc, #4]	; (8006fa4 <__errno+0x8>)
 8006f9e:	6818      	ldr	r0, [r3, #0]
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	2000017c 	.word	0x2000017c

08006fa8 <__libc_init_array>:
 8006fa8:	b570      	push	{r4, r5, r6, lr}
 8006faa:	2500      	movs	r5, #0
 8006fac:	4e0c      	ldr	r6, [pc, #48]	; (8006fe0 <__libc_init_array+0x38>)
 8006fae:	4c0d      	ldr	r4, [pc, #52]	; (8006fe4 <__libc_init_array+0x3c>)
 8006fb0:	1ba4      	subs	r4, r4, r6
 8006fb2:	10a4      	asrs	r4, r4, #2
 8006fb4:	42a5      	cmp	r5, r4
 8006fb6:	d109      	bne.n	8006fcc <__libc_init_array+0x24>
 8006fb8:	f000 f8fe 	bl	80071b8 <_init>
 8006fbc:	2500      	movs	r5, #0
 8006fbe:	4e0a      	ldr	r6, [pc, #40]	; (8006fe8 <__libc_init_array+0x40>)
 8006fc0:	4c0a      	ldr	r4, [pc, #40]	; (8006fec <__libc_init_array+0x44>)
 8006fc2:	1ba4      	subs	r4, r4, r6
 8006fc4:	10a4      	asrs	r4, r4, #2
 8006fc6:	42a5      	cmp	r5, r4
 8006fc8:	d105      	bne.n	8006fd6 <__libc_init_array+0x2e>
 8006fca:	bd70      	pop	{r4, r5, r6, pc}
 8006fcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fd0:	4798      	blx	r3
 8006fd2:	3501      	adds	r5, #1
 8006fd4:	e7ee      	b.n	8006fb4 <__libc_init_array+0xc>
 8006fd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fda:	4798      	blx	r3
 8006fdc:	3501      	adds	r5, #1
 8006fde:	e7f2      	b.n	8006fc6 <__libc_init_array+0x1e>
 8006fe0:	0800726c 	.word	0x0800726c
 8006fe4:	0800726c 	.word	0x0800726c
 8006fe8:	0800726c 	.word	0x0800726c
 8006fec:	08007270 	.word	0x08007270

08006ff0 <malloc>:
 8006ff0:	4b02      	ldr	r3, [pc, #8]	; (8006ffc <malloc+0xc>)
 8006ff2:	4601      	mov	r1, r0
 8006ff4:	6818      	ldr	r0, [r3, #0]
 8006ff6:	f000 b85f 	b.w	80070b8 <_malloc_r>
 8006ffa:	bf00      	nop
 8006ffc:	2000017c 	.word	0x2000017c

08007000 <free>:
 8007000:	4b02      	ldr	r3, [pc, #8]	; (800700c <free+0xc>)
 8007002:	4601      	mov	r1, r0
 8007004:	6818      	ldr	r0, [r3, #0]
 8007006:	f000 b80b 	b.w	8007020 <_free_r>
 800700a:	bf00      	nop
 800700c:	2000017c 	.word	0x2000017c

08007010 <memset>:
 8007010:	4603      	mov	r3, r0
 8007012:	4402      	add	r2, r0
 8007014:	4293      	cmp	r3, r2
 8007016:	d100      	bne.n	800701a <memset+0xa>
 8007018:	4770      	bx	lr
 800701a:	f803 1b01 	strb.w	r1, [r3], #1
 800701e:	e7f9      	b.n	8007014 <memset+0x4>

08007020 <_free_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	4605      	mov	r5, r0
 8007024:	2900      	cmp	r1, #0
 8007026:	d043      	beq.n	80070b0 <_free_r+0x90>
 8007028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800702c:	1f0c      	subs	r4, r1, #4
 800702e:	2b00      	cmp	r3, #0
 8007030:	bfb8      	it	lt
 8007032:	18e4      	addlt	r4, r4, r3
 8007034:	f000 f8be 	bl	80071b4 <__malloc_lock>
 8007038:	4a1e      	ldr	r2, [pc, #120]	; (80070b4 <_free_r+0x94>)
 800703a:	6813      	ldr	r3, [r2, #0]
 800703c:	4610      	mov	r0, r2
 800703e:	b933      	cbnz	r3, 800704e <_free_r+0x2e>
 8007040:	6063      	str	r3, [r4, #4]
 8007042:	6014      	str	r4, [r2, #0]
 8007044:	4628      	mov	r0, r5
 8007046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800704a:	f000 b8b4 	b.w	80071b6 <__malloc_unlock>
 800704e:	42a3      	cmp	r3, r4
 8007050:	d90b      	bls.n	800706a <_free_r+0x4a>
 8007052:	6821      	ldr	r1, [r4, #0]
 8007054:	1862      	adds	r2, r4, r1
 8007056:	4293      	cmp	r3, r2
 8007058:	bf01      	itttt	eq
 800705a:	681a      	ldreq	r2, [r3, #0]
 800705c:	685b      	ldreq	r3, [r3, #4]
 800705e:	1852      	addeq	r2, r2, r1
 8007060:	6022      	streq	r2, [r4, #0]
 8007062:	6063      	str	r3, [r4, #4]
 8007064:	6004      	str	r4, [r0, #0]
 8007066:	e7ed      	b.n	8007044 <_free_r+0x24>
 8007068:	4613      	mov	r3, r2
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	b10a      	cbz	r2, 8007072 <_free_r+0x52>
 800706e:	42a2      	cmp	r2, r4
 8007070:	d9fa      	bls.n	8007068 <_free_r+0x48>
 8007072:	6819      	ldr	r1, [r3, #0]
 8007074:	1858      	adds	r0, r3, r1
 8007076:	42a0      	cmp	r0, r4
 8007078:	d10b      	bne.n	8007092 <_free_r+0x72>
 800707a:	6820      	ldr	r0, [r4, #0]
 800707c:	4401      	add	r1, r0
 800707e:	1858      	adds	r0, r3, r1
 8007080:	4282      	cmp	r2, r0
 8007082:	6019      	str	r1, [r3, #0]
 8007084:	d1de      	bne.n	8007044 <_free_r+0x24>
 8007086:	6810      	ldr	r0, [r2, #0]
 8007088:	6852      	ldr	r2, [r2, #4]
 800708a:	4401      	add	r1, r0
 800708c:	6019      	str	r1, [r3, #0]
 800708e:	605a      	str	r2, [r3, #4]
 8007090:	e7d8      	b.n	8007044 <_free_r+0x24>
 8007092:	d902      	bls.n	800709a <_free_r+0x7a>
 8007094:	230c      	movs	r3, #12
 8007096:	602b      	str	r3, [r5, #0]
 8007098:	e7d4      	b.n	8007044 <_free_r+0x24>
 800709a:	6820      	ldr	r0, [r4, #0]
 800709c:	1821      	adds	r1, r4, r0
 800709e:	428a      	cmp	r2, r1
 80070a0:	bf01      	itttt	eq
 80070a2:	6811      	ldreq	r1, [r2, #0]
 80070a4:	6852      	ldreq	r2, [r2, #4]
 80070a6:	1809      	addeq	r1, r1, r0
 80070a8:	6021      	streq	r1, [r4, #0]
 80070aa:	6062      	str	r2, [r4, #4]
 80070ac:	605c      	str	r4, [r3, #4]
 80070ae:	e7c9      	b.n	8007044 <_free_r+0x24>
 80070b0:	bd38      	pop	{r3, r4, r5, pc}
 80070b2:	bf00      	nop
 80070b4:	2000020c 	.word	0x2000020c

080070b8 <_malloc_r>:
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	1ccd      	adds	r5, r1, #3
 80070bc:	f025 0503 	bic.w	r5, r5, #3
 80070c0:	3508      	adds	r5, #8
 80070c2:	2d0c      	cmp	r5, #12
 80070c4:	bf38      	it	cc
 80070c6:	250c      	movcc	r5, #12
 80070c8:	2d00      	cmp	r5, #0
 80070ca:	4606      	mov	r6, r0
 80070cc:	db01      	blt.n	80070d2 <_malloc_r+0x1a>
 80070ce:	42a9      	cmp	r1, r5
 80070d0:	d903      	bls.n	80070da <_malloc_r+0x22>
 80070d2:	230c      	movs	r3, #12
 80070d4:	6033      	str	r3, [r6, #0]
 80070d6:	2000      	movs	r0, #0
 80070d8:	bd70      	pop	{r4, r5, r6, pc}
 80070da:	f000 f86b 	bl	80071b4 <__malloc_lock>
 80070de:	4a21      	ldr	r2, [pc, #132]	; (8007164 <_malloc_r+0xac>)
 80070e0:	6814      	ldr	r4, [r2, #0]
 80070e2:	4621      	mov	r1, r4
 80070e4:	b991      	cbnz	r1, 800710c <_malloc_r+0x54>
 80070e6:	4c20      	ldr	r4, [pc, #128]	; (8007168 <_malloc_r+0xb0>)
 80070e8:	6823      	ldr	r3, [r4, #0]
 80070ea:	b91b      	cbnz	r3, 80070f4 <_malloc_r+0x3c>
 80070ec:	4630      	mov	r0, r6
 80070ee:	f000 f83d 	bl	800716c <_sbrk_r>
 80070f2:	6020      	str	r0, [r4, #0]
 80070f4:	4629      	mov	r1, r5
 80070f6:	4630      	mov	r0, r6
 80070f8:	f000 f838 	bl	800716c <_sbrk_r>
 80070fc:	1c43      	adds	r3, r0, #1
 80070fe:	d124      	bne.n	800714a <_malloc_r+0x92>
 8007100:	230c      	movs	r3, #12
 8007102:	4630      	mov	r0, r6
 8007104:	6033      	str	r3, [r6, #0]
 8007106:	f000 f856 	bl	80071b6 <__malloc_unlock>
 800710a:	e7e4      	b.n	80070d6 <_malloc_r+0x1e>
 800710c:	680b      	ldr	r3, [r1, #0]
 800710e:	1b5b      	subs	r3, r3, r5
 8007110:	d418      	bmi.n	8007144 <_malloc_r+0x8c>
 8007112:	2b0b      	cmp	r3, #11
 8007114:	d90f      	bls.n	8007136 <_malloc_r+0x7e>
 8007116:	600b      	str	r3, [r1, #0]
 8007118:	18cc      	adds	r4, r1, r3
 800711a:	50cd      	str	r5, [r1, r3]
 800711c:	4630      	mov	r0, r6
 800711e:	f000 f84a 	bl	80071b6 <__malloc_unlock>
 8007122:	f104 000b 	add.w	r0, r4, #11
 8007126:	1d23      	adds	r3, r4, #4
 8007128:	f020 0007 	bic.w	r0, r0, #7
 800712c:	1ac3      	subs	r3, r0, r3
 800712e:	d0d3      	beq.n	80070d8 <_malloc_r+0x20>
 8007130:	425a      	negs	r2, r3
 8007132:	50e2      	str	r2, [r4, r3]
 8007134:	e7d0      	b.n	80070d8 <_malloc_r+0x20>
 8007136:	684b      	ldr	r3, [r1, #4]
 8007138:	428c      	cmp	r4, r1
 800713a:	bf16      	itet	ne
 800713c:	6063      	strne	r3, [r4, #4]
 800713e:	6013      	streq	r3, [r2, #0]
 8007140:	460c      	movne	r4, r1
 8007142:	e7eb      	b.n	800711c <_malloc_r+0x64>
 8007144:	460c      	mov	r4, r1
 8007146:	6849      	ldr	r1, [r1, #4]
 8007148:	e7cc      	b.n	80070e4 <_malloc_r+0x2c>
 800714a:	1cc4      	adds	r4, r0, #3
 800714c:	f024 0403 	bic.w	r4, r4, #3
 8007150:	42a0      	cmp	r0, r4
 8007152:	d005      	beq.n	8007160 <_malloc_r+0xa8>
 8007154:	1a21      	subs	r1, r4, r0
 8007156:	4630      	mov	r0, r6
 8007158:	f000 f808 	bl	800716c <_sbrk_r>
 800715c:	3001      	adds	r0, #1
 800715e:	d0cf      	beq.n	8007100 <_malloc_r+0x48>
 8007160:	6025      	str	r5, [r4, #0]
 8007162:	e7db      	b.n	800711c <_malloc_r+0x64>
 8007164:	2000020c 	.word	0x2000020c
 8007168:	20000210 	.word	0x20000210

0800716c <_sbrk_r>:
 800716c:	b538      	push	{r3, r4, r5, lr}
 800716e:	2300      	movs	r3, #0
 8007170:	4c05      	ldr	r4, [pc, #20]	; (8007188 <_sbrk_r+0x1c>)
 8007172:	4605      	mov	r5, r0
 8007174:	4608      	mov	r0, r1
 8007176:	6023      	str	r3, [r4, #0]
 8007178:	f7f9 ff50 	bl	800101c <_sbrk>
 800717c:	1c43      	adds	r3, r0, #1
 800717e:	d102      	bne.n	8007186 <_sbrk_r+0x1a>
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	b103      	cbz	r3, 8007186 <_sbrk_r+0x1a>
 8007184:	602b      	str	r3, [r5, #0]
 8007186:	bd38      	pop	{r3, r4, r5, pc}
 8007188:	20002358 	.word	0x20002358

0800718c <strncat>:
 800718c:	4603      	mov	r3, r0
 800718e:	b530      	push	{r4, r5, lr}
 8007190:	781c      	ldrb	r4, [r3, #0]
 8007192:	1c5d      	adds	r5, r3, #1
 8007194:	b944      	cbnz	r4, 80071a8 <strncat+0x1c>
 8007196:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 800719a:	d304      	bcc.n	80071a6 <strncat+0x1a>
 800719c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071a0:	f803 4b01 	strb.w	r4, [r3], #1
 80071a4:	b914      	cbnz	r4, 80071ac <strncat+0x20>
 80071a6:	bd30      	pop	{r4, r5, pc}
 80071a8:	462b      	mov	r3, r5
 80071aa:	e7f1      	b.n	8007190 <strncat+0x4>
 80071ac:	2a00      	cmp	r2, #0
 80071ae:	d1f2      	bne.n	8007196 <strncat+0xa>
 80071b0:	701a      	strb	r2, [r3, #0]
 80071b2:	e7f0      	b.n	8007196 <strncat+0xa>

080071b4 <__malloc_lock>:
 80071b4:	4770      	bx	lr

080071b6 <__malloc_unlock>:
 80071b6:	4770      	bx	lr

080071b8 <_init>:
 80071b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ba:	bf00      	nop
 80071bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071be:	bc08      	pop	{r3}
 80071c0:	469e      	mov	lr, r3
 80071c2:	4770      	bx	lr

080071c4 <_fini>:
 80071c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c6:	bf00      	nop
 80071c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ca:	bc08      	pop	{r3}
 80071cc:	469e      	mov	lr, r3
 80071ce:	4770      	bx	lr
