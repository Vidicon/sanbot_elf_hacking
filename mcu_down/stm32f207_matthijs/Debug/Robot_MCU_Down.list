
Robot_MCU_Down.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c38  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006dbc  08006dbc  00016dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e50  08006e50  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08006e50  08006e50  00016e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e58  08006e58  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e58  08006e58  00016e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e5c  08006e5c  00016e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08006e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002158  200001e0  08007040  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002338  08007040  00022338  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017925  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032cb  00000000  00000000  00037b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c8  00000000  00000000  0003ae00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f50  00000000  00000000  0003bec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022d90  00000000  00000000  0003ce18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000101c4  00000000  00000000  0005fba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c48b8  00000000  00000000  0006fd6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00134624  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046c0  00000000  00000000  001346a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	200001e0 	.word	0x200001e0
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08006da4 	.word	0x08006da4

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	200001e4 	.word	0x200001e4
 80001c0:	08006da4 	.word	0x08006da4

080001c4 <strlen>:
 80001c4:	4603      	mov	r3, r0
 80001c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ca:	2a00      	cmp	r2, #0
 80001cc:	d1fb      	bne.n	80001c6 <strlen+0x2>
 80001ce:	1a18      	subs	r0, r3, r0
 80001d0:	3801      	subs	r0, #1
 80001d2:	4770      	bx	lr

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	4604      	mov	r4, r0
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0c03 	orr.w	ip, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	fbbc f7fe 	udiv	r7, ip, lr
 800023a:	fa1f f885 	uxth.w	r8, r5
 800023e:	fb0e c317 	mls	r3, lr, r7, ip
 8000242:	fb07 f908 	mul.w	r9, r7, r8
 8000246:	0c21      	lsrs	r1, r4, #16
 8000248:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024c:	4599      	cmp	r9, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8000256:	f080 811c 	bcs.w	8000492 <__udivmoddi4+0x28e>
 800025a:	4599      	cmp	r9, r3
 800025c:	f240 8119 	bls.w	8000492 <__udivmoddi4+0x28e>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	eba3 0309 	sub.w	r3, r3, r9
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	fb00 f108 	mul.w	r1, r0, r8
 8000274:	b2a4      	uxth	r4, r4
 8000276:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027a:	42a1      	cmp	r1, r4
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	192c      	adds	r4, r5, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 8107 	bcs.w	8000496 <__udivmoddi4+0x292>
 8000288:	42a1      	cmp	r1, r4
 800028a:	f240 8104 	bls.w	8000496 <__udivmoddi4+0x292>
 800028e:	3802      	subs	r0, #2
 8000290:	442c      	add	r4, r5
 8000292:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000296:	2700      	movs	r7, #0
 8000298:	1a64      	subs	r4, r4, r1
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	2300      	movs	r3, #0
 800029e:	40d4      	lsrs	r4, r2
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ec 	beq.w	800048c <__udivmoddi4+0x288>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d148      	bne.n	800035c <__udivmoddi4+0x158>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fb 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469c      	mov	ip, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4c00 	strd	r4, ip, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	2701      	movs	r7, #1
 80002f8:	1b49      	subs	r1, r1, r5
 80002fa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002fe:	fa1f f985 	uxth.w	r9, r5
 8000302:	fbb1 fef8 	udiv	lr, r1, r8
 8000306:	fb08 111e 	mls	r1, r8, lr, r1
 800030a:	fb09 f00e 	mul.w	r0, r9, lr
 800030e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000312:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000316:	4298      	cmp	r0, r3
 8000318:	d907      	bls.n	800032a <__udivmoddi4+0x126>
 800031a:	18eb      	adds	r3, r5, r3
 800031c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x124>
 8000322:	4298      	cmp	r0, r3
 8000324:	f200 80cd 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 8000328:	468e      	mov	lr, r1
 800032a:	1a1b      	subs	r3, r3, r0
 800032c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000330:	fb08 3310 	mls	r3, r8, r0, r3
 8000334:	fb09 f900 	mul.w	r9, r9, r0
 8000338:	b2a4      	uxth	r4, r4
 800033a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800033e:	45a1      	cmp	r9, r4
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000342:	192c      	adds	r4, r5, r4
 8000344:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a1      	cmp	r9, r4
 800034c:	f200 80b6 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000350:	4618      	mov	r0, r3
 8000352:	eba4 0409 	sub.w	r4, r4, r9
 8000356:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800035a:	e79e      	b.n	800029a <__udivmoddi4+0x96>
 800035c:	f1c7 0520 	rsb	r5, r7, #32
 8000360:	40bb      	lsls	r3, r7
 8000362:	fa22 fc05 	lsr.w	ip, r2, r5
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa21 f405 	lsr.w	r4, r1, r5
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fbb4 f9fe 	udiv	r9, r4, lr
 8000376:	fa1f f88c 	uxth.w	r8, ip
 800037a:	fb0e 4419 	mls	r4, lr, r9, r4
 800037e:	fa20 f305 	lsr.w	r3, r0, r5
 8000382:	40b9      	lsls	r1, r7
 8000384:	fb09 fa08 	mul.w	sl, r9, r8
 8000388:	4319      	orrs	r1, r3
 800038a:	0c0b      	lsrs	r3, r1, #16
 800038c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000390:	45a2      	cmp	sl, r4
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f307 	lsl.w	r3, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	45a2      	cmp	sl, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	eba4 040a 	sub.w	r4, r4, sl
 80003b8:	fbb4 f0fe 	udiv	r0, r4, lr
 80003bc:	fb0e 4410 	mls	r4, lr, r0, r4
 80003c0:	fb00 fa08 	mul.w	sl, r0, r8
 80003c4:	b289      	uxth	r1, r1
 80003c6:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x1dc>
 80003ce:	eb1c 0404 	adds.w	r4, ip, r4
 80003d2:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003d6:	d26b      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d8:	45a2      	cmp	sl, r4
 80003da:	d969      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003dc:	3802      	subs	r0, #2
 80003de:	4464      	add	r4, ip
 80003e0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e4:	fba0 8902 	umull	r8, r9, r0, r2
 80003e8:	eba4 040a 	sub.w	r4, r4, sl
 80003ec:	454c      	cmp	r4, r9
 80003ee:	4641      	mov	r1, r8
 80003f0:	46ce      	mov	lr, r9
 80003f2:	d354      	bcc.n	800049e <__udivmoddi4+0x29a>
 80003f4:	d051      	beq.n	800049a <__udivmoddi4+0x296>
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d069      	beq.n	80004ce <__udivmoddi4+0x2ca>
 80003fa:	1a5a      	subs	r2, r3, r1
 80003fc:	eb64 040e 	sbc.w	r4, r4, lr
 8000400:	fa04 f505 	lsl.w	r5, r4, r5
 8000404:	fa22 f307 	lsr.w	r3, r2, r7
 8000408:	40fc      	lsrs	r4, r7
 800040a:	431d      	orrs	r5, r3
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	4095      	lsls	r5, r2
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	fa21 f003 	lsr.w	r0, r1, r3
 800041e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000422:	fbb0 f7f8 	udiv	r7, r0, r8
 8000426:	fa1f f985 	uxth.w	r9, r5
 800042a:	fb08 0017 	mls	r0, r8, r7, r0
 800042e:	fa24 f303 	lsr.w	r3, r4, r3
 8000432:	4091      	lsls	r1, r2
 8000434:	fb07 fc09 	mul.w	ip, r7, r9
 8000438:	430b      	orrs	r3, r1
 800043a:	0c19      	lsrs	r1, r3, #16
 800043c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000440:	458c      	cmp	ip, r1
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x254>
 8000448:	1869      	adds	r1, r5, r1
 800044a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800044e:	d231      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000450:	458c      	cmp	ip, r1
 8000452:	d92f      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	3f02      	subs	r7, #2
 8000456:	4429      	add	r1, r5
 8000458:	eba1 010c 	sub.w	r1, r1, ip
 800045c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000460:	fb08 1c10 	mls	ip, r8, r0, r1
 8000464:	fb00 fe09 	mul.w	lr, r0, r9
 8000468:	b299      	uxth	r1, r3
 800046a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000478:	d218      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047a:	458e      	cmp	lr, r1
 800047c:	d916      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	eba1 010e 	sub.w	r1, r1, lr
 8000486:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048a:	e73a      	b.n	8000302 <__udivmoddi4+0xfe>
 800048c:	4637      	mov	r7, r6
 800048e:	4630      	mov	r0, r6
 8000490:	e708      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000492:	460f      	mov	r7, r1
 8000494:	e6e6      	b.n	8000264 <__udivmoddi4+0x60>
 8000496:	4618      	mov	r0, r3
 8000498:	e6fb      	b.n	8000292 <__udivmoddi4+0x8e>
 800049a:	4543      	cmp	r3, r8
 800049c:	d2ab      	bcs.n	80003f6 <__udivmoddi4+0x1f2>
 800049e:	ebb8 0102 	subs.w	r1, r8, r2
 80004a2:	eb69 020c 	sbc.w	r2, r9, ip
 80004a6:	3801      	subs	r0, #1
 80004a8:	4696      	mov	lr, r2
 80004aa:	e7a4      	b.n	80003f6 <__udivmoddi4+0x1f2>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e7e8      	b.n	8000482 <__udivmoddi4+0x27e>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e795      	b.n	80003e0 <__udivmoddi4+0x1dc>
 80004b4:	4607      	mov	r7, r0
 80004b6:	e7cf      	b.n	8000458 <__udivmoddi4+0x254>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	442c      	add	r4, r5
 80004c0:	e747      	b.n	8000352 <__udivmoddi4+0x14e>
 80004c2:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c6:	442b      	add	r3, r5
 80004c8:	e72f      	b.n	800032a <__udivmoddi4+0x126>
 80004ca:	4638      	mov	r0, r7
 80004cc:	e707      	b.n	80002de <__udivmoddi4+0xda>
 80004ce:	4637      	mov	r7, r6
 80004d0:	e6e8      	b.n	80002a4 <__udivmoddi4+0xa0>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <Protocol_0x55_GetRxPointer>:
struct PROTOCOL_0X55_Data_Type PROTOCOL_0X55_RxData;
struct PROTOCOL_0X55_Data_Type PROTOCOL_0X55_TxData;

// Allow other modules to retreive the Rx pointer
struct PROTOCOL_0X55_Data_Type* Protocol_0x55_GetRxPointer()
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
	return (&PROTOCOL_0X55_RxData);
 80004dc:	4b02      	ldr	r3, [pc, #8]	; (80004e8 <Protocol_0x55_GetRxPointer+0x10>)
}
 80004de:	4618      	mov	r0, r3
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	20000210 	.word	0x20000210

080004ec <Protocol_0x55_CheckFifo>:
	PROTOCOL_0X55_RxData.NewData = 0;
	PROTOCOL_0X55_TxData.NewData = 0;
}

uint8_t Protocol_0x55_CheckFifo()
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
	return PROTOCOL_0X55_RxData.NewData;
 80004f0:	4b03      	ldr	r3, [pc, #12]	; (8000500 <Protocol_0x55_CheckFifo+0x14>)
 80004f2:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000210 	.word	0x20000210

08000504 <Protocol_0x55_ProcessRxCommand>:

void Protocol_0x55_ProcessRxCommand()
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	PROTOCOL_0X55_RxData.NewData = 0;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <Protocol_0x55_ProcessRxCommand+0x18>)
 800050a:	2200      	movs	r2, #0
 800050c:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401

	Protocol_0x55_SendVersion((char *) &PROTOCOL_0X55_TxData.FIFO_Data[0]);
 8000510:	4803      	ldr	r0, [pc, #12]	; (8000520 <Protocol_0x55_ProcessRxCommand+0x1c>)
 8000512:	f000 f807 	bl	8000524 <Protocol_0x55_SendVersion>
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000210 	.word	0x20000210
 8000520:	20000618 	.word	0x20000618

08000524 <Protocol_0x55_SendVersion>:

void Protocol_0x55_SendVersion(char *Buffer)
{
 8000524:	b5b0      	push	{r4, r5, r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	Protocol_0x55_PrepareNewMessage(Buffer, CMD_VERSION, RESPONSE_TRUE);
 800052c:	2201      	movs	r2, #1
 800052e:	2101      	movs	r1, #1
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f000 f867 	bl	8000604 <Protocol_0x55_PrepareNewMessage>

	sprintf(&Buffer[3], "STM32F207 - Sanbot - Matthijs ");
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	3303      	adds	r3, #3
 800053a:	4a2e      	ldr	r2, [pc, #184]	; (80005f4 <Protocol_0x55_SendVersion+0xd0>)
 800053c:	461d      	mov	r5, r3
 800053e:	4614      	mov	r4, r2
 8000540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000542:	6028      	str	r0, [r5, #0]
 8000544:	6069      	str	r1, [r5, #4]
 8000546:	60aa      	str	r2, [r5, #8]
 8000548:	60eb      	str	r3, [r5, #12]
 800054a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800054c:	6128      	str	r0, [r5, #16]
 800054e:	6169      	str	r1, [r5, #20]
 8000550:	61aa      	str	r2, [r5, #24]
 8000552:	8823      	ldrh	r3, [r4, #0]
 8000554:	78a2      	ldrb	r2, [r4, #2]
 8000556:	83ab      	strh	r3, [r5, #28]
 8000558:	4613      	mov	r3, r2
 800055a:	77ab      	strb	r3, [r5, #30]
	sprintf(&Buffer[3 + strlen(&Buffer[3])], __TIME__);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3303      	adds	r3, #3
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff fe2f 	bl	80001c4 <strlen>
 8000566:	4603      	mov	r3, r0
 8000568:	3303      	adds	r3, #3
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	4413      	add	r3, r2
 800056e:	4922      	ldr	r1, [pc, #136]	; (80005f8 <Protocol_0x55_SendVersion+0xd4>)
 8000570:	461a      	mov	r2, r3
 8000572:	460b      	mov	r3, r1
 8000574:	cb03      	ldmia	r3!, {r0, r1}
 8000576:	6010      	str	r0, [r2, #0]
 8000578:	6051      	str	r1, [r2, #4]
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	7213      	strb	r3, [r2, #8]
	sprintf(&Buffer[3 + strlen(&Buffer[3])], " ");
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	3303      	adds	r3, #3
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff fe1e 	bl	80001c4 <strlen>
 8000588:	4603      	mov	r3, r0
 800058a:	3303      	adds	r3, #3
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	4413      	add	r3, r2
 8000590:	491a      	ldr	r1, [pc, #104]	; (80005fc <Protocol_0x55_SendVersion+0xd8>)
 8000592:	461a      	mov	r2, r3
 8000594:	460b      	mov	r3, r1
 8000596:	881b      	ldrh	r3, [r3, #0]
 8000598:	8013      	strh	r3, [r2, #0]
	sprintf(&Buffer[3 + strlen(&Buffer[3])], __DATE__);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	3303      	adds	r3, #3
 800059e:	4618      	mov	r0, r3
 80005a0:	f7ff fe10 	bl	80001c4 <strlen>
 80005a4:	4603      	mov	r3, r0
 80005a6:	3303      	adds	r3, #3
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4413      	add	r3, r2
 80005ac:	4a14      	ldr	r2, [pc, #80]	; (8000600 <Protocol_0x55_SendVersion+0xdc>)
 80005ae:	461c      	mov	r4, r3
 80005b0:	4613      	mov	r3, r2
 80005b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80005b4:	6020      	str	r0, [r4, #0]
 80005b6:	6061      	str	r1, [r4, #4]
 80005b8:	60a2      	str	r2, [r4, #8]

	int datalen = strlen(&Buffer[3]);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	3303      	adds	r3, #3
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff fe00 	bl	80001c4 <strlen>
 80005c4:	4603      	mov	r3, r0
 80005c6:	60fb      	str	r3, [r7, #12]

	Protocol_0x55_SetLength(Buffer, datalen);
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	4619      	mov	r1, r3
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f000 f83f 	bl	8000652 <Protocol_0x55_SetLength>
	Protocol_0x55_AddCRC(Buffer, datalen);
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	4619      	mov	r1, r3
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f000 f848 	bl	8000670 <Protocol_0x55_AddCRC>
	Protocol_0x55_Send(Buffer, datalen);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	4619      	mov	r1, r3
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f000 f8a5 	bl	8000736 <Protocol_0x55_Send>
}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bdb0      	pop	{r4, r5, r7, pc}
 80005f4:	08006dbc 	.word	0x08006dbc
 80005f8:	08006ddc 	.word	0x08006ddc
 80005fc:	08006de8 	.word	0x08006de8
 8000600:	08006dec 	.word	0x08006dec

08000604 <Protocol_0x55_PrepareNewMessage>:

void Protocol_0x55_PrepareNewMessage(char *Buffer, char Command, char Response)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	460b      	mov	r3, r1
 800060e:	70fb      	strb	r3, [r7, #3]
 8000610:	4613      	mov	r3, r2
 8000612:	70bb      	strb	r3, [r7, #2]
	memset((uint8_t*)Buffer, 0, sizeof(Buffer));
 8000614:	2204      	movs	r2, #4
 8000616:	2100      	movs	r1, #0
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f006 faef 	bl	8006bfc <memset>

	Buffer[0] = 0x55;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2255      	movs	r2, #85	; 0x55
 8000622:	701a      	strb	r2, [r3, #0]
	Buffer[1] = (Command & 0x7f);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3301      	adds	r3, #1
 8000628:	78fa      	ldrb	r2, [r7, #3]
 800062a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800062e:	b2d2      	uxtb	r2, r2
 8000630:	701a      	strb	r2, [r3, #0]

	if (Response == 1) {Buffer[1] = Buffer[1] | 0x80;}		// Set high bit
 8000632:	78bb      	ldrb	r3, [r7, #2]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d108      	bne.n	800064a <Protocol_0x55_PrepareNewMessage+0x46>
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3301      	adds	r3, #1
 800063c:	781a      	ldrb	r2, [r3, #0]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	3301      	adds	r3, #1
 8000642:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000646:	b2d2      	uxtb	r2, r2
 8000648:	701a      	strb	r2, [r3, #0]
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <Protocol_0x55_SetLength>:

void Protocol_0x55_SetLength(char *Buffer, uint8_t datalen)
{
 8000652:	b480      	push	{r7}
 8000654:	b083      	sub	sp, #12
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
 800065a:	460b      	mov	r3, r1
 800065c:	70fb      	strb	r3, [r7, #3]
	Buffer[2] = datalen;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	3302      	adds	r3, #2
 8000662:	78fa      	ldrb	r2, [r7, #3]
 8000664:	701a      	strb	r2, [r3, #0]
}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr

08000670 <Protocol_0x55_AddCRC>:

void Protocol_0x55_AddCRC(char *Buffer, uint8_t datalen)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	460b      	mov	r3, r1
 800067a:	70fb      	strb	r3, [r7, #3]
	// 0x55 CMD LEN + datalen
	uint16_t Result = Protocol_0x55_CalculateCRC16(Buffer, datalen);
 800067c:	78fb      	ldrb	r3, [r7, #3]
 800067e:	4619      	mov	r1, r3
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f000 f816 	bl	80006b2 <Protocol_0x55_CalculateCRC16>
 8000686:	4603      	mov	r3, r0
 8000688:	81fb      	strh	r3, [r7, #14]

	Buffer[datalen+3] 	= (Result & 0xff);
 800068a:	78fb      	ldrb	r3, [r7, #3]
 800068c:	3303      	adds	r3, #3
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	4413      	add	r3, r2
 8000692:	89fa      	ldrh	r2, [r7, #14]
 8000694:	b2d2      	uxtb	r2, r2
 8000696:	701a      	strb	r2, [r3, #0]
	Buffer[datalen+4]	= ((Result >> 8) & 0xff);
 8000698:	89fb      	ldrh	r3, [r7, #14]
 800069a:	0a1b      	lsrs	r3, r3, #8
 800069c:	b299      	uxth	r1, r3
 800069e:	78fb      	ldrb	r3, [r7, #3]
 80006a0:	3304      	adds	r3, #4
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	b2ca      	uxtb	r2, r1
 80006a8:	701a      	strb	r2, [r3, #0]
}
 80006aa:	bf00      	nop
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <Protocol_0x55_CalculateCRC16>:
//------------------------------------------------------------------------
// CRC-16 / Modbus version. start at 0xFFFF, 0x8005 reversed
// Reversed because CRC is shifted right instead of left.
//------------------------------------------------------------------------
uint16_t Protocol_0x55_CalculateCRC16(char *data, uint8_t msgSize)
{
 80006b2:	b480      	push	{r7}
 80006b4:	b085      	sub	sp, #20
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
 80006ba:	460b      	mov	r3, r1
 80006bc:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0xFFFF; // Initial value of CRC
 80006be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006c2:	81fb      	strh	r3, [r7, #14]
	uint16_t crclen = msgSize - 2;	// Substract 2 CRC bytes
 80006c4:	78fb      	ldrb	r3, [r7, #3]
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	3b02      	subs	r3, #2
 80006ca:	817b      	strh	r3, [r7, #10]

	for (uint8_t i = 0; i < crclen; i++) {
 80006cc:	2300      	movs	r3, #0
 80006ce:	737b      	strb	r3, [r7, #13]
 80006d0:	e026      	b.n	8000720 <Protocol_0x55_CalculateCRC16+0x6e>
		crc ^= data[i]; // XOR the next data byte
 80006d2:	7b7b      	ldrb	r3, [r7, #13]
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	4413      	add	r3, r2
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	b29a      	uxth	r2, r3
 80006dc:	89fb      	ldrh	r3, [r7, #14]
 80006de:	4053      	eors	r3, r2
 80006e0:	81fb      	strh	r3, [r7, #14]

		for (uint8_t j = 0; j < 8; j++) {
 80006e2:	2300      	movs	r3, #0
 80006e4:	733b      	strb	r3, [r7, #12]
 80006e6:	e015      	b.n	8000714 <Protocol_0x55_CalculateCRC16+0x62>
			if (crc & 0x0001) {
 80006e8:	89fb      	ldrh	r3, [r7, #14]
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d00a      	beq.n	8000708 <Protocol_0x55_CalculateCRC16+0x56>
				crc >>= 1;
 80006f2:	89fb      	ldrh	r3, [r7, #14]
 80006f4:	085b      	lsrs	r3, r3, #1
 80006f6:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001; // Polynomial for CRC-16/MODBUS (0x8005 reversed)
 80006f8:	89fb      	ldrh	r3, [r7, #14]
 80006fa:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 80006fe:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8000702:	43db      	mvns	r3, r3
 8000704:	81fb      	strh	r3, [r7, #14]
 8000706:	e002      	b.n	800070e <Protocol_0x55_CalculateCRC16+0x5c>
			} else {
				crc >>= 1;
 8000708:	89fb      	ldrh	r3, [r7, #14]
 800070a:	085b      	lsrs	r3, r3, #1
 800070c:	81fb      	strh	r3, [r7, #14]
		for (uint8_t j = 0; j < 8; j++) {
 800070e:	7b3b      	ldrb	r3, [r7, #12]
 8000710:	3301      	adds	r3, #1
 8000712:	733b      	strb	r3, [r7, #12]
 8000714:	7b3b      	ldrb	r3, [r7, #12]
 8000716:	2b07      	cmp	r3, #7
 8000718:	d9e6      	bls.n	80006e8 <Protocol_0x55_CalculateCRC16+0x36>
	for (uint8_t i = 0; i < crclen; i++) {
 800071a:	7b7b      	ldrb	r3, [r7, #13]
 800071c:	3301      	adds	r3, #1
 800071e:	737b      	strb	r3, [r7, #13]
 8000720:	7b7b      	ldrb	r3, [r7, #13]
 8000722:	b29b      	uxth	r3, r3
 8000724:	897a      	ldrh	r2, [r7, #10]
 8000726:	429a      	cmp	r2, r3
 8000728:	d8d3      	bhi.n	80006d2 <Protocol_0x55_CalculateCRC16+0x20>
			}
		}
	}

	return crc;
 800072a:	89fb      	ldrh	r3, [r7, #14]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr

08000736 <Protocol_0x55_Send>:

void Protocol_0x55_Send(char *data, uint8_t datalen)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	b082      	sub	sp, #8
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
 800073e:	460b      	mov	r3, r1
 8000740:	70fb      	strb	r3, [r7, #3]
	CDC_Transmit_FS((uint8_t*)data, 3 + datalen + 2);
 8000742:	78fb      	ldrb	r3, [r7, #3]
 8000744:	b29b      	uxth	r3, r3
 8000746:	3305      	adds	r3, #5
 8000748:	b29b      	uxth	r3, r3
 800074a:	4619      	mov	r1, r3
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f005 fde9 	bl	8006324 <CDC_Transmit_FS>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000760:	f000 fab8 	bl	8000cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000764:	f000 f87c 	bl	8000860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000768:	f000 f8e6 	bl	8000938 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800076c:	f005 fd0e 	bl	800618c <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 8000770:	f000 f8be 	bl	80008f0 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(WingRightRed_GPIO_Port, 	WingRightRed_Pin, GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800077a:	4832      	ldr	r0, [pc, #200]	; (8000844 <main+0xe8>)
 800077c:	f000 fde6 	bl	800134c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(WingRightGreen_GPIO_Port, 	WingRightGreen_Pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000786:	482f      	ldr	r0, [pc, #188]	; (8000844 <main+0xe8>)
 8000788:	f000 fde0 	bl	800134c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(WingRightBlue_GPIO_Port, 	WingRightBlue_Pin, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000792:	482c      	ldr	r0, [pc, #176]	; (8000844 <main+0xe8>)
 8000794:	f000 fdda 	bl	800134c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(WingLeftRed_GPIO_Port, 		WingLeftRed_Pin, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079e:	482a      	ldr	r0, [pc, #168]	; (8000848 <main+0xec>)
 80007a0:	f000 fdd4 	bl	800134c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(WingLeftGreen_GPIO_Port, 	WingLeftGreen_Pin, GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007aa:	4827      	ldr	r0, [pc, #156]	; (8000848 <main+0xec>)
 80007ac:	f000 fdce 	bl	800134c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(WingLeftBlue_GPIO_Port, 	WingLeftBlue_Pin, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007b6:	4824      	ldr	r0, [pc, #144]	; (8000848 <main+0xec>)
 80007b8:	f000 fdc8 	bl	800134c <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(BottomRed_GPIO_Port, 	BottomRed_Pin, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c2:	4822      	ldr	r0, [pc, #136]	; (800084c <main+0xf0>)
 80007c4:	f000 fdc2 	bl	800134c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BottomGreen_GPIO_Port, 	BottomGreen_Pin, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ce:	481f      	ldr	r0, [pc, #124]	; (800084c <main+0xf0>)
 80007d0:	f000 fdbc 	bl	800134c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BottomBlue_GPIO_Port, 	BottomBlue_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007da:	481c      	ldr	r0, [pc, #112]	; (800084c <main+0xf0>)
 80007dc:	f000 fdb6 	bl	800134c <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim14);
 80007e0:	481b      	ldr	r0, [pc, #108]	; (8000850 <main+0xf4>)
 80007e2:	f002 fb8f 	bl	8002f04 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (Update_10Hz)
 80007e6:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <main+0xf8>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d002      	beq.n	80007f4 <main+0x98>
	  {
		  Update_10Hz = 0;
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <main+0xf8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
	  }

	  if (Update_5Hz)
 80007f4:	4b18      	ldr	r3, [pc, #96]	; (8000858 <main+0xfc>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d002      	beq.n	8000802 <main+0xa6>
	  {
		  Update_5Hz = 0;
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <main+0xfc>)
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
//		  HAL_GPIO_TogglePin(WingRightRed_GPIO_Port, WingRightRed_Pin);
//		  HAL_GPIO_TogglePin(BottomRed_GPIO_Port, 	BottomRed_Pin);
	  }

	  if (Update_2Hz)
 8000802:	4b16      	ldr	r3, [pc, #88]	; (800085c <main+0x100>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d002      	beq.n	8000810 <main+0xb4>
	  {
		  Update_2Hz = 0;
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <main+0x100>)
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
//		  HAL_GPIO_TogglePin(WingLeftGreen_GPIO_Port, 	WingLeftGreen_Pin);
//		  HAL_GPIO_TogglePin(BottomGreen_GPIO_Port, 	BottomGreen_Pin);
	  }

	  if (Protocol_0x55_CheckFifo() > 0)
 8000810:	f7ff fe6c 	bl	80004ec <Protocol_0x55_CheckFifo>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d0e5      	beq.n	80007e6 <main+0x8a>
	  {
		  Protocol_0x55_ProcessRxCommand();
 800081a:	f7ff fe73 	bl	8000504 <Protocol_0x55_ProcessRxCommand>

		  HAL_GPIO_WritePin(WingLeftBlue_GPIO_Port, WingLeftBlue_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000824:	4808      	ldr	r0, [pc, #32]	; (8000848 <main+0xec>)
 8000826:	f000 fd91 	bl	800134c <HAL_GPIO_WritePin>
//		  HAL_GPIO_WritePin(WingRightBlue_GPIO_Port, WingRightBlue_Pin, GPIO_PIN_RESET);

		  HAL_GPIO_WritePin(WingRightRed_GPIO_Port, WingRightRed_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <main+0xe8>)
 8000832:	f000 fd8b 	bl	800134c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(WingLeftGreen_GPIO_Port, 	WingLeftGreen_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800083c:	4802      	ldr	r0, [pc, #8]	; (8000848 <main+0xec>)
 800083e:	f000 fd85 	bl	800134c <HAL_GPIO_WritePin>
	  if (Update_10Hz)
 8000842:	e7d0      	b.n	80007e6 <main+0x8a>
 8000844:	40020c00 	.word	0x40020c00
 8000848:	40021c00 	.word	0x40021c00
 800084c:	40021800 	.word	0x40021800
 8000850:	20000a24 	.word	0x20000a24
 8000854:	20000a1c 	.word	0x20000a1c
 8000858:	20000614 	.word	0x20000614
 800085c:	20000a20 	.word	0x20000a20

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b092      	sub	sp, #72	; 0x48
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 0318 	add.w	r3, r7, #24
 800086a:	2230      	movs	r2, #48	; 0x30
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f006 f9c4 	bl	8006bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000882:	2303      	movs	r3, #3
 8000884:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000886:	2301      	movs	r3, #1
 8000888:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800088a:	2301      	movs	r3, #1
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800088e:	2310      	movs	r3, #16
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000892:	2302      	movs	r3, #2
 8000894:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000896:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800089a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 4;
 800089c:	2304      	movs	r3, #4
 800089e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 80008a0:	23c0      	movs	r3, #192	; 0xc0
 80008a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a4:	2302      	movs	r3, #2
 80008a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80008a8:	2308      	movs	r3, #8
 80008aa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ac:	f107 0318 	add.w	r3, r7, #24
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 feb9 	bl	8002628 <HAL_RCC_OscConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0x60>
  {
    Error_Handler();
 80008bc:	f000 f8ca 	bl	8000a54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c0:	230f      	movs	r3, #15
 80008c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2100      	movs	r1, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f002 f8f5 	bl	8002ac8 <HAL_RCC_ClockConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80008e4:	f000 f8b6 	bl	8000a54 <Error_Handler>
  }
}
 80008e8:	bf00      	nop
 80008ea:	3748      	adds	r7, #72	; 0x48
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_TIM14_Init+0x40>)
 80008f6:	4a0f      	ldr	r2, [pc, #60]	; (8000934 <MX_TIM14_Init+0x44>)
 80008f8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1599;
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <MX_TIM14_Init+0x40>)
 80008fc:	f240 623f 	movw	r2, #1599	; 0x63f
 8000900:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_TIM14_Init+0x40>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_TIM14_Init+0x40>)
 800090a:	2263      	movs	r2, #99	; 0x63
 800090c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MX_TIM14_Init+0x40>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_TIM14_Init+0x40>)
 8000916:	2280      	movs	r2, #128	; 0x80
 8000918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_TIM14_Init+0x40>)
 800091c:	f002 faa2 	bl	8002e64 <HAL_TIM_Base_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000926:	f000 f895 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000a24 	.word	0x20000a24
 8000934:	40002000 	.word	0x40002000

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	; 0x28
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	4b3c      	ldr	r3, [pc, #240]	; (8000a44 <MX_GPIO_Init+0x10c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a3b      	ldr	r2, [pc, #236]	; (8000a44 <MX_GPIO_Init+0x10c>)
 8000958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b39      	ldr	r3, [pc, #228]	; (8000a44 <MX_GPIO_Init+0x10c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	4b35      	ldr	r3, [pc, #212]	; (8000a44 <MX_GPIO_Init+0x10c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a34      	ldr	r2, [pc, #208]	; (8000a44 <MX_GPIO_Init+0x10c>)
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b32      	ldr	r3, [pc, #200]	; (8000a44 <MX_GPIO_Init+0x10c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0308 	and.w	r3, r3, #8
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	4b2e      	ldr	r3, [pc, #184]	; (8000a44 <MX_GPIO_Init+0x10c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a2d      	ldr	r2, [pc, #180]	; (8000a44 <MX_GPIO_Init+0x10c>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b2b      	ldr	r3, [pc, #172]	; (8000a44 <MX_GPIO_Init+0x10c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <MX_GPIO_Init+0x10c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a26      	ldr	r2, [pc, #152]	; (8000a44 <MX_GPIO_Init+0x10c>)
 80009ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <MX_GPIO_Init+0x10c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WingRightRed_Pin|WingRightGreen_Pin|WingRightBlue_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 80009c4:	4820      	ldr	r0, [pc, #128]	; (8000a48 <MX_GPIO_Init+0x110>)
 80009c6:	f000 fcc1 	bl	800134c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, WingLeftRed_Pin|WingLeftGreen_Pin|WingLeftBlue_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80009d0:	481e      	ldr	r0, [pc, #120]	; (8000a4c <MX_GPIO_Init+0x114>)
 80009d2:	f000 fcbb 	bl	800134c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BottomRed_Pin|BottomGreen_Pin|BottomBlue_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 80009dc:	481c      	ldr	r0, [pc, #112]	; (8000a50 <MX_GPIO_Init+0x118>)
 80009de:	f000 fcb5 	bl	800134c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WingRightRed_Pin WingRightGreen_Pin WingRightBlue_Pin */
  GPIO_InitStruct.Pin = WingRightRed_Pin|WingRightGreen_Pin|WingRightBlue_Pin;
 80009e2:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80009e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	4813      	ldr	r0, [pc, #76]	; (8000a48 <MX_GPIO_Init+0x110>)
 80009fc:	f000 fb08 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : WingLeftRed_Pin WingLeftGreen_Pin WingLeftBlue_Pin */
  GPIO_InitStruct.Pin = WingLeftRed_Pin|WingLeftGreen_Pin|WingLeftBlue_Pin;
 8000a00:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <MX_GPIO_Init+0x114>)
 8000a1a:	f000 faf9 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : BottomRed_Pin BottomGreen_Pin BottomBlue_Pin */
  GPIO_InitStruct.Pin = BottomRed_Pin|BottomGreen_Pin|BottomBlue_Pin;
 8000a1e:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	4806      	ldr	r0, [pc, #24]	; (8000a50 <MX_GPIO_Init+0x118>)
 8000a38:	f000 faea 	bl	8001010 <HAL_GPIO_Init>

}
 8000a3c:	bf00      	nop
 8000a3e:	3728      	adds	r7, #40	; 0x28
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020c00 	.word	0x40020c00
 8000a4c:	40021c00 	.word	0x40021c00
 8000a50:	40021800 	.word	0x40021800

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <Error_Handler+0x6>

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <HAL_MspInit+0x48>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <HAL_MspInit+0x48>)
 8000a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a70:	6453      	str	r3, [r2, #68]	; 0x44
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <HAL_MspInit+0x48>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <HAL_MspInit+0x48>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	4a07      	ldr	r2, [pc, #28]	; (8000aa4 <HAL_MspInit+0x48>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8e:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <HAL_MspInit+0x48>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr
 8000aa4:	40023800 	.word	0x40023800

08000aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <HAL_TIM_Base_MspInit+0x48>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d115      	bne.n	8000ae6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <HAL_TIM_Base_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <HAL_TIM_Base_MspInit+0x4c>)
 8000ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <HAL_TIM_Base_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	202d      	movs	r0, #45	; 0x2d
 8000adc:	f000 fa61 	bl	8000fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000ae0:	202d      	movs	r0, #45	; 0x2d
 8000ae2:	f000 fa7a 	bl	8000fda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000ae6:	bf00      	nop
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40002000 	.word	0x40002000
 8000af4:	40023800 	.word	0x40023800

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <NMI_Handler+0x4>

08000afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <HardFault_Handler+0x4>

08000b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <MemManage_Handler+0x4>

08000b0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr

08000b22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr

08000b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr

08000b3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b3e:	f000 f91b 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

	// 100 Hz counter for various purposes
	TIM14_Counter += 1;
 8000b4c:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	3301      	adds	r3, #1
 8000b52:	4a21      	ldr	r2, [pc, #132]	; (8000bd8 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8000b54:	6013      	str	r3, [r2, #0]

	// 1 Hz overflow
	if (TIM14_Counter == 100)
 8000b56:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b64      	cmp	r3, #100	; 0x64
 8000b5c:	d102      	bne.n	8000b64 <TIM8_TRG_COM_TIM14_IRQHandler+0x1c>
	{
		TIM14_Counter = 0;
 8000b5e:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
	}

	if ((TIM14_Counter % 10) == 0)
 8000b64:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8000b66:	6819      	ldr	r1, [r3, #0]
 8000b68:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 8000b6a:	fb83 2301 	smull	r2, r3, r3, r1
 8000b6e:	109a      	asrs	r2, r3, #2
 8000b70:	17cb      	asrs	r3, r1, #31
 8000b72:	1ad2      	subs	r2, r2, r3
 8000b74:	4613      	mov	r3, r2
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	4413      	add	r3, r2
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	1aca      	subs	r2, r1, r3
 8000b7e:	2a00      	cmp	r2, #0
 8000b80:	d102      	bne.n	8000b88 <TIM8_TRG_COM_TIM14_IRQHandler+0x40>
	{
		Update_10Hz = 1;
 8000b82:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	601a      	str	r2, [r3, #0]
	}

	if ((TIM14_Counter % 20) == 0)
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8000b8a:	6819      	ldr	r1, [r3, #0]
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 8000b8e:	fb83 2301 	smull	r2, r3, r3, r1
 8000b92:	10da      	asrs	r2, r3, #3
 8000b94:	17cb      	asrs	r3, r1, #31
 8000b96:	1ad2      	subs	r2, r2, r3
 8000b98:	4613      	mov	r3, r2
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	4413      	add	r3, r2
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	1aca      	subs	r2, r1, r3
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	d102      	bne.n	8000bac <TIM8_TRG_COM_TIM14_IRQHandler+0x64>
	{
		Update_5Hz = 1;
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	601a      	str	r2, [r3, #0]
	}

	if ((TIM14_Counter % 50) == 0)
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <TIM8_TRG_COM_TIM14_IRQHandler+0xa0>)
 8000bb2:	fb83 1302 	smull	r1, r3, r3, r2
 8000bb6:	1119      	asrs	r1, r3, #4
 8000bb8:	17d3      	asrs	r3, r2, #31
 8000bba:	1acb      	subs	r3, r1, r3
 8000bbc:	2132      	movs	r1, #50	; 0x32
 8000bbe:	fb01 f303 	mul.w	r3, r1, r3
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d102      	bne.n	8000bce <TIM8_TRG_COM_TIM14_IRQHandler+0x86>
	{
		Update_2Hz = 1;
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <TIM8_TRG_COM_TIM14_IRQHandler+0xa4>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000bce:	4808      	ldr	r0, [pc, #32]	; (8000bf0 <TIM8_TRG_COM_TIM14_IRQHandler+0xa8>)
 8000bd0:	f002 fa06 	bl	8002fe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200001fc 	.word	0x200001fc
 8000bdc:	66666667 	.word	0x66666667
 8000be0:	20000a1c 	.word	0x20000a1c
 8000be4:	20000614 	.word	0x20000614
 8000be8:	51eb851f 	.word	0x51eb851f
 8000bec:	20000a20 	.word	0x20000a20
 8000bf0:	20000a24 	.word	0x20000a24

08000bf4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <OTG_FS_IRQHandler+0x10>)
 8000bfa:	f000 fcfe 	bl	80015fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20001f34 	.word	0x20001f34

08000c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c10:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <_sbrk+0x5c>)
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <_sbrk+0x60>)
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d102      	bne.n	8000c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <_sbrk+0x64>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <_sbrk+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d207      	bcs.n	8000c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c38:	f005 ffa6 	bl	8006b88 <__errno>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	230c      	movs	r3, #12
 8000c40:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c46:	e009      	b.n	8000c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <_sbrk+0x64>)
 8000c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20020000 	.word	0x20020000
 8000c68:	00000400 	.word	0x00000400
 8000c6c:	20000200 	.word	0x20000200
 8000c70:	20002338 	.word	0x20002338

08000c74 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c84:	480d      	ldr	r0, [pc, #52]	; (8000cbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c86:	490e      	ldr	r1, [pc, #56]	; (8000cc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c88:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c8c:	e002      	b.n	8000c94 <LoopCopyDataInit>

08000c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c92:	3304      	adds	r3, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c98:	d3f9      	bcc.n	8000c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c9c:	4c0b      	ldr	r4, [pc, #44]	; (8000ccc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca0:	e001      	b.n	8000ca6 <LoopFillZerobss>

08000ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca4:	3204      	adds	r2, #4

08000ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca8:	d3fb      	bcc.n	8000ca2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000caa:	f7ff ffe3 	bl	8000c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cae:	f005 ff71 	bl	8006b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb2:	f7ff fd53 	bl	800075c <main>
  bx  lr
 8000cb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000cc4:	08006e60 	.word	0x08006e60
  ldr r2, =_sbss
 8000cc8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000ccc:	20002338 	.word	0x20002338

08000cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC_IRQHandler>
	...

08000cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <HAL_Init+0x40>)
 8000cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_Init+0x40>)
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <HAL_Init+0x40>)
 8000cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f945 	bl	8000f8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 f808 	bl	8000d18 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000d08:	f7ff fea8 	bl	8000a5c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023c00 	.word	0x40023c00

08000d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_InitTick+0x54>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_InitTick+0x58>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f95d 	bl	8000ff6 <HAL_SYSTICK_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00e      	b.n	8000d64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	d80a      	bhi.n	8000d62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d54:	f000 f925 	bl	8000fa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d58:	4a06      	ldr	r2, [pc, #24]	; (8000d74 <HAL_InitTick+0x5c>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e000      	b.n	8000d64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000004 	.word	0x20000004

08000d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <HAL_IncTick+0x1c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <HAL_IncTick+0x20>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a03      	ldr	r2, [pc, #12]	; (8000d98 <HAL_IncTick+0x20>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr
 8000d94:	20000008 	.word	0x20000008
 8000d98:	20000a6c 	.word	0x20000a6c

08000d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000da0:	4b02      	ldr	r3, [pc, #8]	; (8000dac <HAL_GetTick+0x10>)
 8000da2:	681b      	ldr	r3, [r3, #0]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	20000a6c 	.word	0x20000a6c

08000db0 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db8:	f7ff fff0 	bl	8000d9c <HAL_GetTick>
 8000dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dc8:	d005      	beq.n	8000dd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <HAL_Delay+0x40>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dd6:	bf00      	nop
 8000dd8:	f7ff ffe0 	bl	8000d9c <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d8f7      	bhi.n	8000dd8 <HAL_Delay+0x28>
  {
  }
}
 8000de8:	bf00      	nop
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000008 	.word	0x20000008

08000df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <__NVIC_SetPriorityGrouping+0x44>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e10:	4013      	ands	r3, r2
 8000e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e26:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <__NVIC_SetPriorityGrouping+0x44>)
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	60d3      	str	r3, [r2, #12]
}
 8000e2c:	bf00      	nop
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <__NVIC_GetPriorityGrouping+0x18>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	0a1b      	lsrs	r3, r3, #8
 8000e46:	f003 0307 	and.w	r3, r3, #7
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	db0b      	blt.n	8000e82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	f003 021f 	and.w	r2, r3, #31
 8000e70:	4906      	ldr	r1, [pc, #24]	; (8000e8c <__NVIC_EnableIRQ+0x34>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	095b      	lsrs	r3, r3, #5
 8000e78:	2001      	movs	r0, #1
 8000e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	e000e100 	.word	0xe000e100

08000e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	6039      	str	r1, [r7, #0]
 8000e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db0a      	blt.n	8000eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	490c      	ldr	r1, [pc, #48]	; (8000edc <__NVIC_SetPriority+0x4c>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	0112      	lsls	r2, r2, #4
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb8:	e00a      	b.n	8000ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4908      	ldr	r1, [pc, #32]	; (8000ee0 <__NVIC_SetPriority+0x50>)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f003 030f 	and.w	r3, r3, #15
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	0112      	lsls	r2, r2, #4
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	440b      	add	r3, r1
 8000ece:	761a      	strb	r2, [r3, #24]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000e100 	.word	0xe000e100
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f1c3 0307 	rsb	r3, r3, #7
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	bf28      	it	cs
 8000f02:	2304      	movcs	r3, #4
 8000f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	2b06      	cmp	r3, #6
 8000f0c:	d902      	bls.n	8000f14 <NVIC_EncodePriority+0x30>
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3b03      	subs	r3, #3
 8000f12:	e000      	b.n	8000f16 <NVIC_EncodePriority+0x32>
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43da      	mvns	r2, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	401a      	ands	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	43d9      	mvns	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	4313      	orrs	r3, r2
         );
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3724      	adds	r7, #36	; 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr

08000f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f58:	d301      	bcc.n	8000f5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e00f      	b.n	8000f7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <SysTick_Config+0x40>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f66:	210f      	movs	r1, #15
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f6c:	f7ff ff90 	bl	8000e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <SysTick_Config+0x40>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <SysTick_Config+0x40>)
 8000f78:	2207      	movs	r2, #7
 8000f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	e000e010 	.word	0xe000e010

08000f8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff ff2d 	bl	8000df4 <__NVIC_SetPriorityGrouping>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	4603      	mov	r3, r0
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
 8000fae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb4:	f7ff ff42 	bl	8000e3c <__NVIC_GetPriorityGrouping>
 8000fb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	68b9      	ldr	r1, [r7, #8]
 8000fbe:	6978      	ldr	r0, [r7, #20]
 8000fc0:	f7ff ff90 	bl	8000ee4 <NVIC_EncodePriority>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fca:	4611      	mov	r1, r2
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff5f 	bl	8000e90 <__NVIC_SetPriority>
}
 8000fd2:	bf00      	nop
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff35 	bl	8000e58 <__NVIC_EnableIRQ>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ffa2 	bl	8000f48 <SysTick_Config>
 8001004:	4603      	mov	r3, r0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001010:	b480      	push	{r7}
 8001012:	b087      	sub	sp, #28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101e:	e16f      	b.n	8001300 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	2101      	movs	r1, #1
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	fa01 f303 	lsl.w	r3, r1, r3
 800102c:	4013      	ands	r3, r2
 800102e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	f000 8161 	beq.w	80012fa <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b01      	cmp	r3, #1
 8001042:	d005      	beq.n	8001050 <HAL_GPIO_Init+0x40>
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d130      	bne.n	80010b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	2203      	movs	r2, #3
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	68da      	ldr	r2, [r3, #12]
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001086:	2201      	movs	r2, #1
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	091b      	lsrs	r3, r3, #4
 800109c:	f003 0201 	and.w	r2, r3, #1
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d017      	beq.n	80010ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	2203      	movs	r2, #3
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	689a      	ldr	r2, [r3, #8]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d123      	bne.n	8001142 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	08da      	lsrs	r2, r3, #3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3208      	adds	r2, #8
 8001102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001106:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	220f      	movs	r2, #15
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	691a      	ldr	r2, [r3, #16]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	f003 0307 	and.w	r3, r3, #7
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	08da      	lsrs	r2, r3, #3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3208      	adds	r2, #8
 800113c:	6939      	ldr	r1, [r7, #16]
 800113e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	2203      	movs	r2, #3
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 0203 	and.w	r2, r3, #3
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 80bb 	beq.w	80012fa <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001184:	2300      	movs	r3, #0
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	4b64      	ldr	r3, [pc, #400]	; (800131c <HAL_GPIO_Init+0x30c>)
 800118a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118c:	4a63      	ldr	r2, [pc, #396]	; (800131c <HAL_GPIO_Init+0x30c>)
 800118e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001192:	6453      	str	r3, [r2, #68]	; 0x44
 8001194:	4b61      	ldr	r3, [pc, #388]	; (800131c <HAL_GPIO_Init+0x30c>)
 8001196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011a0:	4a5f      	ldr	r2, [pc, #380]	; (8001320 <HAL_GPIO_Init+0x310>)
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3302      	adds	r3, #2
 80011a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a57      	ldr	r2, [pc, #348]	; (8001324 <HAL_GPIO_Init+0x314>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d031      	beq.n	8001230 <HAL_GPIO_Init+0x220>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a56      	ldr	r2, [pc, #344]	; (8001328 <HAL_GPIO_Init+0x318>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d02b      	beq.n	800122c <HAL_GPIO_Init+0x21c>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a55      	ldr	r2, [pc, #340]	; (800132c <HAL_GPIO_Init+0x31c>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d025      	beq.n	8001228 <HAL_GPIO_Init+0x218>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a54      	ldr	r2, [pc, #336]	; (8001330 <HAL_GPIO_Init+0x320>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d01f      	beq.n	8001224 <HAL_GPIO_Init+0x214>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a53      	ldr	r2, [pc, #332]	; (8001334 <HAL_GPIO_Init+0x324>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d019      	beq.n	8001220 <HAL_GPIO_Init+0x210>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a52      	ldr	r2, [pc, #328]	; (8001338 <HAL_GPIO_Init+0x328>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d013      	beq.n	800121c <HAL_GPIO_Init+0x20c>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a51      	ldr	r2, [pc, #324]	; (800133c <HAL_GPIO_Init+0x32c>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d00d      	beq.n	8001218 <HAL_GPIO_Init+0x208>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a50      	ldr	r2, [pc, #320]	; (8001340 <HAL_GPIO_Init+0x330>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d007      	beq.n	8001214 <HAL_GPIO_Init+0x204>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a4f      	ldr	r2, [pc, #316]	; (8001344 <HAL_GPIO_Init+0x334>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d101      	bne.n	8001210 <HAL_GPIO_Init+0x200>
 800120c:	2308      	movs	r3, #8
 800120e:	e010      	b.n	8001232 <HAL_GPIO_Init+0x222>
 8001210:	2309      	movs	r3, #9
 8001212:	e00e      	b.n	8001232 <HAL_GPIO_Init+0x222>
 8001214:	2307      	movs	r3, #7
 8001216:	e00c      	b.n	8001232 <HAL_GPIO_Init+0x222>
 8001218:	2306      	movs	r3, #6
 800121a:	e00a      	b.n	8001232 <HAL_GPIO_Init+0x222>
 800121c:	2305      	movs	r3, #5
 800121e:	e008      	b.n	8001232 <HAL_GPIO_Init+0x222>
 8001220:	2304      	movs	r3, #4
 8001222:	e006      	b.n	8001232 <HAL_GPIO_Init+0x222>
 8001224:	2303      	movs	r3, #3
 8001226:	e004      	b.n	8001232 <HAL_GPIO_Init+0x222>
 8001228:	2302      	movs	r3, #2
 800122a:	e002      	b.n	8001232 <HAL_GPIO_Init+0x222>
 800122c:	2301      	movs	r3, #1
 800122e:	e000      	b.n	8001232 <HAL_GPIO_Init+0x222>
 8001230:	2300      	movs	r3, #0
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	f002 0203 	and.w	r2, r2, #3
 8001238:	0092      	lsls	r2, r2, #2
 800123a:	4093      	lsls	r3, r2
 800123c:	461a      	mov	r2, r3
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001244:	4936      	ldr	r1, [pc, #216]	; (8001320 <HAL_GPIO_Init+0x310>)
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	089b      	lsrs	r3, r3, #2
 800124a:	3302      	adds	r3, #2
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001252:	4b3d      	ldr	r3, [pc, #244]	; (8001348 <HAL_GPIO_Init+0x338>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	43db      	mvns	r3, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001276:	4a34      	ldr	r2, [pc, #208]	; (8001348 <HAL_GPIO_Init+0x338>)
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800127c:	4b32      	ldr	r3, [pc, #200]	; (8001348 <HAL_GPIO_Init+0x338>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	43db      	mvns	r3, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012a0:	4a29      	ldr	r2, [pc, #164]	; (8001348 <HAL_GPIO_Init+0x338>)
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012a6:	4b28      	ldr	r3, [pc, #160]	; (8001348 <HAL_GPIO_Init+0x338>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012ca:	4a1f      	ldr	r2, [pc, #124]	; (8001348 <HAL_GPIO_Init+0x338>)
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d0:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <HAL_GPIO_Init+0x338>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012f4:	4a14      	ldr	r2, [pc, #80]	; (8001348 <HAL_GPIO_Init+0x338>)
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	3301      	adds	r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa22 f303 	lsr.w	r3, r2, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	f47f ae88 	bne.w	8001020 <HAL_GPIO_Init+0x10>
  }
}
 8001310:	bf00      	nop
 8001312:	371c      	adds	r7, #28
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800
 8001320:	40013800 	.word	0x40013800
 8001324:	40020000 	.word	0x40020000
 8001328:	40020400 	.word	0x40020400
 800132c:	40020800 	.word	0x40020800
 8001330:	40020c00 	.word	0x40020c00
 8001334:	40021000 	.word	0x40021000
 8001338:	40021400 	.word	0x40021400
 800133c:	40021800 	.word	0x40021800
 8001340:	40021c00 	.word	0x40021c00
 8001344:	40022000 	.word	0x40022000
 8001348:	40013c00 	.word	0x40013c00

0800134c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
 8001358:	4613      	mov	r3, r2
 800135a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800135c:	787b      	ldrb	r3, [r7, #1]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001362:	887a      	ldrh	r2, [r7, #2]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001368:	e003      	b.n	8001372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800136a:	887b      	ldrh	r3, [r7, #2]
 800136c:	041a      	lsls	r2, r3, #16
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	619a      	str	r2, [r3, #24]
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800137c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137e:	b08f      	sub	sp, #60	; 0x3c
 8001380:	af0a      	add	r7, sp, #40	; 0x28
 8001382:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e10f      	b.n	80015ae <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	d106      	bne.n	80013ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f005 f8ef 	bl	800658c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2203      	movs	r2, #3
 80013b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d102      	bne.n	80013c8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f002 f8f7 	bl	80035c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	687e      	ldr	r6, [r7, #4]
 80013da:	466d      	mov	r5, sp
 80013dc:	f106 0410 	add.w	r4, r6, #16
 80013e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80013f0:	1d33      	adds	r3, r6, #4
 80013f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013f4:	6838      	ldr	r0, [r7, #0]
 80013f6:	f001 ffd9 	bl	80033ac <USB_CoreInit>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d005      	beq.n	800140c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2202      	movs	r2, #2
 8001404:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e0d0      	b.n	80015ae <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f002 f8e4 	bl	80035e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001418:	2300      	movs	r3, #0
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	e04a      	b.n	80014b4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800141e:	7bfa      	ldrb	r2, [r7, #15]
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	4613      	mov	r3, r2
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	1a9b      	subs	r3, r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	440b      	add	r3, r1
 800142c:	333d      	adds	r3, #61	; 0x3d
 800142e:	2201      	movs	r2, #1
 8001430:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001432:	7bfa      	ldrb	r2, [r7, #15]
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	1a9b      	subs	r3, r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	333c      	adds	r3, #60	; 0x3c
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001446:	7bfa      	ldrb	r2, [r7, #15]
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	b298      	uxth	r0, r3
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	1a9b      	subs	r3, r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	440b      	add	r3, r1
 8001458:	3342      	adds	r3, #66	; 0x42
 800145a:	4602      	mov	r2, r0
 800145c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800145e:	7bfa      	ldrb	r2, [r7, #15]
 8001460:	6879      	ldr	r1, [r7, #4]
 8001462:	4613      	mov	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	1a9b      	subs	r3, r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	440b      	add	r3, r1
 800146c:	333f      	adds	r3, #63	; 0x3f
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001472:	7bfa      	ldrb	r2, [r7, #15]
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	4613      	mov	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	1a9b      	subs	r3, r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	440b      	add	r3, r1
 8001480:	3344      	adds	r3, #68	; 0x44
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001486:	7bfa      	ldrb	r2, [r7, #15]
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	1a9b      	subs	r3, r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	440b      	add	r3, r1
 8001494:	3348      	adds	r3, #72	; 0x48
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800149a:	7bfa      	ldrb	r2, [r7, #15]
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	1a9b      	subs	r3, r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	440b      	add	r3, r1
 80014a8:	3350      	adds	r3, #80	; 0x50
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	3301      	adds	r3, #1
 80014b2:	73fb      	strb	r3, [r7, #15]
 80014b4:	7bfa      	ldrb	r2, [r7, #15]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d3af      	bcc.n	800141e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014be:	2300      	movs	r3, #0
 80014c0:	73fb      	strb	r3, [r7, #15]
 80014c2:	e044      	b.n	800154e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014c4:	7bfa      	ldrb	r2, [r7, #15]
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	1a9b      	subs	r3, r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014da:	7bfa      	ldrb	r2, [r7, #15]
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	1a9b      	subs	r3, r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	440b      	add	r3, r1
 80014e8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80014ec:	7bfa      	ldrb	r2, [r7, #15]
 80014ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	1a9b      	subs	r3, r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001506:	7bfa      	ldrb	r2, [r7, #15]
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	1a9b      	subs	r3, r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	440b      	add	r3, r1
 8001514:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800151c:	7bfa      	ldrb	r2, [r7, #15]
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	4613      	mov	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	1a9b      	subs	r3, r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001532:	7bfa      	ldrb	r2, [r7, #15]
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	4613      	mov	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	1a9b      	subs	r3, r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	440b      	add	r3, r1
 8001540:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	3301      	adds	r3, #1
 800154c:	73fb      	strb	r3, [r7, #15]
 800154e:	7bfa      	ldrb	r2, [r7, #15]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	429a      	cmp	r2, r3
 8001556:	d3b5      	bcc.n	80014c4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	603b      	str	r3, [r7, #0]
 800155e:	687e      	ldr	r6, [r7, #4]
 8001560:	466d      	mov	r5, sp
 8001562:	f106 0410 	add.w	r4, r6, #16
 8001566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001568:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800156a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800156c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800156e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001572:	e885 0003 	stmia.w	r5, {r0, r1}
 8001576:	1d33      	adds	r3, r6, #4
 8001578:	cb0e      	ldmia	r3, {r1, r2, r3}
 800157a:	6838      	ldr	r0, [r7, #0]
 800157c:	f002 f87c 	bl	8003678 <USB_DevInit>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d005      	beq.n	8001592 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2202      	movs	r2, #2
 800158a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e00d      	b.n	80015ae <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2201      	movs	r2, #1
 800159e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f003 f8ed 	bl	8004786 <USB_DevDisconnect>

  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015b6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d101      	bne.n	80015cc <HAL_PCD_Start+0x16>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e012      	b.n	80015f2 <HAL_PCD_Start+0x3c>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f001 ffe1 	bl	80035a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f003 f8af 	bl	8004746 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015fa:	b590      	push	{r4, r7, lr}
 80015fc:	b08d      	sub	sp, #52	; 0x34
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001608:	6a3b      	ldr	r3, [r7, #32]
 800160a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f003 f966 	bl	80048e2 <USB_GetMode>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	f040 838f 	bne.w	8001d3c <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f003 f8cf 	bl	80047c6 <USB_ReadInterrupts>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 8385 	beq.w	8001d3a <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f003 f8c6 	bl	80047c6 <USB_ReadInterrupts>
 800163a:	4603      	mov	r3, r0
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b02      	cmp	r3, #2
 8001642:	d107      	bne.n	8001654 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	695a      	ldr	r2, [r3, #20]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f002 0202 	and.w	r2, r2, #2
 8001652:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f003 f8b4 	bl	80047c6 <USB_ReadInterrupts>
 800165e:	4603      	mov	r3, r0
 8001660:	f003 0310 	and.w	r3, r3, #16
 8001664:	2b10      	cmp	r3, #16
 8001666:	d161      	bne.n	800172c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	699a      	ldr	r2, [r3, #24]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0210 	bic.w	r2, r2, #16
 8001676:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001678:	6a3b      	ldr	r3, [r7, #32]
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	f003 020f 	and.w	r2, r3, #15
 8001684:	4613      	mov	r3, r2
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	1a9b      	subs	r3, r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	4413      	add	r3, r2
 8001694:	3304      	adds	r3, #4
 8001696:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	0c5b      	lsrs	r3, r3, #17
 800169c:	f003 030f 	and.w	r3, r3, #15
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d124      	bne.n	80016ee <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d035      	beq.n	800171c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	091b      	lsrs	r3, r3, #4
 80016b8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016be:	b29b      	uxth	r3, r3
 80016c0:	461a      	mov	r2, r3
 80016c2:	6a38      	ldr	r0, [r7, #32]
 80016c4:	f002 fef1 	bl	80044aa <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	091b      	lsrs	r3, r3, #4
 80016d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016d4:	441a      	add	r2, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	699a      	ldr	r2, [r3, #24]
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	091b      	lsrs	r3, r3, #4
 80016e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016e6:	441a      	add	r2, r3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	619a      	str	r2, [r3, #24]
 80016ec:	e016      	b.n	800171c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	0c5b      	lsrs	r3, r3, #17
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	2b06      	cmp	r3, #6
 80016f8:	d110      	bne.n	800171c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001700:	2208      	movs	r2, #8
 8001702:	4619      	mov	r1, r3
 8001704:	6a38      	ldr	r0, [r7, #32]
 8001706:	f002 fed0 	bl	80044aa <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	699a      	ldr	r2, [r3, #24]
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	091b      	lsrs	r3, r3, #4
 8001712:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001716:	441a      	add	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	699a      	ldr	r2, [r3, #24]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 0210 	orr.w	r2, r2, #16
 800172a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f003 f848 	bl	80047c6 <USB_ReadInterrupts>
 8001736:	4603      	mov	r3, r0
 8001738:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800173c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001740:	d16e      	bne.n	8001820 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001742:	2300      	movs	r3, #0
 8001744:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f003 f84d 	bl	80047ea <USB_ReadDevAllOutEpInterrupt>
 8001750:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001752:	e062      	b.n	800181a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d057      	beq.n	800180e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f003 f870 	bl	800484e <USB_ReadDevOutEPInterrupt>
 800176e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00c      	beq.n	8001794 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	015a      	lsls	r2, r3, #5
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	4413      	add	r3, r2
 8001782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001786:	461a      	mov	r2, r3
 8001788:	2301      	movs	r3, #1
 800178a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800178c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 fda2 	bl	80022d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00c      	beq.n	80017b8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	015a      	lsls	r2, r3, #5
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	4413      	add	r3, r2
 80017a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017aa:	461a      	mov	r2, r3
 80017ac:	2308      	movs	r3, #8
 80017ae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80017b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 fe9c 	bl	80024f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	f003 0310 	and.w	r3, r3, #16
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d008      	beq.n	80017d4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	015a      	lsls	r2, r3, #5
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	4413      	add	r3, r2
 80017ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017ce:	461a      	mov	r2, r3
 80017d0:	2310      	movs	r3, #16
 80017d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	f003 0320 	and.w	r3, r3, #32
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d008      	beq.n	80017f0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	015a      	lsls	r2, r3, #5
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	4413      	add	r3, r2
 80017e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017ea:	461a      	mov	r2, r3
 80017ec:	2320      	movs	r3, #32
 80017ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d009      	beq.n	800180e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	015a      	lsls	r2, r3, #5
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	4413      	add	r3, r2
 8001802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001806:	461a      	mov	r2, r3
 8001808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800180c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	3301      	adds	r3, #1
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001816:	085b      	lsrs	r3, r3, #1
 8001818:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800181a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800181c:	2b00      	cmp	r3, #0
 800181e:	d199      	bne.n	8001754 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f002 ffce 	bl	80047c6 <USB_ReadInterrupts>
 800182a:	4603      	mov	r3, r0
 800182c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001830:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001834:	f040 80c0 	bne.w	80019b8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f002 ffed 	bl	800481c <USB_ReadDevAllInEpInterrupt>
 8001842:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001848:	e0b2      	b.n	80019b0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800184a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 80a7 	beq.w	80019a4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f003 f811 	bl	8004888 <USB_ReadDevInEPInterrupt>
 8001866:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	d057      	beq.n	8001922 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	f003 030f 	and.w	r3, r3, #15
 8001878:	2201      	movs	r2, #1
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	43db      	mvns	r3, r3
 800188c:	69f9      	ldr	r1, [r7, #28]
 800188e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001892:	4013      	ands	r3, r2
 8001894:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	015a      	lsls	r2, r3, #5
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	4413      	add	r3, r2
 800189e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018a2:	461a      	mov	r2, r3
 80018a4:	2301      	movs	r3, #1
 80018a6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d132      	bne.n	8001916 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b4:	4613      	mov	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	1a9b      	subs	r3, r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	3348      	adds	r3, #72	; 0x48
 80018c0:	6819      	ldr	r1, [r3, #0]
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c6:	4613      	mov	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	1a9b      	subs	r3, r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4403      	add	r3, r0
 80018d0:	3344      	adds	r3, #68	; 0x44
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4419      	add	r1, r3
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018da:	4613      	mov	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	1a9b      	subs	r3, r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4403      	add	r3, r0
 80018e4:	3348      	adds	r3, #72	; 0x48
 80018e6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d113      	bne.n	8001916 <HAL_PCD_IRQHandler+0x31c>
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f2:	4613      	mov	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	1a9b      	subs	r3, r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	440b      	add	r3, r1
 80018fc:	3350      	adds	r3, #80	; 0x50
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d108      	bne.n	8001916 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800190e:	461a      	mov	r2, r3
 8001910:	2101      	movs	r1, #1
 8001912:	f003 f815 	bl	8004940 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	b2db      	uxtb	r3, r3
 800191a:	4619      	mov	r1, r3
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f004 feb6 	bl	800668e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	2b00      	cmp	r3, #0
 800192a:	d008      	beq.n	800193e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	015a      	lsls	r2, r3, #5
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	4413      	add	r3, r2
 8001934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001938:	461a      	mov	r2, r3
 800193a:	2308      	movs	r3, #8
 800193c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	f003 0310 	and.w	r3, r3, #16
 8001944:	2b00      	cmp	r3, #0
 8001946:	d008      	beq.n	800195a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	015a      	lsls	r2, r3, #5
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	4413      	add	r3, r2
 8001950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001954:	461a      	mov	r2, r3
 8001956:	2310      	movs	r3, #16
 8001958:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001960:	2b00      	cmp	r3, #0
 8001962:	d008      	beq.n	8001976 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	015a      	lsls	r2, r3, #5
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	4413      	add	r3, r2
 800196c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001970:	461a      	mov	r2, r3
 8001972:	2340      	movs	r3, #64	; 0x40
 8001974:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	015a      	lsls	r2, r3, #5
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	4413      	add	r3, r2
 8001988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800198c:	461a      	mov	r2, r3
 800198e:	2302      	movs	r3, #2
 8001990:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800199c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 fc0c 	bl	80021bc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	3301      	adds	r3, #1
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80019aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ac:	085b      	lsrs	r3, r3, #1
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80019b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f47f af49 	bne.w	800184a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f002 ff02 	bl	80047c6 <USB_ReadInterrupts>
 80019c2:	4603      	mov	r3, r0
 80019c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80019c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019cc:	d114      	bne.n	80019f8 <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	69fa      	ldr	r2, [r7, #28]
 80019d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019dc:	f023 0301 	bic.w	r3, r3, #1
 80019e0:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f004 feca 	bl	800677c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	695a      	ldr	r2, [r3, #20]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80019f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f002 fee2 	bl	80047c6 <USB_ReadInterrupts>
 8001a02:	4603      	mov	r3, r0
 8001a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a0c:	d112      	bne.n	8001a34 <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d102      	bne.n	8001a24 <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f004 fe86 	bl	8006730 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	695a      	ldr	r2, [r3, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001a32:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f002 fec4 	bl	80047c6 <USB_ReadInterrupts>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a48:	f040 80c7 	bne.w	8001bda <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	69fa      	ldr	r2, [r7, #28]
 8001a56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a5a:	f023 0301 	bic.w	r3, r3, #1
 8001a5e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2110      	movs	r1, #16
 8001a66:	4618      	mov	r0, r3
 8001a68:	f001 ff6a 	bl	8003940 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a70:	e056      	b.n	8001b20 <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a74:	015a      	lsls	r2, r3, #5
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	4413      	add	r3, r2
 8001a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a7e:	461a      	mov	r2, r3
 8001a80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a84:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a88:	015a      	lsls	r2, r3, #5
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a96:	0151      	lsls	r1, r2, #5
 8001a98:	69fa      	ldr	r2, [r7, #28]
 8001a9a:	440a      	add	r2, r1
 8001a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001aa0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001aa4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa8:	015a      	lsls	r2, r3, #5
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	4413      	add	r3, r2
 8001aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ab6:	0151      	lsls	r1, r2, #5
 8001ab8:	69fa      	ldr	r2, [r7, #28]
 8001aba:	440a      	add	r2, r1
 8001abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001ac0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ac4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac8:	015a      	lsls	r2, r3, #5
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	4413      	add	r3, r2
 8001ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ad8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001adc:	015a      	lsls	r2, r3, #5
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aea:	0151      	lsls	r1, r2, #5
 8001aec:	69fa      	ldr	r2, [r7, #28]
 8001aee:	440a      	add	r2, r1
 8001af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001af4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001af8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afc:	015a      	lsls	r2, r3, #5
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	4413      	add	r3, r2
 8001b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b0a:	0151      	lsls	r1, r2, #5
 8001b0c:	69fa      	ldr	r2, [r7, #28]
 8001b0e:	440a      	add	r2, r1
 8001b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b18:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d3a3      	bcc.n	8001a72 <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	69fa      	ldr	r2, [r7, #28]
 8001b34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b38:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001b3c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d016      	beq.n	8001b74 <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b50:	69fa      	ldr	r2, [r7, #28]
 8001b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b56:	f043 030b 	orr.w	r3, r3, #11
 8001b5a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b6c:	f043 030b 	orr.w	r3, r3, #11
 8001b70:	6453      	str	r3, [r2, #68]	; 0x44
 8001b72:	e015      	b.n	8001ba0 <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	69fa      	ldr	r2, [r7, #28]
 8001b7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b86:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001b8a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b9a:	f043 030b 	orr.w	r3, r3, #11
 8001b9e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001bb2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	f002 febb 	bl	8004940 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	695a      	ldr	r2, [r3, #20]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001bd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f002 fdf1 	bl	80047c6 <USB_ReadInterrupts>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bee:	d124      	bne.n	8001c3a <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f002 fe81 	bl	80048fc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f001 fefa 	bl	80039f8 <USB_GetDevSpeed>
 8001c04:	4603      	mov	r3, r0
 8001c06:	461a      	mov	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681c      	ldr	r4, [r3, #0]
 8001c10:	f001 f91e 	bl	8002e50 <HAL_RCC_GetHCLKFreq>
 8001c14:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4620      	mov	r0, r4
 8001c20:	f001 fc1c 	bl	800345c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f004 fd5a 	bl	80066de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	695a      	ldr	r2, [r3, #20]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001c38:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f002 fdc1 	bl	80047c6 <USB_ReadInterrupts>
 8001c44:	4603      	mov	r3, r0
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b08      	cmp	r3, #8
 8001c4c:	d10a      	bne.n	8001c64 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f004 fd37 	bl	80066c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	695a      	ldr	r2, [r3, #20]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f002 0208 	and.w	r2, r2, #8
 8001c62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f002 fdac 	bl	80047c6 <USB_ReadInterrupts>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c78:	d10f      	bne.n	8001c9a <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	4619      	mov	r1, r3
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f004 fd99 	bl	80067bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	695a      	ldr	r2, [r3, #20]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001c98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f002 fd91 	bl	80047c6 <USB_ReadInterrupts>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001caa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001cae:	d10f      	bne.n	8001cd0 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	4619      	mov	r1, r3
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f004 fd6c 	bl	8006798 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	695a      	ldr	r2, [r3, #20]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001cce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f002 fd76 	bl	80047c6 <USB_ReadInterrupts>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce4:	d10a      	bne.n	8001cfc <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f004 fd7a 	bl	80067e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	695a      	ldr	r2, [r3, #20]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001cfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f002 fd60 	bl	80047c6 <USB_ReadInterrupts>
 8001d06:	4603      	mov	r3, r0
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d115      	bne.n	8001d3c <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d002      	beq.n	8001d28 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f004 fd6a 	bl	80067fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6859      	ldr	r1, [r3, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	e000      	b.n	8001d3c <HAL_PCD_IRQHandler+0x742>
      return;
 8001d3a:	bf00      	nop
    }
  }
}
 8001d3c:	3734      	adds	r7, #52	; 0x34
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd90      	pop	{r4, r7, pc}

08001d42 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_PCD_SetAddress+0x1a>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e013      	b.n	8001d84 <HAL_PCD_SetAddress+0x42>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	78fa      	ldrb	r2, [r7, #3]
 8001d68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	78fa      	ldrb	r2, [r7, #3]
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f002 fcc1 	bl	80046fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	4608      	mov	r0, r1
 8001d96:	4611      	mov	r1, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	70fb      	strb	r3, [r7, #3]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	803b      	strh	r3, [r7, #0]
 8001da2:	4613      	mov	r3, r2
 8001da4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001daa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	da0f      	bge.n	8001dd2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	f003 020f 	and.w	r2, r3, #15
 8001db8:	4613      	mov	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	1a9b      	subs	r3, r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	3338      	adds	r3, #56	; 0x38
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	705a      	strb	r2, [r3, #1]
 8001dd0:	e00f      	b.n	8001df2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dd2:	78fb      	ldrb	r3, [r7, #3]
 8001dd4:	f003 020f 	and.w	r2, r3, #15
 8001dd8:	4613      	mov	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	1a9b      	subs	r3, r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	4413      	add	r3, r2
 8001de8:	3304      	adds	r3, #4
 8001dea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001df2:	78fb      	ldrb	r3, [r7, #3]
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001dfe:	883a      	ldrh	r2, [r7, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	78ba      	ldrb	r2, [r7, #2]
 8001e08:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	785b      	ldrb	r3, [r3, #1]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d004      	beq.n	8001e1c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e1c:	78bb      	ldrb	r3, [r7, #2]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d102      	bne.n	8001e28 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <HAL_PCD_EP_Open+0xaa>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e00e      	b.n	8001e54 <HAL_PCD_EP_Open+0xc8>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68f9      	ldr	r1, [r7, #12]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f001 fdfb 	bl	8003a40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001e52:	7afb      	ldrb	r3, [r7, #11]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	da0f      	bge.n	8001e90 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	f003 020f 	and.w	r2, r3, #15
 8001e76:	4613      	mov	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	1a9b      	subs	r3, r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	3338      	adds	r3, #56	; 0x38
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	4413      	add	r3, r2
 8001e84:	3304      	adds	r3, #4
 8001e86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	705a      	strb	r2, [r3, #1]
 8001e8e:	e00f      	b.n	8001eb0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	f003 020f 	and.w	r2, r3, #15
 8001e96:	4613      	mov	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	1a9b      	subs	r3, r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_PCD_EP_Close+0x6e>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e00e      	b.n	8001ee8 <HAL_PCD_EP_Close+0x8c>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68f9      	ldr	r1, [r7, #12]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f001 fe37 	bl	8003b4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	603b      	str	r3, [r7, #0]
 8001efc:	460b      	mov	r3, r1
 8001efe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f00:	7afb      	ldrb	r3, [r7, #11]
 8001f02:	f003 020f 	and.w	r2, r3, #15
 8001f06:	4613      	mov	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	1a9b      	subs	r3, r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4413      	add	r3, r2
 8001f16:	3304      	adds	r3, #4
 8001f18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f32:	7afb      	ldrb	r3, [r7, #11]
 8001f34:	f003 030f 	and.w	r3, r3, #15
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d102      	bne.n	8001f4c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f4c:	7afb      	ldrb	r3, [r7, #11]
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d109      	bne.n	8001f6a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6818      	ldr	r0, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	6979      	ldr	r1, [r7, #20]
 8001f64:	f002 f912 	bl	800418c <USB_EP0StartXfer>
 8001f68:	e008      	b.n	8001f7c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	461a      	mov	r2, r3
 8001f76:	6979      	ldr	r1, [r7, #20]
 8001f78:	f001 fec4 	bl	8003d04 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	f003 020f 	and.w	r2, r3, #15
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	1a9b      	subs	r3, r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001fa8:	681b      	ldr	r3, [r3, #0]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	607a      	str	r2, [r7, #4]
 8001fbe:	603b      	str	r3, [r7, #0]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fc4:	7afb      	ldrb	r3, [r7, #11]
 8001fc6:	f003 020f 	and.w	r2, r3, #15
 8001fca:	4613      	mov	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	1a9b      	subs	r3, r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	3338      	adds	r3, #56	; 0x38
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3304      	adds	r3, #4
 8001fda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	2200      	movs	r2, #0
 8001fec:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ff4:	7afb      	ldrb	r3, [r7, #11]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d102      	bne.n	800200e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800200e:	7afb      	ldrb	r3, [r7, #11]
 8002010:	f003 030f 	and.w	r3, r3, #15
 8002014:	2b00      	cmp	r3, #0
 8002016:	d109      	bne.n	800202c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6818      	ldr	r0, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	6979      	ldr	r1, [r7, #20]
 8002026:	f002 f8b1 	bl	800418c <USB_EP0StartXfer>
 800202a:	e008      	b.n	800203e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6818      	ldr	r0, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	461a      	mov	r2, r3
 8002038:	6979      	ldr	r1, [r7, #20]
 800203a:	f001 fe63 	bl	8003d04 <USB_EPStartXfer>
  }

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	f003 020f 	and.w	r2, r3, #15
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	429a      	cmp	r2, r3
 8002060:	d901      	bls.n	8002066 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e050      	b.n	8002108 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002066:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800206a:	2b00      	cmp	r3, #0
 800206c:	da0f      	bge.n	800208e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	f003 020f 	and.w	r2, r3, #15
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	3338      	adds	r3, #56	; 0x38
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	3304      	adds	r3, #4
 8002084:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2201      	movs	r2, #1
 800208a:	705a      	strb	r2, [r3, #1]
 800208c:	e00d      	b.n	80020aa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800208e:	78fa      	ldrb	r2, [r7, #3]
 8002090:	4613      	mov	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	1a9b      	subs	r3, r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	4413      	add	r3, r2
 80020a0:	3304      	adds	r3, #4
 80020a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2201      	movs	r2, #1
 80020ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_PCD_EP_SetStall+0x82>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e01e      	b.n	8002108 <HAL_PCD_EP_SetStall+0xc0>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68f9      	ldr	r1, [r7, #12]
 80020d8:	4618      	mov	r0, r3
 80020da:	f002 fa3d 	bl	8004558 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020de:	78fb      	ldrb	r3, [r7, #3]
 80020e0:	f003 030f 	and.w	r3, r3, #15
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10a      	bne.n	80020fe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6818      	ldr	r0, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	b2d9      	uxtb	r1, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020f8:	461a      	mov	r2, r3
 80020fa:	f002 fc21 	bl	8004940 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800211c:	78fb      	ldrb	r3, [r7, #3]
 800211e:	f003 020f 	and.w	r2, r3, #15
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	429a      	cmp	r2, r3
 8002128:	d901      	bls.n	800212e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e042      	b.n	80021b4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800212e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002132:	2b00      	cmp	r3, #0
 8002134:	da0f      	bge.n	8002156 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002136:	78fb      	ldrb	r3, [r7, #3]
 8002138:	f003 020f 	and.w	r2, r3, #15
 800213c:	4613      	mov	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	3338      	adds	r3, #56	; 0x38
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	3304      	adds	r3, #4
 800214c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2201      	movs	r2, #1
 8002152:	705a      	strb	r2, [r3, #1]
 8002154:	e00f      	b.n	8002176 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	f003 020f 	and.w	r2, r3, #15
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	1a9b      	subs	r3, r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	4413      	add	r3, r2
 800216c:	3304      	adds	r3, #4
 800216e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	b2da      	uxtb	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_PCD_EP_ClrStall+0x86>
 8002192:	2302      	movs	r3, #2
 8002194:	e00e      	b.n	80021b4 <HAL_PCD_EP_ClrStall+0xa4>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68f9      	ldr	r1, [r7, #12]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f002 fa44 	bl	8004632 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08a      	sub	sp, #40	; 0x28
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	4613      	mov	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	3338      	adds	r3, #56	; 0x38
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	4413      	add	r3, r2
 80021e0:	3304      	adds	r3, #4
 80021e2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	699a      	ldr	r2, [r3, #24]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d901      	bls.n	80021f4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e06c      	b.n	80022ce <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	695a      	ldr	r2, [r3, #20]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	69fa      	ldr	r2, [r7, #28]
 8002206:	429a      	cmp	r2, r3
 8002208:	d902      	bls.n	8002210 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	3303      	adds	r3, #3
 8002214:	089b      	lsrs	r3, r3, #2
 8002216:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002218:	e02b      	b.n	8002272 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	695a      	ldr	r2, [r3, #20]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	69fa      	ldr	r2, [r7, #28]
 800222c:	429a      	cmp	r2, r3
 800222e:	d902      	bls.n	8002236 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3303      	adds	r3, #3
 800223a:	089b      	lsrs	r3, r3, #2
 800223c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	68d9      	ldr	r1, [r3, #12]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	b2da      	uxtb	r2, r3
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800224e:	b2db      	uxtb	r3, r3
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	4603      	mov	r3, r0
 8002254:	6978      	ldr	r0, [r7, #20]
 8002256:	f002 f8eb 	bl	8004430 <USB_WritePacket>

    ep->xfer_buff  += len;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	441a      	add	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	699a      	ldr	r2, [r3, #24]
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	441a      	add	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	015a      	lsls	r2, r3, #5
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4413      	add	r3, r2
 800227a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	b29b      	uxth	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	429a      	cmp	r2, r3
 8002286:	d809      	bhi.n	800229c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	699a      	ldr	r2, [r3, #24]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002290:	429a      	cmp	r2, r3
 8002292:	d203      	bcs.n	800229c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1be      	bne.n	800221a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	695a      	ldr	r2, [r3, #20]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d811      	bhi.n	80022cc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	2201      	movs	r2, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	6939      	ldr	r1, [r7, #16]
 80022c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022c8:	4013      	ands	r3, r2
 80022ca:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3720      	adds	r7, #32
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	333c      	adds	r3, #60	; 0x3c
 80022f0:	3304      	adds	r3, #4
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	2b01      	cmp	r3, #1
 800230c:	f040 80a0 	bne.w	8002450 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d015      	beq.n	8002346 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	4a72      	ldr	r2, [pc, #456]	; (80024e8 <PCD_EP_OutXfrComplete_int+0x210>)
 800231e:	4293      	cmp	r3, r2
 8002320:	f240 80dd 	bls.w	80024de <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 80d7 	beq.w	80024de <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	015a      	lsls	r2, r3, #5
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4413      	add	r3, r2
 8002338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800233c:	461a      	mov	r2, r3
 800233e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002342:	6093      	str	r3, [r2, #8]
 8002344:	e0cb      	b.n	80024de <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	f003 0320 	and.w	r3, r3, #32
 800234c:	2b00      	cmp	r3, #0
 800234e:	d009      	beq.n	8002364 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4413      	add	r3, r2
 8002358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800235c:	461a      	mov	r2, r3
 800235e:	2320      	movs	r3, #32
 8002360:	6093      	str	r3, [r2, #8]
 8002362:	e0bc      	b.n	80024de <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800236a:	2b00      	cmp	r3, #0
 800236c:	f040 80b7 	bne.w	80024de <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4a5d      	ldr	r2, [pc, #372]	; (80024e8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d90f      	bls.n	8002398 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	015a      	lsls	r2, r3, #5
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	4413      	add	r3, r2
 800238a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800238e:	461a      	mov	r2, r3
 8002390:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002394:	6093      	str	r3, [r2, #8]
 8002396:	e0a2      	b.n	80024de <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	4613      	mov	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	1a9b      	subs	r3, r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023aa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	0159      	lsls	r1, r3, #5
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	440b      	add	r3, r1
 80023b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80023be:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	4613      	mov	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	1a9b      	subs	r3, r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4403      	add	r3, r0
 80023ce:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80023d2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	4613      	mov	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	1a9b      	subs	r3, r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023e6:	6819      	ldr	r1, [r3, #0]
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	4613      	mov	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4403      	add	r3, r0
 80023f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4419      	add	r1, r3
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	4613      	mov	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4403      	add	r3, r0
 800240c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002410:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d114      	bne.n	8002442 <PCD_EP_OutXfrComplete_int+0x16a>
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	4613      	mov	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d108      	bne.n	8002442 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800243a:	461a      	mov	r2, r3
 800243c:	2101      	movs	r1, #1
 800243e:	f002 fa7f 	bl	8004940 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	4619      	mov	r1, r3
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f004 f905 	bl	8006658 <HAL_PCD_DataOutStageCallback>
 800244e:	e046      	b.n	80024de <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4a26      	ldr	r2, [pc, #152]	; (80024ec <PCD_EP_OutXfrComplete_int+0x214>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d124      	bne.n	80024a2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00a      	beq.n	8002478 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4413      	add	r3, r2
 800246a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800246e:	461a      	mov	r2, r3
 8002470:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002474:	6093      	str	r3, [r2, #8]
 8002476:	e032      	b.n	80024de <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f003 0320 	and.w	r3, r3, #32
 800247e:	2b00      	cmp	r3, #0
 8002480:	d008      	beq.n	8002494 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	015a      	lsls	r2, r3, #5
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4413      	add	r3, r2
 800248a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800248e:	461a      	mov	r2, r3
 8002490:	2320      	movs	r3, #32
 8002492:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	4619      	mov	r1, r3
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f004 f8dc 	bl	8006658 <HAL_PCD_DataOutStageCallback>
 80024a0:	e01d      	b.n	80024de <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d114      	bne.n	80024d2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	4613      	mov	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	1a9b      	subs	r3, r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d108      	bne.n	80024d2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024ca:	461a      	mov	r2, r3
 80024cc:	2100      	movs	r1, #0
 80024ce:	f002 fa37 	bl	8004940 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	4619      	mov	r1, r3
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f004 f8bd 	bl	8006658 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	4f54300a 	.word	0x4f54300a
 80024ec:	4f54310a 	.word	0x4f54310a

080024f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	333c      	adds	r3, #60	; 0x3c
 8002508:	3304      	adds	r3, #4
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4413      	add	r3, r2
 8002516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4a15      	ldr	r2, [pc, #84]	; (8002578 <PCD_EP_OutSetupPacket_int+0x88>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d90e      	bls.n	8002544 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800252c:	2b00      	cmp	r3, #0
 800252e:	d009      	beq.n	8002544 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4413      	add	r3, r2
 8002538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800253c:	461a      	mov	r2, r3
 800253e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002542:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f004 f875 	bl	8006634 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4a0a      	ldr	r2, [pc, #40]	; (8002578 <PCD_EP_OutSetupPacket_int+0x88>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d90c      	bls.n	800256c <PCD_EP_OutSetupPacket_int+0x7c>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d108      	bne.n	800256c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002564:	461a      	mov	r2, r3
 8002566:	2101      	movs	r1, #1
 8002568:	f002 f9ea 	bl	8004940 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	4f54300a 	.word	0x4f54300a

0800257c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	70fb      	strb	r3, [r7, #3]
 8002588:	4613      	mov	r3, r2
 800258a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002594:	78fb      	ldrb	r3, [r7, #3]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d107      	bne.n	80025aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800259a:	883b      	ldrh	r3, [r7, #0]
 800259c:	0419      	lsls	r1, r3, #16
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28
 80025a8:	e028      	b.n	80025fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b0:	0c1b      	lsrs	r3, r3, #16
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	4413      	add	r3, r2
 80025b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025b8:	2300      	movs	r3, #0
 80025ba:	73fb      	strb	r3, [r7, #15]
 80025bc:	e00d      	b.n	80025da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	3340      	adds	r3, #64	; 0x40
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	0c1b      	lsrs	r3, r3, #16
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	4413      	add	r3, r2
 80025d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	3301      	adds	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
 80025da:	7bfa      	ldrb	r2, [r7, #15]
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	3b01      	subs	r3, #1
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d3ec      	bcc.n	80025be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80025e4:	883b      	ldrh	r3, [r7, #0]
 80025e6:	0418      	lsls	r0, r3, #16
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6819      	ldr	r1, [r3, #0]
 80025ec:	78fb      	ldrb	r3, [r7, #3]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	4302      	orrs	r2, r0
 80025f4:	3340      	adds	r3, #64	; 0x40
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	887a      	ldrh	r2, [r7, #2]
 800261a:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08a      	sub	sp, #40	; 0x28
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e237      	b.n	8002aaa <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d050      	beq.n	80026e8 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002646:	4ba3      	ldr	r3, [pc, #652]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 030c 	and.w	r3, r3, #12
 800264e:	2b04      	cmp	r3, #4
 8002650:	d00c      	beq.n	800266c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002652:	4ba0      	ldr	r3, [pc, #640]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800265a:	2b08      	cmp	r3, #8
 800265c:	d112      	bne.n	8002684 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800265e:	4b9d      	ldr	r3, [pc, #628]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002666:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800266a:	d10b      	bne.n	8002684 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266c:	4b99      	ldr	r3, [pc, #612]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d036      	beq.n	80026e6 <HAL_RCC_OscConfig+0xbe>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d132      	bne.n	80026e6 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e212      	b.n	8002aaa <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	4b93      	ldr	r3, [pc, #588]	; (80028d8 <HAL_RCC_OscConfig+0x2b0>)
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d013      	beq.n	80026be <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002696:	f7fe fb81 	bl	8000d9c <HAL_GetTick>
 800269a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800269e:	f7fe fb7d 	bl	8000d9c <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b64      	cmp	r3, #100	; 0x64
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e1fc      	b.n	8002aaa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b0:	4b88      	ldr	r3, [pc, #544]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x76>
 80026bc:	e014      	b.n	80026e8 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026be:	f7fe fb6d 	bl	8000d9c <HAL_GetTick>
 80026c2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c6:	f7fe fb69 	bl	8000d9c <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b64      	cmp	r3, #100	; 0x64
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e1e8      	b.n	8002aaa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d8:	4b7e      	ldr	r3, [pc, #504]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1f0      	bne.n	80026c6 <HAL_RCC_OscConfig+0x9e>
 80026e4:	e000      	b.n	80026e8 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d077      	beq.n	80027e4 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026f4:	4b77      	ldr	r3, [pc, #476]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 030c 	and.w	r3, r3, #12
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00b      	beq.n	8002718 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002700:	4b74      	ldr	r3, [pc, #464]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002708:	2b08      	cmp	r3, #8
 800270a:	d126      	bne.n	800275a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800270c:	4b71      	ldr	r3, [pc, #452]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d120      	bne.n	800275a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002718:	4b6e      	ldr	r3, [pc, #440]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <HAL_RCC_OscConfig+0x108>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d001      	beq.n	8002730 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e1bc      	b.n	8002aaa <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002730:	4b68      	ldr	r3, [pc, #416]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	21f8      	movs	r1, #248	; 0xf8
 800273e:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	69b9      	ldr	r1, [r7, #24]
 8002742:	fa91 f1a1 	rbit	r1, r1
 8002746:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002748:	6979      	ldr	r1, [r7, #20]
 800274a:	fab1 f181 	clz	r1, r1
 800274e:	b2c9      	uxtb	r1, r1
 8002750:	408b      	lsls	r3, r1
 8002752:	4960      	ldr	r1, [pc, #384]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 8002754:	4313      	orrs	r3, r2
 8002756:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002758:	e044      	b.n	80027e4 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d02a      	beq.n	80027b8 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002762:	4b5e      	ldr	r3, [pc, #376]	; (80028dc <HAL_RCC_OscConfig+0x2b4>)
 8002764:	2201      	movs	r2, #1
 8002766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002768:	f7fe fb18 	bl	8000d9c <HAL_GetTick>
 800276c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002770:	f7fe fb14 	bl	8000d9c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e193      	b.n	8002aaa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002782:	4b54      	ldr	r3, [pc, #336]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278e:	4b51      	ldr	r3, [pc, #324]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	21f8      	movs	r1, #248	; 0xf8
 800279c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	6939      	ldr	r1, [r7, #16]
 80027a0:	fa91 f1a1 	rbit	r1, r1
 80027a4:	60f9      	str	r1, [r7, #12]
  return result;
 80027a6:	68f9      	ldr	r1, [r7, #12]
 80027a8:	fab1 f181 	clz	r1, r1
 80027ac:	b2c9      	uxtb	r1, r1
 80027ae:	408b      	lsls	r3, r1
 80027b0:	4948      	ldr	r1, [pc, #288]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	600b      	str	r3, [r1, #0]
 80027b6:	e015      	b.n	80027e4 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b8:	4b48      	ldr	r3, [pc, #288]	; (80028dc <HAL_RCC_OscConfig+0x2b4>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027be:	f7fe faed 	bl	8000d9c <HAL_GetTick>
 80027c2:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027c6:	f7fe fae9 	bl	8000d9c <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e168      	b.n	8002aaa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d8:	4b3e      	ldr	r3, [pc, #248]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f0      	bne.n	80027c6 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d030      	beq.n	8002852 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d016      	beq.n	8002826 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f8:	4b39      	ldr	r3, [pc, #228]	; (80028e0 <HAL_RCC_OscConfig+0x2b8>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fe:	f7fe facd 	bl	8000d9c <HAL_GetTick>
 8002802:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002806:	f7fe fac9 	bl	8000d9c <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e148      	b.n	8002aaa <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002818:	4b2e      	ldr	r3, [pc, #184]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 800281a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0f0      	beq.n	8002806 <HAL_RCC_OscConfig+0x1de>
 8002824:	e015      	b.n	8002852 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002826:	4b2e      	ldr	r3, [pc, #184]	; (80028e0 <HAL_RCC_OscConfig+0x2b8>)
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282c:	f7fe fab6 	bl	8000d9c <HAL_GetTick>
 8002830:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002834:	f7fe fab2 	bl	8000d9c <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e131      	b.n	8002aaa <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002846:	4b23      	ldr	r3, [pc, #140]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 8002848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 8088 	beq.w	8002970 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002860:	2300      	movs	r3, #0
 8002862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002866:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d110      	bne.n	8002894 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	4b17      	ldr	r3, [pc, #92]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	4a16      	ldr	r2, [pc, #88]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 800287c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002880:	6413      	str	r3, [r2, #64]	; 0x40
 8002882:	4b14      	ldr	r3, [pc, #80]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800288e:	2301      	movs	r3, #1
 8002890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002894:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <HAL_RCC_OscConfig+0x2bc>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a12      	ldr	r2, [pc, #72]	; (80028e4 <HAL_RCC_OscConfig+0x2bc>)
 800289a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a0:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <HAL_RCC_OscConfig+0x2bc>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d123      	bne.n	80028f4 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ac:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <HAL_RCC_OscConfig+0x2bc>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a0c      	ldr	r2, [pc, #48]	; (80028e4 <HAL_RCC_OscConfig+0x2bc>)
 80028b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b8:	f7fe fa70 	bl	8000d9c <HAL_GetTick>
 80028bc:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028be:	e013      	b.n	80028e8 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c0:	f7fe fa6c 	bl	8000d9c <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d90c      	bls.n	80028e8 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e0eb      	b.n	8002aaa <HAL_RCC_OscConfig+0x482>
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40023802 	.word	0x40023802
 80028dc:	42470000 	.word	0x42470000
 80028e0:	42470e80 	.word	0x42470e80
 80028e4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e8:	4b72      	ldr	r3, [pc, #456]	; (8002ab4 <HAL_RCC_OscConfig+0x48c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0e5      	beq.n	80028c0 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	4b6f      	ldr	r3, [pc, #444]	; (8002ab8 <HAL_RCC_OscConfig+0x490>)
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d015      	beq.n	8002932 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002906:	f7fe fa49 	bl	8000d9c <HAL_GetTick>
 800290a:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290c:	e00a      	b.n	8002924 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800290e:	f7fe fa45 	bl	8000d9c <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	f241 3288 	movw	r2, #5000	; 0x1388
 800291c:	4293      	cmp	r3, r2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e0c2      	b.n	8002aaa <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002924:	4b65      	ldr	r3, [pc, #404]	; (8002abc <HAL_RCC_OscConfig+0x494>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0ee      	beq.n	800290e <HAL_RCC_OscConfig+0x2e6>
 8002930:	e014      	b.n	800295c <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002932:	f7fe fa33 	bl	8000d9c <HAL_GetTick>
 8002936:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002938:	e00a      	b.n	8002950 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800293a:	f7fe fa2f 	bl	8000d9c <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	f241 3288 	movw	r2, #5000	; 0x1388
 8002948:	4293      	cmp	r3, r2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e0ac      	b.n	8002aaa <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002950:	4b5a      	ldr	r3, [pc, #360]	; (8002abc <HAL_RCC_OscConfig+0x494>)
 8002952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1ee      	bne.n	800293a <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800295c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002960:	2b01      	cmp	r3, #1
 8002962:	d105      	bne.n	8002970 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002964:	4b55      	ldr	r3, [pc, #340]	; (8002abc <HAL_RCC_OscConfig+0x494>)
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	4a54      	ldr	r2, [pc, #336]	; (8002abc <HAL_RCC_OscConfig+0x494>)
 800296a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800296e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 8097 	beq.w	8002aa8 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800297a:	4b50      	ldr	r3, [pc, #320]	; (8002abc <HAL_RCC_OscConfig+0x494>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b08      	cmp	r3, #8
 8002984:	d061      	beq.n	8002a4a <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d146      	bne.n	8002a1c <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298e:	4b4c      	ldr	r3, [pc, #304]	; (8002ac0 <HAL_RCC_OscConfig+0x498>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002994:	f7fe fa02 	bl	8000d9c <HAL_GetTick>
 8002998:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800299c:	f7fe f9fe 	bl	8000d9c <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b64      	cmp	r3, #100	; 0x64
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e07d      	b.n	8002aaa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ae:	4b43      	ldr	r3, [pc, #268]	; (8002abc <HAL_RCC_OscConfig+0x494>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ba:	4b40      	ldr	r3, [pc, #256]	; (8002abc <HAL_RCC_OscConfig+0x494>)
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	4b41      	ldr	r3, [pc, #260]	; (8002ac4 <HAL_RCC_OscConfig+0x49c>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	69d1      	ldr	r1, [r2, #28]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6a12      	ldr	r2, [r2, #32]
 80029ca:	4311      	orrs	r1, r2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029d0:	0192      	lsls	r2, r2, #6
 80029d2:	4311      	orrs	r1, r2
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029d8:	0612      	lsls	r2, r2, #24
 80029da:	4311      	orrs	r1, r2
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80029e0:	0852      	lsrs	r2, r2, #1
 80029e2:	3a01      	subs	r2, #1
 80029e4:	0412      	lsls	r2, r2, #16
 80029e6:	430a      	orrs	r2, r1
 80029e8:	4934      	ldr	r1, [pc, #208]	; (8002abc <HAL_RCC_OscConfig+0x494>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029ee:	4b34      	ldr	r3, [pc, #208]	; (8002ac0 <HAL_RCC_OscConfig+0x498>)
 80029f0:	2201      	movs	r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7fe f9d2 	bl	8000d9c <HAL_GetTick>
 80029f8:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029fc:	f7fe f9ce 	bl	8000d9c <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	6a3b      	ldr	r3, [r7, #32]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b64      	cmp	r3, #100	; 0x64
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e04d      	b.n	8002aaa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a0e:	4b2b      	ldr	r3, [pc, #172]	; (8002abc <HAL_RCC_OscConfig+0x494>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x3d4>
 8002a1a:	e045      	b.n	8002aa8 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1c:	4b28      	ldr	r3, [pc, #160]	; (8002ac0 <HAL_RCC_OscConfig+0x498>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a22:	f7fe f9bb 	bl	8000d9c <HAL_GetTick>
 8002a26:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a2a:	f7fe f9b7 	bl	8000d9c <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b64      	cmp	r3, #100	; 0x64
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e036      	b.n	8002aaa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3c:	4b1f      	ldr	r3, [pc, #124]	; (8002abc <HAL_RCC_OscConfig+0x494>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1f0      	bne.n	8002a2a <HAL_RCC_OscConfig+0x402>
 8002a48:	e02e      	b.n	8002aa8 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d101      	bne.n	8002a56 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e029      	b.n	8002aaa <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002a56:	4b19      	ldr	r3, [pc, #100]	; (8002abc <HAL_RCC_OscConfig+0x494>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d11c      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d115      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	099b      	lsrs	r3, r3, #6
 8002a7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d10d      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d106      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3728      	adds	r7, #40	; 0x28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40007000 	.word	0x40007000
 8002ab8:	40023870 	.word	0x40023870
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	42470060 	.word	0x42470060
 8002ac4:	f0bc8000 	.word	0xf0bc8000

08002ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0d2      	b.n	8002c82 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002adc:	4b6b      	ldr	r3, [pc, #428]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 030f 	and.w	r3, r3, #15
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d90c      	bls.n	8002b04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aea:	4b68      	ldr	r3, [pc, #416]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af2:	4b66      	ldr	r3, [pc, #408]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0be      	b.n	8002c82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d020      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b1c:	4b5c      	ldr	r3, [pc, #368]	; (8002c90 <HAL_RCC_ClockConfig+0x1c8>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	4a5b      	ldr	r2, [pc, #364]	; (8002c90 <HAL_RCC_ClockConfig+0x1c8>)
 8002b22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002b34:	4b56      	ldr	r3, [pc, #344]	; (8002c90 <HAL_RCC_ClockConfig+0x1c8>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	4a55      	ldr	r2, [pc, #340]	; (8002c90 <HAL_RCC_ClockConfig+0x1c8>)
 8002b3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b40:	4b53      	ldr	r3, [pc, #332]	; (8002c90 <HAL_RCC_ClockConfig+0x1c8>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	4950      	ldr	r1, [pc, #320]	; (8002c90 <HAL_RCC_ClockConfig+0x1c8>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d040      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d107      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b66:	4b4a      	ldr	r3, [pc, #296]	; (8002c90 <HAL_RCC_ClockConfig+0x1c8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d115      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e085      	b.n	8002c82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d107      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7e:	4b44      	ldr	r3, [pc, #272]	; (8002c90 <HAL_RCC_ClockConfig+0x1c8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e079      	b.n	8002c82 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8e:	4b40      	ldr	r3, [pc, #256]	; (8002c90 <HAL_RCC_ClockConfig+0x1c8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e071      	b.n	8002c82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b9e:	4b3c      	ldr	r3, [pc, #240]	; (8002c90 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f023 0203 	bic.w	r2, r3, #3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	4939      	ldr	r1, [pc, #228]	; (8002c90 <HAL_RCC_ClockConfig+0x1c8>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb0:	f7fe f8f4 	bl	8000d9c <HAL_GetTick>
 8002bb4:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb6:	e00a      	b.n	8002bce <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb8:	f7fe f8f0 	bl	8000d9c <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e059      	b.n	8002c82 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bce:	4b30      	ldr	r3, [pc, #192]	; (8002c90 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 020c 	and.w	r2, r3, #12
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d1eb      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002be0:	4b2a      	ldr	r3, [pc, #168]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d20c      	bcs.n	8002c08 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bee:	4b27      	ldr	r3, [pc, #156]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf6:	4b25      	ldr	r3, [pc, #148]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e03c      	b.n	8002c82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c14:	4b1e      	ldr	r3, [pc, #120]	; (8002c90 <HAL_RCC_ClockConfig+0x1c8>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	491b      	ldr	r1, [pc, #108]	; (8002c90 <HAL_RCC_ClockConfig+0x1c8>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d009      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c32:	4b17      	ldr	r3, [pc, #92]	; (8002c90 <HAL_RCC_ClockConfig+0x1c8>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4913      	ldr	r1, [pc, #76]	; (8002c90 <HAL_RCC_ClockConfig+0x1c8>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002c46:	f000 f82b 	bl	8002ca0 <HAL_RCC_GetSysClockFreq>
 8002c4a:	4601      	mov	r1, r0
 8002c4c:	4b10      	ldr	r3, [pc, #64]	; (8002c90 <HAL_RCC_ClockConfig+0x1c8>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c54:	22f0      	movs	r2, #240	; 0xf0
 8002c56:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	fa92 f2a2 	rbit	r2, r2
 8002c5e:	60fa      	str	r2, [r7, #12]
  return result;
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	fab2 f282 	clz	r2, r2
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	40d3      	lsrs	r3, r2
 8002c6a:	4a0a      	ldr	r2, [pc, #40]	; (8002c94 <HAL_RCC_ClockConfig+0x1cc>)
 8002c6c:	5cd3      	ldrb	r3, [r2, r3]
 8002c6e:	fa21 f303 	lsr.w	r3, r1, r3
 8002c72:	4a09      	ldr	r2, [pc, #36]	; (8002c98 <HAL_RCC_ClockConfig+0x1d0>)
 8002c74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c76:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <HAL_RCC_ClockConfig+0x1d4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fe f84c 	bl	8000d18 <HAL_InitTick>

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023c00 	.word	0x40023c00
 8002c90:	40023800 	.word	0x40023800
 8002c94:	08006e40 	.word	0x08006e40
 8002c98:	20000000 	.word	0x20000000
 8002c9c:	20000004 	.word	0x20000004

08002ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	607b      	str	r3, [r7, #4]
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cb6:	4b63      	ldr	r3, [pc, #396]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d007      	beq.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x32>
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d008      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x38>
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f040 80b4 	bne.w	8002e34 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ccc:	4b5e      	ldr	r3, [pc, #376]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002cce:	60bb      	str	r3, [r7, #8]
       break;
 8002cd0:	e0b3      	b.n	8002e3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cd2:	4b5e      	ldr	r3, [pc, #376]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002cd4:	60bb      	str	r3, [r7, #8]
      break;
 8002cd6:	e0b0      	b.n	8002e3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cd8:	4b5a      	ldr	r3, [pc, #360]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ce0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ce2:	4b58      	ldr	r3, [pc, #352]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d04a      	beq.n	8002d84 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cee:	4b55      	ldr	r3, [pc, #340]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	099b      	lsrs	r3, r3, #6
 8002cf4:	f04f 0400 	mov.w	r4, #0
 8002cf8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	ea03 0501 	and.w	r5, r3, r1
 8002d04:	ea04 0602 	and.w	r6, r4, r2
 8002d08:	4629      	mov	r1, r5
 8002d0a:	4632      	mov	r2, r6
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	f04f 0400 	mov.w	r4, #0
 8002d14:	0154      	lsls	r4, r2, #5
 8002d16:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d1a:	014b      	lsls	r3, r1, #5
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4622      	mov	r2, r4
 8002d20:	1b49      	subs	r1, r1, r5
 8002d22:	eb62 0206 	sbc.w	r2, r2, r6
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	f04f 0400 	mov.w	r4, #0
 8002d2e:	0194      	lsls	r4, r2, #6
 8002d30:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d34:	018b      	lsls	r3, r1, #6
 8002d36:	1a5b      	subs	r3, r3, r1
 8002d38:	eb64 0402 	sbc.w	r4, r4, r2
 8002d3c:	f04f 0100 	mov.w	r1, #0
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	00e2      	lsls	r2, r4, #3
 8002d46:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d4a:	00d9      	lsls	r1, r3, #3
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4614      	mov	r4, r2
 8002d50:	195b      	adds	r3, r3, r5
 8002d52:	eb44 0406 	adc.w	r4, r4, r6
 8002d56:	f04f 0100 	mov.w	r1, #0
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	0262      	lsls	r2, r4, #9
 8002d60:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002d64:	0259      	lsls	r1, r3, #9
 8002d66:	460b      	mov	r3, r1
 8002d68:	4614      	mov	r4, r2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	4621      	mov	r1, r4
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f04f 0400 	mov.w	r4, #0
 8002d74:	461a      	mov	r2, r3
 8002d76:	4623      	mov	r3, r4
 8002d78:	f7fd fa2c 	bl	80001d4 <__aeabi_uldivmod>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	460c      	mov	r4, r1
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	e049      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d84:	4b2f      	ldr	r3, [pc, #188]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	099b      	lsrs	r3, r3, #6
 8002d8a:	f04f 0400 	mov.w	r4, #0
 8002d8e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	ea03 0501 	and.w	r5, r3, r1
 8002d9a:	ea04 0602 	and.w	r6, r4, r2
 8002d9e:	4629      	mov	r1, r5
 8002da0:	4632      	mov	r2, r6
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	f04f 0400 	mov.w	r4, #0
 8002daa:	0154      	lsls	r4, r2, #5
 8002dac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002db0:	014b      	lsls	r3, r1, #5
 8002db2:	4619      	mov	r1, r3
 8002db4:	4622      	mov	r2, r4
 8002db6:	1b49      	subs	r1, r1, r5
 8002db8:	eb62 0206 	sbc.w	r2, r2, r6
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	f04f 0400 	mov.w	r4, #0
 8002dc4:	0194      	lsls	r4, r2, #6
 8002dc6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002dca:	018b      	lsls	r3, r1, #6
 8002dcc:	1a5b      	subs	r3, r3, r1
 8002dce:	eb64 0402 	sbc.w	r4, r4, r2
 8002dd2:	f04f 0100 	mov.w	r1, #0
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	00e2      	lsls	r2, r4, #3
 8002ddc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002de0:	00d9      	lsls	r1, r3, #3
 8002de2:	460b      	mov	r3, r1
 8002de4:	4614      	mov	r4, r2
 8002de6:	195b      	adds	r3, r3, r5
 8002de8:	eb44 0406 	adc.w	r4, r4, r6
 8002dec:	f04f 0100 	mov.w	r1, #0
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	02a2      	lsls	r2, r4, #10
 8002df6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002dfa:	0299      	lsls	r1, r3, #10
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4614      	mov	r4, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	4621      	mov	r1, r4
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f04f 0400 	mov.w	r4, #0
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	4623      	mov	r3, r4
 8002e0e:	f7fd f9e1 	bl	80001d4 <__aeabi_uldivmod>
 8002e12:	4603      	mov	r3, r0
 8002e14:	460c      	mov	r4, r1
 8002e16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e18:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	0c1b      	lsrs	r3, r3, #16
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	3301      	adds	r3, #1
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e30:	60bb      	str	r3, [r7, #8]
      break;
 8002e32:	e002      	b.n	8002e3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e34:	4b04      	ldr	r3, [pc, #16]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e36:	60bb      	str	r3, [r7, #8]
      break;
 8002e38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e44:	40023800 	.word	0x40023800
 8002e48:	00f42400 	.word	0x00f42400
 8002e4c:	007a1200 	.word	0x007a1200

08002e50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e54:	4b02      	ldr	r3, [pc, #8]	; (8002e60 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e56:	681b      	ldr	r3, [r3, #0]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr
 8002e60:	20000000 	.word	0x20000000

08002e64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e041      	b.n	8002efa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fd fe0c 	bl	8000aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	f000 f9d2 	bl	800324c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d001      	beq.n	8002f1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e04e      	b.n	8002fba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0201 	orr.w	r2, r2, #1
 8002f32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a22      	ldr	r2, [pc, #136]	; (8002fc4 <HAL_TIM_Base_Start_IT+0xc0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d022      	beq.n	8002f84 <HAL_TIM_Base_Start_IT+0x80>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f46:	d01d      	beq.n	8002f84 <HAL_TIM_Base_Start_IT+0x80>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a1e      	ldr	r2, [pc, #120]	; (8002fc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d018      	beq.n	8002f84 <HAL_TIM_Base_Start_IT+0x80>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a1d      	ldr	r2, [pc, #116]	; (8002fcc <HAL_TIM_Base_Start_IT+0xc8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d013      	beq.n	8002f84 <HAL_TIM_Base_Start_IT+0x80>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a1b      	ldr	r2, [pc, #108]	; (8002fd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d00e      	beq.n	8002f84 <HAL_TIM_Base_Start_IT+0x80>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a1a      	ldr	r2, [pc, #104]	; (8002fd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d009      	beq.n	8002f84 <HAL_TIM_Base_Start_IT+0x80>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a18      	ldr	r2, [pc, #96]	; (8002fd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d004      	beq.n	8002f84 <HAL_TIM_Base_Start_IT+0x80>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a17      	ldr	r2, [pc, #92]	; (8002fdc <HAL_TIM_Base_Start_IT+0xd8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d111      	bne.n	8002fa8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2b06      	cmp	r3, #6
 8002f94:	d010      	beq.n	8002fb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 0201 	orr.w	r2, r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa6:	e007      	b.n	8002fb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0201 	orr.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr
 8002fc4:	40010000 	.word	0x40010000
 8002fc8:	40000400 	.word	0x40000400
 8002fcc:	40000800 	.word	0x40000800
 8002fd0:	40000c00 	.word	0x40000c00
 8002fd4:	40010400 	.word	0x40010400
 8002fd8:	40014000 	.word	0x40014000
 8002fdc:	40001800 	.word	0x40001800

08002fe0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d122      	bne.n	800303c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b02      	cmp	r3, #2
 8003002:	d11b      	bne.n	800303c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0202 	mvn.w	r2, #2
 800300c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f8f6 	bl	8003214 <HAL_TIM_IC_CaptureCallback>
 8003028:	e005      	b.n	8003036 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f8e9 	bl	8003202 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f8f8 	bl	8003226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b04      	cmp	r3, #4
 8003048:	d122      	bne.n	8003090 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b04      	cmp	r3, #4
 8003056:	d11b      	bne.n	8003090 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0204 	mvn.w	r2, #4
 8003060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2202      	movs	r2, #2
 8003066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f8cc 	bl	8003214 <HAL_TIM_IC_CaptureCallback>
 800307c:	e005      	b.n	800308a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f8bf 	bl	8003202 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f8ce 	bl	8003226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b08      	cmp	r3, #8
 800309c:	d122      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d11b      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0208 	mvn.w	r2, #8
 80030b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2204      	movs	r2, #4
 80030ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f8a2 	bl	8003214 <HAL_TIM_IC_CaptureCallback>
 80030d0:	e005      	b.n	80030de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f895 	bl	8003202 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f8a4 	bl	8003226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f003 0310 	and.w	r3, r3, #16
 80030ee:	2b10      	cmp	r3, #16
 80030f0:	d122      	bne.n	8003138 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b10      	cmp	r3, #16
 80030fe:	d11b      	bne.n	8003138 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0210 	mvn.w	r2, #16
 8003108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2208      	movs	r2, #8
 800310e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f878 	bl	8003214 <HAL_TIM_IC_CaptureCallback>
 8003124:	e005      	b.n	8003132 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f86b 	bl	8003202 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f87a 	bl	8003226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b01      	cmp	r3, #1
 8003144:	d10e      	bne.n	8003164 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b01      	cmp	r3, #1
 8003152:	d107      	bne.n	8003164 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f06f 0201 	mvn.w	r2, #1
 800315c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f846 	bl	80031f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316e:	2b80      	cmp	r3, #128	; 0x80
 8003170:	d10e      	bne.n	8003190 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317c:	2b80      	cmp	r3, #128	; 0x80
 800317e:	d107      	bne.n	8003190 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f905 	bl	800339a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319a:	2b40      	cmp	r3, #64	; 0x40
 800319c:	d10e      	bne.n	80031bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a8:	2b40      	cmp	r3, #64	; 0x40
 80031aa:	d107      	bne.n	80031bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f83e 	bl	8003238 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f003 0320 	and.w	r3, r3, #32
 80031c6:	2b20      	cmp	r3, #32
 80031c8:	d10e      	bne.n	80031e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f003 0320 	and.w	r3, r3, #32
 80031d4:	2b20      	cmp	r3, #32
 80031d6:	d107      	bne.n	80031e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f06f 0220 	mvn.w	r2, #32
 80031e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f8d0 	bl	8003388 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031e8:	bf00      	nop
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr

08003202 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	bc80      	pop	{r7}
 8003224:	4770      	bx	lr

08003226 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr

08003238 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr
	...

0800324c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a3f      	ldr	r2, [pc, #252]	; (800335c <TIM_Base_SetConfig+0x110>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d013      	beq.n	800328c <TIM_Base_SetConfig+0x40>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326a:	d00f      	beq.n	800328c <TIM_Base_SetConfig+0x40>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a3c      	ldr	r2, [pc, #240]	; (8003360 <TIM_Base_SetConfig+0x114>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d00b      	beq.n	800328c <TIM_Base_SetConfig+0x40>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a3b      	ldr	r2, [pc, #236]	; (8003364 <TIM_Base_SetConfig+0x118>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d007      	beq.n	800328c <TIM_Base_SetConfig+0x40>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a3a      	ldr	r2, [pc, #232]	; (8003368 <TIM_Base_SetConfig+0x11c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d003      	beq.n	800328c <TIM_Base_SetConfig+0x40>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a39      	ldr	r2, [pc, #228]	; (800336c <TIM_Base_SetConfig+0x120>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d108      	bne.n	800329e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a2e      	ldr	r2, [pc, #184]	; (800335c <TIM_Base_SetConfig+0x110>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d02b      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ac:	d027      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a2b      	ldr	r2, [pc, #172]	; (8003360 <TIM_Base_SetConfig+0x114>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d023      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a2a      	ldr	r2, [pc, #168]	; (8003364 <TIM_Base_SetConfig+0x118>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d01f      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a29      	ldr	r2, [pc, #164]	; (8003368 <TIM_Base_SetConfig+0x11c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d01b      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a28      	ldr	r2, [pc, #160]	; (800336c <TIM_Base_SetConfig+0x120>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d017      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a27      	ldr	r2, [pc, #156]	; (8003370 <TIM_Base_SetConfig+0x124>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d013      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a26      	ldr	r2, [pc, #152]	; (8003374 <TIM_Base_SetConfig+0x128>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d00f      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a25      	ldr	r2, [pc, #148]	; (8003378 <TIM_Base_SetConfig+0x12c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00b      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a24      	ldr	r2, [pc, #144]	; (800337c <TIM_Base_SetConfig+0x130>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d007      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a23      	ldr	r2, [pc, #140]	; (8003380 <TIM_Base_SetConfig+0x134>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d003      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a22      	ldr	r2, [pc, #136]	; (8003384 <TIM_Base_SetConfig+0x138>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d108      	bne.n	8003310 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003304:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	4313      	orrs	r3, r2
 800330e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a09      	ldr	r2, [pc, #36]	; (800335c <TIM_Base_SetConfig+0x110>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d003      	beq.n	8003344 <TIM_Base_SetConfig+0xf8>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a0b      	ldr	r2, [pc, #44]	; (800336c <TIM_Base_SetConfig+0x120>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d103      	bne.n	800334c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	615a      	str	r2, [r3, #20]
}
 8003352:	bf00      	nop
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr
 800335c:	40010000 	.word	0x40010000
 8003360:	40000400 	.word	0x40000400
 8003364:	40000800 	.word	0x40000800
 8003368:	40000c00 	.word	0x40000c00
 800336c:	40010400 	.word	0x40010400
 8003370:	40014000 	.word	0x40014000
 8003374:	40014400 	.word	0x40014400
 8003378:	40014800 	.word	0x40014800
 800337c:	40001800 	.word	0x40001800
 8003380:	40001c00 	.word	0x40001c00
 8003384:	40002000 	.word	0x40002000

08003388 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr

0800339a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr

080033ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80033ac:	b084      	sub	sp, #16
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b084      	sub	sp, #16
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	f107 001c 	add.w	r0, r7, #28
 80033ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80033be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d122      	bne.n	800340a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80033d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80033ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d105      	bne.n	80033fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f001 fafa 	bl	80049f8 <USB_CoreReset>
 8003404:	4603      	mov	r3, r0
 8003406:	73fb      	strb	r3, [r7, #15]
 8003408:	e010      	b.n	800342c <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f001 faee 	bl	80049f8 <USB_CoreReset>
 800341c:	4603      	mov	r3, r0
 800341e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003424:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800342c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342e:	2b01      	cmp	r3, #1
 8003430:	d10b      	bne.n	800344a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f043 0206 	orr.w	r2, r3, #6
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f043 0220 	orr.w	r2, r3, #32
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800344a:	7bfb      	ldrb	r3, [r7, #15]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003456:	b004      	add	sp, #16
 8003458:	4770      	bx	lr
	...

0800345c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800345c:	b480      	push	{r7}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	4613      	mov	r3, r2
 8003468:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d165      	bne.n	800353c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	4a41      	ldr	r2, [pc, #260]	; (8003578 <USB_SetTurnaroundTime+0x11c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d906      	bls.n	8003486 <USB_SetTurnaroundTime+0x2a>
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	4a40      	ldr	r2, [pc, #256]	; (800357c <USB_SetTurnaroundTime+0x120>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d802      	bhi.n	8003486 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003480:	230f      	movs	r3, #15
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	e062      	b.n	800354c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	4a3c      	ldr	r2, [pc, #240]	; (800357c <USB_SetTurnaroundTime+0x120>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d906      	bls.n	800349c <USB_SetTurnaroundTime+0x40>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	4a3b      	ldr	r2, [pc, #236]	; (8003580 <USB_SetTurnaroundTime+0x124>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d802      	bhi.n	800349c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003496:	230e      	movs	r3, #14
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	e057      	b.n	800354c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4a38      	ldr	r2, [pc, #224]	; (8003580 <USB_SetTurnaroundTime+0x124>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d906      	bls.n	80034b2 <USB_SetTurnaroundTime+0x56>
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	4a37      	ldr	r2, [pc, #220]	; (8003584 <USB_SetTurnaroundTime+0x128>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d802      	bhi.n	80034b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80034ac:	230d      	movs	r3, #13
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	e04c      	b.n	800354c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	4a33      	ldr	r2, [pc, #204]	; (8003584 <USB_SetTurnaroundTime+0x128>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d906      	bls.n	80034c8 <USB_SetTurnaroundTime+0x6c>
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	4a32      	ldr	r2, [pc, #200]	; (8003588 <USB_SetTurnaroundTime+0x12c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d802      	bhi.n	80034c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80034c2:	230c      	movs	r3, #12
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	e041      	b.n	800354c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	4a2f      	ldr	r2, [pc, #188]	; (8003588 <USB_SetTurnaroundTime+0x12c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d906      	bls.n	80034de <USB_SetTurnaroundTime+0x82>
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	4a2e      	ldr	r2, [pc, #184]	; (800358c <USB_SetTurnaroundTime+0x130>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d802      	bhi.n	80034de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80034d8:	230b      	movs	r3, #11
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	e036      	b.n	800354c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	4a2a      	ldr	r2, [pc, #168]	; (800358c <USB_SetTurnaroundTime+0x130>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d906      	bls.n	80034f4 <USB_SetTurnaroundTime+0x98>
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	4a29      	ldr	r2, [pc, #164]	; (8003590 <USB_SetTurnaroundTime+0x134>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d802      	bhi.n	80034f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80034ee:	230a      	movs	r3, #10
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	e02b      	b.n	800354c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4a26      	ldr	r2, [pc, #152]	; (8003590 <USB_SetTurnaroundTime+0x134>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d906      	bls.n	800350a <USB_SetTurnaroundTime+0xae>
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4a25      	ldr	r2, [pc, #148]	; (8003594 <USB_SetTurnaroundTime+0x138>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d802      	bhi.n	800350a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003504:	2309      	movs	r3, #9
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	e020      	b.n	800354c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	4a21      	ldr	r2, [pc, #132]	; (8003594 <USB_SetTurnaroundTime+0x138>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d906      	bls.n	8003520 <USB_SetTurnaroundTime+0xc4>
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	4a20      	ldr	r2, [pc, #128]	; (8003598 <USB_SetTurnaroundTime+0x13c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d802      	bhi.n	8003520 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800351a:	2308      	movs	r3, #8
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	e015      	b.n	800354c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4a1d      	ldr	r2, [pc, #116]	; (8003598 <USB_SetTurnaroundTime+0x13c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d906      	bls.n	8003536 <USB_SetTurnaroundTime+0xda>
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4a1c      	ldr	r2, [pc, #112]	; (800359c <USB_SetTurnaroundTime+0x140>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d802      	bhi.n	8003536 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003530:	2307      	movs	r3, #7
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	e00a      	b.n	800354c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003536:	2306      	movs	r3, #6
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	e007      	b.n	800354c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800353c:	79fb      	ldrb	r3, [r7, #7]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d102      	bne.n	8003548 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003542:	2309      	movs	r3, #9
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	e001      	b.n	800354c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003548:	2309      	movs	r3, #9
 800354a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	029b      	lsls	r3, r3, #10
 8003560:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003564:	431a      	orrs	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	371c      	adds	r7, #28
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	00d8acbf 	.word	0x00d8acbf
 800357c:	00e4e1bf 	.word	0x00e4e1bf
 8003580:	00f423ff 	.word	0x00f423ff
 8003584:	0106737f 	.word	0x0106737f
 8003588:	011a499f 	.word	0x011a499f
 800358c:	01312cff 	.word	0x01312cff
 8003590:	014ca43f 	.word	0x014ca43f
 8003594:	016e35ff 	.word	0x016e35ff
 8003598:	01a6ab1f 	.word	0x01a6ab1f
 800359c:	01e847ff 	.word	0x01e847ff

080035a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f043 0201 	orr.w	r2, r3, #1
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr

080035c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f023 0201 	bic.w	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr

080035e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80035fc:	78fb      	ldrb	r3, [r7, #3]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d115      	bne.n	800362e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800360e:	2001      	movs	r0, #1
 8003610:	f7fd fbce 	bl	8000db0 <HAL_Delay>
      ms++;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	3301      	adds	r3, #1
 8003618:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f001 f961 	bl	80048e2 <USB_GetMode>
 8003620:	4603      	mov	r3, r0
 8003622:	2b01      	cmp	r3, #1
 8003624:	d01e      	beq.n	8003664 <USB_SetCurrentMode+0x84>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2b31      	cmp	r3, #49	; 0x31
 800362a:	d9f0      	bls.n	800360e <USB_SetCurrentMode+0x2e>
 800362c:	e01a      	b.n	8003664 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800362e:	78fb      	ldrb	r3, [r7, #3]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d115      	bne.n	8003660 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003640:	2001      	movs	r0, #1
 8003642:	f7fd fbb5 	bl	8000db0 <HAL_Delay>
      ms++;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	3301      	adds	r3, #1
 800364a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f001 f948 	bl	80048e2 <USB_GetMode>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <USB_SetCurrentMode+0x84>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2b31      	cmp	r3, #49	; 0x31
 800365c:	d9f0      	bls.n	8003640 <USB_SetCurrentMode+0x60>
 800365e:	e001      	b.n	8003664 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e005      	b.n	8003670 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2b32      	cmp	r3, #50	; 0x32
 8003668:	d101      	bne.n	800366e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003678:	b084      	sub	sp, #16
 800367a:	b580      	push	{r7, lr}
 800367c:	b086      	sub	sp, #24
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003686:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003692:	2300      	movs	r3, #0
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	e009      	b.n	80036ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	3340      	adds	r3, #64	; 0x40
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	2200      	movs	r2, #0
 80036a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	3301      	adds	r3, #1
 80036aa:	613b      	str	r3, [r7, #16]
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	2b0e      	cmp	r3, #14
 80036b0:	d9f2      	bls.n	8003698 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80036b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d11c      	bne.n	80036f2 <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036c6:	f043 0302 	orr.w	r3, r3, #2
 80036ca:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036dc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	639a      	str	r2, [r3, #56]	; 0x38
 80036f0:	e00b      	b.n	800370a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003702:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003710:	461a      	mov	r2, r3
 8003712:	2300      	movs	r3, #0
 8003714:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800371c:	4619      	mov	r1, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003724:	461a      	mov	r2, r3
 8003726:	680b      	ldr	r3, [r1, #0]
 8003728:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800372a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372c:	2b01      	cmp	r3, #1
 800372e:	d10c      	bne.n	800374a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003732:	2b00      	cmp	r3, #0
 8003734:	d104      	bne.n	8003740 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003736:	2100      	movs	r1, #0
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f945 	bl	80039c8 <USB_SetDevSpeed>
 800373e:	e008      	b.n	8003752 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003740:	2101      	movs	r1, #1
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f940 	bl	80039c8 <USB_SetDevSpeed>
 8003748:	e003      	b.n	8003752 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800374a:	2103      	movs	r1, #3
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f93b 	bl	80039c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003752:	2110      	movs	r1, #16
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f8f3 	bl	8003940 <USB_FlushTxFifo>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f90f 	bl	8003988 <USB_FlushRxFifo>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800377a:	461a      	mov	r2, r3
 800377c:	2300      	movs	r3, #0
 800377e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003786:	461a      	mov	r2, r3
 8003788:	2300      	movs	r3, #0
 800378a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003792:	461a      	mov	r2, r3
 8003794:	2300      	movs	r3, #0
 8003796:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003798:	2300      	movs	r3, #0
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	e043      	b.n	8003826 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	015a      	lsls	r2, r3, #5
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037b4:	d118      	bne.n	80037e8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10a      	bne.n	80037d2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c8:	461a      	mov	r2, r3
 80037ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	e013      	b.n	80037fa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	015a      	lsls	r2, r3, #5
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037de:	461a      	mov	r2, r3
 80037e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	e008      	b.n	80037fa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f4:	461a      	mov	r2, r3
 80037f6:	2300      	movs	r3, #0
 80037f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4413      	add	r3, r2
 8003802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003806:	461a      	mov	r2, r3
 8003808:	2300      	movs	r3, #0
 800380a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4413      	add	r3, r2
 8003814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003818:	461a      	mov	r2, r3
 800381a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800381e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	3301      	adds	r3, #1
 8003824:	613b      	str	r3, [r7, #16]
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	429a      	cmp	r2, r3
 800382c:	d3b7      	bcc.n	800379e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800382e:	2300      	movs	r3, #0
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	e043      	b.n	80038bc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4413      	add	r3, r2
 800383c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003846:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800384a:	d118      	bne.n	800387e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10a      	bne.n	8003868 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4413      	add	r3, r2
 800385a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385e:	461a      	mov	r2, r3
 8003860:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	e013      	b.n	8003890 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4413      	add	r3, r2
 8003870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003874:	461a      	mov	r2, r3
 8003876:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	e008      	b.n	8003890 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4413      	add	r3, r2
 8003886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800388a:	461a      	mov	r2, r3
 800388c:	2300      	movs	r3, #0
 800388e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4413      	add	r3, r2
 8003898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800389c:	461a      	mov	r2, r3
 800389e:	2300      	movs	r3, #0
 80038a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ae:	461a      	mov	r2, r3
 80038b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	3301      	adds	r3, #1
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d3b7      	bcc.n	8003834 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80038e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80038e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d105      	bne.n	80038f8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	f043 0210 	orr.w	r2, r3, #16
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	699a      	ldr	r2, [r3, #24]
 80038fc:	4b0f      	ldr	r3, [pc, #60]	; (800393c <USB_DevInit+0x2c4>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003906:	2b00      	cmp	r3, #0
 8003908:	d005      	beq.n	8003916 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	f043 0208 	orr.w	r2, r3, #8
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003918:	2b01      	cmp	r3, #1
 800391a:	d107      	bne.n	800392c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003924:	f043 0304 	orr.w	r3, r3, #4
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800392c:	7dfb      	ldrb	r3, [r7, #23]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003938:	b004      	add	sp, #16
 800393a:	4770      	bx	lr
 800393c:	803c3800 	.word	0x803c3800

08003940 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	019b      	lsls	r3, r3, #6
 8003952:	f043 0220 	orr.w	r2, r3, #32
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	3301      	adds	r3, #1
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4a08      	ldr	r2, [pc, #32]	; (8003984 <USB_FlushTxFifo+0x44>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d901      	bls.n	800396c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e006      	b.n	800397a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	f003 0320 	and.w	r3, r3, #32
 8003974:	2b20      	cmp	r3, #32
 8003976:	d0f0      	beq.n	800395a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr
 8003984:	00030d40 	.word	0x00030d40

08003988 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2210      	movs	r2, #16
 8003998:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	3301      	adds	r3, #1
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4a08      	ldr	r2, [pc, #32]	; (80039c4 <USB_FlushRxFifo+0x3c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d901      	bls.n	80039ac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e006      	b.n	80039ba <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	2b10      	cmp	r3, #16
 80039b6:	d0f0      	beq.n	800399a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr
 80039c4:	00030d40 	.word	0x00030d40

080039c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	78fb      	ldrb	r3, [r7, #3]
 80039e2:	68f9      	ldr	r1, [r7, #12]
 80039e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039e8:	4313      	orrs	r3, r2
 80039ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr

080039f8 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 0306 	and.w	r3, r3, #6
 8003a10:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d102      	bne.n	8003a1e <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	75fb      	strb	r3, [r7, #23]
 8003a1c:	e00a      	b.n	8003a34 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d002      	beq.n	8003a2a <USB_GetDevSpeed+0x32>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2b06      	cmp	r3, #6
 8003a28:	d102      	bne.n	8003a30 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	75fb      	strb	r3, [r7, #23]
 8003a2e:	e001      	b.n	8003a34 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003a30:	230f      	movs	r3, #15
 8003a32:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	371c      	adds	r7, #28
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr

08003a40 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	785b      	ldrb	r3, [r3, #1]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d13a      	bne.n	8003ad2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a62:	69da      	ldr	r2, [r3, #28]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	68f9      	ldr	r1, [r7, #12]
 8003a76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	015a      	lsls	r2, r3, #5
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d155      	bne.n	8003b40 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	78db      	ldrb	r3, [r3, #3]
 8003aae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ab0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	059b      	lsls	r3, r3, #22
 8003ab6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	0151      	lsls	r1, r2, #5
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	440a      	add	r2, r1
 8003ac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	e036      	b.n	8003b40 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ad8:	69da      	ldr	r2, [r3, #28]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae8:	041b      	lsls	r3, r3, #16
 8003aea:	68f9      	ldr	r1, [r7, #12]
 8003aec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003af0:	4313      	orrs	r3, r2
 8003af2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d11a      	bne.n	8003b40 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	78db      	ldrb	r3, [r3, #3]
 8003b24:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b26:	430b      	orrs	r3, r1
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	0151      	lsls	r1, r2, #5
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	440a      	add	r2, r1
 8003b32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b3e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bc80      	pop	{r7}
 8003b4a:	4770      	bx	lr

08003b4c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	785b      	ldrb	r3, [r3, #1]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d161      	bne.n	8003c2c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b7e:	d11f      	bne.n	8003bc0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	0151      	lsls	r1, r2, #5
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	440a      	add	r2, r1
 8003b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b9e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	0151      	lsls	r1, r2, #5
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	440a      	add	r2, r1
 8003bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	f003 030f 	and.w	r3, r3, #15
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	68f9      	ldr	r1, [r7, #12]
 8003bdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003be0:	4013      	ands	r3, r2
 8003be2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bea:	69da      	ldr	r2, [r3, #28]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	f003 030f 	and.w	r3, r3, #15
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	68f9      	ldr	r1, [r7, #12]
 8003c00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c04:	4013      	ands	r3, r2
 8003c06:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	0159      	lsls	r1, r3, #5
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	440b      	add	r3, r1
 8003c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c22:	4619      	mov	r1, r3
 8003c24:	4b35      	ldr	r3, [pc, #212]	; (8003cfc <USB_DeactivateEndpoint+0x1b0>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	600b      	str	r3, [r1, #0]
 8003c2a:	e060      	b.n	8003cee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c42:	d11f      	bne.n	8003c84 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	0151      	lsls	r1, r2, #5
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	440a      	add	r2, r1
 8003c5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c62:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	0151      	lsls	r1, r2, #5
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	440a      	add	r2, r1
 8003c7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	f003 030f 	and.w	r3, r3, #15
 8003c94:	2101      	movs	r1, #1
 8003c96:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9a:	041b      	lsls	r3, r3, #16
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	68f9      	ldr	r1, [r7, #12]
 8003ca0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cae:	69da      	ldr	r2, [r3, #28]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	f003 030f 	and.w	r3, r3, #15
 8003cb8:	2101      	movs	r1, #1
 8003cba:	fa01 f303 	lsl.w	r3, r1, r3
 8003cbe:	041b      	lsls	r3, r3, #16
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	68f9      	ldr	r1, [r7, #12]
 8003cc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cc8:	4013      	ands	r3, r2
 8003cca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	015a      	lsls	r2, r3, #5
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	0159      	lsls	r1, r3, #5
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	440b      	add	r3, r1
 8003ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <USB_DeactivateEndpoint+0x1b4>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bc80      	pop	{r7}
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	ec337800 	.word	0xec337800
 8003d00:	eff37800 	.word	0xeff37800

08003d04 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08a      	sub	sp, #40	; 0x28
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	785b      	ldrb	r3, [r3, #1]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	f040 815c 	bne.w	8003fde <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d132      	bne.n	8003d94 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	0151      	lsls	r1, r2, #5
 8003d40:	69fa      	ldr	r2, [r7, #28]
 8003d42:	440a      	add	r2, r1
 8003d44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	0151      	lsls	r1, r2, #5
 8003d64:	69fa      	ldr	r2, [r7, #28]
 8003d66:	440a      	add	r2, r1
 8003d68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	0151      	lsls	r1, r2, #5
 8003d84:	69fa      	ldr	r2, [r7, #28]
 8003d86:	440a      	add	r2, r1
 8003d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d8c:	0cdb      	lsrs	r3, r3, #19
 8003d8e:	04db      	lsls	r3, r3, #19
 8003d90:	6113      	str	r3, [r2, #16]
 8003d92:	e074      	b.n	8003e7e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	0151      	lsls	r1, r2, #5
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	440a      	add	r2, r1
 8003daa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dae:	0cdb      	lsrs	r3, r3, #19
 8003db0:	04db      	lsls	r3, r3, #19
 8003db2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	0151      	lsls	r1, r2, #5
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	440a      	add	r2, r1
 8003dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003dd2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003dd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	6959      	ldr	r1, [r3, #20]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	440b      	add	r3, r1
 8003df0:	1e59      	subs	r1, r3, #1
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dfa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003dfc:	4b9d      	ldr	r3, [pc, #628]	; (8004074 <USB_EPStartXfer+0x370>)
 8003dfe:	400b      	ands	r3, r1
 8003e00:	69b9      	ldr	r1, [r7, #24]
 8003e02:	0148      	lsls	r0, r1, #5
 8003e04:	69f9      	ldr	r1, [r7, #28]
 8003e06:	4401      	add	r1, r0
 8003e08:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e1c:	691a      	ldr	r2, [r3, #16]
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e26:	69b9      	ldr	r1, [r7, #24]
 8003e28:	0148      	lsls	r0, r1, #5
 8003e2a:	69f9      	ldr	r1, [r7, #28]
 8003e2c:	4401      	add	r1, r0
 8003e2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e32:	4313      	orrs	r3, r2
 8003e34:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	78db      	ldrb	r3, [r3, #3]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d11f      	bne.n	8003e7e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	015a      	lsls	r2, r3, #5
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	0151      	lsls	r1, r2, #5
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	440a      	add	r2, r1
 8003e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e58:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003e5c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	0151      	lsls	r1, r2, #5
 8003e70:	69fa      	ldr	r2, [r7, #28]
 8003e72:	440a      	add	r2, r1
 8003e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e7c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003e7e:	79fb      	ldrb	r3, [r7, #7]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d14b      	bne.n	8003f1c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d009      	beq.n	8003ea0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e98:	461a      	mov	r2, r3
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	78db      	ldrb	r3, [r3, #3]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d128      	bne.n	8003efa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d110      	bne.n	8003eda <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	0151      	lsls	r1, r2, #5
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	440a      	add	r2, r1
 8003ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ed2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	e00f      	b.n	8003efa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	0151      	lsls	r1, r2, #5
 8003eec:	69fa      	ldr	r2, [r7, #28]
 8003eee:	440a      	add	r2, r1
 8003ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	015a      	lsls	r2, r3, #5
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	0151      	lsls	r1, r2, #5
 8003f0c:	69fa      	ldr	r2, [r7, #28]
 8003f0e:	440a      	add	r2, r1
 8003f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	e12f      	b.n	800417c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	0151      	lsls	r1, r2, #5
 8003f2e:	69fa      	ldr	r2, [r7, #28]
 8003f30:	440a      	add	r2, r1
 8003f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f3a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	78db      	ldrb	r3, [r3, #3]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d015      	beq.n	8003f70 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 8117 	beq.w	800417c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	2101      	movs	r1, #1
 8003f60:	fa01 f303 	lsl.w	r3, r1, r3
 8003f64:	69f9      	ldr	r1, [r7, #28]
 8003f66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	634b      	str	r3, [r1, #52]	; 0x34
 8003f6e:	e105      	b.n	800417c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d110      	bne.n	8003fa2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	0151      	lsls	r1, r2, #5
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	440a      	add	r2, r1
 8003f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	e00f      	b.n	8003fc2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	015a      	lsls	r2, r3, #5
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	4413      	add	r3, r2
 8003faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	0151      	lsls	r1, r2, #5
 8003fb4:	69fa      	ldr	r2, [r7, #28]
 8003fb6:	440a      	add	r2, r1
 8003fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	68d9      	ldr	r1, [r3, #12]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	781a      	ldrb	r2, [r3, #0]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	b298      	uxth	r0, r3
 8003fd0:	79fb      	ldrb	r3, [r7, #7]
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 fa2a 	bl	8004430 <USB_WritePacket>
 8003fdc:	e0ce      	b.n	800417c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	0151      	lsls	r1, r2, #5
 8003ff0:	69fa      	ldr	r2, [r7, #28]
 8003ff2:	440a      	add	r2, r1
 8003ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ff8:	0cdb      	lsrs	r3, r3, #19
 8003ffa:	04db      	lsls	r3, r3, #19
 8003ffc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	4413      	add	r3, r2
 8004006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	0151      	lsls	r1, r2, #5
 8004010:	69fa      	ldr	r2, [r7, #28]
 8004012:	440a      	add	r2, r1
 8004014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004018:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800401c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004020:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d126      	bne.n	8004078 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	4413      	add	r3, r2
 8004032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004040:	69b9      	ldr	r1, [r7, #24]
 8004042:	0148      	lsls	r0, r1, #5
 8004044:	69f9      	ldr	r1, [r7, #28]
 8004046:	4401      	add	r1, r0
 8004048:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800404c:	4313      	orrs	r3, r2
 800404e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	0151      	lsls	r1, r2, #5
 8004062:	69fa      	ldr	r2, [r7, #28]
 8004064:	440a      	add	r2, r1
 8004066:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800406a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800406e:	6113      	str	r3, [r2, #16]
 8004070:	e036      	b.n	80040e0 <USB_EPStartXfer+0x3dc>
 8004072:	bf00      	nop
 8004074:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	695a      	ldr	r2, [r3, #20]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	4413      	add	r3, r2
 8004082:	1e5a      	subs	r2, r3, #1
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	fbb2 f3f3 	udiv	r3, r2, r3
 800408c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	4413      	add	r3, r2
 8004096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	8afb      	ldrh	r3, [r7, #22]
 800409e:	04d9      	lsls	r1, r3, #19
 80040a0:	4b39      	ldr	r3, [pc, #228]	; (8004188 <USB_EPStartXfer+0x484>)
 80040a2:	400b      	ands	r3, r1
 80040a4:	69b9      	ldr	r1, [r7, #24]
 80040a6:	0148      	lsls	r0, r1, #5
 80040a8:	69f9      	ldr	r1, [r7, #28]
 80040aa:	4401      	add	r1, r0
 80040ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040b0:	4313      	orrs	r3, r2
 80040b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c0:	691a      	ldr	r2, [r3, #16]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	8af9      	ldrh	r1, [r7, #22]
 80040c8:	fb01 f303 	mul.w	r3, r1, r3
 80040cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040d0:	69b9      	ldr	r1, [r7, #24]
 80040d2:	0148      	lsls	r0, r1, #5
 80040d4:	69f9      	ldr	r1, [r7, #28]
 80040d6:	4401      	add	r1, r0
 80040d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040dc:	4313      	orrs	r3, r2
 80040de:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80040e0:	79fb      	ldrb	r3, [r7, #7]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d10d      	bne.n	8004102 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d009      	beq.n	8004102 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	68d9      	ldr	r1, [r3, #12]
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040fe:	460a      	mov	r2, r1
 8004100:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	78db      	ldrb	r3, [r3, #3]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d128      	bne.n	800415c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004116:	2b00      	cmp	r3, #0
 8004118:	d110      	bne.n	800413c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	4413      	add	r3, r2
 8004122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	0151      	lsls	r1, r2, #5
 800412c:	69fa      	ldr	r2, [r7, #28]
 800412e:	440a      	add	r2, r1
 8004130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004134:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e00f      	b.n	800415c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	0151      	lsls	r1, r2, #5
 800414e:	69fa      	ldr	r2, [r7, #28]
 8004150:	440a      	add	r2, r1
 8004152:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800415a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	4413      	add	r3, r2
 8004164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	0151      	lsls	r1, r2, #5
 800416e:	69fa      	ldr	r2, [r7, #28]
 8004170:	440a      	add	r2, r1
 8004172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004176:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800417a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3720      	adds	r7, #32
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	1ff80000 	.word	0x1ff80000

0800418c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	4613      	mov	r3, r2
 8004198:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	785b      	ldrb	r3, [r3, #1]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	f040 80cd 	bne.w	8004348 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d132      	bne.n	800421c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	0151      	lsls	r1, r2, #5
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	440a      	add	r2, r1
 80041cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	0151      	lsls	r1, r2, #5
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	440a      	add	r2, r1
 80041f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	4413      	add	r3, r2
 8004202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	0151      	lsls	r1, r2, #5
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	440a      	add	r2, r1
 8004210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004214:	0cdb      	lsrs	r3, r3, #19
 8004216:	04db      	lsls	r3, r3, #19
 8004218:	6113      	str	r3, [r2, #16]
 800421a:	e04e      	b.n	80042ba <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	4413      	add	r3, r2
 8004224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	0151      	lsls	r1, r2, #5
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	440a      	add	r2, r1
 8004232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004236:	0cdb      	lsrs	r3, r3, #19
 8004238:	04db      	lsls	r3, r3, #19
 800423a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	4413      	add	r3, r2
 8004244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	0151      	lsls	r1, r2, #5
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	440a      	add	r2, r1
 8004252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004256:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800425a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800425e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	695a      	ldr	r2, [r3, #20]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	429a      	cmp	r2, r3
 800426a:	d903      	bls.n	8004274 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	4413      	add	r3, r2
 800427c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	0151      	lsls	r1, r2, #5
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	440a      	add	r2, r1
 800428a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800428e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004292:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	4413      	add	r3, r2
 800429c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a0:	691a      	ldr	r2, [r3, #16]
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042aa:	6939      	ldr	r1, [r7, #16]
 80042ac:	0148      	lsls	r0, r1, #5
 80042ae:	6979      	ldr	r1, [r7, #20]
 80042b0:	4401      	add	r1, r0
 80042b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80042b6:	4313      	orrs	r3, r2
 80042b8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80042ba:	79fb      	ldrb	r3, [r7, #7]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d11e      	bne.n	80042fe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d009      	beq.n	80042dc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d4:	461a      	mov	r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	0151      	lsls	r1, r2, #5
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	440a      	add	r2, r1
 80042f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042fa:	6013      	str	r3, [r2, #0]
 80042fc:	e092      	b.n	8004424 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	4413      	add	r3, r2
 8004306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	0151      	lsls	r1, r2, #5
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	440a      	add	r2, r1
 8004314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004318:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800431c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d07e      	beq.n	8004424 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	2101      	movs	r1, #1
 8004338:	fa01 f303 	lsl.w	r3, r1, r3
 800433c:	6979      	ldr	r1, [r7, #20]
 800433e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004342:	4313      	orrs	r3, r2
 8004344:	634b      	str	r3, [r1, #52]	; 0x34
 8004346:	e06d      	b.n	8004424 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	4413      	add	r3, r2
 8004350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	0151      	lsls	r1, r2, #5
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	440a      	add	r2, r1
 800435e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004362:	0cdb      	lsrs	r3, r3, #19
 8004364:	04db      	lsls	r3, r3, #19
 8004366:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	0151      	lsls	r1, r2, #5
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	440a      	add	r2, r1
 800437e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004382:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004386:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800438a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	0151      	lsls	r1, r2, #5
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	440a      	add	r2, r1
 80043b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c8:	691a      	ldr	r2, [r3, #16]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d2:	6939      	ldr	r1, [r7, #16]
 80043d4:	0148      	lsls	r0, r1, #5
 80043d6:	6979      	ldr	r1, [r7, #20]
 80043d8:	4401      	add	r1, r0
 80043da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043de:	4313      	orrs	r3, r2
 80043e0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d10d      	bne.n	8004404 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d009      	beq.n	8004404 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	68d9      	ldr	r1, [r3, #12]
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004400:	460a      	mov	r2, r1
 8004402:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	0151      	lsls	r1, r2, #5
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	440a      	add	r2, r1
 800441a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800441e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004422:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	371c      	adds	r7, #28
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr

08004430 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004430:	b480      	push	{r7}
 8004432:	b089      	sub	sp, #36	; 0x24
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	4611      	mov	r1, r2
 800443c:	461a      	mov	r2, r3
 800443e:	460b      	mov	r3, r1
 8004440:	71fb      	strb	r3, [r7, #7]
 8004442:	4613      	mov	r3, r2
 8004444:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800444e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004452:	2b00      	cmp	r3, #0
 8004454:	d123      	bne.n	800449e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004456:	88bb      	ldrh	r3, [r7, #4]
 8004458:	3303      	adds	r3, #3
 800445a:	089b      	lsrs	r3, r3, #2
 800445c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800445e:	2300      	movs	r3, #0
 8004460:	61bb      	str	r3, [r7, #24]
 8004462:	e018      	b.n	8004496 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004464:	79fb      	ldrb	r3, [r7, #7]
 8004466:	031a      	lsls	r2, r3, #12
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	4413      	add	r3, r2
 800446c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004470:	461a      	mov	r2, r3
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	3301      	adds	r3, #1
 800447c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	3301      	adds	r3, #1
 8004482:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	3301      	adds	r3, #1
 8004488:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	3301      	adds	r3, #1
 800448e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	3301      	adds	r3, #1
 8004494:	61bb      	str	r3, [r7, #24]
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	429a      	cmp	r2, r3
 800449c:	d3e2      	bcc.n	8004464 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3724      	adds	r7, #36	; 0x24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	4770      	bx	lr

080044aa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b08b      	sub	sp, #44	; 0x2c
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	60f8      	str	r0, [r7, #12]
 80044b2:	60b9      	str	r1, [r7, #8]
 80044b4:	4613      	mov	r3, r2
 80044b6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80044c0:	88fb      	ldrh	r3, [r7, #6]
 80044c2:	089b      	lsrs	r3, r3, #2
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80044c8:	88fb      	ldrh	r3, [r7, #6]
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80044d0:	2300      	movs	r3, #0
 80044d2:	623b      	str	r3, [r7, #32]
 80044d4:	e014      	b.n	8004500 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	601a      	str	r2, [r3, #0]
    pDest++;
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	3301      	adds	r3, #1
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	3301      	adds	r3, #1
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	3301      	adds	r3, #1
 80044f2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	3301      	adds	r3, #1
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	3301      	adds	r3, #1
 80044fe:	623b      	str	r3, [r7, #32]
 8004500:	6a3a      	ldr	r2, [r7, #32]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	429a      	cmp	r2, r3
 8004506:	d3e6      	bcc.n	80044d6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004508:	8bfb      	ldrh	r3, [r7, #30]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d01e      	beq.n	800454c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800450e:	2300      	movs	r3, #0
 8004510:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004518:	461a      	mov	r2, r3
 800451a:	f107 0310 	add.w	r3, r7, #16
 800451e:	6812      	ldr	r2, [r2, #0]
 8004520:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	b2db      	uxtb	r3, r3
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	fa22 f303 	lsr.w	r3, r2, r3
 800452e:	b2da      	uxtb	r2, r3
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	701a      	strb	r2, [r3, #0]
      i++;
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	3301      	adds	r3, #1
 8004538:	623b      	str	r3, [r7, #32]
      pDest++;
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	3301      	adds	r3, #1
 800453e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004540:	8bfb      	ldrh	r3, [r7, #30]
 8004542:	3b01      	subs	r3, #1
 8004544:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004546:	8bfb      	ldrh	r3, [r7, #30]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1ea      	bne.n	8004522 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800454e:	4618      	mov	r0, r3
 8004550:	372c      	adds	r7, #44	; 0x2c
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr

08004558 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	785b      	ldrb	r3, [r3, #1]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d12c      	bne.n	80045ce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4413      	add	r3, r2
 800457c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	db12      	blt.n	80045ac <USB_EPSetStall+0x54>
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00f      	beq.n	80045ac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4413      	add	r3, r2
 8004594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	0151      	lsls	r1, r2, #5
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	440a      	add	r2, r1
 80045a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045aa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	0151      	lsls	r1, r2, #5
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	440a      	add	r2, r1
 80045c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	e02b      	b.n	8004626 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	db12      	blt.n	8004606 <USB_EPSetStall+0xae>
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00f      	beq.n	8004606 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	0151      	lsls	r1, r2, #5
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	440a      	add	r2, r1
 80045fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004600:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004604:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	0151      	lsls	r1, r2, #5
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	440a      	add	r2, r1
 800461c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004620:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004624:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	bc80      	pop	{r7}
 8004630:	4770      	bx	lr

08004632 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004632:	b480      	push	{r7}
 8004634:	b085      	sub	sp, #20
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	785b      	ldrb	r3, [r3, #1]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d128      	bne.n	80046a0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	4413      	add	r3, r2
 8004656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	0151      	lsls	r1, r2, #5
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	440a      	add	r2, r1
 8004664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004668:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800466c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	78db      	ldrb	r3, [r3, #3]
 8004672:	2b03      	cmp	r3, #3
 8004674:	d003      	beq.n	800467e <USB_EPClearStall+0x4c>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	78db      	ldrb	r3, [r3, #3]
 800467a:	2b02      	cmp	r3, #2
 800467c:	d138      	bne.n	80046f0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	0151      	lsls	r1, r2, #5
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	440a      	add	r2, r1
 8004694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	e027      	b.n	80046f0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	0151      	lsls	r1, r2, #5
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	440a      	add	r2, r1
 80046b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	78db      	ldrb	r3, [r3, #3]
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d003      	beq.n	80046d0 <USB_EPClearStall+0x9e>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	78db      	ldrb	r3, [r3, #3]
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d10f      	bne.n	80046f0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	0151      	lsls	r1, r2, #5
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	440a      	add	r2, r1
 80046e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ee:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr

080046fc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800471a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800471e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	011b      	lsls	r3, r3, #4
 800472c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004730:	68f9      	ldr	r1, [r7, #12]
 8004732:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004736:	4313      	orrs	r3, r2
 8004738:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	bc80      	pop	{r7}
 8004744:	4770      	bx	lr

08004746 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004746:	b480      	push	{r7}
 8004748:	b085      	sub	sp, #20
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004760:	f023 0303 	bic.w	r3, r3, #3
 8004764:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004774:	f023 0302 	bic.w	r3, r3, #2
 8004778:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	bc80      	pop	{r7}
 8004784:	4770      	bx	lr

08004786 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004786:	b480      	push	{r7}
 8004788:	b085      	sub	sp, #20
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80047a0:	f023 0303 	bic.w	r3, r3, #3
 80047a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047b4:	f043 0302 	orr.w	r3, r3, #2
 80047b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr

080047c6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b085      	sub	sp, #20
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	4013      	ands	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80047de:	68fb      	ldr	r3, [r7, #12]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bc80      	pop	{r7}
 80047e8:	4770      	bx	lr

080047ea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b085      	sub	sp, #20
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	4013      	ands	r3, r2
 800480c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	0c1b      	lsrs	r3, r3, #16
}
 8004812:	4618      	mov	r0, r3
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	bc80      	pop	{r7}
 800481a:	4770      	bx	lr

0800481c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	4013      	ands	r3, r2
 800483e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	b29b      	uxth	r3, r3
}
 8004844:	4618      	mov	r0, r3
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	bc80      	pop	{r7}
 800484c:	4770      	bx	lr

0800484e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800484e:	b480      	push	{r7}
 8004850:	b085      	sub	sp, #20
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	460b      	mov	r3, r1
 8004858:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800485e:	78fb      	ldrb	r3, [r7, #3]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	4013      	ands	r3, r2
 800487a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800487c:	68bb      	ldr	r3, [r7, #8]
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	bc80      	pop	{r7}
 8004886:	4770      	bx	lr

08004888 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048aa:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80048ac:	78fb      	ldrb	r3, [r7, #3]
 80048ae:	f003 030f 	and.w	r3, r3, #15
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	fa22 f303 	lsr.w	r3, r2, r3
 80048b8:	01db      	lsls	r3, r3, #7
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	4313      	orrs	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80048c2:	78fb      	ldrb	r3, [r7, #3]
 80048c4:	015a      	lsls	r2, r3, #5
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4013      	ands	r3, r2
 80048d4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048d6:	68bb      	ldr	r3, [r7, #8]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	371c      	adds	r7, #28
 80048dc:	46bd      	mov	sp, r7
 80048de:	bc80      	pop	{r7}
 80048e0:	4770      	bx	lr

080048e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	f003 0301 	and.w	r3, r3, #1
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bc80      	pop	{r7}
 80048fa:	4770      	bx	lr

080048fc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004916:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800491a:	f023 0307 	bic.w	r3, r3, #7
 800491e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800492e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004932:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	bc80      	pop	{r7}
 800493e:	4770      	bx	lr

08004940 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004940:	b480      	push	{r7}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	460b      	mov	r3, r1
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	333c      	adds	r3, #60	; 0x3c
 8004956:	3304      	adds	r3, #4
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	4a25      	ldr	r2, [pc, #148]	; (80049f4 <USB_EP0_OutStart+0xb4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d90a      	bls.n	800497a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004970:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004974:	d101      	bne.n	800497a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	e037      	b.n	80049ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004980:	461a      	mov	r2, r3
 8004982:	2300      	movs	r3, #0
 8004984:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004994:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004998:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049a8:	f043 0318 	orr.w	r3, r3, #24
 80049ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80049c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80049c2:	7afb      	ldrb	r3, [r7, #11]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d10f      	bne.n	80049e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ce:	461a      	mov	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049e2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80049e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	371c      	adds	r7, #28
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	4770      	bx	lr
 80049f4:	4f54300a 	.word	0x4f54300a

080049f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	3301      	adds	r3, #1
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4a12      	ldr	r2, [pc, #72]	; (8004a58 <USB_CoreReset+0x60>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d901      	bls.n	8004a16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e01b      	b.n	8004a4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	daf2      	bge.n	8004a04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f043 0201 	orr.w	r2, r3, #1
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	3301      	adds	r3, #1
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4a08      	ldr	r2, [pc, #32]	; (8004a58 <USB_CoreReset+0x60>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d901      	bls.n	8004a40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e006      	b.n	8004a4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d0f0      	beq.n	8004a2e <USB_CoreReset+0x36>

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bc80      	pop	{r7}
 8004a56:	4770      	bx	lr
 8004a58:	00030d40 	.word	0x00030d40

08004a5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	460b      	mov	r3, r1
 8004a66:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	7c1b      	ldrb	r3, [r3, #16]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d115      	bne.n	8004aa0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004a74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a78:	2202      	movs	r2, #2
 8004a7a:	2181      	movs	r1, #129	; 0x81
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f001 ff30 	bl	80068e2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004a88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	2101      	movs	r1, #1
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f001 ff26 	bl	80068e2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004a9e:	e012      	b.n	8004ac6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004aa0:	2340      	movs	r3, #64	; 0x40
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	2181      	movs	r1, #129	; 0x81
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f001 ff1b 	bl	80068e2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004ab2:	2340      	movs	r3, #64	; 0x40
 8004ab4:	2202      	movs	r2, #2
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f001 ff12 	bl	80068e2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004ac6:	2308      	movs	r3, #8
 8004ac8:	2203      	movs	r2, #3
 8004aca:	2182      	movs	r1, #130	; 0x82
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f001 ff08 	bl	80068e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004ad8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004adc:	f002 f87e 	bl	8006bdc <malloc>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d102      	bne.n	8004afa <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8004af4:	2301      	movs	r3, #1
 8004af6:	73fb      	strb	r3, [r7, #15]
 8004af8:	e026      	b.n	8004b48 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b00:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	7c1b      	ldrb	r3, [r3, #16]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d109      	bne.n	8004b38 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b2e:	2101      	movs	r1, #1
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f001 ffc6 	bl	8006ac2 <USBD_LL_PrepareReceive>
 8004b36:	e007      	b.n	8004b48 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b3e:	2340      	movs	r3, #64	; 0x40
 8004b40:	2101      	movs	r1, #1
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f001 ffbd 	bl	8006ac2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b084      	sub	sp, #16
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004b62:	2181      	movs	r1, #129	; 0x81
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f001 fee2 	bl	800692e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004b70:	2101      	movs	r1, #1
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f001 fedb 	bl	800692e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004b80:	2182      	movs	r1, #130	; 0x82
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f001 fed3 	bl	800692e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00e      	beq.n	8004bb6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f002 f81f 	bl	8006bec <free>
    pdev->pClassData = NULL;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bd0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d039      	beq.n	8004c5e <USBD_CDC_Setup+0x9e>
 8004bea:	2b20      	cmp	r3, #32
 8004bec:	d17c      	bne.n	8004ce8 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	88db      	ldrh	r3, [r3, #6]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d029      	beq.n	8004c4a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	b25b      	sxtb	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	da11      	bge.n	8004c24 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004c0c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	88d2      	ldrh	r2, [r2, #6]
 8004c12:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004c14:	6939      	ldr	r1, [r7, #16]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	88db      	ldrh	r3, [r3, #6]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f001 fa31 	bl	8006084 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004c22:	e068      	b.n	8004cf6 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	785a      	ldrb	r2, [r3, #1]
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	88db      	ldrh	r3, [r3, #6]
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004c3a:	6939      	ldr	r1, [r7, #16]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	88db      	ldrh	r3, [r3, #6]
 8004c40:	461a      	mov	r2, r3
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f001 fa4c 	bl	80060e0 <USBD_CtlPrepareRx>
      break;
 8004c48:	e055      	b.n	8004cf6 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	7850      	ldrb	r0, [r2, #1]
 8004c56:	2200      	movs	r2, #0
 8004c58:	6839      	ldr	r1, [r7, #0]
 8004c5a:	4798      	blx	r3
      break;
 8004c5c:	e04b      	b.n	8004cf6 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	785b      	ldrb	r3, [r3, #1]
 8004c62:	2b0a      	cmp	r3, #10
 8004c64:	d017      	beq.n	8004c96 <USBD_CDC_Setup+0xd6>
 8004c66:	2b0b      	cmp	r3, #11
 8004c68:	d029      	beq.n	8004cbe <USBD_CDC_Setup+0xfe>
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d133      	bne.n	8004cd6 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c74:	2b03      	cmp	r3, #3
 8004c76:	d107      	bne.n	8004c88 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004c78:	f107 030c 	add.w	r3, r7, #12
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	4619      	mov	r1, r3
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f001 f9ff 	bl	8006084 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004c86:	e02e      	b.n	8004ce6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004c88:	6839      	ldr	r1, [r7, #0]
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f001 f990 	bl	8005fb0 <USBD_CtlError>
            ret = USBD_FAIL;
 8004c90:	2302      	movs	r3, #2
 8004c92:	75fb      	strb	r3, [r7, #23]
          break;
 8004c94:	e027      	b.n	8004ce6 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d107      	bne.n	8004cb0 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004ca0:	f107 030f 	add.w	r3, r7, #15
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f001 f9eb 	bl	8006084 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004cae:	e01a      	b.n	8004ce6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004cb0:	6839      	ldr	r1, [r7, #0]
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f001 f97c 	bl	8005fb0 <USBD_CtlError>
            ret = USBD_FAIL;
 8004cb8:	2302      	movs	r3, #2
 8004cba:	75fb      	strb	r3, [r7, #23]
          break;
 8004cbc:	e013      	b.n	8004ce6 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cc4:	2b03      	cmp	r3, #3
 8004cc6:	d00d      	beq.n	8004ce4 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8004cc8:	6839      	ldr	r1, [r7, #0]
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f001 f970 	bl	8005fb0 <USBD_CtlError>
            ret = USBD_FAIL;
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004cd4:	e006      	b.n	8004ce4 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8004cd6:	6839      	ldr	r1, [r7, #0]
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f001 f969 	bl	8005fb0 <USBD_CtlError>
          ret = USBD_FAIL;
 8004cde:	2302      	movs	r3, #2
 8004ce0:	75fb      	strb	r3, [r7, #23]
          break;
 8004ce2:	e000      	b.n	8004ce6 <USBD_CDC_Setup+0x126>
          break;
 8004ce4:	bf00      	nop
      }
      break;
 8004ce6:	e006      	b.n	8004cf6 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8004ce8:	6839      	ldr	r1, [r7, #0]
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f001 f960 	bl	8005fb0 <USBD_CtlError>
      ret = USBD_FAIL;
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8004cf4:	bf00      	nop
  }

  return ret;
 8004cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d12:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d1a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d03a      	beq.n	8004d9c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004d26:	78fa      	ldrb	r2, [r7, #3]
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	440b      	add	r3, r1
 8004d34:	331c      	adds	r3, #28
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d029      	beq.n	8004d90 <USBD_CDC_DataIn+0x90>
 8004d3c:	78fa      	ldrb	r2, [r7, #3]
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	4613      	mov	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	440b      	add	r3, r1
 8004d4a:	331c      	adds	r3, #28
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	78f9      	ldrb	r1, [r7, #3]
 8004d50:	68b8      	ldr	r0, [r7, #8]
 8004d52:	460b      	mov	r3, r1
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	1a5b      	subs	r3, r3, r1
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4403      	add	r3, r0
 8004d5c:	3344      	adds	r3, #68	; 0x44
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	fbb2 f1f3 	udiv	r1, r2, r3
 8004d64:	fb03 f301 	mul.w	r3, r3, r1
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d110      	bne.n	8004d90 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004d6e:	78fa      	ldrb	r2, [r7, #3]
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	4613      	mov	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	440b      	add	r3, r1
 8004d7c:	331c      	adds	r3, #28
 8004d7e:	2200      	movs	r2, #0
 8004d80:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004d82:	78f9      	ldrb	r1, [r7, #3]
 8004d84:	2300      	movs	r3, #0
 8004d86:	2200      	movs	r2, #0
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f001 fe77 	bl	8006a7c <USBD_LL_Transmit>
 8004d8e:	e003      	b.n	8004d98 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	e000      	b.n	8004d9e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8004d9c:	2302      	movs	r3, #2
  }
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b084      	sub	sp, #16
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
 8004dae:	460b      	mov	r3, r1
 8004db0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004db8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f001 fea2 	bl	8006b08 <USBD_LL_GetRxDataSize>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00d      	beq.n	8004df2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004dea:	4611      	mov	r1, r2
 8004dec:	4798      	blx	r3

    return USBD_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	e000      	b.n	8004df4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004df2:	2302      	movs	r3, #2
  }
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e0a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d015      	beq.n	8004e42 <USBD_CDC_EP0_RxReady+0x46>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004e1c:	2bff      	cmp	r3, #255	; 0xff
 8004e1e:	d010      	beq.n	8004e42 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004e2e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004e36:	b292      	uxth	r2, r2
 8004e38:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	22ff      	movs	r2, #255	; 0xff
 8004e3e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2243      	movs	r2, #67	; 0x43
 8004e58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004e5a:	4b03      	ldr	r3, [pc, #12]	; (8004e68 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bc80      	pop	{r7}
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	20000094 	.word	0x20000094

08004e6c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2243      	movs	r2, #67	; 0x43
 8004e78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004e7a:	4b03      	ldr	r3, [pc, #12]	; (8004e88 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bc80      	pop	{r7}
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	20000050 	.word	0x20000050

08004e8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2243      	movs	r2, #67	; 0x43
 8004e98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004e9a:	4b03      	ldr	r3, [pc, #12]	; (8004ea8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	200000d8 	.word	0x200000d8

08004eac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	220a      	movs	r2, #10
 8004eb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004eba:	4b03      	ldr	r3, [pc, #12]	; (8004ec8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	2000000c 	.word	0x2000000c

08004ecc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d005      	beq.n	8004eec <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bc80      	pop	{r7}
 8004ef6:	4770      	bx	lr

08004ef8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	4613      	mov	r3, r2
 8004f04:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f0c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004f16:	88fa      	ldrh	r2, [r7, #6]
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	371c      	adds	r7, #28
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bc80      	pop	{r7}
 8004f28:	4770      	bx	lr

08004f2a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b085      	sub	sp, #20
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
 8004f32:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f3a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bc80      	pop	{r7}
 8004f4e:	4770      	bx	lr

08004f50 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d01c      	beq.n	8004fa4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d115      	bne.n	8004fa0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	2181      	movs	r1, #129	; 0x81
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f001 fd70 	bl	8006a7c <USBD_LL_Transmit>

      return USBD_OK;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	e002      	b.n	8004fa6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e000      	b.n	8004fa6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8004fa4:	2302      	movs	r3, #2
  }
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b084      	sub	sp, #16
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fbc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d017      	beq.n	8004ff8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	7c1b      	ldrb	r3, [r3, #16]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d109      	bne.n	8004fe4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fda:	2101      	movs	r1, #1
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f001 fd70 	bl	8006ac2 <USBD_LL_PrepareReceive>
 8004fe2:	e007      	b.n	8004ff4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fea:	2340      	movs	r3, #64	; 0x40
 8004fec:	2101      	movs	r1, #1
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f001 fd67 	bl	8006ac2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	e000      	b.n	8004ffa <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004ff8:	2302      	movs	r3, #2
  }
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b084      	sub	sp, #16
 8005006:	af00      	add	r7, sp, #0
 8005008:	60f8      	str	r0, [r7, #12]
 800500a:	60b9      	str	r1, [r7, #8]
 800500c:	4613      	mov	r3, r2
 800500e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005016:	2302      	movs	r3, #2
 8005018:	e01a      	b.n	8005050 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	79fa      	ldrb	r2, [r7, #7]
 8005046:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f001 fbe5 	bl	8006818 <USBD_LL_Init>

  return USBD_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d006      	beq.n	800507a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005074:	2300      	movs	r3, #0
 8005076:	73fb      	strb	r3, [r7, #15]
 8005078:	e001      	b.n	800507e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800507a:	2302      	movs	r3, #2
 800507c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800507e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005080:	4618      	mov	r0, r3
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	bc80      	pop	{r7}
 8005088:	4770      	bx	lr

0800508a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b082      	sub	sp, #8
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f001 fc0a 	bl	80068ac <USBD_LL_Start>

  return USBD_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bc80      	pop	{r7}
 80050b4:	4770      	bx	lr

080050b6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b084      	sub	sp, #16
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
 80050be:	460b      	mov	r3, r1
 80050c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80050c2:	2302      	movs	r3, #2
 80050c4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00c      	beq.n	80050ea <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	78fa      	ldrb	r2, [r7, #3]
 80050da:	4611      	mov	r1, r2
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	4798      	blx	r3
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	460b      	mov	r3, r1
 80050fe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	78fa      	ldrb	r2, [r7, #3]
 800510a:	4611      	mov	r1, r2
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	4798      	blx	r3

  return USBD_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b082      	sub	sp, #8
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800512a:	6839      	ldr	r1, [r7, #0]
 800512c:	4618      	mov	r0, r3
 800512e:	f000 ff03 	bl	8005f38 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005140:	461a      	mov	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800514e:	f003 031f 	and.w	r3, r3, #31
 8005152:	2b01      	cmp	r3, #1
 8005154:	d00c      	beq.n	8005170 <USBD_LL_SetupStage+0x56>
 8005156:	2b01      	cmp	r3, #1
 8005158:	d302      	bcc.n	8005160 <USBD_LL_SetupStage+0x46>
 800515a:	2b02      	cmp	r3, #2
 800515c:	d010      	beq.n	8005180 <USBD_LL_SetupStage+0x66>
 800515e:	e017      	b.n	8005190 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005166:	4619      	mov	r1, r3
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fa03 	bl	8005574 <USBD_StdDevReq>
      break;
 800516e:	e01a      	b.n	80051a6 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005176:	4619      	mov	r1, r3
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 fa65 	bl	8005648 <USBD_StdItfReq>
      break;
 800517e:	e012      	b.n	80051a6 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005186:	4619      	mov	r1, r3
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 faa3 	bl	80056d4 <USBD_StdEPReq>
      break;
 800518e:	e00a      	b.n	80051a6 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005196:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800519a:	b2db      	uxtb	r3, r3
 800519c:	4619      	mov	r1, r3
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f001 fbe4 	bl	800696c <USBD_LL_StallEP>
      break;
 80051a4:	bf00      	nop
  }

  return USBD_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3708      	adds	r7, #8
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	460b      	mov	r3, r1
 80051ba:	607a      	str	r2, [r7, #4]
 80051bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80051be:	7afb      	ldrb	r3, [r7, #11]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d14b      	bne.n	800525c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80051ca:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80051d2:	2b03      	cmp	r3, #3
 80051d4:	d134      	bne.n	8005240 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d919      	bls.n	8005216 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	1ad2      	subs	r2, r2, r3
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d203      	bcs.n	8005204 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005200:	b29b      	uxth	r3, r3
 8005202:	e002      	b.n	800520a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005208:	b29b      	uxth	r3, r3
 800520a:	461a      	mov	r2, r3
 800520c:	6879      	ldr	r1, [r7, #4]
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f000 ff84 	bl	800611c <USBD_CtlContinueRx>
 8005214:	e038      	b.n	8005288 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005228:	2b03      	cmp	r3, #3
 800522a:	d105      	bne.n	8005238 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f000 ff81 	bl	8006140 <USBD_CtlSendStatus>
 800523e:	e023      	b.n	8005288 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005246:	2b05      	cmp	r3, #5
 8005248:	d11e      	bne.n	8005288 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005252:	2100      	movs	r1, #0
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f001 fb89 	bl	800696c <USBD_LL_StallEP>
 800525a:	e015      	b.n	8005288 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00d      	beq.n	8005284 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800526e:	2b03      	cmp	r3, #3
 8005270:	d108      	bne.n	8005284 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	7afa      	ldrb	r2, [r7, #11]
 800527c:	4611      	mov	r1, r2
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	4798      	blx	r3
 8005282:	e001      	b.n	8005288 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005284:	2302      	movs	r3, #2
 8005286:	e000      	b.n	800528a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3718      	adds	r7, #24
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b086      	sub	sp, #24
 8005296:	af00      	add	r7, sp, #0
 8005298:	60f8      	str	r0, [r7, #12]
 800529a:	460b      	mov	r3, r1
 800529c:	607a      	str	r2, [r7, #4]
 800529e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80052a0:	7afb      	ldrb	r3, [r7, #11]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d17f      	bne.n	80053a6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	3314      	adds	r3, #20
 80052aa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d15c      	bne.n	8005370 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	68da      	ldr	r2, [r3, #12]
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d915      	bls.n	80052ee <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	1ad2      	subs	r2, r2, r3
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	461a      	mov	r2, r3
 80052d8:	6879      	ldr	r1, [r7, #4]
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 feee 	bl	80060bc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80052e0:	2300      	movs	r3, #0
 80052e2:	2200      	movs	r2, #0
 80052e4:	2100      	movs	r1, #0
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f001 fbeb 	bl	8006ac2 <USBD_LL_PrepareReceive>
 80052ec:	e04e      	b.n	800538c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	6912      	ldr	r2, [r2, #16]
 80052f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80052fa:	fb02 f201 	mul.w	r2, r2, r1
 80052fe:	1a9b      	subs	r3, r3, r2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d11c      	bne.n	800533e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800530c:	429a      	cmp	r2, r3
 800530e:	d316      	bcc.n	800533e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800531a:	429a      	cmp	r2, r3
 800531c:	d20f      	bcs.n	800533e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800531e:	2200      	movs	r2, #0
 8005320:	2100      	movs	r1, #0
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 feca 	bl	80060bc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005330:	2300      	movs	r3, #0
 8005332:	2200      	movs	r2, #0
 8005334:	2100      	movs	r1, #0
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f001 fbc3 	bl	8006ac2 <USBD_LL_PrepareReceive>
 800533c:	e026      	b.n	800538c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00a      	beq.n	8005360 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005350:	2b03      	cmp	r3, #3
 8005352:	d105      	bne.n	8005360 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005360:	2180      	movs	r1, #128	; 0x80
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f001 fb02 	bl	800696c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 fefc 	bl	8006166 <USBD_CtlReceiveStatus>
 800536e:	e00d      	b.n	800538c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005376:	2b04      	cmp	r3, #4
 8005378:	d004      	beq.n	8005384 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005380:	2b00      	cmp	r3, #0
 8005382:	d103      	bne.n	800538c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005384:	2180      	movs	r1, #128	; 0x80
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f001 faf0 	bl	800696c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005392:	2b01      	cmp	r3, #1
 8005394:	d11d      	bne.n	80053d2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f7ff fe83 	bl	80050a2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80053a4:	e015      	b.n	80053d2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00d      	beq.n	80053ce <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d108      	bne.n	80053ce <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	7afa      	ldrb	r2, [r7, #11]
 80053c6:	4611      	mov	r1, r2
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	4798      	blx	r3
 80053cc:	e001      	b.n	80053d2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80053ce:	2302      	movs	r3, #2
 80053d0:	e000      	b.n	80053d4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3718      	adds	r7, #24
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80053e4:	2340      	movs	r3, #64	; 0x40
 80053e6:	2200      	movs	r2, #0
 80053e8:	2100      	movs	r1, #0
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f001 fa79 	bl	80068e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2240      	movs	r2, #64	; 0x40
 80053fc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005400:	2340      	movs	r3, #64	; 0x40
 8005402:	2200      	movs	r2, #0
 8005404:	2180      	movs	r1, #128	; 0x80
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f001 fa6b 	bl	80068e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2240      	movs	r2, #64	; 0x40
 8005416:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800543c:	2b00      	cmp	r3, #0
 800543e:	d009      	beq.n	8005454 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	6852      	ldr	r2, [r2, #4]
 800544c:	b2d2      	uxtb	r2, r2
 800544e:	4611      	mov	r1, r2
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	4798      	blx	r3
  }

  return USBD_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	460b      	mov	r3, r1
 8005468:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	78fa      	ldrb	r2, [r7, #3]
 800546e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	bc80      	pop	{r7}
 800547a:	4770      	bx	lr

0800547c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2204      	movs	r2, #4
 8005494:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	bc80      	pop	{r7}
 80054a2:	4770      	bx	lr

080054a4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d105      	bne.n	80054c2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bc80      	pop	{r7}
 80054cc:	4770      	bx	lr

080054ce <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b082      	sub	sp, #8
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054dc:	2b03      	cmp	r3, #3
 80054de:	d10b      	bne.n	80054f8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d005      	beq.n	80054f8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
 800550a:	460b      	mov	r3, r1
 800550c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	bc80      	pop	{r7}
 8005518:	4770      	bx	lr

0800551a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
 8005522:	460b      	mov	r3, r1
 8005524:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	bc80      	pop	{r7}
 8005530:	4770      	bx	lr

08005532 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005532:	b480      	push	{r7}
 8005534:	b083      	sub	sp, #12
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	bc80      	pop	{r7}
 8005544:	4770      	bx	lr

08005546 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b082      	sub	sp, #8
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6852      	ldr	r2, [r2, #4]
 8005562:	b2d2      	uxtb	r2, r2
 8005564:	4611      	mov	r1, r2
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	4798      	blx	r3

  return USBD_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800558a:	2b20      	cmp	r3, #32
 800558c:	d004      	beq.n	8005598 <USBD_StdDevReq+0x24>
 800558e:	2b40      	cmp	r3, #64	; 0x40
 8005590:	d002      	beq.n	8005598 <USBD_StdDevReq+0x24>
 8005592:	2b00      	cmp	r3, #0
 8005594:	d008      	beq.n	80055a8 <USBD_StdDevReq+0x34>
 8005596:	e04c      	b.n	8005632 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	6839      	ldr	r1, [r7, #0]
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	4798      	blx	r3
      break;
 80055a6:	e049      	b.n	800563c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	785b      	ldrb	r3, [r3, #1]
 80055ac:	2b09      	cmp	r3, #9
 80055ae:	d83a      	bhi.n	8005626 <USBD_StdDevReq+0xb2>
 80055b0:	a201      	add	r2, pc, #4	; (adr r2, 80055b8 <USBD_StdDevReq+0x44>)
 80055b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b6:	bf00      	nop
 80055b8:	08005609 	.word	0x08005609
 80055bc:	0800561d 	.word	0x0800561d
 80055c0:	08005627 	.word	0x08005627
 80055c4:	08005613 	.word	0x08005613
 80055c8:	08005627 	.word	0x08005627
 80055cc:	080055eb 	.word	0x080055eb
 80055d0:	080055e1 	.word	0x080055e1
 80055d4:	08005627 	.word	0x08005627
 80055d8:	080055ff 	.word	0x080055ff
 80055dc:	080055f5 	.word	0x080055f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80055e0:	6839      	ldr	r1, [r7, #0]
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f9d4 	bl	8005990 <USBD_GetDescriptor>
          break;
 80055e8:	e022      	b.n	8005630 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80055ea:	6839      	ldr	r1, [r7, #0]
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 fb37 	bl	8005c60 <USBD_SetAddress>
          break;
 80055f2:	e01d      	b.n	8005630 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80055f4:	6839      	ldr	r1, [r7, #0]
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fb74 	bl	8005ce4 <USBD_SetConfig>
          break;
 80055fc:	e018      	b.n	8005630 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80055fe:	6839      	ldr	r1, [r7, #0]
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 fbfd 	bl	8005e00 <USBD_GetConfig>
          break;
 8005606:	e013      	b.n	8005630 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005608:	6839      	ldr	r1, [r7, #0]
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fc2c 	bl	8005e68 <USBD_GetStatus>
          break;
 8005610:	e00e      	b.n	8005630 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005612:	6839      	ldr	r1, [r7, #0]
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 fc5a 	bl	8005ece <USBD_SetFeature>
          break;
 800561a:	e009      	b.n	8005630 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800561c:	6839      	ldr	r1, [r7, #0]
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fc69 	bl	8005ef6 <USBD_ClrFeature>
          break;
 8005624:	e004      	b.n	8005630 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005626:	6839      	ldr	r1, [r7, #0]
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 fcc1 	bl	8005fb0 <USBD_CtlError>
          break;
 800562e:	bf00      	nop
      }
      break;
 8005630:	e004      	b.n	800563c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005632:	6839      	ldr	r1, [r7, #0]
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 fcbb 	bl	8005fb0 <USBD_CtlError>
      break;
 800563a:	bf00      	nop
  }

  return ret;
 800563c:	7bfb      	ldrb	r3, [r7, #15]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop

08005648 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005652:	2300      	movs	r3, #0
 8005654:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800565e:	2b20      	cmp	r3, #32
 8005660:	d003      	beq.n	800566a <USBD_StdItfReq+0x22>
 8005662:	2b40      	cmp	r3, #64	; 0x40
 8005664:	d001      	beq.n	800566a <USBD_StdItfReq+0x22>
 8005666:	2b00      	cmp	r3, #0
 8005668:	d12a      	bne.n	80056c0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005670:	3b01      	subs	r3, #1
 8005672:	2b02      	cmp	r3, #2
 8005674:	d81d      	bhi.n	80056b2 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	889b      	ldrh	r3, [r3, #4]
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b01      	cmp	r3, #1
 800567e:	d813      	bhi.n	80056a8 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	6839      	ldr	r1, [r7, #0]
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	4798      	blx	r3
 800568e:	4603      	mov	r3, r0
 8005690:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	88db      	ldrh	r3, [r3, #6]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d110      	bne.n	80056bc <USBD_StdItfReq+0x74>
 800569a:	7bfb      	ldrb	r3, [r7, #15]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10d      	bne.n	80056bc <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 fd4d 	bl	8006140 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80056a6:	e009      	b.n	80056bc <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80056a8:	6839      	ldr	r1, [r7, #0]
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fc80 	bl	8005fb0 <USBD_CtlError>
          break;
 80056b0:	e004      	b.n	80056bc <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80056b2:	6839      	ldr	r1, [r7, #0]
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 fc7b 	bl	8005fb0 <USBD_CtlError>
          break;
 80056ba:	e000      	b.n	80056be <USBD_StdItfReq+0x76>
          break;
 80056bc:	bf00      	nop
      }
      break;
 80056be:	e004      	b.n	80056ca <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80056c0:	6839      	ldr	r1, [r7, #0]
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fc74 	bl	8005fb0 <USBD_CtlError>
      break;
 80056c8:	bf00      	nop
  }

  return USBD_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80056de:	2300      	movs	r3, #0
 80056e0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	889b      	ldrh	r3, [r3, #4]
 80056e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	d004      	beq.n	80056fe <USBD_StdEPReq+0x2a>
 80056f4:	2b40      	cmp	r3, #64	; 0x40
 80056f6:	d002      	beq.n	80056fe <USBD_StdEPReq+0x2a>
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d008      	beq.n	800570e <USBD_StdEPReq+0x3a>
 80056fc:	e13d      	b.n	800597a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	6839      	ldr	r1, [r7, #0]
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	4798      	blx	r3
      break;
 800570c:	e13a      	b.n	8005984 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005716:	2b20      	cmp	r3, #32
 8005718:	d10a      	bne.n	8005730 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	6839      	ldr	r1, [r7, #0]
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	4798      	blx	r3
 8005728:	4603      	mov	r3, r0
 800572a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800572c:	7bfb      	ldrb	r3, [r7, #15]
 800572e:	e12a      	b.n	8005986 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	785b      	ldrb	r3, [r3, #1]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d03e      	beq.n	80057b6 <USBD_StdEPReq+0xe2>
 8005738:	2b03      	cmp	r3, #3
 800573a:	d002      	beq.n	8005742 <USBD_StdEPReq+0x6e>
 800573c:	2b00      	cmp	r3, #0
 800573e:	d070      	beq.n	8005822 <USBD_StdEPReq+0x14e>
 8005740:	e115      	b.n	800596e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005748:	2b02      	cmp	r3, #2
 800574a:	d002      	beq.n	8005752 <USBD_StdEPReq+0x7e>
 800574c:	2b03      	cmp	r3, #3
 800574e:	d015      	beq.n	800577c <USBD_StdEPReq+0xa8>
 8005750:	e02b      	b.n	80057aa <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005752:	7bbb      	ldrb	r3, [r7, #14]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00c      	beq.n	8005772 <USBD_StdEPReq+0x9e>
 8005758:	7bbb      	ldrb	r3, [r7, #14]
 800575a:	2b80      	cmp	r3, #128	; 0x80
 800575c:	d009      	beq.n	8005772 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800575e:	7bbb      	ldrb	r3, [r7, #14]
 8005760:	4619      	mov	r1, r3
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f001 f902 	bl	800696c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005768:	2180      	movs	r1, #128	; 0x80
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f001 f8fe 	bl	800696c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005770:	e020      	b.n	80057b4 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005772:	6839      	ldr	r1, [r7, #0]
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 fc1b 	bl	8005fb0 <USBD_CtlError>
              break;
 800577a:	e01b      	b.n	80057b4 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	885b      	ldrh	r3, [r3, #2]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10e      	bne.n	80057a2 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005784:	7bbb      	ldrb	r3, [r7, #14]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00b      	beq.n	80057a2 <USBD_StdEPReq+0xce>
 800578a:	7bbb      	ldrb	r3, [r7, #14]
 800578c:	2b80      	cmp	r3, #128	; 0x80
 800578e:	d008      	beq.n	80057a2 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	88db      	ldrh	r3, [r3, #6]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d104      	bne.n	80057a2 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005798:	7bbb      	ldrb	r3, [r7, #14]
 800579a:	4619      	mov	r1, r3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f001 f8e5 	bl	800696c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fccc 	bl	8006140 <USBD_CtlSendStatus>

              break;
 80057a8:	e004      	b.n	80057b4 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80057aa:	6839      	ldr	r1, [r7, #0]
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fbff 	bl	8005fb0 <USBD_CtlError>
              break;
 80057b2:	bf00      	nop
          }
          break;
 80057b4:	e0e0      	b.n	8005978 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d002      	beq.n	80057c6 <USBD_StdEPReq+0xf2>
 80057c0:	2b03      	cmp	r3, #3
 80057c2:	d015      	beq.n	80057f0 <USBD_StdEPReq+0x11c>
 80057c4:	e026      	b.n	8005814 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80057c6:	7bbb      	ldrb	r3, [r7, #14]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00c      	beq.n	80057e6 <USBD_StdEPReq+0x112>
 80057cc:	7bbb      	ldrb	r3, [r7, #14]
 80057ce:	2b80      	cmp	r3, #128	; 0x80
 80057d0:	d009      	beq.n	80057e6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80057d2:	7bbb      	ldrb	r3, [r7, #14]
 80057d4:	4619      	mov	r1, r3
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f001 f8c8 	bl	800696c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80057dc:	2180      	movs	r1, #128	; 0x80
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f001 f8c4 	bl	800696c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80057e4:	e01c      	b.n	8005820 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80057e6:	6839      	ldr	r1, [r7, #0]
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fbe1 	bl	8005fb0 <USBD_CtlError>
              break;
 80057ee:	e017      	b.n	8005820 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	885b      	ldrh	r3, [r3, #2]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d112      	bne.n	800581e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80057f8:	7bbb      	ldrb	r3, [r7, #14]
 80057fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d004      	beq.n	800580c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005802:	7bbb      	ldrb	r3, [r7, #14]
 8005804:	4619      	mov	r1, r3
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f001 f8cf 	bl	80069aa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fc97 	bl	8006140 <USBD_CtlSendStatus>
              }
              break;
 8005812:	e004      	b.n	800581e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005814:	6839      	ldr	r1, [r7, #0]
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 fbca 	bl	8005fb0 <USBD_CtlError>
              break;
 800581c:	e000      	b.n	8005820 <USBD_StdEPReq+0x14c>
              break;
 800581e:	bf00      	nop
          }
          break;
 8005820:	e0aa      	b.n	8005978 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005828:	2b02      	cmp	r3, #2
 800582a:	d002      	beq.n	8005832 <USBD_StdEPReq+0x15e>
 800582c:	2b03      	cmp	r3, #3
 800582e:	d032      	beq.n	8005896 <USBD_StdEPReq+0x1c2>
 8005830:	e097      	b.n	8005962 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005832:	7bbb      	ldrb	r3, [r7, #14]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d007      	beq.n	8005848 <USBD_StdEPReq+0x174>
 8005838:	7bbb      	ldrb	r3, [r7, #14]
 800583a:	2b80      	cmp	r3, #128	; 0x80
 800583c:	d004      	beq.n	8005848 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800583e:	6839      	ldr	r1, [r7, #0]
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 fbb5 	bl	8005fb0 <USBD_CtlError>
                break;
 8005846:	e091      	b.n	800596c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005848:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800584c:	2b00      	cmp	r3, #0
 800584e:	da0b      	bge.n	8005868 <USBD_StdEPReq+0x194>
 8005850:	7bbb      	ldrb	r3, [r7, #14]
 8005852:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005856:	4613      	mov	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	3310      	adds	r3, #16
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	4413      	add	r3, r2
 8005864:	3304      	adds	r3, #4
 8005866:	e00b      	b.n	8005880 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005868:	7bbb      	ldrb	r3, [r7, #14]
 800586a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800586e:	4613      	mov	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	4413      	add	r3, r2
 800587e:	3304      	adds	r3, #4
 8005880:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2200      	movs	r2, #0
 8005886:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2202      	movs	r2, #2
 800588c:	4619      	mov	r1, r3
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fbf8 	bl	8006084 <USBD_CtlSendData>
              break;
 8005894:	e06a      	b.n	800596c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005896:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800589a:	2b00      	cmp	r3, #0
 800589c:	da11      	bge.n	80058c2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800589e:	7bbb      	ldrb	r3, [r7, #14]
 80058a0:	f003 020f 	and.w	r2, r3, #15
 80058a4:	6879      	ldr	r1, [r7, #4]
 80058a6:	4613      	mov	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	440b      	add	r3, r1
 80058b0:	3318      	adds	r3, #24
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d117      	bne.n	80058e8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80058b8:	6839      	ldr	r1, [r7, #0]
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fb78 	bl	8005fb0 <USBD_CtlError>
                  break;
 80058c0:	e054      	b.n	800596c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80058c2:	7bbb      	ldrb	r3, [r7, #14]
 80058c4:	f003 020f 	and.w	r2, r3, #15
 80058c8:	6879      	ldr	r1, [r7, #4]
 80058ca:	4613      	mov	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	440b      	add	r3, r1
 80058d4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d104      	bne.n	80058e8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80058de:	6839      	ldr	r1, [r7, #0]
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 fb65 	bl	8005fb0 <USBD_CtlError>
                  break;
 80058e6:	e041      	b.n	800596c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	da0b      	bge.n	8005908 <USBD_StdEPReq+0x234>
 80058f0:	7bbb      	ldrb	r3, [r7, #14]
 80058f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058f6:	4613      	mov	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	3310      	adds	r3, #16
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	4413      	add	r3, r2
 8005904:	3304      	adds	r3, #4
 8005906:	e00b      	b.n	8005920 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005908:	7bbb      	ldrb	r3, [r7, #14]
 800590a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800590e:	4613      	mov	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	4413      	add	r3, r2
 800591e:	3304      	adds	r3, #4
 8005920:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005922:	7bbb      	ldrb	r3, [r7, #14]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <USBD_StdEPReq+0x25a>
 8005928:	7bbb      	ldrb	r3, [r7, #14]
 800592a:	2b80      	cmp	r3, #128	; 0x80
 800592c:	d103      	bne.n	8005936 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2200      	movs	r2, #0
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	e00e      	b.n	8005954 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005936:	7bbb      	ldrb	r3, [r7, #14]
 8005938:	4619      	mov	r1, r3
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f001 f854 	bl	80069e8 <USBD_LL_IsStallEP>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2201      	movs	r2, #1
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	e002      	b.n	8005954 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	2200      	movs	r2, #0
 8005952:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	2202      	movs	r2, #2
 8005958:	4619      	mov	r1, r3
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 fb92 	bl	8006084 <USBD_CtlSendData>
              break;
 8005960:	e004      	b.n	800596c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005962:	6839      	ldr	r1, [r7, #0]
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 fb23 	bl	8005fb0 <USBD_CtlError>
              break;
 800596a:	bf00      	nop
          }
          break;
 800596c:	e004      	b.n	8005978 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800596e:	6839      	ldr	r1, [r7, #0]
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 fb1d 	bl	8005fb0 <USBD_CtlError>
          break;
 8005976:	bf00      	nop
      }
      break;
 8005978:	e004      	b.n	8005984 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800597a:	6839      	ldr	r1, [r7, #0]
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 fb17 	bl	8005fb0 <USBD_CtlError>
      break;
 8005982:	bf00      	nop
  }

  return ret;
 8005984:	7bfb      	ldrb	r3, [r7, #15]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
	...

08005990 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800599e:	2300      	movs	r3, #0
 80059a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	885b      	ldrh	r3, [r3, #2]
 80059aa:	0a1b      	lsrs	r3, r3, #8
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	3b01      	subs	r3, #1
 80059b0:	2b06      	cmp	r3, #6
 80059b2:	f200 8128 	bhi.w	8005c06 <USBD_GetDescriptor+0x276>
 80059b6:	a201      	add	r2, pc, #4	; (adr r2, 80059bc <USBD_GetDescriptor+0x2c>)
 80059b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059bc:	080059d9 	.word	0x080059d9
 80059c0:	080059f1 	.word	0x080059f1
 80059c4:	08005a31 	.word	0x08005a31
 80059c8:	08005c07 	.word	0x08005c07
 80059cc:	08005c07 	.word	0x08005c07
 80059d0:	08005ba7 	.word	0x08005ba7
 80059d4:	08005bd3 	.word	0x08005bd3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	7c12      	ldrb	r2, [r2, #16]
 80059e4:	f107 0108 	add.w	r1, r7, #8
 80059e8:	4610      	mov	r0, r2
 80059ea:	4798      	blx	r3
 80059ec:	60f8      	str	r0, [r7, #12]
      break;
 80059ee:	e112      	b.n	8005c16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	7c1b      	ldrb	r3, [r3, #16]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10d      	bne.n	8005a14 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a00:	f107 0208 	add.w	r2, r7, #8
 8005a04:	4610      	mov	r0, r2
 8005a06:	4798      	blx	r3
 8005a08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	2202      	movs	r2, #2
 8005a10:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005a12:	e100      	b.n	8005c16 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1c:	f107 0208 	add.w	r2, r7, #8
 8005a20:	4610      	mov	r0, r2
 8005a22:	4798      	blx	r3
 8005a24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	701a      	strb	r2, [r3, #0]
      break;
 8005a2e:	e0f2      	b.n	8005c16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	885b      	ldrh	r3, [r3, #2]
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b05      	cmp	r3, #5
 8005a38:	f200 80ac 	bhi.w	8005b94 <USBD_GetDescriptor+0x204>
 8005a3c:	a201      	add	r2, pc, #4	; (adr r2, 8005a44 <USBD_GetDescriptor+0xb4>)
 8005a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a42:	bf00      	nop
 8005a44:	08005a5d 	.word	0x08005a5d
 8005a48:	08005a91 	.word	0x08005a91
 8005a4c:	08005ac5 	.word	0x08005ac5
 8005a50:	08005af9 	.word	0x08005af9
 8005a54:	08005b2d 	.word	0x08005b2d
 8005a58:	08005b61 	.word	0x08005b61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00b      	beq.n	8005a80 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	7c12      	ldrb	r2, [r2, #16]
 8005a74:	f107 0108 	add.w	r1, r7, #8
 8005a78:	4610      	mov	r0, r2
 8005a7a:	4798      	blx	r3
 8005a7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a7e:	e091      	b.n	8005ba4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a80:	6839      	ldr	r1, [r7, #0]
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fa94 	bl	8005fb0 <USBD_CtlError>
            err++;
 8005a88:	7afb      	ldrb	r3, [r7, #11]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	72fb      	strb	r3, [r7, #11]
          break;
 8005a8e:	e089      	b.n	8005ba4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00b      	beq.n	8005ab4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	7c12      	ldrb	r2, [r2, #16]
 8005aa8:	f107 0108 	add.w	r1, r7, #8
 8005aac:	4610      	mov	r0, r2
 8005aae:	4798      	blx	r3
 8005ab0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ab2:	e077      	b.n	8005ba4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ab4:	6839      	ldr	r1, [r7, #0]
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fa7a 	bl	8005fb0 <USBD_CtlError>
            err++;
 8005abc:	7afb      	ldrb	r3, [r7, #11]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	72fb      	strb	r3, [r7, #11]
          break;
 8005ac2:	e06f      	b.n	8005ba4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00b      	beq.n	8005ae8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	7c12      	ldrb	r2, [r2, #16]
 8005adc:	f107 0108 	add.w	r1, r7, #8
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	4798      	blx	r3
 8005ae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ae6:	e05d      	b.n	8005ba4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ae8:	6839      	ldr	r1, [r7, #0]
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fa60 	bl	8005fb0 <USBD_CtlError>
            err++;
 8005af0:	7afb      	ldrb	r3, [r7, #11]
 8005af2:	3301      	adds	r3, #1
 8005af4:	72fb      	strb	r3, [r7, #11]
          break;
 8005af6:	e055      	b.n	8005ba4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00b      	beq.n	8005b1c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	7c12      	ldrb	r2, [r2, #16]
 8005b10:	f107 0108 	add.w	r1, r7, #8
 8005b14:	4610      	mov	r0, r2
 8005b16:	4798      	blx	r3
 8005b18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b1a:	e043      	b.n	8005ba4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b1c:	6839      	ldr	r1, [r7, #0]
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fa46 	bl	8005fb0 <USBD_CtlError>
            err++;
 8005b24:	7afb      	ldrb	r3, [r7, #11]
 8005b26:	3301      	adds	r3, #1
 8005b28:	72fb      	strb	r3, [r7, #11]
          break;
 8005b2a:	e03b      	b.n	8005ba4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00b      	beq.n	8005b50 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	7c12      	ldrb	r2, [r2, #16]
 8005b44:	f107 0108 	add.w	r1, r7, #8
 8005b48:	4610      	mov	r0, r2
 8005b4a:	4798      	blx	r3
 8005b4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b4e:	e029      	b.n	8005ba4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b50:	6839      	ldr	r1, [r7, #0]
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fa2c 	bl	8005fb0 <USBD_CtlError>
            err++;
 8005b58:	7afb      	ldrb	r3, [r7, #11]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	72fb      	strb	r3, [r7, #11]
          break;
 8005b5e:	e021      	b.n	8005ba4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00b      	beq.n	8005b84 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	7c12      	ldrb	r2, [r2, #16]
 8005b78:	f107 0108 	add.w	r1, r7, #8
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	4798      	blx	r3
 8005b80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b82:	e00f      	b.n	8005ba4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b84:	6839      	ldr	r1, [r7, #0]
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fa12 	bl	8005fb0 <USBD_CtlError>
            err++;
 8005b8c:	7afb      	ldrb	r3, [r7, #11]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	72fb      	strb	r3, [r7, #11]
          break;
 8005b92:	e007      	b.n	8005ba4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005b94:	6839      	ldr	r1, [r7, #0]
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fa0a 	bl	8005fb0 <USBD_CtlError>
          err++;
 8005b9c:	7afb      	ldrb	r3, [r7, #11]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005ba2:	e038      	b.n	8005c16 <USBD_GetDescriptor+0x286>
 8005ba4:	e037      	b.n	8005c16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	7c1b      	ldrb	r3, [r3, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d109      	bne.n	8005bc2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb6:	f107 0208 	add.w	r2, r7, #8
 8005bba:	4610      	mov	r0, r2
 8005bbc:	4798      	blx	r3
 8005bbe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005bc0:	e029      	b.n	8005c16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005bc2:	6839      	ldr	r1, [r7, #0]
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f9f3 	bl	8005fb0 <USBD_CtlError>
        err++;
 8005bca:	7afb      	ldrb	r3, [r7, #11]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	72fb      	strb	r3, [r7, #11]
      break;
 8005bd0:	e021      	b.n	8005c16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	7c1b      	ldrb	r3, [r3, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10d      	bne.n	8005bf6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be2:	f107 0208 	add.w	r2, r7, #8
 8005be6:	4610      	mov	r0, r2
 8005be8:	4798      	blx	r3
 8005bea:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	2207      	movs	r2, #7
 8005bf2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005bf4:	e00f      	b.n	8005c16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005bf6:	6839      	ldr	r1, [r7, #0]
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f9d9 	bl	8005fb0 <USBD_CtlError>
        err++;
 8005bfe:	7afb      	ldrb	r3, [r7, #11]
 8005c00:	3301      	adds	r3, #1
 8005c02:	72fb      	strb	r3, [r7, #11]
      break;
 8005c04:	e007      	b.n	8005c16 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005c06:	6839      	ldr	r1, [r7, #0]
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f9d1 	bl	8005fb0 <USBD_CtlError>
      err++;
 8005c0e:	7afb      	ldrb	r3, [r7, #11]
 8005c10:	3301      	adds	r3, #1
 8005c12:	72fb      	strb	r3, [r7, #11]
      break;
 8005c14:	bf00      	nop
  }

  if (err != 0U)
 8005c16:	7afb      	ldrb	r3, [r7, #11]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d11c      	bne.n	8005c56 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005c1c:	893b      	ldrh	r3, [r7, #8]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d011      	beq.n	8005c46 <USBD_GetDescriptor+0x2b6>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	88db      	ldrh	r3, [r3, #6]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00d      	beq.n	8005c46 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	88da      	ldrh	r2, [r3, #6]
 8005c2e:	893b      	ldrh	r3, [r7, #8]
 8005c30:	4293      	cmp	r3, r2
 8005c32:	bf28      	it	cs
 8005c34:	4613      	movcs	r3, r2
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005c3a:	893b      	ldrh	r3, [r7, #8]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	68f9      	ldr	r1, [r7, #12]
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fa1f 	bl	8006084 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	88db      	ldrh	r3, [r3, #6]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d104      	bne.n	8005c58 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 fa76 	bl	8006140 <USBD_CtlSendStatus>
 8005c54:	e000      	b.n	8005c58 <USBD_GetDescriptor+0x2c8>
    return;
 8005c56:	bf00      	nop
    }
  }
}
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop

08005c60 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	889b      	ldrh	r3, [r3, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d130      	bne.n	8005cd4 <USBD_SetAddress+0x74>
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	88db      	ldrh	r3, [r3, #6]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d12c      	bne.n	8005cd4 <USBD_SetAddress+0x74>
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	885b      	ldrh	r3, [r3, #2]
 8005c7e:	2b7f      	cmp	r3, #127	; 0x7f
 8005c80:	d828      	bhi.n	8005cd4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	885b      	ldrh	r3, [r3, #2]
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c94:	2b03      	cmp	r3, #3
 8005c96:	d104      	bne.n	8005ca2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005c98:	6839      	ldr	r1, [r7, #0]
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f988 	bl	8005fb0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ca0:	e01c      	b.n	8005cdc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	7bfa      	ldrb	r2, [r7, #15]
 8005ca6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005caa:	7bfb      	ldrb	r3, [r7, #15]
 8005cac:	4619      	mov	r1, r3
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 fec5 	bl	8006a3e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 fa43 	bl	8006140 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005cba:	7bfb      	ldrb	r3, [r7, #15]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d004      	beq.n	8005cca <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cc8:	e008      	b.n	8005cdc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cd2:	e003      	b.n	8005cdc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005cd4:	6839      	ldr	r1, [r7, #0]
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f96a 	bl	8005fb0 <USBD_CtlError>
  }
}
 8005cdc:	bf00      	nop
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	885b      	ldrh	r3, [r3, #2]
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	4b41      	ldr	r3, [pc, #260]	; (8005dfc <USBD_SetConfig+0x118>)
 8005cf6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005cf8:	4b40      	ldr	r3, [pc, #256]	; (8005dfc <USBD_SetConfig+0x118>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d904      	bls.n	8005d0a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005d00:	6839      	ldr	r1, [r7, #0]
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f954 	bl	8005fb0 <USBD_CtlError>
 8005d08:	e075      	b.n	8005df6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d002      	beq.n	8005d1a <USBD_SetConfig+0x36>
 8005d14:	2b03      	cmp	r3, #3
 8005d16:	d023      	beq.n	8005d60 <USBD_SetConfig+0x7c>
 8005d18:	e062      	b.n	8005de0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005d1a:	4b38      	ldr	r3, [pc, #224]	; (8005dfc <USBD_SetConfig+0x118>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d01a      	beq.n	8005d58 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005d22:	4b36      	ldr	r3, [pc, #216]	; (8005dfc <USBD_SetConfig+0x118>)
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	461a      	mov	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2203      	movs	r2, #3
 8005d30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005d34:	4b31      	ldr	r3, [pc, #196]	; (8005dfc <USBD_SetConfig+0x118>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	4619      	mov	r1, r3
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f7ff f9bb 	bl	80050b6 <USBD_SetClassConfig>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d104      	bne.n	8005d50 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005d46:	6839      	ldr	r1, [r7, #0]
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f931 	bl	8005fb0 <USBD_CtlError>
            return;
 8005d4e:	e052      	b.n	8005df6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f9f5 	bl	8006140 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005d56:	e04e      	b.n	8005df6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f9f1 	bl	8006140 <USBD_CtlSendStatus>
        break;
 8005d5e:	e04a      	b.n	8005df6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005d60:	4b26      	ldr	r3, [pc, #152]	; (8005dfc <USBD_SetConfig+0x118>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d112      	bne.n	8005d8e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005d70:	4b22      	ldr	r3, [pc, #136]	; (8005dfc <USBD_SetConfig+0x118>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	461a      	mov	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005d7a:	4b20      	ldr	r3, [pc, #128]	; (8005dfc <USBD_SetConfig+0x118>)
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	4619      	mov	r1, r3
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7ff f9b7 	bl	80050f4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f9da 	bl	8006140 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005d8c:	e033      	b.n	8005df6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005d8e:	4b1b      	ldr	r3, [pc, #108]	; (8005dfc <USBD_SetConfig+0x118>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	461a      	mov	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d01d      	beq.n	8005dd8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	4619      	mov	r1, r3
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7ff f9a5 	bl	80050f4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005daa:	4b14      	ldr	r3, [pc, #80]	; (8005dfc <USBD_SetConfig+0x118>)
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	461a      	mov	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005db4:	4b11      	ldr	r3, [pc, #68]	; (8005dfc <USBD_SetConfig+0x118>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	4619      	mov	r1, r3
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7ff f97b 	bl	80050b6 <USBD_SetClassConfig>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d104      	bne.n	8005dd0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005dc6:	6839      	ldr	r1, [r7, #0]
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f8f1 	bl	8005fb0 <USBD_CtlError>
            return;
 8005dce:	e012      	b.n	8005df6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 f9b5 	bl	8006140 <USBD_CtlSendStatus>
        break;
 8005dd6:	e00e      	b.n	8005df6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f9b1 	bl	8006140 <USBD_CtlSendStatus>
        break;
 8005dde:	e00a      	b.n	8005df6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005de0:	6839      	ldr	r1, [r7, #0]
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f8e4 	bl	8005fb0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005de8:	4b04      	ldr	r3, [pc, #16]	; (8005dfc <USBD_SetConfig+0x118>)
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	4619      	mov	r1, r3
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7ff f980 	bl	80050f4 <USBD_ClrClassConfig>
        break;
 8005df4:	bf00      	nop
    }
  }
}
 8005df6:	3708      	adds	r7, #8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	20000204 	.word	0x20000204

08005e00 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	88db      	ldrh	r3, [r3, #6]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d004      	beq.n	8005e1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005e12:	6839      	ldr	r1, [r7, #0]
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f8cb 	bl	8005fb0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005e1a:	e021      	b.n	8005e60 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	db17      	blt.n	8005e56 <USBD_GetConfig+0x56>
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	dd02      	ble.n	8005e30 <USBD_GetConfig+0x30>
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d00b      	beq.n	8005e46 <USBD_GetConfig+0x46>
 8005e2e:	e012      	b.n	8005e56 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3308      	adds	r3, #8
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f920 	bl	8006084 <USBD_CtlSendData>
        break;
 8005e44:	e00c      	b.n	8005e60 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	3304      	adds	r3, #4
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f918 	bl	8006084 <USBD_CtlSendData>
        break;
 8005e54:	e004      	b.n	8005e60 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8005e56:	6839      	ldr	r1, [r7, #0]
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f8a9 	bl	8005fb0 <USBD_CtlError>
        break;
 8005e5e:	bf00      	nop
}
 8005e60:	bf00      	nop
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d81e      	bhi.n	8005ebc <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	88db      	ldrh	r3, [r3, #6]
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d004      	beq.n	8005e90 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005e86:	6839      	ldr	r1, [r7, #0]
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f891 	bl	8005fb0 <USBD_CtlError>
        break;
 8005e8e:	e01a      	b.n	8005ec6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d005      	beq.n	8005eac <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	f043 0202 	orr.w	r2, r3, #2
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	330c      	adds	r3, #12
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f8e5 	bl	8006084 <USBD_CtlSendData>
      break;
 8005eba:	e004      	b.n	8005ec6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005ebc:	6839      	ldr	r1, [r7, #0]
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f876 	bl	8005fb0 <USBD_CtlError>
      break;
 8005ec4:	bf00      	nop
  }
}
 8005ec6:	bf00      	nop
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b082      	sub	sp, #8
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
 8005ed6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	885b      	ldrh	r3, [r3, #2]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d106      	bne.n	8005eee <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 f929 	bl	8006140 <USBD_CtlSendStatus>
  }
}
 8005eee:	bf00      	nop
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b082      	sub	sp, #8
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f06:	3b01      	subs	r3, #1
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d80b      	bhi.n	8005f24 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	885b      	ldrh	r3, [r3, #2]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d10c      	bne.n	8005f2e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f90f 	bl	8006140 <USBD_CtlSendStatus>
      }
      break;
 8005f22:	e004      	b.n	8005f2e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005f24:	6839      	ldr	r1, [r7, #0]
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f842 	bl	8005fb0 <USBD_CtlError>
      break;
 8005f2c:	e000      	b.n	8005f30 <USBD_ClrFeature+0x3a>
      break;
 8005f2e:	bf00      	nop
  }
}
 8005f30:	bf00      	nop
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	781a      	ldrb	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	785a      	ldrb	r2, [r3, #1]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	3302      	adds	r3, #2
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	3303      	adds	r3, #3
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	021b      	lsls	r3, r3, #8
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	4413      	add	r3, r2
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	3304      	adds	r3, #4
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	3305      	adds	r3, #5
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	021b      	lsls	r3, r3, #8
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	4413      	add	r3, r2
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	3306      	adds	r3, #6
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	3307      	adds	r3, #7
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	021b      	lsls	r3, r3, #8
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	4413      	add	r3, r2
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	80da      	strh	r2, [r3, #6]

}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bc80      	pop	{r7}
 8005fae:	4770      	bx	lr

08005fb0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005fba:	2180      	movs	r1, #128	; 0x80
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 fcd5 	bl	800696c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fcd1 	bl	800696c <USBD_LL_StallEP>
}
 8005fca:	bf00      	nop
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b086      	sub	sp, #24
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	60f8      	str	r0, [r7, #12]
 8005fda:	60b9      	str	r1, [r7, #8]
 8005fdc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d032      	beq.n	800604e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f000 f834 	bl	8006056 <USBD_GetLen>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	005b      	lsls	r3, r3, #1
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005ffc:	7dfb      	ldrb	r3, [r7, #23]
 8005ffe:	1c5a      	adds	r2, r3, #1
 8006000:	75fa      	strb	r2, [r7, #23]
 8006002:	461a      	mov	r2, r3
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	4413      	add	r3, r2
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	7812      	ldrb	r2, [r2, #0]
 800600c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800600e:	7dfb      	ldrb	r3, [r7, #23]
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	75fa      	strb	r2, [r7, #23]
 8006014:	461a      	mov	r2, r3
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	4413      	add	r3, r2
 800601a:	2203      	movs	r2, #3
 800601c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800601e:	e012      	b.n	8006046 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	60fa      	str	r2, [r7, #12]
 8006026:	7dfa      	ldrb	r2, [r7, #23]
 8006028:	1c51      	adds	r1, r2, #1
 800602a:	75f9      	strb	r1, [r7, #23]
 800602c:	4611      	mov	r1, r2
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	440a      	add	r2, r1
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006036:	7dfb      	ldrb	r3, [r7, #23]
 8006038:	1c5a      	adds	r2, r3, #1
 800603a:	75fa      	strb	r2, [r7, #23]
 800603c:	461a      	mov	r2, r3
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	4413      	add	r3, r2
 8006042:	2200      	movs	r2, #0
 8006044:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1e8      	bne.n	8006020 <USBD_GetString+0x4e>
    }
  }
}
 800604e:	bf00      	nop
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006056:	b480      	push	{r7}
 8006058:	b085      	sub	sp, #20
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800605e:	2300      	movs	r3, #0
 8006060:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006062:	e005      	b.n	8006070 <USBD_GetLen+0x1a>
  {
    len++;
 8006064:	7bfb      	ldrb	r3, [r7, #15]
 8006066:	3301      	adds	r3, #1
 8006068:	73fb      	strb	r3, [r7, #15]
    buf++;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	3301      	adds	r3, #1
 800606e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1f5      	bne.n	8006064 <USBD_GetLen+0xe>
  }

  return len;
 8006078:	7bfb      	ldrb	r3, [r7, #15]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	bc80      	pop	{r7}
 8006082:	4770      	bx	lr

08006084 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	4613      	mov	r3, r2
 8006090:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2202      	movs	r2, #2
 8006096:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800609a:	88fa      	ldrh	r2, [r7, #6]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80060a0:	88fa      	ldrh	r2, [r7, #6]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80060a6:	88fb      	ldrh	r3, [r7, #6]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	2100      	movs	r1, #0
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 fce5 	bl	8006a7c <USBD_LL_Transmit>

  return USBD_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	4613      	mov	r3, r2
 80060c8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80060ca:	88fb      	ldrh	r3, [r7, #6]
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	2100      	movs	r1, #0
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f000 fcd3 	bl	8006a7c <USBD_LL_Transmit>

  return USBD_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	4613      	mov	r3, r2
 80060ec:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2203      	movs	r2, #3
 80060f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80060f6:	88fa      	ldrh	r2, [r7, #6]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80060fe:	88fa      	ldrh	r2, [r7, #6]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006106:	88fb      	ldrh	r3, [r7, #6]
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	2100      	movs	r1, #0
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 fcd8 	bl	8006ac2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	4613      	mov	r3, r2
 8006128:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800612a:	88fb      	ldrh	r3, [r7, #6]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	2100      	movs	r1, #0
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 fcc6 	bl	8006ac2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2204      	movs	r2, #4
 800614c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006150:	2300      	movs	r3, #0
 8006152:	2200      	movs	r2, #0
 8006154:	2100      	movs	r1, #0
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fc90 	bl	8006a7c <USBD_LL_Transmit>

  return USBD_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b082      	sub	sp, #8
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2205      	movs	r2, #5
 8006172:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006176:	2300      	movs	r3, #0
 8006178:	2200      	movs	r2, #0
 800617a:	2100      	movs	r1, #0
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 fca0 	bl	8006ac2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006190:	2200      	movs	r2, #0
 8006192:	4912      	ldr	r1, [pc, #72]	; (80061dc <MX_USB_DEVICE_Init+0x50>)
 8006194:	4812      	ldr	r0, [pc, #72]	; (80061e0 <MX_USB_DEVICE_Init+0x54>)
 8006196:	f7fe ff34 	bl	8005002 <USBD_Init>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d001      	beq.n	80061a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80061a0:	f7fa fc58 	bl	8000a54 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80061a4:	490f      	ldr	r1, [pc, #60]	; (80061e4 <MX_USB_DEVICE_Init+0x58>)
 80061a6:	480e      	ldr	r0, [pc, #56]	; (80061e0 <MX_USB_DEVICE_Init+0x54>)
 80061a8:	f7fe ff56 	bl	8005058 <USBD_RegisterClass>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80061b2:	f7fa fc4f 	bl	8000a54 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80061b6:	490c      	ldr	r1, [pc, #48]	; (80061e8 <MX_USB_DEVICE_Init+0x5c>)
 80061b8:	4809      	ldr	r0, [pc, #36]	; (80061e0 <MX_USB_DEVICE_Init+0x54>)
 80061ba:	f7fe fe87 	bl	8004ecc <USBD_CDC_RegisterInterface>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d001      	beq.n	80061c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80061c4:	f7fa fc46 	bl	8000a54 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80061c8:	4805      	ldr	r0, [pc, #20]	; (80061e0 <MX_USB_DEVICE_Init+0x54>)
 80061ca:	f7fe ff5e 	bl	800508a <USBD_Start>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80061d4:	f7fa fc3e 	bl	8000a54 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80061d8:	bf00      	nop
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	2000012c 	.word	0x2000012c
 80061e0:	20000a70 	.word	0x20000a70
 80061e4:	20000018 	.word	0x20000018
 80061e8:	2000011c 	.word	0x2000011c

080061ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80061f0:	2200      	movs	r2, #0
 80061f2:	4905      	ldr	r1, [pc, #20]	; (8006208 <CDC_Init_FS+0x1c>)
 80061f4:	4805      	ldr	r0, [pc, #20]	; (800620c <CDC_Init_FS+0x20>)
 80061f6:	f7fe fe7f 	bl	8004ef8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80061fa:	4905      	ldr	r1, [pc, #20]	; (8006210 <CDC_Init_FS+0x24>)
 80061fc:	4803      	ldr	r0, [pc, #12]	; (800620c <CDC_Init_FS+0x20>)
 80061fe:	f7fe fe94 	bl	8004f2a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006202:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006204:	4618      	mov	r0, r3
 8006206:	bd80      	pop	{r7, pc}
 8006208:	20001534 	.word	0x20001534
 800620c:	20000a70 	.word	0x20000a70
 8006210:	20000d34 	.word	0x20000d34

08006214 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006214:	b480      	push	{r7}
 8006216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006218:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800621a:	4618      	mov	r0, r3
 800621c:	46bd      	mov	sp, r7
 800621e:	bc80      	pop	{r7}
 8006220:	4770      	bx	lr
	...

08006224 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	4603      	mov	r3, r0
 800622c:	6039      	str	r1, [r7, #0]
 800622e:	71fb      	strb	r3, [r7, #7]
 8006230:	4613      	mov	r3, r2
 8006232:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006234:	79fb      	ldrb	r3, [r7, #7]
 8006236:	2b23      	cmp	r3, #35	; 0x23
 8006238:	d84a      	bhi.n	80062d0 <CDC_Control_FS+0xac>
 800623a:	a201      	add	r2, pc, #4	; (adr r2, 8006240 <CDC_Control_FS+0x1c>)
 800623c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006240:	080062d1 	.word	0x080062d1
 8006244:	080062d1 	.word	0x080062d1
 8006248:	080062d1 	.word	0x080062d1
 800624c:	080062d1 	.word	0x080062d1
 8006250:	080062d1 	.word	0x080062d1
 8006254:	080062d1 	.word	0x080062d1
 8006258:	080062d1 	.word	0x080062d1
 800625c:	080062d1 	.word	0x080062d1
 8006260:	080062d1 	.word	0x080062d1
 8006264:	080062d1 	.word	0x080062d1
 8006268:	080062d1 	.word	0x080062d1
 800626c:	080062d1 	.word	0x080062d1
 8006270:	080062d1 	.word	0x080062d1
 8006274:	080062d1 	.word	0x080062d1
 8006278:	080062d1 	.word	0x080062d1
 800627c:	080062d1 	.word	0x080062d1
 8006280:	080062d1 	.word	0x080062d1
 8006284:	080062d1 	.word	0x080062d1
 8006288:	080062d1 	.word	0x080062d1
 800628c:	080062d1 	.word	0x080062d1
 8006290:	080062d1 	.word	0x080062d1
 8006294:	080062d1 	.word	0x080062d1
 8006298:	080062d1 	.word	0x080062d1
 800629c:	080062d1 	.word	0x080062d1
 80062a0:	080062d1 	.word	0x080062d1
 80062a4:	080062d1 	.word	0x080062d1
 80062a8:	080062d1 	.word	0x080062d1
 80062ac:	080062d1 	.word	0x080062d1
 80062b0:	080062d1 	.word	0x080062d1
 80062b4:	080062d1 	.word	0x080062d1
 80062b8:	080062d1 	.word	0x080062d1
 80062bc:	080062d1 	.word	0x080062d1
 80062c0:	080062d1 	.word	0x080062d1
 80062c4:	080062d1 	.word	0x080062d1
 80062c8:	080062d1 	.word	0x080062d1
 80062cc:	080062d1 	.word	0x080062d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80062d0:	bf00      	nop
  }

  return (USBD_OK);
 80062d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	bc80      	pop	{r7}
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop

080062e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	// Copy new data to RxBuffer
	struct PROTOCOL_0X55_Data_Type *TmpPointer;
	TmpPointer = Protocol_0x55_GetRxPointer();
 80062ea:	f7fa f8f5 	bl	80004d8 <Protocol_0x55_GetRxPointer>
 80062ee:	60f8      	str	r0, [r7, #12]

	strncat((char*)TmpPointer->FIFO_Data, (char*) Buf, *Len);
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	461a      	mov	r2, r3
 80062f8:	6879      	ldr	r1, [r7, #4]
 80062fa:	f000 fd3d 	bl	8006d78 <strncat>

	// Set new data flag
	TmpPointer->NewData = 1;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401

	// Prepare next receive
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006306:	6879      	ldr	r1, [r7, #4]
 8006308:	4805      	ldr	r0, [pc, #20]	; (8006320 <CDC_Receive_FS+0x40>)
 800630a:	f7fe fe0e 	bl	8004f2a <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800630e:	4804      	ldr	r0, [pc, #16]	; (8006320 <CDC_Receive_FS+0x40>)
 8006310:	f7fe fe4d 	bl	8004fae <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 8006314:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	20000a70 	.word	0x20000a70

08006324 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	460b      	mov	r3, r1
 800632e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006330:	2300      	movs	r3, #0
 8006332:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006334:	4b0d      	ldr	r3, [pc, #52]	; (800636c <CDC_Transmit_FS+0x48>)
 8006336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800633a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006346:	2301      	movs	r3, #1
 8006348:	e00b      	b.n	8006362 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800634a:	887b      	ldrh	r3, [r7, #2]
 800634c:	461a      	mov	r2, r3
 800634e:	6879      	ldr	r1, [r7, #4]
 8006350:	4806      	ldr	r0, [pc, #24]	; (800636c <CDC_Transmit_FS+0x48>)
 8006352:	f7fe fdd1 	bl	8004ef8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006356:	4805      	ldr	r0, [pc, #20]	; (800636c <CDC_Transmit_FS+0x48>)
 8006358:	f7fe fdfa 	bl	8004f50 <USBD_CDC_TransmitPacket>
 800635c:	4603      	mov	r3, r0
 800635e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006360:	7bfb      	ldrb	r3, [r7, #15]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	20000a70 	.word	0x20000a70

08006370 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	4603      	mov	r3, r0
 8006378:	6039      	str	r1, [r7, #0]
 800637a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2212      	movs	r2, #18
 8006380:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006382:	4b03      	ldr	r3, [pc, #12]	; (8006390 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006384:	4618      	mov	r0, r3
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	bc80      	pop	{r7}
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	20000148 	.word	0x20000148

08006394 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	4603      	mov	r3, r0
 800639c:	6039      	str	r1, [r7, #0]
 800639e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2204      	movs	r2, #4
 80063a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80063a6:	4b03      	ldr	r3, [pc, #12]	; (80063b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bc80      	pop	{r7}
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	2000015c 	.word	0x2000015c

080063b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	4603      	mov	r3, r0
 80063c0:	6039      	str	r1, [r7, #0]
 80063c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80063c4:	79fb      	ldrb	r3, [r7, #7]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d105      	bne.n	80063d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	4907      	ldr	r1, [pc, #28]	; (80063ec <USBD_FS_ProductStrDescriptor+0x34>)
 80063ce:	4808      	ldr	r0, [pc, #32]	; (80063f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80063d0:	f7ff fdff 	bl	8005fd2 <USBD_GetString>
 80063d4:	e004      	b.n	80063e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	4904      	ldr	r1, [pc, #16]	; (80063ec <USBD_FS_ProductStrDescriptor+0x34>)
 80063da:	4805      	ldr	r0, [pc, #20]	; (80063f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80063dc:	f7ff fdf9 	bl	8005fd2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80063e0:	4b02      	ldr	r3, [pc, #8]	; (80063ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20001d34 	.word	0x20001d34
 80063f0:	08006df8 	.word	0x08006df8

080063f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	4603      	mov	r3, r0
 80063fc:	6039      	str	r1, [r7, #0]
 80063fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	4904      	ldr	r1, [pc, #16]	; (8006414 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006404:	4804      	ldr	r0, [pc, #16]	; (8006418 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006406:	f7ff fde4 	bl	8005fd2 <USBD_GetString>
  return USBD_StrDesc;
 800640a:	4b02      	ldr	r3, [pc, #8]	; (8006414 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800640c:	4618      	mov	r0, r3
 800640e:	3708      	adds	r7, #8
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	20001d34 	.word	0x20001d34
 8006418:	08006e10 	.word	0x08006e10

0800641c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	4603      	mov	r3, r0
 8006424:	6039      	str	r1, [r7, #0]
 8006426:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	221a      	movs	r2, #26
 800642c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800642e:	f000 f843 	bl	80064b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006432:	4b02      	ldr	r3, [pc, #8]	; (800643c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006434:	4618      	mov	r0, r3
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	20000160 	.word	0x20000160

08006440 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	4603      	mov	r3, r0
 8006448:	6039      	str	r1, [r7, #0]
 800644a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800644c:	79fb      	ldrb	r3, [r7, #7]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d105      	bne.n	800645e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	4907      	ldr	r1, [pc, #28]	; (8006474 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006456:	4808      	ldr	r0, [pc, #32]	; (8006478 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006458:	f7ff fdbb 	bl	8005fd2 <USBD_GetString>
 800645c:	e004      	b.n	8006468 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	4904      	ldr	r1, [pc, #16]	; (8006474 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006462:	4805      	ldr	r0, [pc, #20]	; (8006478 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006464:	f7ff fdb5 	bl	8005fd2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006468:	4b02      	ldr	r3, [pc, #8]	; (8006474 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800646a:	4618      	mov	r0, r3
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20001d34 	.word	0x20001d34
 8006478:	08006e24 	.word	0x08006e24

0800647c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	4603      	mov	r3, r0
 8006484:	6039      	str	r1, [r7, #0]
 8006486:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006488:	79fb      	ldrb	r3, [r7, #7]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d105      	bne.n	800649a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	4907      	ldr	r1, [pc, #28]	; (80064b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006492:	4808      	ldr	r0, [pc, #32]	; (80064b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006494:	f7ff fd9d 	bl	8005fd2 <USBD_GetString>
 8006498:	e004      	b.n	80064a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800649a:	683a      	ldr	r2, [r7, #0]
 800649c:	4904      	ldr	r1, [pc, #16]	; (80064b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800649e:	4805      	ldr	r0, [pc, #20]	; (80064b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80064a0:	f7ff fd97 	bl	8005fd2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80064a4:	4b02      	ldr	r3, [pc, #8]	; (80064b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	20001d34 	.word	0x20001d34
 80064b4:	08006e30 	.word	0x08006e30

080064b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80064be:	4b0f      	ldr	r3, [pc, #60]	; (80064fc <Get_SerialNum+0x44>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80064c4:	4b0e      	ldr	r3, [pc, #56]	; (8006500 <Get_SerialNum+0x48>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80064ca:	4b0e      	ldr	r3, [pc, #56]	; (8006504 <Get_SerialNum+0x4c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4413      	add	r3, r2
 80064d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d009      	beq.n	80064f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80064de:	2208      	movs	r2, #8
 80064e0:	4909      	ldr	r1, [pc, #36]	; (8006508 <Get_SerialNum+0x50>)
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f000 f814 	bl	8006510 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80064e8:	2204      	movs	r2, #4
 80064ea:	4908      	ldr	r1, [pc, #32]	; (800650c <Get_SerialNum+0x54>)
 80064ec:	68b8      	ldr	r0, [r7, #8]
 80064ee:	f000 f80f 	bl	8006510 <IntToUnicode>
  }
}
 80064f2:	bf00      	nop
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	1fff7a10 	.word	0x1fff7a10
 8006500:	1fff7a14 	.word	0x1fff7a14
 8006504:	1fff7a18 	.word	0x1fff7a18
 8006508:	20000162 	.word	0x20000162
 800650c:	20000172 	.word	0x20000172

08006510 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006510:	b480      	push	{r7}
 8006512:	b087      	sub	sp, #28
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	4613      	mov	r3, r2
 800651c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800651e:	2300      	movs	r3, #0
 8006520:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006522:	2300      	movs	r3, #0
 8006524:	75fb      	strb	r3, [r7, #23]
 8006526:	e027      	b.n	8006578 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	0f1b      	lsrs	r3, r3, #28
 800652c:	2b09      	cmp	r3, #9
 800652e:	d80b      	bhi.n	8006548 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	0f1b      	lsrs	r3, r3, #28
 8006534:	b2da      	uxtb	r2, r3
 8006536:	7dfb      	ldrb	r3, [r7, #23]
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	4619      	mov	r1, r3
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	440b      	add	r3, r1
 8006540:	3230      	adds	r2, #48	; 0x30
 8006542:	b2d2      	uxtb	r2, r2
 8006544:	701a      	strb	r2, [r3, #0]
 8006546:	e00a      	b.n	800655e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	0f1b      	lsrs	r3, r3, #28
 800654c:	b2da      	uxtb	r2, r3
 800654e:	7dfb      	ldrb	r3, [r7, #23]
 8006550:	005b      	lsls	r3, r3, #1
 8006552:	4619      	mov	r1, r3
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	440b      	add	r3, r1
 8006558:	3237      	adds	r2, #55	; 0x37
 800655a:	b2d2      	uxtb	r2, r2
 800655c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	011b      	lsls	r3, r3, #4
 8006562:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006564:	7dfb      	ldrb	r3, [r7, #23]
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	3301      	adds	r3, #1
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	4413      	add	r3, r2
 800656e:	2200      	movs	r2, #0
 8006570:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006572:	7dfb      	ldrb	r3, [r7, #23]
 8006574:	3301      	adds	r3, #1
 8006576:	75fb      	strb	r3, [r7, #23]
 8006578:	7dfa      	ldrb	r2, [r7, #23]
 800657a:	79fb      	ldrb	r3, [r7, #7]
 800657c:	429a      	cmp	r2, r3
 800657e:	d3d3      	bcc.n	8006528 <IntToUnicode+0x18>
  }
}
 8006580:	bf00      	nop
 8006582:	371c      	adds	r7, #28
 8006584:	46bd      	mov	sp, r7
 8006586:	bc80      	pop	{r7}
 8006588:	4770      	bx	lr
	...

0800658c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b08a      	sub	sp, #40	; 0x28
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006594:	f107 0314 	add.w	r3, r7, #20
 8006598:	2200      	movs	r2, #0
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	605a      	str	r2, [r3, #4]
 800659e:	609a      	str	r2, [r3, #8]
 80065a0:	60da      	str	r2, [r3, #12]
 80065a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065ac:	d13a      	bne.n	8006624 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065ae:	2300      	movs	r3, #0
 80065b0:	613b      	str	r3, [r7, #16]
 80065b2:	4b1e      	ldr	r3, [pc, #120]	; (800662c <HAL_PCD_MspInit+0xa0>)
 80065b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b6:	4a1d      	ldr	r2, [pc, #116]	; (800662c <HAL_PCD_MspInit+0xa0>)
 80065b8:	f043 0301 	orr.w	r3, r3, #1
 80065bc:	6313      	str	r3, [r2, #48]	; 0x30
 80065be:	4b1b      	ldr	r3, [pc, #108]	; (800662c <HAL_PCD_MspInit+0xa0>)
 80065c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	613b      	str	r3, [r7, #16]
 80065c8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80065ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80065ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065d0:	2302      	movs	r3, #2
 80065d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065d4:	2300      	movs	r3, #0
 80065d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065d8:	2303      	movs	r3, #3
 80065da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80065dc:	230a      	movs	r3, #10
 80065de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065e0:	f107 0314 	add.w	r3, r7, #20
 80065e4:	4619      	mov	r1, r3
 80065e6:	4812      	ldr	r0, [pc, #72]	; (8006630 <HAL_PCD_MspInit+0xa4>)
 80065e8:	f7fa fd12 	bl	8001010 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80065ec:	4b0f      	ldr	r3, [pc, #60]	; (800662c <HAL_PCD_MspInit+0xa0>)
 80065ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f0:	4a0e      	ldr	r2, [pc, #56]	; (800662c <HAL_PCD_MspInit+0xa0>)
 80065f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065f6:	6353      	str	r3, [r2, #52]	; 0x34
 80065f8:	2300      	movs	r3, #0
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	4b0b      	ldr	r3, [pc, #44]	; (800662c <HAL_PCD_MspInit+0xa0>)
 80065fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006600:	4a0a      	ldr	r2, [pc, #40]	; (800662c <HAL_PCD_MspInit+0xa0>)
 8006602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006606:	6453      	str	r3, [r2, #68]	; 0x44
 8006608:	4b08      	ldr	r3, [pc, #32]	; (800662c <HAL_PCD_MspInit+0xa0>)
 800660a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800660c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006610:	60fb      	str	r3, [r7, #12]
 8006612:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006614:	2200      	movs	r2, #0
 8006616:	2100      	movs	r1, #0
 8006618:	2043      	movs	r0, #67	; 0x43
 800661a:	f7fa fcc2 	bl	8000fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800661e:	2043      	movs	r0, #67	; 0x43
 8006620:	f7fa fcdb 	bl	8000fda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006624:	bf00      	nop
 8006626:	3728      	adds	r7, #40	; 0x28
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	40023800 	.word	0x40023800
 8006630:	40020000 	.word	0x40020000

08006634 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006648:	4619      	mov	r1, r3
 800664a:	4610      	mov	r0, r2
 800664c:	f7fe fd65 	bl	800511a <USBD_LL_SetupStage>
}
 8006650:	bf00      	nop
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	460b      	mov	r3, r1
 8006662:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800666a:	78fa      	ldrb	r2, [r7, #3]
 800666c:	6879      	ldr	r1, [r7, #4]
 800666e:	4613      	mov	r3, r2
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	1a9b      	subs	r3, r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	440b      	add	r3, r1
 8006678:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	78fb      	ldrb	r3, [r7, #3]
 8006680:	4619      	mov	r1, r3
 8006682:	f7fe fd95 	bl	80051b0 <USBD_LL_DataOutStage>
}
 8006686:	bf00      	nop
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b082      	sub	sp, #8
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	460b      	mov	r3, r1
 8006698:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 80066a0:	78fa      	ldrb	r2, [r7, #3]
 80066a2:	6879      	ldr	r1, [r7, #4]
 80066a4:	4613      	mov	r3, r2
 80066a6:	00db      	lsls	r3, r3, #3
 80066a8:	1a9b      	subs	r3, r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	440b      	add	r3, r1
 80066ae:	3348      	adds	r3, #72	; 0x48
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	78fb      	ldrb	r3, [r7, #3]
 80066b4:	4619      	mov	r1, r3
 80066b6:	f7fe fdec 	bl	8005292 <USBD_LL_DataInStage>
}
 80066ba:	bf00      	nop
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b082      	sub	sp, #8
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7fe fefc 	bl	80054ce <USBD_LL_SOF>
}
 80066d6:	bf00      	nop
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b084      	sub	sp, #16
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80066e6:	2301      	movs	r3, #1
 80066e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d102      	bne.n	80066f8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80066f2:	2300      	movs	r3, #0
 80066f4:	73fb      	strb	r3, [r7, #15]
 80066f6:	e008      	b.n	800670a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d102      	bne.n	8006706 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006700:	2301      	movs	r3, #1
 8006702:	73fb      	strb	r3, [r7, #15]
 8006704:	e001      	b.n	800670a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006706:	f7fa f9a5 	bl	8000a54 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006710:	7bfa      	ldrb	r2, [r7, #15]
 8006712:	4611      	mov	r1, r2
 8006714:	4618      	mov	r0, r3
 8006716:	f7fe fea2 	bl	800545e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006720:	4618      	mov	r0, r3
 8006722:	f7fe fe5b 	bl	80053dc <USBD_LL_Reset>
}
 8006726:	bf00      	nop
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
	...

08006730 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800673e:	4618      	mov	r0, r3
 8006740:	f7fe fe9c 	bl	800547c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	6812      	ldr	r2, [r2, #0]
 8006752:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006756:	f043 0301 	orr.w	r3, r3, #1
 800675a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d005      	beq.n	8006770 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006764:	4b04      	ldr	r3, [pc, #16]	; (8006778 <HAL_PCD_SuspendCallback+0x48>)
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	4a03      	ldr	r2, [pc, #12]	; (8006778 <HAL_PCD_SuspendCallback+0x48>)
 800676a:	f043 0306 	orr.w	r3, r3, #6
 800676e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006770:	bf00      	nop
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	e000ed00 	.word	0xe000ed00

0800677c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800678a:	4618      	mov	r0, r3
 800678c:	f7fe fe8a 	bl	80054a4 <USBD_LL_Resume>
}
 8006790:	bf00      	nop
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	460b      	mov	r3, r1
 80067a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80067aa:	78fa      	ldrb	r2, [r7, #3]
 80067ac:	4611      	mov	r1, r2
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fe feb3 	bl	800551a <USBD_LL_IsoOUTIncomplete>
}
 80067b4:	bf00      	nop
 80067b6:	3708      	adds	r7, #8
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	460b      	mov	r3, r1
 80067c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80067ce:	78fa      	ldrb	r2, [r7, #3]
 80067d0:	4611      	mov	r1, r2
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fe fe95 	bl	8005502 <USBD_LL_IsoINIncomplete>
}
 80067d8:	bf00      	nop
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fe fe9f 	bl	8005532 <USBD_LL_DevConnected>
}
 80067f4:	bf00      	nop
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800680a:	4618      	mov	r0, r3
 800680c:	f7fe fe9b 	bl	8005546 <USBD_LL_DevDisconnected>
}
 8006810:	bf00      	nop
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d139      	bne.n	800689c <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006828:	4a1f      	ldr	r2, [pc, #124]	; (80068a8 <USBD_LL_Init+0x90>)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a1d      	ldr	r2, [pc, #116]	; (80068a8 <USBD_LL_Init+0x90>)
 8006834:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006838:	4b1b      	ldr	r3, [pc, #108]	; (80068a8 <USBD_LL_Init+0x90>)
 800683a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800683e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006840:	4b19      	ldr	r3, [pc, #100]	; (80068a8 <USBD_LL_Init+0x90>)
 8006842:	2204      	movs	r2, #4
 8006844:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006846:	4b18      	ldr	r3, [pc, #96]	; (80068a8 <USBD_LL_Init+0x90>)
 8006848:	2202      	movs	r2, #2
 800684a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800684c:	4b16      	ldr	r3, [pc, #88]	; (80068a8 <USBD_LL_Init+0x90>)
 800684e:	2200      	movs	r2, #0
 8006850:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006852:	4b15      	ldr	r3, [pc, #84]	; (80068a8 <USBD_LL_Init+0x90>)
 8006854:	2202      	movs	r2, #2
 8006856:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006858:	4b13      	ldr	r3, [pc, #76]	; (80068a8 <USBD_LL_Init+0x90>)
 800685a:	2200      	movs	r2, #0
 800685c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800685e:	4b12      	ldr	r3, [pc, #72]	; (80068a8 <USBD_LL_Init+0x90>)
 8006860:	2200      	movs	r2, #0
 8006862:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006864:	4b10      	ldr	r3, [pc, #64]	; (80068a8 <USBD_LL_Init+0x90>)
 8006866:	2200      	movs	r2, #0
 8006868:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800686a:	4b0f      	ldr	r3, [pc, #60]	; (80068a8 <USBD_LL_Init+0x90>)
 800686c:	2200      	movs	r2, #0
 800686e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006870:	480d      	ldr	r0, [pc, #52]	; (80068a8 <USBD_LL_Init+0x90>)
 8006872:	f7fa fd83 	bl	800137c <HAL_PCD_Init>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d001      	beq.n	8006880 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800687c:	f7fa f8ea 	bl	8000a54 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006880:	2180      	movs	r1, #128	; 0x80
 8006882:	4809      	ldr	r0, [pc, #36]	; (80068a8 <USBD_LL_Init+0x90>)
 8006884:	f7fb fec0 	bl	8002608 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006888:	2240      	movs	r2, #64	; 0x40
 800688a:	2100      	movs	r1, #0
 800688c:	4806      	ldr	r0, [pc, #24]	; (80068a8 <USBD_LL_Init+0x90>)
 800688e:	f7fb fe75 	bl	800257c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006892:	2280      	movs	r2, #128	; 0x80
 8006894:	2101      	movs	r1, #1
 8006896:	4804      	ldr	r0, [pc, #16]	; (80068a8 <USBD_LL_Init+0x90>)
 8006898:	f7fb fe70 	bl	800257c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	20001f34 	.word	0x20001f34

080068ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068b4:	2300      	movs	r3, #0
 80068b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068b8:	2300      	movs	r3, #0
 80068ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7fa fe77 	bl	80015b6 <HAL_PCD_Start>
 80068c8:	4603      	mov	r3, r0
 80068ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 f92e 	bl	8006b30 <USBD_Get_USB_Status>
 80068d4:	4603      	mov	r3, r0
 80068d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80068d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b084      	sub	sp, #16
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	4608      	mov	r0, r1
 80068ec:	4611      	mov	r1, r2
 80068ee:	461a      	mov	r2, r3
 80068f0:	4603      	mov	r3, r0
 80068f2:	70fb      	strb	r3, [r7, #3]
 80068f4:	460b      	mov	r3, r1
 80068f6:	70bb      	strb	r3, [r7, #2]
 80068f8:	4613      	mov	r3, r2
 80068fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068fc:	2300      	movs	r3, #0
 80068fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006900:	2300      	movs	r3, #0
 8006902:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800690a:	78bb      	ldrb	r3, [r7, #2]
 800690c:	883a      	ldrh	r2, [r7, #0]
 800690e:	78f9      	ldrb	r1, [r7, #3]
 8006910:	f7fb fa3c 	bl	8001d8c <HAL_PCD_EP_Open>
 8006914:	4603      	mov	r3, r0
 8006916:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006918:	7bfb      	ldrb	r3, [r7, #15]
 800691a:	4618      	mov	r0, r3
 800691c:	f000 f908 	bl	8006b30 <USBD_Get_USB_Status>
 8006920:	4603      	mov	r3, r0
 8006922:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006924:	7bbb      	ldrb	r3, [r7, #14]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b084      	sub	sp, #16
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	460b      	mov	r3, r1
 8006938:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800693e:	2300      	movs	r3, #0
 8006940:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006948:	78fa      	ldrb	r2, [r7, #3]
 800694a:	4611      	mov	r1, r2
 800694c:	4618      	mov	r0, r3
 800694e:	f7fb fa85 	bl	8001e5c <HAL_PCD_EP_Close>
 8006952:	4603      	mov	r3, r0
 8006954:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006956:	7bfb      	ldrb	r3, [r7, #15]
 8006958:	4618      	mov	r0, r3
 800695a:	f000 f8e9 	bl	8006b30 <USBD_Get_USB_Status>
 800695e:	4603      	mov	r3, r0
 8006960:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006962:	7bbb      	ldrb	r3, [r7, #14]
}
 8006964:	4618      	mov	r0, r3
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	460b      	mov	r3, r1
 8006976:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006978:	2300      	movs	r3, #0
 800697a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800697c:	2300      	movs	r3, #0
 800697e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006986:	78fa      	ldrb	r2, [r7, #3]
 8006988:	4611      	mov	r1, r2
 800698a:	4618      	mov	r0, r3
 800698c:	f7fb fb5c 	bl	8002048 <HAL_PCD_EP_SetStall>
 8006990:	4603      	mov	r3, r0
 8006992:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006994:	7bfb      	ldrb	r3, [r7, #15]
 8006996:	4618      	mov	r0, r3
 8006998:	f000 f8ca 	bl	8006b30 <USBD_Get_USB_Status>
 800699c:	4603      	mov	r3, r0
 800699e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b084      	sub	sp, #16
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	460b      	mov	r3, r1
 80069b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069b6:	2300      	movs	r3, #0
 80069b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069c4:	78fa      	ldrb	r2, [r7, #3]
 80069c6:	4611      	mov	r1, r2
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7fb fba1 	bl	8002110 <HAL_PCD_EP_ClrStall>
 80069ce:	4603      	mov	r3, r0
 80069d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069d2:	7bfb      	ldrb	r3, [r7, #15]
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 f8ab 	bl	8006b30 <USBD_Get_USB_Status>
 80069da:	4603      	mov	r3, r0
 80069dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069de:	7bbb      	ldrb	r3, [r7, #14]
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80069fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	da0b      	bge.n	8006a1c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006a04:	78fb      	ldrb	r3, [r7, #3]
 8006a06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a0a:	68f9      	ldr	r1, [r7, #12]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	00db      	lsls	r3, r3, #3
 8006a10:	1a9b      	subs	r3, r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	440b      	add	r3, r1
 8006a16:	333e      	adds	r3, #62	; 0x3e
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	e00b      	b.n	8006a34 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006a1c:	78fb      	ldrb	r3, [r7, #3]
 8006a1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a22:	68f9      	ldr	r1, [r7, #12]
 8006a24:	4613      	mov	r3, r2
 8006a26:	00db      	lsls	r3, r3, #3
 8006a28:	1a9b      	subs	r3, r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	440b      	add	r3, r1
 8006a2e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006a32:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3714      	adds	r7, #20
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bc80      	pop	{r7}
 8006a3c:	4770      	bx	lr

08006a3e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b084      	sub	sp, #16
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	460b      	mov	r3, r1
 8006a48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a58:	78fa      	ldrb	r2, [r7, #3]
 8006a5a:	4611      	mov	r1, r2
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7fb f970 	bl	8001d42 <HAL_PCD_SetAddress>
 8006a62:	4603      	mov	r3, r0
 8006a64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 f861 	bl	8006b30 <USBD_Get_USB_Status>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a72:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b086      	sub	sp, #24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	607a      	str	r2, [r7, #4]
 8006a86:	461a      	mov	r2, r3
 8006a88:	460b      	mov	r3, r1
 8006a8a:	72fb      	strb	r3, [r7, #11]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a90:	2300      	movs	r3, #0
 8006a92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006a9e:	893b      	ldrh	r3, [r7, #8]
 8006aa0:	7af9      	ldrb	r1, [r7, #11]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	f7fb fa86 	bl	8001fb4 <HAL_PCD_EP_Transmit>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006aac:	7dfb      	ldrb	r3, [r7, #23]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 f83e 	bl	8006b30 <USBD_Get_USB_Status>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006ab8:	7dbb      	ldrb	r3, [r7, #22]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3718      	adds	r7, #24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b086      	sub	sp, #24
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	60f8      	str	r0, [r7, #12]
 8006aca:	607a      	str	r2, [r7, #4]
 8006acc:	461a      	mov	r2, r3
 8006ace:	460b      	mov	r3, r1
 8006ad0:	72fb      	strb	r3, [r7, #11]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ada:	2300      	movs	r3, #0
 8006adc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006ae4:	893b      	ldrh	r3, [r7, #8]
 8006ae6:	7af9      	ldrb	r1, [r7, #11]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	f7fb fa01 	bl	8001ef0 <HAL_PCD_EP_Receive>
 8006aee:	4603      	mov	r3, r0
 8006af0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006af2:	7dfb      	ldrb	r3, [r7, #23]
 8006af4:	4618      	mov	r0, r3
 8006af6:	f000 f81b 	bl	8006b30 <USBD_Get_USB_Status>
 8006afa:	4603      	mov	r3, r0
 8006afc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006afe:	7dbb      	ldrb	r3, [r7, #22]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3718      	adds	r7, #24
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	460b      	mov	r3, r1
 8006b12:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b1a:	78fa      	ldrb	r2, [r7, #3]
 8006b1c:	4611      	mov	r1, r2
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7fb fa31 	bl	8001f86 <HAL_PCD_EP_GetRxCount>
 8006b24:	4603      	mov	r3, r0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3708      	adds	r7, #8
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
	...

08006b30 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	4603      	mov	r3, r0
 8006b38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006b3e:	79fb      	ldrb	r3, [r7, #7]
 8006b40:	2b03      	cmp	r3, #3
 8006b42:	d817      	bhi.n	8006b74 <USBD_Get_USB_Status+0x44>
 8006b44:	a201      	add	r2, pc, #4	; (adr r2, 8006b4c <USBD_Get_USB_Status+0x1c>)
 8006b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4a:	bf00      	nop
 8006b4c:	08006b5d 	.word	0x08006b5d
 8006b50:	08006b63 	.word	0x08006b63
 8006b54:	08006b69 	.word	0x08006b69
 8006b58:	08006b6f 	.word	0x08006b6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8006b60:	e00b      	b.n	8006b7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006b62:	2302      	movs	r3, #2
 8006b64:	73fb      	strb	r3, [r7, #15]
    break;
 8006b66:	e008      	b.n	8006b7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	73fb      	strb	r3, [r7, #15]
    break;
 8006b6c:	e005      	b.n	8006b7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006b6e:	2302      	movs	r3, #2
 8006b70:	73fb      	strb	r3, [r7, #15]
    break;
 8006b72:	e002      	b.n	8006b7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006b74:	2302      	movs	r3, #2
 8006b76:	73fb      	strb	r3, [r7, #15]
    break;
 8006b78:	bf00      	nop
  }
  return usb_status;
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3714      	adds	r7, #20
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bc80      	pop	{r7}
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop

08006b88 <__errno>:
 8006b88:	4b01      	ldr	r3, [pc, #4]	; (8006b90 <__errno+0x8>)
 8006b8a:	6818      	ldr	r0, [r3, #0]
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	2000017c 	.word	0x2000017c

08006b94 <__libc_init_array>:
 8006b94:	b570      	push	{r4, r5, r6, lr}
 8006b96:	2500      	movs	r5, #0
 8006b98:	4e0c      	ldr	r6, [pc, #48]	; (8006bcc <__libc_init_array+0x38>)
 8006b9a:	4c0d      	ldr	r4, [pc, #52]	; (8006bd0 <__libc_init_array+0x3c>)
 8006b9c:	1ba4      	subs	r4, r4, r6
 8006b9e:	10a4      	asrs	r4, r4, #2
 8006ba0:	42a5      	cmp	r5, r4
 8006ba2:	d109      	bne.n	8006bb8 <__libc_init_array+0x24>
 8006ba4:	f000 f8fe 	bl	8006da4 <_init>
 8006ba8:	2500      	movs	r5, #0
 8006baa:	4e0a      	ldr	r6, [pc, #40]	; (8006bd4 <__libc_init_array+0x40>)
 8006bac:	4c0a      	ldr	r4, [pc, #40]	; (8006bd8 <__libc_init_array+0x44>)
 8006bae:	1ba4      	subs	r4, r4, r6
 8006bb0:	10a4      	asrs	r4, r4, #2
 8006bb2:	42a5      	cmp	r5, r4
 8006bb4:	d105      	bne.n	8006bc2 <__libc_init_array+0x2e>
 8006bb6:	bd70      	pop	{r4, r5, r6, pc}
 8006bb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bbc:	4798      	blx	r3
 8006bbe:	3501      	adds	r5, #1
 8006bc0:	e7ee      	b.n	8006ba0 <__libc_init_array+0xc>
 8006bc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bc6:	4798      	blx	r3
 8006bc8:	3501      	adds	r5, #1
 8006bca:	e7f2      	b.n	8006bb2 <__libc_init_array+0x1e>
 8006bcc:	08006e58 	.word	0x08006e58
 8006bd0:	08006e58 	.word	0x08006e58
 8006bd4:	08006e58 	.word	0x08006e58
 8006bd8:	08006e5c 	.word	0x08006e5c

08006bdc <malloc>:
 8006bdc:	4b02      	ldr	r3, [pc, #8]	; (8006be8 <malloc+0xc>)
 8006bde:	4601      	mov	r1, r0
 8006be0:	6818      	ldr	r0, [r3, #0]
 8006be2:	f000 b85f 	b.w	8006ca4 <_malloc_r>
 8006be6:	bf00      	nop
 8006be8:	2000017c 	.word	0x2000017c

08006bec <free>:
 8006bec:	4b02      	ldr	r3, [pc, #8]	; (8006bf8 <free+0xc>)
 8006bee:	4601      	mov	r1, r0
 8006bf0:	6818      	ldr	r0, [r3, #0]
 8006bf2:	f000 b80b 	b.w	8006c0c <_free_r>
 8006bf6:	bf00      	nop
 8006bf8:	2000017c 	.word	0x2000017c

08006bfc <memset>:
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	4402      	add	r2, r0
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d100      	bne.n	8006c06 <memset+0xa>
 8006c04:	4770      	bx	lr
 8006c06:	f803 1b01 	strb.w	r1, [r3], #1
 8006c0a:	e7f9      	b.n	8006c00 <memset+0x4>

08006c0c <_free_r>:
 8006c0c:	b538      	push	{r3, r4, r5, lr}
 8006c0e:	4605      	mov	r5, r0
 8006c10:	2900      	cmp	r1, #0
 8006c12:	d043      	beq.n	8006c9c <_free_r+0x90>
 8006c14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c18:	1f0c      	subs	r4, r1, #4
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	bfb8      	it	lt
 8006c1e:	18e4      	addlt	r4, r4, r3
 8006c20:	f000 f8be 	bl	8006da0 <__malloc_lock>
 8006c24:	4a1e      	ldr	r2, [pc, #120]	; (8006ca0 <_free_r+0x94>)
 8006c26:	6813      	ldr	r3, [r2, #0]
 8006c28:	4610      	mov	r0, r2
 8006c2a:	b933      	cbnz	r3, 8006c3a <_free_r+0x2e>
 8006c2c:	6063      	str	r3, [r4, #4]
 8006c2e:	6014      	str	r4, [r2, #0]
 8006c30:	4628      	mov	r0, r5
 8006c32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c36:	f000 b8b4 	b.w	8006da2 <__malloc_unlock>
 8006c3a:	42a3      	cmp	r3, r4
 8006c3c:	d90b      	bls.n	8006c56 <_free_r+0x4a>
 8006c3e:	6821      	ldr	r1, [r4, #0]
 8006c40:	1862      	adds	r2, r4, r1
 8006c42:	4293      	cmp	r3, r2
 8006c44:	bf01      	itttt	eq
 8006c46:	681a      	ldreq	r2, [r3, #0]
 8006c48:	685b      	ldreq	r3, [r3, #4]
 8006c4a:	1852      	addeq	r2, r2, r1
 8006c4c:	6022      	streq	r2, [r4, #0]
 8006c4e:	6063      	str	r3, [r4, #4]
 8006c50:	6004      	str	r4, [r0, #0]
 8006c52:	e7ed      	b.n	8006c30 <_free_r+0x24>
 8006c54:	4613      	mov	r3, r2
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	b10a      	cbz	r2, 8006c5e <_free_r+0x52>
 8006c5a:	42a2      	cmp	r2, r4
 8006c5c:	d9fa      	bls.n	8006c54 <_free_r+0x48>
 8006c5e:	6819      	ldr	r1, [r3, #0]
 8006c60:	1858      	adds	r0, r3, r1
 8006c62:	42a0      	cmp	r0, r4
 8006c64:	d10b      	bne.n	8006c7e <_free_r+0x72>
 8006c66:	6820      	ldr	r0, [r4, #0]
 8006c68:	4401      	add	r1, r0
 8006c6a:	1858      	adds	r0, r3, r1
 8006c6c:	4282      	cmp	r2, r0
 8006c6e:	6019      	str	r1, [r3, #0]
 8006c70:	d1de      	bne.n	8006c30 <_free_r+0x24>
 8006c72:	6810      	ldr	r0, [r2, #0]
 8006c74:	6852      	ldr	r2, [r2, #4]
 8006c76:	4401      	add	r1, r0
 8006c78:	6019      	str	r1, [r3, #0]
 8006c7a:	605a      	str	r2, [r3, #4]
 8006c7c:	e7d8      	b.n	8006c30 <_free_r+0x24>
 8006c7e:	d902      	bls.n	8006c86 <_free_r+0x7a>
 8006c80:	230c      	movs	r3, #12
 8006c82:	602b      	str	r3, [r5, #0]
 8006c84:	e7d4      	b.n	8006c30 <_free_r+0x24>
 8006c86:	6820      	ldr	r0, [r4, #0]
 8006c88:	1821      	adds	r1, r4, r0
 8006c8a:	428a      	cmp	r2, r1
 8006c8c:	bf01      	itttt	eq
 8006c8e:	6811      	ldreq	r1, [r2, #0]
 8006c90:	6852      	ldreq	r2, [r2, #4]
 8006c92:	1809      	addeq	r1, r1, r0
 8006c94:	6021      	streq	r1, [r4, #0]
 8006c96:	6062      	str	r2, [r4, #4]
 8006c98:	605c      	str	r4, [r3, #4]
 8006c9a:	e7c9      	b.n	8006c30 <_free_r+0x24>
 8006c9c:	bd38      	pop	{r3, r4, r5, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20000208 	.word	0x20000208

08006ca4 <_malloc_r>:
 8006ca4:	b570      	push	{r4, r5, r6, lr}
 8006ca6:	1ccd      	adds	r5, r1, #3
 8006ca8:	f025 0503 	bic.w	r5, r5, #3
 8006cac:	3508      	adds	r5, #8
 8006cae:	2d0c      	cmp	r5, #12
 8006cb0:	bf38      	it	cc
 8006cb2:	250c      	movcc	r5, #12
 8006cb4:	2d00      	cmp	r5, #0
 8006cb6:	4606      	mov	r6, r0
 8006cb8:	db01      	blt.n	8006cbe <_malloc_r+0x1a>
 8006cba:	42a9      	cmp	r1, r5
 8006cbc:	d903      	bls.n	8006cc6 <_malloc_r+0x22>
 8006cbe:	230c      	movs	r3, #12
 8006cc0:	6033      	str	r3, [r6, #0]
 8006cc2:	2000      	movs	r0, #0
 8006cc4:	bd70      	pop	{r4, r5, r6, pc}
 8006cc6:	f000 f86b 	bl	8006da0 <__malloc_lock>
 8006cca:	4a21      	ldr	r2, [pc, #132]	; (8006d50 <_malloc_r+0xac>)
 8006ccc:	6814      	ldr	r4, [r2, #0]
 8006cce:	4621      	mov	r1, r4
 8006cd0:	b991      	cbnz	r1, 8006cf8 <_malloc_r+0x54>
 8006cd2:	4c20      	ldr	r4, [pc, #128]	; (8006d54 <_malloc_r+0xb0>)
 8006cd4:	6823      	ldr	r3, [r4, #0]
 8006cd6:	b91b      	cbnz	r3, 8006ce0 <_malloc_r+0x3c>
 8006cd8:	4630      	mov	r0, r6
 8006cda:	f000 f83d 	bl	8006d58 <_sbrk_r>
 8006cde:	6020      	str	r0, [r4, #0]
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	f000 f838 	bl	8006d58 <_sbrk_r>
 8006ce8:	1c43      	adds	r3, r0, #1
 8006cea:	d124      	bne.n	8006d36 <_malloc_r+0x92>
 8006cec:	230c      	movs	r3, #12
 8006cee:	4630      	mov	r0, r6
 8006cf0:	6033      	str	r3, [r6, #0]
 8006cf2:	f000 f856 	bl	8006da2 <__malloc_unlock>
 8006cf6:	e7e4      	b.n	8006cc2 <_malloc_r+0x1e>
 8006cf8:	680b      	ldr	r3, [r1, #0]
 8006cfa:	1b5b      	subs	r3, r3, r5
 8006cfc:	d418      	bmi.n	8006d30 <_malloc_r+0x8c>
 8006cfe:	2b0b      	cmp	r3, #11
 8006d00:	d90f      	bls.n	8006d22 <_malloc_r+0x7e>
 8006d02:	600b      	str	r3, [r1, #0]
 8006d04:	18cc      	adds	r4, r1, r3
 8006d06:	50cd      	str	r5, [r1, r3]
 8006d08:	4630      	mov	r0, r6
 8006d0a:	f000 f84a 	bl	8006da2 <__malloc_unlock>
 8006d0e:	f104 000b 	add.w	r0, r4, #11
 8006d12:	1d23      	adds	r3, r4, #4
 8006d14:	f020 0007 	bic.w	r0, r0, #7
 8006d18:	1ac3      	subs	r3, r0, r3
 8006d1a:	d0d3      	beq.n	8006cc4 <_malloc_r+0x20>
 8006d1c:	425a      	negs	r2, r3
 8006d1e:	50e2      	str	r2, [r4, r3]
 8006d20:	e7d0      	b.n	8006cc4 <_malloc_r+0x20>
 8006d22:	684b      	ldr	r3, [r1, #4]
 8006d24:	428c      	cmp	r4, r1
 8006d26:	bf16      	itet	ne
 8006d28:	6063      	strne	r3, [r4, #4]
 8006d2a:	6013      	streq	r3, [r2, #0]
 8006d2c:	460c      	movne	r4, r1
 8006d2e:	e7eb      	b.n	8006d08 <_malloc_r+0x64>
 8006d30:	460c      	mov	r4, r1
 8006d32:	6849      	ldr	r1, [r1, #4]
 8006d34:	e7cc      	b.n	8006cd0 <_malloc_r+0x2c>
 8006d36:	1cc4      	adds	r4, r0, #3
 8006d38:	f024 0403 	bic.w	r4, r4, #3
 8006d3c:	42a0      	cmp	r0, r4
 8006d3e:	d005      	beq.n	8006d4c <_malloc_r+0xa8>
 8006d40:	1a21      	subs	r1, r4, r0
 8006d42:	4630      	mov	r0, r6
 8006d44:	f000 f808 	bl	8006d58 <_sbrk_r>
 8006d48:	3001      	adds	r0, #1
 8006d4a:	d0cf      	beq.n	8006cec <_malloc_r+0x48>
 8006d4c:	6025      	str	r5, [r4, #0]
 8006d4e:	e7db      	b.n	8006d08 <_malloc_r+0x64>
 8006d50:	20000208 	.word	0x20000208
 8006d54:	2000020c 	.word	0x2000020c

08006d58 <_sbrk_r>:
 8006d58:	b538      	push	{r3, r4, r5, lr}
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	4c05      	ldr	r4, [pc, #20]	; (8006d74 <_sbrk_r+0x1c>)
 8006d5e:	4605      	mov	r5, r0
 8006d60:	4608      	mov	r0, r1
 8006d62:	6023      	str	r3, [r4, #0]
 8006d64:	f7f9 ff50 	bl	8000c08 <_sbrk>
 8006d68:	1c43      	adds	r3, r0, #1
 8006d6a:	d102      	bne.n	8006d72 <_sbrk_r+0x1a>
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	b103      	cbz	r3, 8006d72 <_sbrk_r+0x1a>
 8006d70:	602b      	str	r3, [r5, #0]
 8006d72:	bd38      	pop	{r3, r4, r5, pc}
 8006d74:	20002334 	.word	0x20002334

08006d78 <strncat>:
 8006d78:	4603      	mov	r3, r0
 8006d7a:	b530      	push	{r4, r5, lr}
 8006d7c:	781c      	ldrb	r4, [r3, #0]
 8006d7e:	1c5d      	adds	r5, r3, #1
 8006d80:	b944      	cbnz	r4, 8006d94 <strncat+0x1c>
 8006d82:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 8006d86:	d304      	bcc.n	8006d92 <strncat+0x1a>
 8006d88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d8c:	f803 4b01 	strb.w	r4, [r3], #1
 8006d90:	b914      	cbnz	r4, 8006d98 <strncat+0x20>
 8006d92:	bd30      	pop	{r4, r5, pc}
 8006d94:	462b      	mov	r3, r5
 8006d96:	e7f1      	b.n	8006d7c <strncat+0x4>
 8006d98:	2a00      	cmp	r2, #0
 8006d9a:	d1f2      	bne.n	8006d82 <strncat+0xa>
 8006d9c:	701a      	strb	r2, [r3, #0]
 8006d9e:	e7f0      	b.n	8006d82 <strncat+0xa>

08006da0 <__malloc_lock>:
 8006da0:	4770      	bx	lr

08006da2 <__malloc_unlock>:
 8006da2:	4770      	bx	lr

08006da4 <_init>:
 8006da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da6:	bf00      	nop
 8006da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006daa:	bc08      	pop	{r3}
 8006dac:	469e      	mov	lr, r3
 8006dae:	4770      	bx	lr

08006db0 <_fini>:
 8006db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db2:	bf00      	nop
 8006db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006db6:	bc08      	pop	{r3}
 8006db8:	469e      	mov	lr, r3
 8006dba:	4770      	bx	lr
